"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return fn(new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))); } };

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $sliceToArray = function(slice) {
  if (slice.$length === 0) {
    return [];
  }
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, name, pkg, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(fields) {
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.name === "") {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.typeName = name;
  typ.pkg = pkg;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if(e.typ.typeName !== "") {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.name === "") {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           "bool",       "", null);
var $Int           = $newType( 4, $kindInt,           "int",            "int",        "", null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           "int8",       "", null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          "int16",      "", null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          "int32",      "", null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          "int64",      "", null);
var $Uint          = $newType( 4, $kindUint,          "uint",           "uint",       "", null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          "uint8",      "", null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         "uint16",     "", null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         "uint32",     "", null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         "uint64",     "", null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        "uintptr",    "", null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        "float32",    "", null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        "float64",    "", null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      "complex64",  "", null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     "complex128", "", null);
var $String        = $newType( 8, $kindString,        "string",         "string",     "", null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", "Pointer",    "", null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, "", "", null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, "", "", null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, "", "", null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, "", "", null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", "error", "", null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, "", "", null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, "", "", null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, "", "", null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, "", "", function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $dummyGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [], canBlock: false };
var $curGoroutine = $dummyGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $mainFinished = false;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $dummyGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $goroutine.canBlock = true;
  $schedule($goroutine, direct);
};

var $scheduled = [], $schedulerActive = false;
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
    $schedulerActive = false;
  } finally {
    if ($schedulerActive) {
      setTimeout($runScheduled, 0);
    }
  }
};
var $schedule = function(goroutine, direct) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }

  if (direct) {
    goroutine();
    return;
  }

  $scheduled.push(goroutine);
  if (!$schedulerActive) {
    $schedulerActive = true;
    setTimeout($runScheduled, 0);
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if (!$curGoroutine.canBlock) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  chan.$sendQueue.push(function() {
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend());
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(); /* will panic because of closed channel */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (f.pkg !== "") { /* not exported */
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var canBlock = $curGoroutine.canBlock;
      $curGoroutine.canBlock = false;
      try {
        var result = v.apply(passThis ? this : undefined, args);
      } finally {
        $curGoroutine.canBlock = canBlock;
      }
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, M, sliceType, ptrType, ptrType$1, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", "Object", "github.com/gopherjs/gopherjs/js", function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", "Error", "github.com/gopherjs/gopherjs/js", function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	M = $pkg.M = $newType(4, $kindMap, "js.M", "M", "github.com/gopherjs/gopherjs/js", null);
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var $ptr, key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var $ptr, key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var $ptr, key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var $ptr, i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var $ptr, i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var $ptr, args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var $ptr, args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var $ptr, args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var $ptr, o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var $ptr, o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var $ptr, o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var $ptr, err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var $ptr, err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	init = function() {
		var $ptr, e;
		e = new Error.ptr(null);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init([{prop: "object", name: "object", pkg: "github.com/gopherjs/gopherjs/js", typ: ptrType, tag: ""}]);
	Error.init([{prop: "Object", name: "", pkg: "", typ: ptrType, tag: ""}]);
	M.init($String, $emptyInterface);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/internal/sys"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, sys, Error, TypeAssertionError, errorString, ptrType$4, init, GOROOT, Goexit, GOMAXPROCS, SetFinalizer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sys = $packages["runtime/internal/sys"];
	Error = $pkg.Error = $newType(8, $kindInterface, "runtime.Error", "Error", "runtime", null);
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", "TypeAssertionError", "runtime", function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", "errorString", "runtime", null);
	ptrType$4 = $ptrType(TypeAssertionError);
	init = function() {
		var $ptr, e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = (function(msg) {
			var $ptr, msg;
			$panic(new errorString(msg));
		});
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
	};
	GOROOT = function() {
		var $ptr, goroot, process;
		process = $global.process;
		if (process === undefined) {
			return "/";
		}
		goroot = process.env.GOROOT;
		if (!(goroot === undefined)) {
			return $internalize(goroot, $String);
		}
		return "/usr/lib/go";
	};
	$pkg.GOROOT = GOROOT;
	Goexit = function() {
		var $ptr;
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	GOMAXPROCS = function(n) {
		var $ptr, n;
		return 1;
	};
	$pkg.GOMAXPROCS = GOMAXPROCS;
	SetFinalizer = function(x, f) {
		var $ptr, f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
		var $ptr;
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var $ptr, e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var $ptr, e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "runtime error: " + e;
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$4.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}]);
	TypeAssertionError.init([{prop: "interfaceString", name: "interfaceString", pkg: "runtime", typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", pkg: "runtime", typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", pkg: "runtime", typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", pkg: "runtime", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sys.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", "errorString", "errors", function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var $ptr, text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init([{prop: "s", name: "s", pkg: "errors", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, Disable, Enable, ReadRange, WriteRange;
	Acquire = function(addr) {
		var $ptr, addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var $ptr, addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var $ptr, addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	Disable = function() {
		var $ptr;
	};
	$pkg.Disable = Disable;
	Enable = function() {
		var $ptr;
	};
	$pkg.Enable = Enable;
	ReadRange = function(addr, len) {
		var $ptr, addr, len;
	};
	$pkg.ReadRange = ReadRange;
	WriteRange = function(addr, len) {
		var $ptr, addr, len;
	};
	$pkg.WriteRange = WriteRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, CompareAndSwapInt32, AddInt32, LoadUint32, StoreUint32;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var $ptr, addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	AddInt32 = function(addr, delta) {
		var $ptr, addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadUint32 = function(addr) {
		var $ptr, addr;
		return addr.$get();
	};
	$pkg.LoadUint32 = LoadUint32;
	StoreUint32 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, race, runtime, atomic, Pool, Mutex, Locker, Once, poolLocal, syncSema, RWMutex, rlocker, ptrType, sliceType, ptrType$1, chanType, sliceType$1, ptrType$4, ptrType$6, sliceType$3, ptrType$7, ptrType$8, funcType, ptrType$12, funcType$1, ptrType$13, arrayType$1, semWaiters, allPools, runtime_Syncsemcheck, runtime_registerPoolCleanup, runtime_Semacquire, runtime_Semrelease, runtime_canSpin, poolCleanup, init, indexLocal, init$1, runtime_doSpin;
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", "Pool", "sync", function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$3.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", "Mutex", "sync", function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", "Locker", "sync", null);
	Once = $pkg.Once = $newType(0, $kindStruct, "sync.Once", "Once", "sync", function(m_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Mutex.ptr(0, 0);
			this.done = 0;
			return;
		}
		this.m = m_;
		this.done = done_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", "poolLocal", "sync", function(private$0_, shared_, Mutex_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$3.nil;
			this.Mutex = new Mutex.ptr(0, 0);
			this.pad = arrayType$1.zero();
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
		this.pad = pad_;
	});
	syncSema = $pkg.syncSema = $newType(0, $kindStruct, "sync.syncSema", "syncSema", "sync", function(lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", "RWMutex", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", "rlocker", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	ptrType$4 = $ptrType($Int32);
	ptrType$6 = $ptrType(poolLocal);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$7 = $ptrType(rlocker);
	ptrType$8 = $ptrType(RWMutex);
	funcType = $funcType([], [$emptyInterface], false);
	ptrType$12 = $ptrType(Mutex);
	funcType$1 = $funcType([], [], false);
	ptrType$13 = $ptrType(Once);
	arrayType$1 = $arrayType($Uint8, 128);
	runtime_Syncsemcheck = function(size) {
		var $ptr, size;
	};
	Pool.ptr.prototype.Get = function() {
		var $ptr, _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 6; case 6:
				return _r;
			/* } */ case 4:
			return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var $ptr, p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var $ptr, cleanup;
	};
	runtime_Semacquire = function(s) {
		var $ptr, _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var $ptr, _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			return;
		}
		ch = (0 >= w.$length ? $throwRuntimeError("index out of range") : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_canSpin = function(i) {
		var $ptr, i;
		return false;
	};
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, awoke, iter, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; awoke = $f.awoke; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire(m);
			}
			return;
		}
		awoke = false;
		iter = 0;
		/* while (true) { */ case 1:
			old = m.state;
			new$1 = old | 1;
			/* */ if (!(((old & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((old & 1) === 0))) { */ case 3:
				if (runtime_canSpin(iter)) {
					if (!awoke && ((old & 2) === 0) && !(((old >> 2 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
						awoke = true;
					}
					runtime_doSpin();
					iter = iter + (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
				new$1 = old + 4 >> 0;
			/* } */ case 4:
			if (awoke) {
				if ((new$1 & 2) === 0) {
					$panic(new $String("sync: inconsistent mutex state"));
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
				if ((old & 1) === 0) {
					/* break; */ $s = 2; continue;
				}
				$r = runtime_Semacquire((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				awoke = true;
				iter = 0;
			/* } */ case 6:
		/* } */ $s = 1; continue; case 2:
		if (false) {
			race.Acquire(m);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.awoke = awoke; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			race.Release(m);
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			$panic(new $String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		/* while (true) { */ case 1:
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:
				$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 4:
			old = m.state;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = this;
		if (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 1) {
			return;
		}
		$r = o.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(o.m, "Unlock"), []]);
		/* */ if (o.done === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (o.done === 0) { */ case 2:
			$deferred.push([atomic.StoreUint32, [(o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o))), 1]]);
			$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	poolCleanup = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? $throwRuntimeError("index out of range") : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < (p.localSize >> 0))) { break; }
				l = indexLocal(p.local, i$1);
				l.private$0 = $ifaceNil;
				_ref$1 = l.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.shared, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.shared = sliceType$3.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		var $ptr;
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var $ptr, i, l, x;
		return (x = l, (x.nilCheck, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
	};
	init$1 = function() {
		var $ptr, s;
		s = new syncSema.ptr(0, 0, 0);
		runtime_Syncsemcheck(12);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.Disable();
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.$ptr = $ptr; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.ReleaseMerge((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				race.Enable();
				$panic(new $String("sync: RUnlock of unlocked RWMutex"));
			}
			/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:
				$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		if (false) {
			race.Enable();
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.Disable();
		}
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (false) {
			race.Enable();
			race.Acquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
			race.Acquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.Release((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
			race.Release((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			race.Enable();
			$panic(new $String("sync: Unlock of unlocked RWMutex"));
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (r >> 0))) { break; } */ if(!(i < (r >> 0))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false) {
			race.Enable();
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var $ptr, rw;
		rw = this;
		return $pointerOfStructConversion(rw, ptrType$7);
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$8).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$8).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$6], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$6], false)}];
	ptrType$12.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$13.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$8.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$7.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init([{prop: "local", name: "local", pkg: "sync", typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", pkg: "sync", typ: $Uintptr, tag: ""}, {prop: "store", name: "store", pkg: "sync", typ: sliceType$3, tag: ""}, {prop: "New", name: "New", pkg: "", typ: funcType, tag: ""}]);
	Mutex.init([{prop: "state", name: "state", pkg: "sync", typ: $Int32, tag: ""}, {prop: "sema", name: "sema", pkg: "sync", typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Once.init([{prop: "m", name: "m", pkg: "sync", typ: Mutex, tag: ""}, {prop: "done", name: "done", pkg: "sync", typ: $Uint32, tag: ""}]);
	poolLocal.init([{prop: "private$0", name: "private", pkg: "sync", typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", pkg: "sync", typ: sliceType$3, tag: ""}, {prop: "Mutex", name: "", pkg: "", typ: Mutex, tag: ""}, {prop: "pad", name: "pad", pkg: "sync", typ: arrayType$1, tag: ""}]);
	syncSema.init([{prop: "lock", name: "lock", pkg: "sync", typ: $Uintptr, tag: ""}, {prop: "head", name: "head", pkg: "sync", typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", pkg: "sync", typ: $UnsafePointer, tag: ""}]);
	RWMutex.init([{prop: "w", name: "w", pkg: "sync", typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", pkg: "sync", typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", pkg: "sync", typ: $Int32, tag: ""}]);
	rlocker.init([{prop: "w", name: "w", pkg: "sync", typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", pkg: "sync", typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", pkg: "sync", typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = race.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = {};
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, RuneReader, sliceType, errWhence, errOffset;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", "Reader", "io", null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", "Writer", "io", null);
	RuneReader = $pkg.RuneReader = $newType(8, $kindInterface, "io.RuneReader", "RuneReader", "io", null);
	sliceType = $sliceType($Uint8);
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	RuneReader.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, d, foldPair, arrayType, sliceType, sliceType$1, sliceType$3, sliceType$4, _L, _Nd, _CaseRanges, properties, caseOrbit, to, IsDigit, IsLetter, is16, is32, isExcludingLatin, To, ToUpper, ToLower, SimpleFold;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", "RangeTable", "unicode", function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", "Range16", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", "Range32", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", "CaseRange", "unicode", function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = arrayType.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", "d", "unicode", null);
	foldPair = $pkg.foldPair = $newType(0, $kindStruct, "unicode.foldPair", "foldPair", "unicode", function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	arrayType = $arrayType($Int32, 3);
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	sliceType$3 = $sliceType(CaseRange);
	sliceType$4 = $sliceType(foldPair);
	to = function(_case, r, caseRange) {
		var $ptr, _case, _q, caseRange, cr, delta, hi, lo, m, r, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? $throwRuntimeError("index out of range") : caseRange.$array[caseRange.$offset + m]);
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = (x = cr.Delta, ((_case < 0 || _case >= x.length) ? $throwRuntimeError("index out of range") : x[_case]));
				if (delta > 1114111) {
					return (cr.Lo >> 0) + ((((((r - (cr.Lo >> 0) >> 0)) & ~1) >> 0) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsDigit = function(r) {
		var $ptr, r;
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin($pkg.Digit, r);
	};
	$pkg.IsDigit = IsDigit;
	IsLetter = function(r) {
		var $ptr, r, x;
		if ((r >>> 0) <= 255) {
			return !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 96) >>> 0) === 0));
		}
		return isExcludingLatin($pkg.Letter, r);
	};
	$pkg.IsLetter = IsLetter;
	is16 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	isExcludingLatin = function(rangeTab, r) {
		var $ptr, off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16($subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	To = function(_case, r) {
		var $ptr, _case, r;
		return to(_case, r, $pkg.CaseRanges);
	};
	$pkg.To = To;
	ToUpper = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	$pkg.ToLower = ToLower;
	SimpleFold = function(r) {
		var $ptr, _q, hi, l, lo, m, r;
		lo = 0;
		hi = caseOrbit.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if ((((m < 0 || m >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + m]).From >> 0) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.$length && ((((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + lo]).From >> 0) === r)) {
			return (((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + lo]).To >> 0);
		}
		l = ToLower(r);
		if (!((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	$pkg.SimpleFold = SimpleFold;
	RangeTable.init([{prop: "R16", name: "R16", pkg: "", typ: sliceType, tag: ""}, {prop: "R32", name: "R32", pkg: "", typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", pkg: "", typ: $Int, tag: ""}]);
	Range16.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", typ: $Uint16, tag: ""}]);
	Range32.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", typ: $Uint32, tag: ""}]);
	CaseRange.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", pkg: "", typ: d, tag: ""}]);
	d.init($Int32, 3);
	foldPair.init([{prop: "From", name: "From", pkg: "", typ: $Uint16, tag: ""}, {prop: "To", name: "To", pkg: "", typ: $Uint16, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_L = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 181, 11), new Range16.ptr(186, 192, 6), new Range16.ptr(193, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(880, 884, 1), new Range16.ptr(886, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 929, 1), new Range16.ptr(931, 1013, 1), new Range16.ptr(1015, 1153, 1), new Range16.ptr(1162, 1327, 1), new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1377, 8), new Range16.ptr(1378, 1415, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1765, 16), new Range16.ptr(1766, 1774, 8), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2048, 6), new Range16.ptr(2049, 2069, 1), new Range16.ptr(2074, 2084, 10), new Range16.ptr(2088, 2112, 24), new Range16.ptr(2113, 2136, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2417, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2809, 2821, 12), new Range16.ptr(2822, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3162, 1), new Range16.ptr(3168, 3169, 1), new Range16.ptr(3205, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3423, 17), new Range16.ptr(3424, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3654, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3782, 3804, 22), new Range16.ptr(3805, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4256, 18), new Range16.ptr(4257, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5024, 5109, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6103, 6108, 5), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6823, 6917, 94), new Range16.ptr(6918, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7293, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(7424, 7615, 1), new Range16.ptr(7680, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8032, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8124, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8140, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8160, 8172, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8188, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8458, 8467, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8495, 8505, 1), new Range16.ptr(8508, 8511, 1), new Range16.ptr(8517, 8521, 1), new Range16.ptr(8526, 8579, 53), new Range16.ptr(8580, 11264, 2684), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11360, 11492, 1), new Range16.ptr(11499, 11502, 1), new Range16.ptr(11506, 11507, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11648, 17), new Range16.ptr(11649, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(11823, 12293, 470), new Range16.ptr(12294, 12337, 43), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12348, 1), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1), new Range16.ptr(12449, 12538, 1), new Range16.ptr(12540, 12543, 1), new Range16.ptr(12549, 12589, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40917, 1), new Range16.ptr(40960, 42124, 1), new Range16.ptr(42192, 42237, 1), new Range16.ptr(42240, 42508, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42560, 42606, 1), new Range16.ptr(42623, 42653, 1), new Range16.ptr(42656, 42725, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42786, 42888, 1), new Range16.ptr(42891, 42925, 1), new Range16.ptr(42928, 42935, 1), new Range16.ptr(42999, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43261, 2), new Range16.ptr(43274, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43471, 43488, 17), new Range16.ptr(43489, 43492, 1), new Range16.ptr(43494, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43741, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43764, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43877, 1), new Range16.ptr(43888, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1), new Range16.ptr(65382, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66352, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66560, 66717, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70108, 2), new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70282, 2), new Range32.ptr(70283, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70312, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70480, 19), new Range32.ptr(70493, 70497, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71128, 71131, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71424, 71449, 1), new Range32.ptr(71840, 71903, 1), new Range32.ptr(71935, 72384, 449), new Range32.ptr(72385, 72440, 1), new Range32.ptr(73728, 74649, 1), new Range32.ptr(74880, 75075, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(82944, 83526, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(92992, 92995, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94099, 67), new Range32.ptr(94100, 94111, 1), new Range32.ptr(110592, 110593, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120570, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120628, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120686, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120744, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120779, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(194560, 195101, 1)]), 6);
		_Nd = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(3046, 3055, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3430, 3439, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3881, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6617, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(66720, 66729, 1), new Range32.ptr(69734, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71481, 1), new Range32.ptr(71904, 71913, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(120782, 120831, 1)]), 1);
		$pkg.Digit = _Nd;
		$pkg.Letter = _L;
		_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(669, 669, $toNativeArray($kindInt32, [42261, 0, 42261])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(5024, 5103, $toNativeArray($kindInt32, [0, 38864, 0])), new CaseRange.ptr(5104, 5109, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(5112, 5117, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(42930, 42930, $toNativeArray($kindInt32, [0, -42261, 0])), new CaseRange.ptr(42931, 42931, $toNativeArray($kindInt32, [0, 928, 0])), new CaseRange.ptr(42932, 42935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(43859, 43859, $toNativeArray($kindInt32, [-928, 0, -928])), new CaseRange.ptr(43888, 43967, $toNativeArray($kindInt32, [-38864, 0, -38864])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(68736, 68786, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(68800, 68850, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32]))]);
		$pkg.CaseRanges = _CaseRanges;
		properties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		caseOrbit = new sliceType$4([new foldPair.ptr(75, 107), new foldPair.ptr(83, 115), new foldPair.ptr(107, 8490), new foldPair.ptr(115, 383), new foldPair.ptr(181, 924), new foldPair.ptr(197, 229), new foldPair.ptr(223, 7838), new foldPair.ptr(229, 8491), new foldPair.ptr(304, 304), new foldPair.ptr(305, 305), new foldPair.ptr(383, 83), new foldPair.ptr(452, 453), new foldPair.ptr(453, 454), new foldPair.ptr(454, 452), new foldPair.ptr(455, 456), new foldPair.ptr(456, 457), new foldPair.ptr(457, 455), new foldPair.ptr(458, 459), new foldPair.ptr(459, 460), new foldPair.ptr(460, 458), new foldPair.ptr(497, 498), new foldPair.ptr(498, 499), new foldPair.ptr(499, 497), new foldPair.ptr(837, 921), new foldPair.ptr(914, 946), new foldPair.ptr(917, 949), new foldPair.ptr(920, 952), new foldPair.ptr(921, 953), new foldPair.ptr(922, 954), new foldPair.ptr(924, 956), new foldPair.ptr(928, 960), new foldPair.ptr(929, 961), new foldPair.ptr(931, 962), new foldPair.ptr(934, 966), new foldPair.ptr(937, 969), new foldPair.ptr(946, 976), new foldPair.ptr(949, 1013), new foldPair.ptr(952, 977), new foldPair.ptr(953, 8126), new foldPair.ptr(954, 1008), new foldPair.ptr(956, 181), new foldPair.ptr(960, 982), new foldPair.ptr(961, 1009), new foldPair.ptr(962, 963), new foldPair.ptr(963, 931), new foldPair.ptr(966, 981), new foldPair.ptr(969, 8486), new foldPair.ptr(976, 914), new foldPair.ptr(977, 1012), new foldPair.ptr(981, 934), new foldPair.ptr(982, 928), new foldPair.ptr(1008, 922), new foldPair.ptr(1009, 929), new foldPair.ptr(1012, 920), new foldPair.ptr(1013, 917), new foldPair.ptr(7776, 7777), new foldPair.ptr(7777, 7835), new foldPair.ptr(7835, 7776), new foldPair.ptr(7838, 223), new foldPair.ptr(8126, 837), new foldPair.ptr(8486, 937), new foldPair.ptr(8490, 75), new foldPair.ptr(8491, 197)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, DecodeRune, DecodeRuneInString, DecodeLastRune, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", "acceptRange", "unicode/utf8", function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	DecodeRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? $throwRuntimeError("index out of range") : first[p0]);
		if (x >= 240) {
			mask = ((x >> 0) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]) >> 0) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
		if (n < (sz >> 0)) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = ((((p0 & 31) >>> 0) >> 0) << 6 >> 0) | (((b1 & 63) >>> 0) >> 0);
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = (((((p0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((b1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((b2 & 63) >>> 0) >> 0);
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = ((((((p0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((b1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((b2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((b3 & 63) >>> 0) >> 0);
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? $throwRuntimeError("index out of range") : first[s0]);
		if (x >= 240) {
			mask = ((x >> 0) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((s.charCodeAt(0) >> 0) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
		if (n < (sz >> 0)) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = ((((s0 & 31) >>> 0) >> 0) << 6 >> 0) | (((s1 & 63) >>> 0) >> 0);
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = (((((s0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((s1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((s2 & 63) >>> 0) >> 0);
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = ((((((s0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((s1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((s2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((s3 & 63) >>> 0) >> 0);
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;
		r = 0;
		size = 0;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]) >> 0);
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRune = DecodeLastRune;
	RuneLen = function(r) {
		var $ptr, r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var $ptr, i, p, r;
		i = (r >>> 0);
		if (i <= 127) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (r << 24 >>> 24));
			return 1;
		} else if (i <= 2047) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var $ptr, accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? $throwRuntimeError("index out of range") : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = (((x & 7) >>> 0) >> 0);
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var $ptr, accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? $throwRuntimeError("index out of range") : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = (((x & 7) >>> 0) >> 0);
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var $ptr, b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	acceptRange.init([{prop: "lo", name: "lo", pkg: "unicode/utf8", typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", pkg: "unicode/utf8", typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint
		acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, ptrType, sliceType, arrayType, arrayType$1, IndexByte, Equal, makeSlice, NewBufferString, EqualFold;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", "Buffer", "bytes", function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.runeBytes = arrayType.zero();
			this.bootstrap = arrayType$1.zero();
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.runeBytes = runeBytes_;
		this.bootstrap = bootstrap_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(4, $kindInt, "bytes.readOp", "readOp", "bytes", null);
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	IndexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Equal = function(a, b) {
		var $ptr, _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	Buffer.ptr.prototype.Bytes = function() {
		var $ptr, b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var $ptr, b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return $bytesToString($subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.Len = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Cap = function() {
		var $ptr, b;
		b = this;
		return b.buf.$capacity;
	};
	Buffer.prototype.Cap = function() { return this.$val.Cap(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var $ptr, b, n;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		} else if ((n === 0)) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var $ptr, b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.grow = function(n) {
		var $ptr, _q, b, buf, m, n;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.$length + n >> 0) > b.buf.$capacity) {
			buf = sliceType.nil;
			if (b.buf === sliceType.nil && n <= 64) {
				buf = $subslice(new sliceType(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice(($imul(2, b.buf.$capacity)) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var $ptr, b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.$length);
		_tmp = $copySlice($subslice(b.buf, m), p);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, free, m, n, newBuf, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; free = $f.free; m = $f.m; n = $f.n; newBuf = $f.newBuf; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
		}
		/* while (true) { */ case 1:
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice(($imul(2, b.buf.$capacity)) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_r = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.free = free; $f.m = m; $f.n = n; $f.newBuf = newBuf; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $ptr, n, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType, n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, m, n, nBytes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* */ if (b.off < b.buf.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.off < b.buf.$length) { */ case 1:
			nBytes = b.Len();
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new $Int64(0, m);
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n;
				_tmp$3 = io.ErrShortWrite;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
		/* } */ case 2:
		b.Truncate(0);
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var $ptr, b, c, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, ((m < 0 || m >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, r;
		n = 0;
		err = $ifaceNil;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tmp = 1;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = utf8.EncodeRune($subslice(new sliceType(b.runeBytes), 0), r);
		b.Write($subslice(new sliceType(b.runeBytes), 0, n));
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var $ptr, b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, c, err, x, x$1;
		c = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0;
			_tmp$1 = io.EOF;
			c = _tmp;
			err = _tmp$1;
			return [c, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = 2;
		_tmp$2 = c;
		_tmp$3 = $ifaceNil;
		c = _tmp$2;
		err = _tmp$3;
		return [c, err];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			_tmp$3 = (c >> 0);
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			r = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off));
		r = _tuple[0];
		n = _tuple[1];
		b.off = b.off + (n) >> 0;
		_tmp$6 = r;
		_tmp$7 = n;
		_tmp$8 = $ifaceNil;
		r = _tmp$6;
		size = _tmp$7;
		err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var $ptr, _tuple, b, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune($subslice(b.buf, 0, b.off));
			n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var $ptr, b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var $ptr, _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var $ptr, _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		_tmp = $bytesToString(slice);
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBufferString = function(s) {
		var $ptr, s;
		return new Buffer.ptr(new sliceType($stringToBytes(s)), 0, arrayType.zero(), arrayType$1.zero(), 0);
	};
	$pkg.NewBufferString = NewBufferString;
	EqualFold = function(s, t) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, r, r$1, r$2, s, size, size$1, sr, t, tr;
		while (true) {
			if (!(!((s.$length === 0)) && !((t.$length === 0)))) { break; }
			_tmp = 0;
			_tmp$1 = 0;
			sr = _tmp;
			tr = _tmp$1;
			if ((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) < 128) {
				_tmp$2 = ((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) >> 0);
				_tmp$3 = $subslice(s, 1);
				sr = _tmp$2;
				s = _tmp$3;
			} else {
				_tuple = utf8.DecodeRune(s);
				r = _tuple[0];
				size = _tuple[1];
				_tmp$4 = r;
				_tmp$5 = $subslice(s, size);
				sr = _tmp$4;
				s = _tmp$5;
			}
			if ((0 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]) < 128) {
				_tmp$6 = ((0 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]) >> 0);
				_tmp$7 = $subslice(t, 1);
				tr = _tmp$6;
				t = _tmp$7;
			} else {
				_tuple$1 = utf8.DecodeRune(t);
				r$1 = _tuple$1[0];
				size$1 = _tuple$1[1];
				_tmp$8 = r$1;
				_tmp$9 = $subslice(t, size$1);
				tr = _tmp$8;
				t = _tmp$9;
			}
			if (tr === sr) {
				continue;
			}
			if (tr < sr) {
				_tmp$10 = sr;
				_tmp$11 = tr;
				tr = _tmp$10;
				sr = _tmp$11;
			}
			if (tr < 128 && 65 <= sr && sr <= 90) {
				if (tr === ((sr + 97 >> 0) - 65 >> 0)) {
					continue;
				}
				return false;
			}
			r$2 = unicode.SimpleFold(sr);
			while (true) {
				if (!(!((r$2 === sr)) && r$2 < tr)) { break; }
				r$2 = unicode.SimpleFold(r$2);
			}
			if (r$2 === tr) {
				continue;
			}
			return false;
		}
		return s.$length === t.$length;
	};
	$pkg.EqualFold = EqualFold;
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	Buffer.init([{prop: "buf", name: "buf", pkg: "bytes", typ: sliceType, tag: ""}, {prop: "off", name: "off", pkg: "bytes", typ: $Int, tag: ""}, {prop: "runeBytes", name: "runeBytes", pkg: "bytes", typ: arrayType, tag: ""}, {prop: "bootstrap", name: "bootstrap", pkg: "bytes", typ: arrayType$1, tag: ""}, {prop: "lastRead", name: "lastRead", pkg: "bytes", typ: readOp, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, arrayType$3, math, zero, posInf, negInf, nan, buf, pow10tab, Cos, Hypot, Inf, IsInf, IsNaN, NaN, Pow, Sin, Sqrt, init, Float32bits, Float32frombits, Float64bits, Float64frombits, hypot, init$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType([{prop: "uint32array", name: "uint32array", pkg: "math", typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", pkg: "math", typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", pkg: "math", typ: arrayType$2, tag: ""}]);
	arrayType$3 = $arrayType($Float64, 70);
	Cos = function(x) {
		var $ptr, x;
		return $parseFloat(math.cos(x));
	};
	$pkg.Cos = Cos;
	Hypot = function(p, q) {
		var $ptr, p, q;
		return hypot(p, q);
	};
	$pkg.Hypot = Hypot;
	Inf = function(sign) {
		var $ptr, sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	IsInf = function(f, sign) {
		var $ptr, f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	$pkg.IsInf = IsInf;
	IsNaN = function(f) {
		var $ptr, f, is;
		is = false;
		is = !((f === f));
		return is;
	};
	$pkg.IsNaN = IsNaN;
	NaN = function() {
		var $ptr;
		return nan;
	};
	$pkg.NaN = NaN;
	Pow = function(x, y) {
		var $ptr, x, y;
		if ((x === 1) || ((x === -1) && ((y === posInf) || (y === negInf)))) {
			return 1;
		}
		return $parseFloat(math.pow(x, y));
	};
	$pkg.Pow = Pow;
	Sin = function(x) {
		var $ptr, x;
		return $parseFloat(math.sin(x));
	};
	$pkg.Sin = Sin;
	Sqrt = function(x) {
		var $ptr, x;
		return $parseFloat(math.sqrt(x));
	};
	$pkg.Sqrt = Sqrt;
	init = function() {
		var $ptr, ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var $ptr, f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var $ptr, f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64(new $Uint64(0, buf.uint32array[1]), 32), x$1 = new $Uint64(0, buf.uint32array[0]), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = (b.$low >>> 0);
		buf.uint32array[1] = ($shiftRightUint64(b, 32).$low >>> 0);
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	hypot = function(p, q) {
		var $ptr, _tmp, _tmp$1, p, q;
		if (IsInf(p, 0) || IsInf(q, 0)) {
			return Inf(1);
		} else if (IsNaN(p) || IsNaN(q)) {
			return NaN();
		}
		if (p < 0) {
			p = -p;
		}
		if (q < 0) {
			q = -q;
		}
		if (p < q) {
			_tmp = q;
			_tmp$1 = p;
			p = _tmp;
			q = _tmp$1;
		}
		if (p === 0) {
			return 0;
		}
		q = q / p;
		return p * Sqrt(1 + q * q);
	};
	init$1 = function() {
		var $ptr, _q, i, m, x;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (true) {
			if (!(i < 70)) { break; }
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[x])));
			i = i + (1) >> 0;
		}
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		pow10tab = arrayType$3.zero();
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, arrayType, ptrType, sliceType$6, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, shifts, ParseBool, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, ParseUint, ParseInt, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, FormatFloat, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatInt, Itoa, AppendInt, AppendUint, formatBits, quoteWith, Quote, QuoteToASCII, QuoteRune, AppendQuoteRune, QuoteRuneToASCII, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", "NumError", "strconv", function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", "decimal", "strconv", function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", "leftCheat", "strconv", function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", "extFloat", "strconv", function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", "floatInfo", "strconv", function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", "decimalSlice", "strconv", function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType($Float64);
	sliceType$2 = $sliceType($Float32);
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 800);
	ptrType = $ptrType(NumError);
	sliceType$6 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 24);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 65);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	ParseBool = function(str) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, err, str, value;
		value = false;
		err = $ifaceNil;
		_1 = str;
		if (_1 === "1" || _1 === "t" || _1 === "T" || _1 === "true" || _1 === "TRUE" || _1 === "True") {
			_tmp = true;
			_tmp$1 = $ifaceNil;
			value = _tmp;
			err = _tmp$1;
			return [value, err];
		} else if (_1 === "0" || _1 === "f" || _1 === "F" || _1 === "false" || _1 === "FALSE" || _1 === "False") {
			_tmp$2 = false;
			_tmp$3 = $ifaceNil;
			value = _tmp$2;
			err = _tmp$3;
			return [value, err];
		}
		_tmp$4 = false;
		_tmp$5 = syntaxError("ParseBool", str);
		value = _tmp$4;
		err = _tmp$5;
		return [value, err];
	};
	$pkg.ParseBool = ParseBool;
	equalIgnoreCase = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + (32) << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + (32) << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	special = function(s) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, f, ok, s;
		f = 0;
		ok = false;
		if (s.length === 0) {
			return [f, ok];
		}
		_1 = s.charCodeAt(0);
		if (_1 === 43) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tmp = math.Inf(1);
				_tmp$1 = true;
				f = _tmp;
				ok = _tmp$1;
				return [f, ok];
			}
		} else if (_1 === 45) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tmp$2 = math.Inf(-1);
				_tmp$3 = true;
				f = _tmp$2;
				ok = _tmp$3;
				return [f, ok];
			}
		} else if ((_1 === 110) || (_1 === 78)) {
			if (equalIgnoreCase(s, "nan")) {
				_tmp$4 = math.NaN();
				_tmp$5 = true;
				f = _tmp$4;
				ok = _tmp$5;
				return [f, ok];
			}
		} else if ((_1 === 105) || (_1 === 73)) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tmp$6 = math.Inf(1);
				_tmp$7 = true;
				f = _tmp$6;
				ok = _tmp$7;
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.ptr.prototype.set = function(s) {
		var $ptr, b, e, esign, i, ok, s, sawdigits, sawdot, x, x$1;
		ok = false;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (true) {
			if (!(i < s.length)) { break; }
			if ((s.charCodeAt(i) === 46)) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = s.charCodeAt(i)));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = (($imul(e, 10)) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var $ptr, _2, c, dp, e, esign, exp, i, mantissa, nd, ndMant, neg, ok, s, sawdigits, sawdot, trunc, x;
		mantissa = new $Uint64(0, 0);
		exp = 0;
		neg = false;
		trunc = false;
		ok = false;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			_2 = true;
			if (_2 === ((c === 46))) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (_2 === (48 <= c && c <= 57)) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < 19) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 10)));
					mantissa = (x = new $Uint64(0, (c - 48 << 24 >>> 24)), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = (($imul(e, 10)) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		exp = dp - ndMant >> 0;
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.ptr.prototype.floatBits = function(flt) {
		var $ptr, _tmp, _tmp$1, b, bits, d, exp, flt, mant, n, n$1, n$2, overflow, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		b = new $Uint64(0, 0);
		overflow = false;
		d = this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* */ if (d.nd === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nd === 0) { */ case 1:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 2:
		/* */ if (d.dp > 310) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (d.dp > 310) { */ case 4:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 5:
		/* */ if (d.dp < -330) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (d.dp < -330) { */ case 7:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 8:
		exp = 0;
		while (true) {
			if (!(d.dp > 0)) { break; }
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (true) {
			if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 10:
		d.Shift(((1 + flt.mantbits >>> 0) >> 0));
		mant = d.RoundedInteger();
		/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 14:
		/* } */ case 12:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 3; continue;
		/* overflow: */ case 6:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 3:
		bits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits = (x$7 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$7.$high, (bits.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.$high | x$8.$high, (bits.$low | x$8.$low) >>> 0));
		}
		_tmp = bits;
		_tmp$1 = overflow;
		b = _tmp;
		overflow = _tmp$1;
		return [b, overflow];
		/* */ } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + exp]);
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$2]));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$1]))));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + exp]));
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$2])));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = $fround(val);
			_tmp$1 = $ifaceNil;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s);
			mantissa = _tuple$1[0];
			exp = _tuple$1[1];
			neg = _tuple$1[2];
			trunc = _tuple$1[3];
			ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof32exact(mantissa, exp, neg);
					f$1 = _tuple$2[0];
					ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1;
						_tmp$3 = $ifaceNil;
						f = _tmp$2;
						err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float32info);
					b = _tuple$3[0];
					ovf = _tuple$3[1];
					f = math.Float32frombits((b.$low >>> 0));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f;
					_tmp$5 = err;
					f = _tmp$4;
					err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		if (!d.set(s)) {
			_tmp$6 = 0;
			_tmp$7 = syntaxError("ParseFloat", s);
			f = _tmp$6;
			err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float32info);
		b$1 = _tuple$4[0];
		ovf$1 = _tuple$4[1];
		f = math.Float32frombits((b$1.$low >>> 0));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f;
		_tmp$9 = err;
		f = _tmp$8;
		err = _tmp$9;
		return [f, err];
	};
	atof64 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = val;
			_tmp$1 = $ifaceNil;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s);
			mantissa = _tuple$1[0];
			exp = _tuple$1[1];
			neg = _tuple$1[2];
			trunc = _tuple$1[3];
			ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof64exact(mantissa, exp, neg);
					f$1 = _tuple$2[0];
					ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1;
						_tmp$3 = $ifaceNil;
						f = _tmp$2;
						err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float64info);
					b = _tuple$3[0];
					ovf = _tuple$3[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f;
					_tmp$5 = err;
					f = _tmp$4;
					err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		if (!d.set(s)) {
			_tmp$6 = 0;
			_tmp$7 = syntaxError("ParseFloat", s);
			f = _tmp$6;
			err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float64info);
		b$1 = _tuple$4[0];
		ovf$1 = _tuple$4[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f;
		_tmp$9 = err;
		f = _tmp$8;
		err = _tmp$9;
		return [f, err];
	};
	ParseFloat = function(s, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, bitSize, err, err1, err1$1, f, f1, f1$1, s;
		f = 0;
		err = $ifaceNil;
		if (bitSize === 32) {
			_tuple = atof32(s);
			f1 = _tuple[0];
			err1 = _tuple[1];
			_tmp = f1;
			_tmp$1 = err1;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		_tuple$1 = atof64(s);
		f1$1 = _tuple$1[0];
		err1$1 = _tuple$1[1];
		_tmp$2 = f1$1;
		_tmp$3 = err1$1;
		f = _tmp$2;
		err = _tmp$3;
		return [f, err];
	};
	$pkg.ParseFloat = ParseFloat;
	NumError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	ParseUint = function(s, base, bitSize) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, base, bitSize, cutoff, d, err, i, maxVal, n, n1, s, v, x, x$1, x$2, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		err = $ifaceNil;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		cutoff = _tmp;
		maxVal = _tmp$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		i = 0;
			/* */ if (s.length < 1) { $s = 2; continue; }
			/* */ if (2 <= base && base <= 36) { $s = 3; continue; }
			/* */ if ((base === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (s.length < 1) { */ case 2:
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 7; continue;
				$s = 6; continue;
			/* } else if (2 <= base && base <= 36) { */ case 3:
				$s = 6; continue;
			/* } else if ((base === 0)) { */ case 4:
					/* */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { $s = 9; continue; }
					/* */ if ((s.charCodeAt(0) === 48)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ case 9:
						/* */ if (s.length < 3) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (s.length < 3) { */ case 13:
							err = $pkg.ErrSyntax;
							/* goto Error */ $s = 7; continue;
						/* } */ case 14:
						base = 16;
						i = 2;
						$s = 12; continue;
					/* } else if ((s.charCodeAt(0) === 48)) { */ case 10:
						base = 8;
						i = 1;
						$s = 12; continue;
					/* } else { */ case 11:
						base = 10;
					/* } */ case 12:
				case 8:
				$s = 6; continue;
			/* } else { */ case 5:
				err = errors.New("invalid base " + Itoa(base));
				/* goto Error */ $s = 7; continue;
			/* } */ case 6:
		case 1:
		_1 = base;
		if (_1 === 10) {
			cutoff = new $Uint64(429496729, 2576980378);
		} else if (_1 === 16) {
			cutoff = new $Uint64(268435456, 0);
		} else {
			cutoff = (x = $div64(new $Uint64(4294967295, 4294967295), new $Uint64(0, base), false), new $Uint64(x.$high + 0, x.$low + 1));
		}
		maxVal = (x$1 = $shiftLeft64(new $Uint64(0, 1), (bitSize >>> 0)), new $Uint64(x$1.$high - 0, x$1.$low - 1));
		/* while (true) { */ case 15:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 16; continue; }
			v = 0;
			d = s.charCodeAt(i);
				/* */ if (48 <= d && d <= 57) { $s = 18; continue; }
				/* */ if (97 <= d && d <= 122) { $s = 19; continue; }
				/* */ if (65 <= d && d <= 90) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (48 <= d && d <= 57) { */ case 18:
					v = d - 48 << 24 >>> 24;
					$s = 22; continue;
				/* } else if (97 <= d && d <= 122) { */ case 19:
					v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
					$s = 22; continue;
				/* } else if (65 <= d && d <= 90) { */ case 20:
					v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
					$s = 22; continue;
				/* } else { */ case 21:
					n = new $Uint64(0, 0);
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 7; continue;
				/* } */ case 22:
			case 17:
			/* */ if (v >= (base << 24 >>> 24)) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (v >= (base << 24 >>> 24)) { */ case 23:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 7; continue;
			/* } */ case 24:
			/* */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ case 25:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 7; continue;
			/* } */ case 26:
			n = $mul64(n, (new $Uint64(0, base)));
			n1 = (x$2 = new $Uint64(0, v), new $Uint64(n.$high + x$2.$high, n.$low + x$2.$low));
			/* */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ case 27:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 7; continue;
			/* } */ case 28:
			n = n1;
			i = i + (1) >> 0;
		/* } */ $s = 15; continue; case 16:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
		/* Error: */ case 7:
		_tmp$4 = n;
		_tmp$5 = new NumError.ptr("ParseUint", s, err);
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
		/* */ $s = -1; case -1: } return; }
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = syntaxError("ParseInt", s);
			i = _tmp;
			err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = s.substring(1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = s.substring(1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize);
		un = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = err;
			i = _tmp$2;
			err = _tmp$3;
			return [i, err];
		}
		cutoff = $shiftLeft64(new $Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = (x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low));
			_tmp$5 = rangeError("ParseInt", s0);
			i = _tmp$4;
			err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = new $Int64(cutoff.$high, cutoff.$low), new $Int64(-x$1.$high, -x$1.$low));
			_tmp$7 = rangeError("ParseInt", s0);
			i = _tmp$6;
			err = _tmp$7;
			return [i, err];
		}
		n = new $Int64(un.$high, un.$low);
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		i = _tmp$8;
		err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	decimal.ptr.prototype.String = function() {
		var $ptr, a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return $bytesToString($subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var $ptr, _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var $ptr, a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var $ptr, a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$1.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = ((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var $ptr, a, c, c$1, dig, dig$1, k, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4, y$5;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = ((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >>> 0);
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = ((x$1 = a.d, ((r < 0 || r >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[r])) >>> 0);
			dig = (y$2 = k, y$2 < 32 ? (n >>> y$2) : 0) >>> 0;
			n = n - (((y$3 = k, y$3 < 32 ? (dig << y$3) : 0) >>> 0)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((dig + 48 >>> 0) << 24 >>> 24)));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = n - (((y$5 = k, y$5 < 32 ? (dig$1 << y$5) : 0) >>> 0)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[w] = ((dig$1 + 48 >>> 0) << 24 >>> 24)));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var $ptr, b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var $ptr, _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? (((((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >>> 0) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[w] = ((rem + 48 >>> 0) << 24 >>> 24)));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((rem$1 + 48 >>> 0) << 24 >>> 24)));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var $ptr, a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var $ptr, _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? $throwRuntimeError("index out of range") : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var $ptr, a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var $ptr, a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i])) - 48 << 24 >>> 24)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.floatBits = function(flt) {
		var $ptr, bits, exp, f, flt, mant, n, overflow, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2;
		bits = new $Uint64(0, 0);
		overflow = false;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = $shiftRightUint64(f.mant, ((n >>> 0)));
			exp = exp + (n) >> 0;
		}
		mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			mant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));
		}
		if ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new $Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {
			exp = flt.bias;
		}
		bits = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));
		bits = (x$9 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$9.$high, (bits.$low | x$9.$low) >>> 0));
		if (f.neg) {
			bits = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.$high | x$10.$high, (bits.$low | x$10.$low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var $ptr, _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant;
		_tmp$1 = f.exp;
		mant = _tmp;
		exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tmp$2 = mant;
		_tmp$3 = exp;
		f.mant = _tmp$2;
		f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		g = $clone(g, extFloat);
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32);
		_tmp$1 = new $Uint64(0, (f.mant.$low >>> 0));
		fhi = _tmp;
		flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32);
		_tmp$3 = new $Uint64(0, (g.mant.$low >>> 0));
		ghi = _tmp$2;
		glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = new $Uint64(0, (cross1.$low >>> 0)), x$6 = new $Uint64(0, (cross2.$low >>> 0)), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var $ptr, _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? $throwRuntimeError("index out of range") : smallPowersOfTen[adjExp]));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = (((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0);
		} else {
			extrabits = (63 - flt.mantbits >>> 0);
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = new $Int64(halfway.$high, halfway.$low), x$7 = new $Int64(0, errors$1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = new $Int64(mant_extra.$high, mant_extra.$low), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = new $Int64(mant_extra.$high, mant_extra.$low), x$10 = (x$11 = new $Int64(halfway.$high, halfway.$low), x$12 = new $Int64(0, errors$1), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var $ptr, _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var $ptr, _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		b.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, $ptr, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = ($shiftRightUint64(f.mant, shift).$low >>> 0);
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = new $Uint64(0, integer), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$4]));
			integer = (_q = integer / ((pow10.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, (pow10.$low >>> 0)) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$2.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? $throwRuntimeError("index out of range") : buf[pos] = ((v + 48 >>> 0) << 24 >>> 24));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + nd] = (new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24)));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, $ptr, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = arrayType$1.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? $throwRuntimeError("index out of range") : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = (-upper.exp >>> 0);
		integer = ($shiftRightUint64(upper.mant, shift).$low >>> 0);
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = new $Uint64(0, integer), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$17]));
			digit = (_q = integer / (pow$1.$low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? $throwRuntimeError("index out of range") : x$18.$array[x$18.$offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24)));
			integer = integer - (($imul(digit, (pow$1.$low >>> 0)) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = ($shiftRightUint64(fraction, shift).$low >> 0);
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? $throwRuntimeError("index out of range") : x$20.$array[x$20.$offset + x$21] = ((digit$1 + 48 >> 0) << 24 >>> 24)));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var $ptr, _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	FormatFloat = function(f, fmt, prec, bitSize) {
		var $ptr, bitSize, f, fmt, prec;
		return $bytesToString(genericFtoa($makeSlice(sliceType$6, 0, max(prec + 4 >> 0, 24)), f, fmt, prec, bitSize));
	};
	$pkg.FormatFloat = FormatFloat;
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var $ptr, bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var $ptr, _1, _2, _3, _4, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_1 = bitSize;
		if (_1 === 32) {
			bits = new $Uint64(0, math.Float32bits($fround(val)));
			flt = float32info;
		} else if (_1 === 64) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = ($shiftRightUint64(bits, flt.mantbits).$low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === 0) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$2.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_3 = fmt;
			if ((_3 === 101) || (_3 === 69)) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === 103) || (_3 === 71)) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === 101) || (_4 === 69)) {
				digits = digits + (1) >> 0;
			} else if ((_4 === 103) || (_4 === 71)) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$1.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var $ptr, _5, _6, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_5 = fmt;
			if ((_5 === 101) || (_5 === 69)) {
				prec = digs.nd - 1 >> 0;
			} else if (_5 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_5 === 103) || (_5 === 71)) {
				prec = digs.nd;
			}
		} else {
			_6 = fmt;
			if ((_6 === 101) || (_6 === 69)) {
				d.Round(prec + 1 >> 0);
			} else if (_6 === 102) {
				d.Round(d.dp + prec >> 0);
			} else if ((_6 === 103) || (_6 === 71)) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var $ptr, _7, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		digs = $clone(digs, decimalSlice);
		_7 = fmt;
		if ((_7 === 101) || (_7 === 69)) {
			return fmtE(dst, neg, digs, prec, fmt);
		} else if (_7 === 102) {
			return fmtF(dst, neg, digs, prec);
		} else if ((_7 === 103) || (_7 === 71)) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, digs, prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, digs, max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var $ptr, d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - (flt.mantbits >> 0) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			l = 48;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i]));
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[i]));
			u = 48;
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[i]));
			}
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.nd);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, (exp << 24 >>> 24) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, ((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24, ((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, ((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24, (_r$1 = ((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, ((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var $ptr, ch, d, dst, i, j, m, neg, prec, x;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var $ptr, _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, new $Uint64(0, exp), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	min = function(a, b) {
		var $ptr, a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var $ptr, a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatInt = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var $ptr, i;
		return FormatInt(new $Int64(0, i), 10);
	};
	$pkg.Itoa = Itoa;
	AppendInt = function(dst, i, base) {
		var $ptr, _tuple, base, dst, i;
		_tuple = formatBits(dst, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), true);
		dst = _tuple[0];
		return dst;
	};
	$pkg.AppendInt = AppendInt;
	AppendUint = function(dst, i, base) {
		var $ptr, _tuple, base, dst, i;
		_tuple = formatBits(dst, i, base, false, true);
		dst = _tuple[0];
		return dst;
	};
	$pkg.AppendUint = AppendUint;
	formatBits = function(dst, u, base, neg, append_) {
		var $ptr, _q, _q$1, a, append_, b, b$1, base, d, dst, i, j, m, neg, q, q$1, q$2, qs, s, s$1, u, us, us$1, x, x$1;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$3.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low > 4294967295)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = ((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0);
					j = 9;
					while (true) {
						if (!(j > 0)) { break; }
						i = i - (1) >> 0;
						qs = (_q = us / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = (((us - ($imul(qs, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24));
						us = qs;
						j = j - (1) >> 0;
					}
					u = q;
				}
			}
			us$1 = (u.$low >>> 0);
			while (true) {
				if (!(us$1 >= 10)) { break; }
				i = i - (1) >> 0;
				q$1 = (_q$1 = us$1 / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = (((us$1 - ($imul(q$1, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24));
				us$1 = q$1;
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = ((us$1 + 48 >>> 0) << 24 >>> 24));
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? $throwRuntimeError("index out of range") : shifts[base]);
			if (s$1 > 0) {
				b = new $Uint64(0, base);
				m = (b.$low >>> 0) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.$low >>> 0) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
			} else {
				b$1 = new $Uint64(0, base);
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$2 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$1 = $mul64(q$2, b$1), new $Uint64(u.$high - x$1.$high, u.$low - x$1.$low)).$low >>> 0)));
					u = q$2;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
			}
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = $bytesToString($subslice(new sliceType$6(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, _1, _q, _tuple, buf, graphicOnly, n, quote, r, runeTmp, s, s$1, s$2, width;
		runeTmp = arrayType$4.zero();
		buf = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = s.substring(width);
				continue;
			}
			if ((r === (quote >> 0)) || (r === 92)) {
				buf = $append(buf, 92);
				buf = $append(buf, (r << 24 >>> 24));
				s = s.substring(width);
				continue;
			}
			if (ASCIIonly) {
				if (r < 128 && IsPrint(r)) {
					buf = $append(buf, (r << 24 >>> 24));
					s = s.substring(width);
					continue;
				}
			} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
				n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
				s = s.substring(width);
				continue;
			}
			_1 = r;
			if (_1 === 7) {
				buf = $appendSlice(buf, "\\a");
			} else if (_1 === 8) {
				buf = $appendSlice(buf, "\\b");
			} else if (_1 === 12) {
				buf = $appendSlice(buf, "\\f");
			} else if (_1 === 10) {
				buf = $appendSlice(buf, "\\n");
			} else if (_1 === 13) {
				buf = $appendSlice(buf, "\\r");
			} else if (_1 === 9) {
				buf = $appendSlice(buf, "\\t");
			} else if (_1 === 11) {
				buf = $appendSlice(buf, "\\v");
			} else {
				if (r < 32) {
					buf = $appendSlice(buf, "\\x");
					buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				} else if (r > 1114111) {
					r = 65533;
					buf = $appendSlice(buf, "\\u");
					s$1 = 12;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else if (r < 65536) {
					buf = $appendSlice(buf, "\\u");
					s$1 = 12;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else {
					buf = $appendSlice(buf, "\\U");
					s$2 = 28;
					while (true) {
						if (!(s$2 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$2 >>> 0), 31)) >> 0) & 15)));
						s$2 = s$2 - (4) >> 0;
					}
				}
			}
			s = s.substring(width);
		}
		buf = $append(buf, quote);
		return $bytesToString(buf);
	};
	Quote = function(s) {
		var $ptr, s;
		return quoteWith(s, 34, false, false);
	};
	$pkg.Quote = Quote;
	QuoteToASCII = function(s) {
		var $ptr, s;
		return quoteWith(s, 34, true, false);
	};
	$pkg.QuoteToASCII = QuoteToASCII;
	QuoteRune = function(r) {
		var $ptr, r;
		return quoteWith($encodeRune(r), 39, false, false);
	};
	$pkg.QuoteRune = QuoteRune;
	AppendQuoteRune = function(dst, r) {
		var $ptr, dst, r;
		return $appendSlice(dst, QuoteRune(r));
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	QuoteRuneToASCII = function(r) {
		var $ptr, r;
		return quoteWith($encodeRune(r), 39, true, false);
	};
	$pkg.QuoteRuneToASCII = QuoteRuneToASCII;
	AppendQuoteRuneToASCII = function(dst, r) {
		var $ptr, dst, r;
		return $appendSlice(dst, QuoteRuneToASCII(r));
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var $ptr, _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = s.substring(wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var $ptr, _2, _3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = s.substring(size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = (s.charCodeAt(0) >> 0);
			_tmp$5 = false;
			_tmp$6 = s.substring(1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = s.substring(2);
		switch (0) { default:
			_2 = c$1;
			if (_2 === 97) {
				value = 7;
			} else if (_2 === 98) {
				value = 8;
			} else if (_2 === 102) {
				value = 12;
			} else if (_2 === 110) {
				value = 10;
			} else if (_2 === 114) {
				value = 13;
			} else if (_2 === 116) {
				value = 9;
			} else if (_2 === 118) {
				value = 11;
			} else if ((_2 === 120) || (_2 === 117) || (_2 === 85)) {
				n = 0;
				_3 = c$1;
				if (_3 === 120) {
					n = 2;
				} else if (_3 === 117) {
					n = 4;
				} else if (_3 === 85) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = s.substring(n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (v > 1114111) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_2 === 48) || (_2 === 49) || (_2 === 50) || (_2 === 51) || (_2 === 52) || (_2 === 53) || (_2 === 54) || (_2 === 55)) {
				v$1 = (c$1 >> 0) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = s.substring(2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_2 === 92) {
				value = 92;
			} else if ((_2 === 39) || (_2 === 34)) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = (c$1 >> 0);
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var $ptr, _4, _q, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, buf, c, err, err$1, multibyte, n, n$1, quote, r, runeTmp, s, size, ss, t;
		t = "";
		err = $ifaceNil;
		n = s.length;
		if (n < 2) {
			_tmp = "";
			_tmp$1 = $pkg.ErrSyntax;
			t = _tmp;
			err = _tmp$1;
			return [t, err];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			_tmp$2 = "";
			_tmp$3 = $pkg.ErrSyntax;
			t = _tmp$2;
			err = _tmp$3;
			return [t, err];
		}
		s = s.substring(1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				_tmp$4 = "";
				_tmp$5 = $pkg.ErrSyntax;
				t = _tmp$4;
				err = _tmp$5;
				return [t, err];
			}
			_tmp$6 = s;
			_tmp$7 = $ifaceNil;
			t = _tmp$6;
			err = _tmp$7;
			return [t, err];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			_tmp$8 = "";
			_tmp$9 = $pkg.ErrSyntax;
			t = _tmp$8;
			err = _tmp$9;
			return [t, err];
		}
		if (contains(s, 10)) {
			_tmp$10 = "";
			_tmp$11 = $pkg.ErrSyntax;
			t = _tmp$10;
			err = _tmp$11;
			return [t, err];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_4 = quote;
			if (_4 === 34) {
				_tmp$12 = s;
				_tmp$13 = $ifaceNil;
				t = _tmp$12;
				err = _tmp$13;
				return [t, err];
			} else if (_4 === 39) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					_tmp$14 = s;
					_tmp$15 = $ifaceNil;
					t = _tmp$14;
					err = _tmp$15;
					return [t, err];
				}
			}
		}
		runeTmp = arrayType$4.zero();
		buf = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err$1 = _tuple$1[3];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$16 = "";
				_tmp$17 = err$1;
				t = _tmp$16;
				err = _tmp$17;
				return [t, err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = $append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				_tmp$18 = "";
				_tmp$19 = $pkg.ErrSyntax;
				t = _tmp$18;
				err = _tmp$19;
				return [t, err];
			}
		}
		_tmp$20 = $bytesToString(buf);
		_tmp$21 = $ifaceNil;
		t = _tmp$20;
		err = _tmp$21;
		return [t, err];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var $ptr, c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = (r << 16 >>> 16);
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? $throwRuntimeError("index out of range") : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = (r >>> 0);
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? $throwRuntimeError("index out of range") : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === (r << 16 >>> 16)));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var $ptr, i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = (r << 16 >>> 16);
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? $throwRuntimeError("index out of range") : isGraphic.$array[isGraphic.$offset + i]));
	};
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	NumError.init([{prop: "Func", name: "Func", pkg: "", typ: $String, tag: ""}, {prop: "Num", name: "Num", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	decimal.init([{prop: "d", name: "d", pkg: "strconv", typ: arrayType, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", typ: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", pkg: "strconv", typ: $Bool, tag: ""}]);
	leftCheat.init([{prop: "delta", name: "delta", pkg: "strconv", typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", pkg: "strconv", typ: $String, tag: ""}]);
	extFloat.init([{prop: "mant", name: "mant", pkg: "strconv", typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}]);
	floatInfo.init([{prop: "mantbits", name: "mantbits", pkg: "strconv", typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", pkg: "strconv", typ: $Uint, tag: ""}, {prop: "bias", name: "bias", pkg: "strconv", typ: $Int, tag: ""}]);
	decimalSlice.init([{prop: "d", name: "d", pkg: "strconv", typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", typ: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		powtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2228, 2275, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2809, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3406, 3415, 3415, 3423, 3427, 3430, 3445, 3449, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7295, 7360, 7367, 7376, 7417, 7424, 7669, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8382, 8400, 8432, 8448, 8587, 8592, 9210, 9216, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11842, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40917, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42925, 42928, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43204, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3200, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65932, 65936, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70205, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72384, 72440, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 124928, 125124, 125127, 125142, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127386, 127462, 127490, 127504, 127546, 127552, 127560, 127568, 127569, 127744, 128720, 128736, 128748, 128752, 128755, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129296, 129304, 129408, 129412, 129472, 129472, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 62842, 62884]);
		isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/base64"] = (function() {
	var $pkg = {}, $init, io, strconv, Encoding, encoder, CorruptInputError, arrayType, arrayType$1, sliceType, ptrType, arrayType$2, arrayType$3, arrayType$4, ptrType$1, NewEncoding, NewEncoder;
	io = $packages["io"];
	strconv = $packages["strconv"];
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "base64.Encoding", "Encoding", "encoding/base64", function(encode_, decodeMap_, padChar_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.encode = arrayType.zero();
			this.decodeMap = arrayType$1.zero();
			this.padChar = 0;
			return;
		}
		this.encode = encode_;
		this.decodeMap = decodeMap_;
		this.padChar = padChar_;
	});
	encoder = $pkg.encoder = $newType(0, $kindStruct, "base64.encoder", "encoder", "encoding/base64", function(err_, enc_, w_, buf_, nbuf_, out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			this.enc = ptrType.nil;
			this.w = $ifaceNil;
			this.buf = arrayType$2.zero();
			this.nbuf = 0;
			this.out = arrayType$3.zero();
			return;
		}
		this.err = err_;
		this.enc = enc_;
		this.w = w_;
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.out = out_;
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "base64.CorruptInputError", "CorruptInputError", "encoding/base64", null);
	arrayType = $arrayType($Uint8, 64);
	arrayType$1 = $arrayType($Uint8, 256);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Encoding);
	arrayType$2 = $arrayType($Uint8, 3);
	arrayType$3 = $arrayType($Uint8, 1024);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$1 = $ptrType(encoder);
	NewEncoding = function(encoder$1) {
		var $ptr, e, encoder$1, i, i$1, x, x$1, x$2;
		if (!((encoder$1.length === 64))) {
			$panic(new $String("encoding alphabet is not 64-bytes long"));
		}
		e = new Encoding.ptr(arrayType.zero(), arrayType$1.zero(), 0);
		e.padChar = 61;
		$copyString(new sliceType(e.encode), encoder$1);
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			(x = e.decodeMap, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = 255));
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < encoder$1.length)) { break; }
			(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$1), ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = (i$1 << 24 >>> 24)));
			i$1 = i$1 + (1) >> 0;
		}
		return e;
	};
	$pkg.NewEncoding = NewEncoding;
	Encoding.ptr.prototype.WithPadding = function(padding) {
		var $ptr, enc, padding;
		enc = $clone(this, Encoding);
		enc.padChar = padding;
		return enc;
	};
	Encoding.prototype.WithPadding = function(padding) { return this.$val.WithPadding(padding); };
	Encoding.ptr.prototype.Encode = function(dst, src) {
		var $ptr, _1, _q, _tmp, _tmp$1, di, dst, enc, n, remain, si, src, val, val$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		enc = this;
		if (src.$length === 0) {
			return;
		}
		_tmp = 0;
		_tmp$1 = 0;
		di = _tmp;
		si = _tmp$1;
		n = $imul(((_q = src.$length / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), 3);
		while (true) {
			if (!(si < n)) { break; }
			val = ((((((x = si + 0 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x])) >>> 0) << 16 >>> 0) | (((x$1 = si + 1 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$1])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$2 = si + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2])) >>> 0)) >>> 0;
			(x$5 = di + 0 >> 0, ((x$5 < 0 || x$5 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$5] = (x$3 = enc.encode, x$4 = ((val >>> 18 >>> 0) & 63) >>> 0, ((x$4 < 0 || x$4 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[x$4]))));
			(x$8 = di + 1 >> 0, ((x$8 < 0 || x$8 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$8] = (x$6 = enc.encode, x$7 = ((val >>> 12 >>> 0) & 63) >>> 0, ((x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[x$7]))));
			(x$11 = di + 2 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$11] = (x$9 = enc.encode, x$10 = ((val >>> 6 >>> 0) & 63) >>> 0, ((x$10 < 0 || x$10 >= x$9.length) ? $throwRuntimeError("index out of range") : x$9[x$10]))));
			(x$14 = di + 3 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$14] = (x$12 = enc.encode, x$13 = (val & 63) >>> 0, ((x$13 < 0 || x$13 >= x$12.length) ? $throwRuntimeError("index out of range") : x$12[x$13]))));
			si = si + (3) >> 0;
			di = di + (4) >> 0;
		}
		remain = src.$length - si >> 0;
		if (remain === 0) {
			return;
		}
		val$1 = ((x$15 = si + 0 >> 0, ((x$15 < 0 || x$15 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$15])) >>> 0) << 16 >>> 0;
		if (remain === 2) {
			val$1 = (val$1 | ((((x$16 = si + 1 >> 0, ((x$16 < 0 || x$16 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$16])) >>> 0) << 8 >>> 0))) >>> 0;
		}
		(x$19 = di + 0 >> 0, ((x$19 < 0 || x$19 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$19] = (x$17 = enc.encode, x$18 = ((val$1 >>> 18 >>> 0) & 63) >>> 0, ((x$18 < 0 || x$18 >= x$17.length) ? $throwRuntimeError("index out of range") : x$17[x$18]))));
		(x$22 = di + 1 >> 0, ((x$22 < 0 || x$22 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$22] = (x$20 = enc.encode, x$21 = ((val$1 >>> 12 >>> 0) & 63) >>> 0, ((x$21 < 0 || x$21 >= x$20.length) ? $throwRuntimeError("index out of range") : x$20[x$21]))));
		_1 = remain;
		if (_1 === 2) {
			(x$25 = di + 2 >> 0, ((x$25 < 0 || x$25 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$25] = (x$23 = enc.encode, x$24 = ((val$1 >>> 6 >>> 0) & 63) >>> 0, ((x$24 < 0 || x$24 >= x$23.length) ? $throwRuntimeError("index out of range") : x$23[x$24]))));
			if (!((enc.padChar === -1))) {
				(x$26 = di + 3 >> 0, ((x$26 < 0 || x$26 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$26] = (enc.padChar << 24 >>> 24)));
			}
		} else if (_1 === 1) {
			if (!((enc.padChar === -1))) {
				(x$27 = di + 2 >> 0, ((x$27 < 0 || x$27 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$27] = (enc.padChar << 24 >>> 24)));
				(x$28 = di + 3 >> 0, ((x$28 < 0 || x$28 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$28] = (enc.padChar << 24 >>> 24)));
			}
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };
	Encoding.ptr.prototype.EncodeToString = function(src) {
		var $ptr, buf, enc, src;
		enc = this;
		buf = $makeSlice(sliceType, enc.EncodedLen(src.$length));
		enc.Encode(buf, src);
		return $bytesToString(buf);
	};
	Encoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };
	encoder.ptr.prototype.Write = function(p) {
		var $ptr, _q, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, e, err, i, i$1, n, nn, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; e = $f.e; err = $f.err; i = $f.i; i$1 = $f.i$1; n = $f.n; nn = $f.nn; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		e = this;
		if (!($interfaceIsEqual(e.err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = e.err;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		/* */ if (e.nbuf > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (e.nbuf > 0) { */ case 1:
			i = 0;
			i = 0;
			while (true) {
				if (!(i < p.$length && e.nbuf < 3)) { break; }
				(x = e.buf, x$1 = e.nbuf, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i])));
				e.nbuf = e.nbuf + (1) >> 0;
				i = i + (1) >> 0;
			}
			n = n + (i) >> 0;
			p = $subslice(p, i);
			if (e.nbuf < 3) {
				return [n, err];
			}
			e.enc.Encode(new sliceType(e.out), new sliceType(e.buf));
			_r = e.w.Write($subslice(new sliceType(e.out), 0, 4)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			e.err = _tuple[1];
			if (!($interfaceIsEqual(e.err, $ifaceNil))) {
				_tmp$2 = n;
				_tmp$3 = e.err;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
			e.nbuf = 0;
		/* } */ case 2:
		/* while (true) { */ case 4:
			/* if (!(p.$length >= 3)) { break; } */ if(!(p.$length >= 3)) { $s = 5; continue; }
			nn = 768;
			if (nn > p.$length) {
				nn = p.$length;
				nn = nn - ((_r$1 = nn % 3, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"))) >> 0;
			}
			e.enc.Encode(new sliceType(e.out), $subslice(p, 0, nn));
			_r$2 = e.w.Write($subslice(new sliceType(e.out), 0, ($imul((_q = nn / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 4)))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			e.err = _tuple$1[1];
			if (!($interfaceIsEqual(e.err, $ifaceNil))) {
				_tmp$4 = n;
				_tmp$5 = e.err;
				n = _tmp$4;
				err = _tmp$5;
				return [n, err];
			}
			n = n + (nn) >> 0;
			p = $subslice(p, nn);
		/* } */ $s = 4; continue; case 5:
		i$1 = 0;
		while (true) {
			if (!(i$1 < p.$length)) { break; }
			(x$2 = e.buf, ((i$1 < 0 || i$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i$1] = ((i$1 < 0 || i$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		e.nbuf = p.$length;
		n = n + (p.$length) >> 0;
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.e = e; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.nn = nn; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.Write = function(p) { return this.$val.Write(p); };
	encoder.ptr.prototype.Close = function() {
		var $ptr, _r, _tuple, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		/* */ if ($interfaceIsEqual(e.err, $ifaceNil) && e.nbuf > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(e.err, $ifaceNil) && e.nbuf > 0) { */ case 1:
			e.enc.Encode(new sliceType(e.out), $subslice(new sliceType(e.buf), 0, e.nbuf));
			_r = e.w.Write($subslice(new sliceType(e.out), 0, e.enc.EncodedLen(e.nbuf))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			e.err = _tuple[1];
			e.nbuf = 0;
		/* } */ case 2:
		return e.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encoder.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	encoder.prototype.Close = function() { return this.$val.Close(); };
	NewEncoder = function(enc, w) {
		var $ptr, enc, w;
		return new encoder.ptr($ifaceNil, enc, w, arrayType$2.zero(), 0, arrayType$3.zero());
	};
	$pkg.NewEncoder = NewEncoder;
	Encoding.ptr.prototype.EncodedLen = function(n) {
		var $ptr, _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ((($imul(n, 8)) + 5 >> 0)) / 6, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = ((n + 2 >> 0)) / 3, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 4);
	};
	Encoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "illegal base64 data at input byte " + strconv.FormatInt(new $Int64(e.$high, e.$low), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	Encoding.ptr.prototype.decode = function(dst, src) {
		var $ptr, _2, _3, _i, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dbuf, dinc, dlen, dst, enc, end, err, in$1, j, n, si, src, val, x;
		n = 0;
		end = false;
		err = $ifaceNil;
		enc = this;
		si = 0;
		while (true) {
			if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 13)))) { break; }
			si = si + (1) >> 0;
		}
		while (true) {
			if (!(si < src.$length && !end)) { break; }
			dbuf = arrayType$4.zero();
			_tmp = 3;
			_tmp$1 = 4;
			dinc = _tmp;
			dlen = _tmp$1;
			_ref = dbuf;
			_i = 0;
			while (true) {
				if (!(_i < 4)) { break; }
				j = _i;
				if (src.$length === si) {
					if (!((enc.padChar === -1)) || j < 2) {
						_tmp$2 = n;
						_tmp$3 = false;
						_tmp$4 = new CorruptInputError(0, (si - j >> 0));
						n = _tmp$2;
						end = _tmp$3;
						err = _tmp$4;
						return [n, end, err];
					}
					_tmp$5 = j - 1 >> 0;
					_tmp$6 = j;
					_tmp$7 = true;
					dinc = _tmp$5;
					dlen = _tmp$6;
					end = _tmp$7;
					break;
				}
				in$1 = ((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]);
				si = si + (1) >> 0;
				while (true) {
					if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 13)))) { break; }
					si = si + (1) >> 0;
				}
				if ((in$1 >> 0) === enc.padChar) {
					_2 = j;
					if ((_2 === 0) || (_2 === 1)) {
						_tmp$8 = n;
						_tmp$9 = false;
						_tmp$10 = new CorruptInputError(0, (si - 1 >> 0));
						n = _tmp$8;
						end = _tmp$9;
						err = _tmp$10;
						return [n, end, err];
					} else if (_2 === 2) {
						if (si === src.$length) {
							_tmp$11 = n;
							_tmp$12 = false;
							_tmp$13 = new CorruptInputError(0, src.$length);
							n = _tmp$11;
							end = _tmp$12;
							err = _tmp$13;
							return [n, end, err];
						}
						if (!(((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) >> 0) === enc.padChar))) {
							_tmp$14 = n;
							_tmp$15 = false;
							_tmp$16 = new CorruptInputError(0, (si - 1 >> 0));
							n = _tmp$14;
							end = _tmp$15;
							err = _tmp$16;
							return [n, end, err];
						}
						si = si + (1) >> 0;
						while (true) {
							if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 13)))) { break; }
							si = si + (1) >> 0;
						}
					}
					if (si < src.$length) {
						err = new CorruptInputError(0, si);
					}
					_tmp$17 = 3;
					_tmp$18 = j;
					_tmp$19 = true;
					dinc = _tmp$17;
					dlen = _tmp$18;
					end = _tmp$19;
					break;
				}
				((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j] = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? $throwRuntimeError("index out of range") : x[in$1])));
				if (((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j]) === 255) {
					_tmp$20 = n;
					_tmp$21 = false;
					_tmp$22 = new CorruptInputError(0, (si - 1 >> 0));
					n = _tmp$20;
					end = _tmp$21;
					err = _tmp$22;
					return [n, end, err];
				}
				_i++;
			}
			val = (((((((dbuf[0] >>> 0) << 18 >>> 0) | ((dbuf[1] >>> 0) << 12 >>> 0)) >>> 0) | ((dbuf[2] >>> 0) << 6 >>> 0)) >>> 0) | (dbuf[3] >>> 0)) >>> 0;
			_3 = dlen;
			if (_3 === 4) {
				(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = ((val >>> 0 >>> 0) << 24 >>> 24));
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((val >>> 8 >>> 0) << 24 >>> 24));
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((val >>> 16 >>> 0) << 24 >>> 24));
			} else if (_3 === 3) {
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((val >>> 8 >>> 0) << 24 >>> 24));
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((val >>> 16 >>> 0) << 24 >>> 24));
			} else if (_3 === 2) {
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((val >>> 16 >>> 0) << 24 >>> 24));
			}
			dst = $subslice(dst, dinc);
			n = n + ((dlen - 1 >> 0)) >> 0;
		}
		_tmp$23 = n;
		_tmp$24 = end;
		_tmp$25 = err;
		n = _tmp$23;
		end = _tmp$24;
		err = _tmp$25;
		return [n, end, err];
	};
	Encoding.prototype.decode = function(dst, src) { return this.$val.decode(dst, src); };
	Encoding.ptr.prototype.Decode = function(dst, src) {
		var $ptr, _tuple, dst, enc, err, n, src;
		n = 0;
		err = $ifaceNil;
		enc = this;
		_tuple = enc.decode(dst, src);
		n = _tuple[0];
		err = _tuple[2];
		return [n, err];
	};
	Encoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };
	Encoding.ptr.prototype.DecodeString = function(s) {
		var $ptr, _tuple, dbuf, enc, err, n, s;
		enc = this;
		dbuf = $makeSlice(sliceType, enc.DecodedLen(s.length));
		_tuple = enc.decode(dbuf, new sliceType($stringToBytes(s)));
		n = _tuple[0];
		err = _tuple[2];
		return [$subslice(dbuf, 0, n), err];
	};
	Encoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };
	Encoding.ptr.prototype.DecodedLen = function(n) {
		var $ptr, _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ((($imul(n, 6)) + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = n / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 3);
	};
	Encoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };
	Encoding.methods = [{prop: "WithPadding", name: "WithPadding", pkg: "", typ: $funcType([$Int32], [ptrType], false)}];
	ptrType.methods = [{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType, sliceType], [], false)}, {prop: "EncodeToString", name: "EncodeToString", pkg: "", typ: $funcType([sliceType], [$String], false)}, {prop: "EncodedLen", name: "EncodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "decode", name: "decode", pkg: "encoding/base64", typ: $funcType([sliceType, sliceType], [$Int, $Bool, $error], false)}, {prop: "Decode", name: "Decode", pkg: "", typ: $funcType([sliceType, sliceType], [$Int, $error], false)}, {prop: "DecodeString", name: "DecodeString", pkg: "", typ: $funcType([$String], [sliceType, $error], false)}, {prop: "DecodedLen", name: "DecodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Encoding.init([{prop: "encode", name: "encode", pkg: "encoding/base64", typ: arrayType, tag: ""}, {prop: "decodeMap", name: "decodeMap", pkg: "encoding/base64", typ: arrayType$1, tag: ""}, {prop: "padChar", name: "padChar", pkg: "encoding/base64", typ: $Int32, tag: ""}]);
	encoder.init([{prop: "err", name: "err", pkg: "encoding/base64", typ: $error, tag: ""}, {prop: "enc", name: "enc", pkg: "encoding/base64", typ: ptrType, tag: ""}, {prop: "w", name: "w", pkg: "encoding/base64", typ: io.Writer, tag: ""}, {prop: "buf", name: "buf", pkg: "encoding/base64", typ: arrayType$2, tag: ""}, {prop: "nbuf", name: "nbuf", pkg: "encoding/base64", typ: $Int, tag: ""}, {prop: "out", name: "out", pkg: "encoding/base64", typ: arrayType$3, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		$pkg.URLEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
		$pkg.RawStdEncoding = $pkg.StdEncoding.WithPadding(-1);
		$pkg.RawURLEncoding = $pkg.URLEncoding.WithPadding(-1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding"] = (function() {
	var $pkg = {}, $init, TextMarshaler, TextUnmarshaler, sliceType;
	TextMarshaler = $pkg.TextMarshaler = $newType(8, $kindInterface, "encoding.TextMarshaler", "TextMarshaler", "encoding", null);
	TextUnmarshaler = $pkg.TextUnmarshaler = $newType(8, $kindInterface, "encoding.TextUnmarshaler", "TextUnmarshaler", "encoding", null);
	sliceType = $sliceType($Uint8);
	TextMarshaler.init([{prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType, $error], false)}]);
	TextUnmarshaler.init([{prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, bytes, js, race, runtime, sync, mmapper, Errno, Timespec, Stat_t, Dirent, sliceType, sliceType$1, ptrType$2, arrayType$5, arrayType$13, arrayType$14, structType, ptrType$22, ptrType$25, mapType, funcType, funcType$1, ptrType$29, arrayType$18, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envOnce, envLock, env, envs, mapper, errEAGAIN, errEINVAL, errENOENT, ioSync, ioSync$24ptr, errors, init, printWarning, printToConsole, use, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, copyenv, Getenv, msanRead, msanWrite, itoa, uitoa, clen, ReadDirent, ParseDirent, errnoErr, Read, Write, Close, Exit, Fchdir, Fchmod, Fsync, Getdents, read, write, munmap, Fchown, Fstat, Ftruncate, Lstat, Pread, Pwrite, Seek, mmap;
	bytes = $packages["bytes"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", "mmapper", "syscall", function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", "Errno", "syscall", null);
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", "Timespec", "syscall", function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", "Stat_t", "syscall", function(Dev_, Ino_, Nlink_, Mode_, Uid_, Gid_, X__pad0_, Rdev_, Size_, Blksize_, Blocks_, Atim_, Mtim_, Ctim_, X__unused_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = new $Uint64(0, 0);
			this.Ino = new $Uint64(0, 0);
			this.Nlink = new $Uint64(0, 0);
			this.Mode = 0;
			this.Uid = 0;
			this.Gid = 0;
			this.X__pad0 = 0;
			this.Rdev = new $Uint64(0, 0);
			this.Size = new $Int64(0, 0);
			this.Blksize = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Atim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Mtim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Ctim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.X__unused = arrayType$18.zero();
			return;
		}
		this.Dev = Dev_;
		this.Ino = Ino_;
		this.Nlink = Nlink_;
		this.Mode = Mode_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.X__pad0 = X__pad0_;
		this.Rdev = Rdev_;
		this.Size = Size_;
		this.Blksize = Blksize_;
		this.Blocks = Blocks_;
		this.Atim = Atim_;
		this.Mtim = Mtim_;
		this.Ctim = Ctim_;
		this.X__unused = X__unused_;
	});
	Dirent = $pkg.Dirent = $newType(0, $kindStruct, "syscall.Dirent", "Dirent", "syscall", function(Ino_, Off_, Reclen_, Type_, Name_, Pad_cgo_0_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Ino = new $Uint64(0, 0);
			this.Off = new $Int64(0, 0);
			this.Reclen = 0;
			this.Type = 0;
			this.Name = arrayType$13.zero();
			this.Pad_cgo_0 = arrayType$14.zero();
			return;
		}
		this.Ino = Ino_;
		this.Off = Off_;
		this.Reclen = Reclen_;
		this.Type = Type_;
		this.Name = Name_;
		this.Pad_cgo_0 = Pad_cgo_0_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType$2 = $ptrType($Uint8);
	arrayType$5 = $arrayType($Uint8, 32);
	arrayType$13 = $arrayType($Int8, 256);
	arrayType$14 = $arrayType($Uint8, 5);
	structType = $structType([{prop: "addr", name: "addr", pkg: "syscall", typ: $Uintptr, tag: ""}, {prop: "len", name: "len", pkg: "syscall", typ: $Int, tag: ""}, {prop: "cap", name: "cap", pkg: "syscall", typ: $Int, tag: ""}]);
	ptrType$22 = $ptrType($Int64);
	ptrType$25 = $ptrType(mmapper);
	mapType = $mapType(ptrType$2, sliceType);
	funcType = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$1 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$29 = $ptrType(Timespec);
	arrayType$18 = $arrayType($Int64, 3);
	init = function() {
		var $ptr;
		$flushConsole = (function() {
			var $ptr;
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize($bytesToString(lineBuffer), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		var $ptr;
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var $ptr, b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = bytes.IndexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	use = function(p) {
		var $ptr, p;
	};
	runtime_envs = function() {
		var $ptr, envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? $throwRuntimeError("index out of range") : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var $ptr, name, require, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
	};
	Syscall = function(trap, a1, a2, a3) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0);
			_tmp$1 = (($parseInt(r[1]) >> 0) >>> 0);
			_tmp$2 = (($parseInt(r[2]) >> 0) >>> 0);
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 1) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = ($parseInt(array.length) >>> 0);
			_tmp$4 = 0;
			_tmp$5 = 0;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			return [r1, r2, err];
		}
		if (trap === 60) {
			runtime.Goexit();
		}
		printWarning();
		_tmp$6 = (minusOne >>> 0);
		_tmp$7 = 0;
		_tmp$8 = 13;
		r1 = _tmp$6;
		r2 = _tmp$7;
		err = _tmp$8;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0);
			_tmp$1 = (($parseInt(r[1]) >> 0) >>> 0);
			_tmp$2 = (($parseInt(r[2]) >> 0) >>> 0);
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = (minusOne >>> 0);
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	BytePtrFromString = function(s) {
		var $ptr, _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = new sliceType($stringToBytes(s));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType$2.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [array, $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	copyenv = function() {
		var $ptr, _entry, _i, _key, _ref, _tuple, i, j, key, ok, s;
		env = {};
		_ref = envs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < s.length)) { break; }
				if (s.charCodeAt(j) === 61) {
					key = s.substring(0, j);
					_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
					ok = _tuple[1];
					if (!ok) {
						_key = key; (env || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: i };
					} else {
						((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i] = "");
					}
					break;
				}
				j = j + (1) >> 0;
			}
			_i++;
		}
	};
	Getenv = function(key) {
		var $ptr, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, found, i, i$1, key, ok, s, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; found = $f.found; i = $f.i; i$1 = $f.i$1; key = $f.key; ok = $f.ok; s = $f.s; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		value = "";
		found = false;
		$r = envOnce.Do(copyenv); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (key.length === 0) {
			_tmp = "";
			_tmp$1 = false;
			value = _tmp;
			found = _tmp$1;
			return [value, found];
		}
		$r = envLock.RLock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(envLock, "RUnlock"), []]);
		_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		i = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			_tmp$2 = "";
			_tmp$3 = false;
			value = _tmp$2;
			found = _tmp$3;
			return [value, found];
		}
		s = ((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i]);
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			if (s.charCodeAt(i$1) === 61) {
				_tmp$4 = s.substring((i$1 + 1 >> 0));
				_tmp$5 = true;
				value = _tmp$4;
				found = _tmp$5;
				return [value, found];
			}
			i$1 = i$1 + (1) >> 0;
		}
		_tmp$6 = "";
		_tmp$7 = false;
		value = _tmp$6;
		found = _tmp$7;
		return [value, found];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [value, found]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Getenv }; } $f.$ptr = $ptr; $f._entry = _entry; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.found = found; $f.i = i; $f.i$1 = i$1; $f.key = key; $f.ok = ok; $f.s = s; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Getenv = Getenv;
	msanRead = function(addr, len) {
		var $ptr, addr, len;
	};
	msanWrite = function(addr, len) {
		var $ptr, addr, len;
	};
	itoa = function(val) {
		var $ptr, val;
		if (val < 0) {
			return "-" + uitoa((-val >>> 0));
		}
		return uitoa((val >>> 0));
	};
	uitoa = function(val) {
		var $ptr, _q, _r, buf, i, val;
		buf = arrayType$5.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((val + 48 >>> 0) << 24 >>> 24));
		return $bytesToString($subslice(new sliceType(buf), i));
	};
	Timespec.ptr.prototype.Unix = function() {
		var $ptr, _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = ts.Sec;
		_tmp$1 = ts.Nsec;
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var $ptr, ts, x, x$1;
		ts = this;
		return (x = $mul64(ts.Sec, new $Int64(0, 1000000000)), x$1 = ts.Nsec, new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	clen = function(n) {
		var $ptr, i, n;
		i = 0;
		while (true) {
			if (!(i < n.$length)) { break; }
			if (((i < 0 || i >= n.$length) ? $throwRuntimeError("index out of range") : n.$array[n.$offset + i]) === 0) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return n.$length;
	};
	ReadDirent = function(fd, buf) {
		var $ptr, _tuple, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		_tuple = Getdents(fd, buf);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.ReadDirent = ReadDirent;
	ParseDirent = function(buf, max, names) {
		var $ptr, _array, _struct, _tmp, _tmp$1, _tmp$2, _view, buf, bytes$1, consumed, count, dirent, max, name, names, newnames, origlen, x;
		consumed = 0;
		count = 0;
		newnames = sliceType$1.nil;
		origlen = buf.$length;
		count = 0;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			dirent = (_array = $sliceToArray(buf), _struct = new Dirent.ptr(new $Uint64(0, 0), new $Int64(0, 0), 0, 0, arrayType$13.zero(), arrayType$14.zero()), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Ino = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Off = new $Int64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Reclen = _view.getUint16(16, true), _struct.Type = _view.getUint8(18, true), _struct.Name = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 19, _array.buffer.byteLength)), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 275, _array.buffer.byteLength)), _struct);
			buf = $subslice(buf, dirent.Reclen);
			if ((x = dirent.Ino, (x.$high === 0 && x.$low === 0))) {
				continue;
			}
			bytes$1 = $sliceToArray(new sliceType(dirent.Name));
			name = $bytesToString($subslice(new sliceType(bytes$1), 0, clen(new sliceType(bytes$1))));
			if (name === "." || name === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, name);
		}
		_tmp = origlen - buf.$length >> 0;
		_tmp$1 = count;
		_tmp$2 = names;
		consumed = _tmp;
		count = _tmp$1;
		newnames = _tmp$2;
		return [consumed, count, newnames];
	};
	$pkg.ParseDirent = ParseDirent;
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var $ptr, _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		sl = [sl];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		if (length <= 0) {
			_tmp = sliceType.nil;
			_tmp$1 = new Errno(22);
			data = _tmp;
			err = _tmp$1;
			return [data, err];
		}
		_r = m.mmap(0, (length >>> 0), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		addr = _tuple[0];
		errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = errno;
			data = _tmp$2;
			err = _tmp$3;
			return [data, err];
		}
		sl[0] = new structType.ptr(addr, length, length);
		b = sl[0];
		p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b };
		_tmp$4 = b;
		_tmp$5 = $ifaceNil;
		data = _tmp$4;
		err = _tmp$5;
		return [data, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var $ptr, _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			return err;
		}
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) {
			err = new Errno(22);
			return err;
		}
		_r = m.munmap($sliceToArray(b), (b.$length >>> 0)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			err = errno;
			return err;
		}
		delete m.active[ptrType$2.keyFor(p)];
		err = $ifaceNil;
		return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var $ptr, e, s;
		e = this.$val;
		if (0 <= (e >> 0) && (e >> 0) < 133) {
			s = ((e < 0 || e >= errors.length) ? $throwRuntimeError("index out of range") : errors[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa((e >> 0));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 104) || (e === 103) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 11) || (e === 11) || (e === 110);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	errnoErr = function(e) {
		var $ptr, _1, e;
		_1 = e;
		if (_1 === 0) {
			return $ifaceNil;
		} else if (_1 === 11) {
			return errEAGAIN;
		} else if (_1 === 22) {
			return errEINVAL;
		} else if (_1 === 2) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Read = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = read(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false) {
			if (n > 0) {
				race.WriteRange($sliceToArray(p), n);
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				race.Acquire((ioSync$24ptr || (ioSync$24ptr = new ptrType$22(function() { return ioSync; }, function($v) { ioSync = $v; }))));
			}
		}
		if (false && n > 0) {
			msanWrite($sliceToArray(p), n);
		}
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		if (false) {
			race.ReleaseMerge((ioSync$24ptr || (ioSync$24ptr = new ptrType$22(function() { return ioSync; }, function($v) { ioSync = $v; }))));
		}
		_tuple = write(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false && n > 0) {
			race.ReadRange($sliceToArray(p), n);
		}
		if (false && n > 0) {
			msanRead($sliceToArray(p), n);
		}
		return [n, err];
	};
	$pkg.Write = Write;
	Close = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(3, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Close = Close;
	Exit = function(code) {
		var $ptr, code;
		Syscall(231, (code >>> 0), 0, 0);
		return;
	};
	$pkg.Exit = Exit;
	Fchdir = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(81, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var $ptr, _tuple, e1, err, fd, mode;
		err = $ifaceNil;
		_tuple = Syscall(91, (fd >>> 0), (mode >>> 0), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fsync = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(74, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fsync = Fsync;
	Getdents = function(fd, buf) {
		var $ptr, _p0, _tuple, buf, e1, err, fd, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = $sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(217, (fd >>> 0), _p0, (buf.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Getdents = Getdents;
	read = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(0, (fd >>> 0), _p0, (p.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	write = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(1, (fd >>> 0), _p0, (p.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	munmap = function(addr, length) {
		var $ptr, _tuple, addr, e1, err, length;
		err = $ifaceNil;
		_tuple = Syscall(11, addr, length, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	Fchown = function(fd, uid, gid) {
		var $ptr, _tuple, e1, err, fd, gid, uid;
		err = $ifaceNil;
		_tuple = Syscall(93, (fd >>> 0), (uid >>> 0), (gid >>> 0));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var $ptr, _array, _struct, _tuple, _view, e1, err, fd, stat;
		err = $ifaceNil;
		_array = new Uint8Array(144);
		_tuple = Syscall(5, (fd >>> 0), _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fstat = Fstat;
	Ftruncate = function(fd, length) {
		var $ptr, _tuple, e1, err, fd, length;
		err = $ifaceNil;
		_tuple = Syscall(77, (fd >>> 0), (length.$low >>> 0), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Ftruncate = Ftruncate;
	Lstat = function(path, stat) {
		var $ptr, _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(6, _p0, _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = new $Uint64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Mode = _view.getUint32(24, true), _struct.Uid = _view.getUint32(28, true), _struct.Gid = _view.getUint32(32, true), _struct.X__pad0 = _view.getInt32(36, true), _struct.Rdev = new $Uint64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Size = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Blksize = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Blocks = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Atim.Sec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__unused = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 120, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Lstat = Lstat;
	Pread = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(17, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(18, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pwrite = Pwrite;
	Seek = function(fd, offset, whence) {
		var $ptr, _tuple, e1, err, fd, off, offset, r0, whence;
		off = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = Syscall(8, (fd >>> 0), (offset.$low >>> 0), (whence >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		off = new $Int64(0, r0.constructor === Number ? r0 : 1);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [off, err];
	};
	$pkg.Seek = Seek;
	mmap = function(addr, length, prot, flags, fd, offset) {
		var $ptr, _tuple, addr, e1, err, fd, flags, length, offset, prot, r0, xaddr;
		xaddr = 0;
		err = $ifaceNil;
		_tuple = Syscall6(9, addr, length, (prot >>> 0), (flags >>> 0), (fd >>> 0), (offset.$low >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		xaddr = r0;
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [xaddr, err];
	};
	ptrType$25.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$29.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	mmapper.init([{prop: "Mutex", name: "", pkg: "", typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", pkg: "syscall", typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", pkg: "syscall", typ: funcType, tag: ""}, {prop: "munmap", name: "munmap", pkg: "syscall", typ: funcType$1, tag: ""}]);
	Timespec.init([{prop: "Sec", name: "Sec", pkg: "", typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", pkg: "", typ: $Int64, tag: ""}]);
	Stat_t.init([{prop: "Dev", name: "Dev", pkg: "", typ: $Uint64, tag: ""}, {prop: "Ino", name: "Ino", pkg: "", typ: $Uint64, tag: ""}, {prop: "Nlink", name: "Nlink", pkg: "", typ: $Uint64, tag: ""}, {prop: "Mode", name: "Mode", pkg: "", typ: $Uint32, tag: ""}, {prop: "Uid", name: "Uid", pkg: "", typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", pkg: "", typ: $Uint32, tag: ""}, {prop: "X__pad0", name: "X__pad0", pkg: "", typ: $Int32, tag: ""}, {prop: "Rdev", name: "Rdev", pkg: "", typ: $Uint64, tag: ""}, {prop: "Size", name: "Size", pkg: "", typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", pkg: "", typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", pkg: "", typ: $Int64, tag: ""}, {prop: "Atim", name: "Atim", pkg: "", typ: Timespec, tag: ""}, {prop: "Mtim", name: "Mtim", pkg: "", typ: Timespec, tag: ""}, {prop: "Ctim", name: "Ctim", pkg: "", typ: Timespec, tag: ""}, {prop: "X__unused", name: "X__unused", pkg: "", typ: arrayType$18, tag: ""}]);
	Dirent.init([{prop: "Ino", name: "Ino", pkg: "", typ: $Uint64, tag: ""}, {prop: "Off", name: "Off", pkg: "", typ: $Int64, tag: ""}, {prop: "Reclen", name: "Reclen", pkg: "", typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: $Uint8, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: arrayType$13, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", pkg: "", typ: arrayType$14, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		envOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		envLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		env = false;
		ioSync = new $Int64(0, 0);
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errEAGAIN = new Errno(11);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errors = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "no such device or address", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource temporarily unavailable", "cannot allocate memory", "permission denied", "bad address", "block device required", "device or resource busy", "file exists", "invalid cross-device link", "no such device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "numerical result out of range", "resource deadlock avoided", "file name too long", "no locks available", "function not implemented", "directory not empty", "too many levels of symbolic links", "", "no message of desired type", "identifier removed", "channel number out of range", "level 2 not synchronized", "level 3 halted", "level 3 reset", "link number out of range", "protocol driver not attached", "no CSI structure available", "level 2 halted", "invalid exchange", "invalid request descriptor", "exchange full", "no anode", "invalid request code", "invalid slot", "", "bad font file format", "device not a stream", "no data available", "timer expired", "out of streams resources", "machine is not on the network", "package not installed", "object is remote", "link has been severed", "advertise error", "srmount error", "communication error on send", "protocol error", "multihop attempted", "RFS specific error", "bad message", "value too large for defined data type", "name not unique on network", "file descriptor in bad state", "remote address changed", "can not access a needed shared library", "accessing a corrupted shared library", ".lib section in a.out corrupted", "attempting to link in too many shared libraries", "cannot exec a shared library directly", "invalid or incomplete multibyte or wide character", "interrupted system call should be restarted", "streams pipe error", "too many users", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol", "address already in use", "cannot assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "transport endpoint is already connected", "transport endpoint is not connected", "cannot send after transport endpoint shutdown", "too many references: cannot splice", "connection timed out", "connection refused", "host is down", "no route to host", "operation already in progress", "operation now in progress", "stale NFS file handle", "structure needs cleaning", "not a XENIX named type file", "no XENIX semaphores available", "is a named type file", "remote I/O error", "disk quota exceeded", "no medium found", "wrong medium type", "operation canceled", "required key not available", "key has expired", "key has been revoked", "key was rejected by service", "owner died", "state not recoverable", "operation not possible due to RF-kill"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, RWMutex, WaitGroup, Once, ptrType$1, ptrType$2, funcType, ptrType$3;
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "nosync.RWMutex", "RWMutex", "github.com/gopherjs/gopherjs/nosync", function(writeLocked_, readLockCounter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.writeLocked = false;
			this.readLockCounter = 0;
			return;
		}
		this.writeLocked = writeLocked_;
		this.readLockCounter = readLockCounter_;
	});
	WaitGroup = $pkg.WaitGroup = $newType(0, $kindStruct, "nosync.WaitGroup", "WaitGroup", "github.com/gopherjs/gopherjs/nosync", function(counter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.counter = 0;
			return;
		}
		this.counter = counter_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", "Once", "github.com/gopherjs/gopherjs/nosync", function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	ptrType$1 = $ptrType(RWMutex);
	ptrType$2 = $ptrType(WaitGroup);
	funcType = $funcType([], [], false);
	ptrType$3 = $ptrType(Once);
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, rw;
		rw = this;
		if (!((rw.readLockCounter === 0)) || rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.writeLocked = true;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, rw;
		rw = this;
		if (!rw.writeLocked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.writeLocked = false;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw;
		rw = this;
		if (rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.readLockCounter = rw.readLockCounter + (1) >> 0;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, rw;
		rw = this;
		if (rw.readLockCounter === 0) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.readLockCounter = rw.readLockCounter - (1) >> 0;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	WaitGroup.ptr.prototype.Add = function(delta) {
		var $ptr, delta, wg;
		wg = this;
		wg.counter = wg.counter + (delta) >> 0;
		if (wg.counter < 0) {
			$panic(new $String("sync: negative WaitGroup counter"));
		}
	};
	WaitGroup.prototype.Add = function(delta) { return this.$val.Add(delta); };
	WaitGroup.ptr.prototype.Done = function() {
		var $ptr, wg;
		wg = this;
		wg.Add(-1);
	};
	WaitGroup.prototype.Done = function() { return this.$val.Done(); };
	WaitGroup.ptr.prototype.Wait = function() {
		var $ptr, wg;
		wg = this;
		if (!((wg.counter === 0))) {
			$panic(new $String("sync: WaitGroup counter not zero"));
		}
	};
	WaitGroup.prototype.Wait = function() { return this.$val.Wait(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			var $ptr;
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$2.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [], false)}, {prop: "Wait", name: "Wait", pkg: "", typ: $funcType([], [], false)}];
	ptrType$3.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType], [], false)}];
	RWMutex.init([{prop: "writeLocked", name: "writeLocked", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}, {prop: "readLockCounter", name: "readLockCounter", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Int, tag: ""}]);
	WaitGroup.init([{prop: "counter", name: "counter", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Int, tag: ""}]);
	Once.init([{prop: "doing", name: "doing", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}, {prop: "done", name: "done", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, sliceType$3, IndexByte, Index, Count, explode, ContainsRune, IndexRune, genSplit, Split;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	sliceType$3 = $sliceType($String);
	IndexByte = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	Index = function(s, sep) {
		var $ptr, s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	Count = function(s, sep) {
		var $ptr, n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = s.substring((pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	explode = function(s, n) {
		var $ptr, _tmp, _tmp$1, _tuple, a, ch, cur, i, l, n, s, size;
		if (n === 0) {
			return sliceType$3.nil;
		}
		l = utf8.RuneCountInString(s);
		if (n <= 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType$3, n);
		size = 0;
		ch = 0;
		_tmp = 0;
		_tmp$1 = 0;
		i = _tmp;
		cur = _tmp$1;
		while (true) {
			if (!((i + 1 >> 0) < n)) { break; }
			_tuple = utf8.DecodeRuneInString(s.substring(cur));
			ch = _tuple[0];
			size = _tuple[1];
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur, (cur + size >> 0)));
			}
			cur = cur + (size) >> 0;
			i = i + (1) >> 0;
		}
		if (cur < s.length) {
			((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur));
		}
		return a;
	};
	ContainsRune = function(s, r) {
		var $ptr, r, s;
		return IndexRune(s, r) >= 0;
	};
	$pkg.ContainsRune = ContainsRune;
	IndexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		if (r < 128) {
			return IndexByte(s, (r << 24 >>> 24));
		} else {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				if (c === r) {
					return i;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	$pkg.IndexRune = IndexRune;
	genSplit = function(s, sep, sepSave, n) {
		var $ptr, a, c, i, n, na, s, sep, sepSave, start;
		if (n === 0) {
			return sliceType$3.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = $makeSlice(sliceType$3, n);
		na = 0;
		i = 0;
		while (true) {
			if (!((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n)) { break; }
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || s.substring(i, (i + sep.length >> 0)) === sep)) {
				((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start, (i + sepSave >> 0)));
				na = na + (1) >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start));
		return $subslice(a, 0, (na + 1 >> 0));
	};
	Split = function(s, sep) {
		var $ptr, s, sep;
		return genSplit(s, sep, 0, -1);
	};
	$pkg.Split = Split;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, strings, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$1, arrayType$4, ptrType$3, ptrType$6, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, unitMap, months, days, daysBefore, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, zoneinfo, badData, zoneDirs, _tuple, _r, init, initLocal, runtimeNano, now, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, ParseDuration, absWeekday, absClock, fmtFrac, fmtInt, absDate, daysIn, Now, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	strings = $packages["strings"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", "ParseError", "time", function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", "Time", "time", function(sec_, nsec_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sec = new $Int64(0, 0);
			this.nsec = 0;
			this.loc = ptrType$1.nil;
			return;
		}
		this.sec = sec_;
		this.nsec = nsec_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", "Month", "time", null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", "Weekday", "time", null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", "Duration", "time", null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", "Location", "time", function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", "zone", "time", function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", "zoneTrans", "time", function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	arrayType = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(Location);
	arrayType$4 = $arrayType($Uint8, 32);
	ptrType$3 = $ptrType(ParseError);
	ptrType$6 = $ptrType(Time);
	init = function() {
		var $ptr;
		Unix(new $Int64(0, 0), new $Int64(0, 0));
	};
	initLocal = function() {
		var $ptr, d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = strings.IndexByte(s, 40);
		j = strings.IndexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = s.substring((i + 1 >> 0), j);
		localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
	};
	runtimeNano = function() {
		var $ptr;
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	now = function() {
		var $ptr, _tmp, _tmp$1, n, nsec, sec, x;
		sec = new $Int64(0, 0);
		nsec = 0;
		n = runtimeNano();
		_tmp = $div64(n, new $Int64(0, 1000000000), false);
		_tmp$1 = ((x = $div64(n, new $Int64(0, 1000000000), true), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	startsWithLowerCase = function(str) {
		var $ptr, c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = (layout.charCodeAt(i) >> 0);
			_1 = c;
			if (_1 === 74) {
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "January") {
						_tmp = layout.substring(0, i);
						_tmp$1 = 257;
						_tmp$2 = layout.substring((i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
						_tmp$3 = layout.substring(0, i);
						_tmp$4 = 258;
						_tmp$5 = layout.substring((i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === 77) {
				if (layout.length >= (i + 3 >> 0)) {
					if (layout.substring(i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = layout.substring(0, i);
							_tmp$7 = 261;
							_tmp$8 = layout.substring((i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
							_tmp$9 = layout.substring(0, i);
							_tmp$10 = 262;
							_tmp$11 = layout.substring((i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if (layout.substring(i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = layout.substring(0, i);
						_tmp$13 = 21;
						_tmp$14 = layout.substring((i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === 48) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = layout.substring(0, i);
					_tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? $throwRuntimeError("index out of range") : std0x[x]));
					_tmp$17 = layout.substring((i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_1 === 49) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = layout.substring(0, i);
					_tmp$19 = 522;
					_tmp$20 = layout.substring((i + 2 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = layout.substring(0, i);
				_tmp$22 = 259;
				_tmp$23 = layout.substring((i + 1 >> 0));
				prefix = _tmp$21;
				std = _tmp$22;
				suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_1 === 50) {
				if (layout.length >= (i + 4 >> 0) && layout.substring(i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = layout.substring(0, i);
					_tmp$25 = 273;
					_tmp$26 = layout.substring((i + 4 >> 0));
					prefix = _tmp$24;
					std = _tmp$25;
					suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = layout.substring(0, i);
				_tmp$28 = 263;
				_tmp$29 = layout.substring((i + 1 >> 0));
				prefix = _tmp$27;
				std = _tmp$28;
				suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_1 === 95) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && layout.substring((i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$30 = layout.substring(0, (i + 1 >> 0));
						_tmp$31 = 273;
						_tmp$32 = layout.substring((i + 5 >> 0));
						prefix = _tmp$30;
						std = _tmp$31;
						suffix = _tmp$32;
						return [prefix, std, suffix];
					}
					_tmp$33 = layout.substring(0, i);
					_tmp$34 = 264;
					_tmp$35 = layout.substring((i + 2 >> 0));
					prefix = _tmp$33;
					std = _tmp$34;
					suffix = _tmp$35;
					return [prefix, std, suffix];
				}
			} else if (_1 === 51) {
				_tmp$36 = layout.substring(0, i);
				_tmp$37 = 523;
				_tmp$38 = layout.substring((i + 1 >> 0));
				prefix = _tmp$36;
				std = _tmp$37;
				suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_1 === 52) {
				_tmp$39 = layout.substring(0, i);
				_tmp$40 = 525;
				_tmp$41 = layout.substring((i + 1 >> 0));
				prefix = _tmp$39;
				std = _tmp$40;
				suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_1 === 53) {
				_tmp$42 = layout.substring(0, i);
				_tmp$43 = 527;
				_tmp$44 = layout.substring((i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === 80) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$45 = layout.substring(0, i);
					_tmp$46 = 531;
					_tmp$47 = layout.substring((i + 2 >> 0));
					prefix = _tmp$45;
					std = _tmp$46;
					suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_1 === 112) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$48 = layout.substring(0, i);
					_tmp$49 = 532;
					_tmp$50 = layout.substring((i + 2 >> 0));
					prefix = _tmp$48;
					std = _tmp$49;
					suffix = _tmp$50;
					return [prefix, std, suffix];
				}
			} else if (_1 === 45) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "-070000") {
					_tmp$51 = layout.substring(0, i);
					_tmp$52 = 28;
					_tmp$53 = layout.substring((i + 7 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$54 = layout.substring(0, i);
					_tmp$55 = 31;
					_tmp$56 = layout.substring((i + 9 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "-0700") {
					_tmp$57 = layout.substring(0, i);
					_tmp$58 = 27;
					_tmp$59 = layout.substring((i + 5 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "-07:00") {
					_tmp$60 = layout.substring(0, i);
					_tmp$61 = 30;
					_tmp$62 = layout.substring((i + 6 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "-07") {
					_tmp$63 = layout.substring(0, i);
					_tmp$64 = 29;
					_tmp$65 = layout.substring((i + 3 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
			} else if (_1 === 90) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "Z070000") {
					_tmp$66 = layout.substring(0, i);
					_tmp$67 = 23;
					_tmp$68 = layout.substring((i + 7 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$69 = layout.substring(0, i);
					_tmp$70 = 26;
					_tmp$71 = layout.substring((i + 9 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "Z0700") {
					_tmp$72 = layout.substring(0, i);
					_tmp$73 = 22;
					_tmp$74 = layout.substring((i + 5 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$75 = layout.substring(0, i);
					_tmp$76 = 25;
					_tmp$77 = layout.substring((i + 6 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Z07") {
					_tmp$78 = layout.substring(0, i);
					_tmp$79 = 24;
					_tmp$80 = layout.substring((i + 3 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
			} else if (_1 === 46) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 32;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 33;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$81 = layout.substring(0, i);
						_tmp$82 = std$1;
						_tmp$83 = layout.substring(j);
						prefix = _tmp$81;
						std = _tmp$82;
						suffix = _tmp$83;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$84 = layout;
		_tmp$85 = 0;
		_tmp$86 = "";
		prefix = _tmp$84;
		std = _tmp$85;
		suffix = _tmp$86;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var $ptr, _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match(val.substring(0, v.length), v)) {
				return [i, val.substring(v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x, width) {
		var $ptr, _q, b, buf, i, q, u, w, width, x;
		u = (x >>> 0);
		if (x < 0) {
			b = $append(b, 45);
			u = (-x >>> 0);
		}
		buf = arrayType.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((48 + u >>> 0) << 24 >>> 24));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = s.substring(1);
		}
		_tuple$1 = leadingInt(s);
		q = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		x = ((q.$low + ((q.$high >> 31) * 4294967296)) >> 0);
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x = _tmp;
			err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var $ptr, _q, _r$1, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = arrayType$1.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? $throwRuntimeError("index out of range") : buf[start] = (((_r$1 = u % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? $throwRuntimeError("index out of range") : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var $ptr, _r$1, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$2.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r$1 = t.AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		return $bytesToString(b);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var $ptr, _2, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple$1, _tuple$2, _tuple$3, _tuple$4, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$2 = nextStdChunk(layout);
			prefix = _tuple$2[0];
			std = _tuple$2[1];
			suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true);
				year = _tuple$3[0];
				month = _tuple$3[1];
				day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs);
				hour = _tuple$4[0];
				min = _tuple$4[1];
				sec = _tuple$4[2];
			}
			switch (0) { default:
				_2 = std & 65535;
				if (_2 === 274) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$2 = y % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_2 === 273) {
					b = appendInt(b, year, 4);
				} else if (_2 === 258) {
					b = $appendSlice(b, new Month(month).String().substring(0, 3));
				} else if (_2 === 257) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_2 === 259) {
					b = appendInt(b, (month >> 0), 0);
				} else if (_2 === 260) {
					b = appendInt(b, (month >> 0), 2);
				} else if (_2 === 262) {
					b = $appendSlice(b, new Weekday(absWeekday(abs)).String().substring(0, 3));
				} else if (_2 === 261) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_2 === 263) {
					b = appendInt(b, day, 0);
				} else if (_2 === 264) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_2 === 265) {
					b = appendInt(b, day, 2);
				} else if (_2 === 522) {
					b = appendInt(b, hour, 2);
				} else if (_2 === 523) {
					hr = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_2 === 524) {
					hr$1 = (_r$4 = hour % 12, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_2 === 525) {
					b = appendInt(b, min, 0);
				} else if (_2 === 526) {
					b = appendInt(b, min, 2);
				} else if (_2 === 527) {
					b = appendInt(b, sec, 0);
				} else if (_2 === 528) {
					b = appendInt(b, sec, 2);
				} else if (_2 === 531) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_2 === 532) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_2 === 22) || (_2 === 25) || (_2 === 23) || (_2 === 24) || (_2 === 26) || (_2 === 27) || (_2 === 30) || (_2 === 28) || (_2 === 29) || (_2 === 31)) {
					if ((offset === 0) && ((std === 22) || (std === 25) || (std === 23) || (std === 24) || (std === 26))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 25) || (std === 30) || (std === 26) || (std === 31)) {
						b = $append(b, 58);
					}
					if (!((std === 29)) && !((std === 24))) {
						b = appendInt(b, (_r$5 = zone$1 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 23) || (std === 28) || (std === 31) || (std === 26)) {
						if ((std === 31) || (std === 26)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$6 = absoffset % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_2 === 21) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$7 = zone$2 % 60, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_2 === 32) || (_2 === 33)) {
					b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 33);
				}
			}
		}
		return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f.$ptr = $ptr; $f._2 = _2; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var $ptr, s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var $ptr, c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var $ptr, fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), s.substring(1), $ifaceNil];
		}
		return [($imul(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), 10)) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, s.substring(2), $ifaceNil];
	};
	cutspace = function(s) {
		var $ptr, s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = s.substring(1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var $ptr, prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = prefix.substring(1);
			value = value.substring(1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var $ptr, _r$1, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var $ptr, _3, _4, _5, _6, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, x$2, x$3, x$4, x$5, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$25 = $f._tuple$25; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$1.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			stdstr = layout.substring(prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix);
			value = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_3 = std & 65535;
				if (_3 === 274) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$2 = value.substring(0, 2);
					_tmp$3 = value.substring(2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
					if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_3 === 273) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = value.substring(0, 4);
					_tmp$5 = value.substring(4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$4 = atoi(p);
					year = _tuple$4[0];
					err = _tuple$4[1];
				} else if (_3 === 258) {
					_tuple$5 = lookup(shortMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
				} else if (_3 === 257) {
					_tuple$6 = lookup(longMonthNames, value);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
				} else if ((_3 === 259) || (_3 === 260)) {
					_tuple$7 = getnum(value, std === 260);
					month = _tuple$7[0];
					value = _tuple$7[1];
					err = _tuple$7[2];
					if (month <= 0 || 12 < month) {
						rangeErrString = "month";
					}
				} else if (_3 === 262) {
					_tuple$8 = lookup(shortDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if (_3 === 261) {
					_tuple$9 = lookup(longDayNames, value);
					value = _tuple$9[1];
					err = _tuple$9[2];
				} else if ((_3 === 263) || (_3 === 264) || (_3 === 265)) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = value.substring(1);
					}
					_tuple$10 = getnum(value, std === 265);
					day = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
					if (day < 0) {
						rangeErrString = "day";
					}
				} else if (_3 === 522) {
					_tuple$11 = getnum(value, false);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_3 === 523) || (_3 === 524)) {
					_tuple$12 = getnum(value, std === 524);
					hour = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_3 === 525) || (_3 === 526)) {
					_tuple$13 = getnum(value, std === 526);
					min = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_3 === 527) || (_3 === 528)) {
					_tuple$14 = getnum(value, std === 528);
					sec = _tuple$14[0];
					value = _tuple$14[1];
					err = _tuple$14[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
					}
					if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
						_tuple$15 = nextStdChunk(layout);
						std = _tuple$15[1];
						std = std & (65535);
						if ((std === 32) || (std === 33)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$16 = parseNanoseconds(value, n);
						nsec = _tuple$16[0];
						rangeErrString = _tuple$16[1];
						err = _tuple$16[2];
						value = value.substring(n);
					}
				} else if (_3 === 531) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = value.substring(0, 2);
					_tmp$7 = value.substring(2);
					p = _tmp$6;
					value = _tmp$7;
					_4 = p;
					if (_4 === "PM") {
						pmSet = true;
					} else if (_4 === "AM") {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_3 === 532) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = value.substring(0, 2);
					_tmp$9 = value.substring(2);
					p = _tmp$8;
					value = _tmp$9;
					_5 = p;
					if (_5 === "pm") {
						pmSet = true;
					} else if (_5 === "am") {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_3 === 22) || (_3 === 25) || (_3 === 23) || (_3 === 24) || (_3 === 26) || (_3 === 27) || (_3 === 29) || (_3 === 30) || (_3 === 28) || (_3 === 31)) {
					if (((std === 22) || (std === 24) || (std === 25)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = value.substring(1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 25) || (std === 30)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = value.substring(0, 1);
						_tmp$15 = value.substring(1, 3);
						_tmp$16 = value.substring(4, 6);
						_tmp$17 = "00";
						_tmp$18 = value.substring(6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 29) || (std === 24)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = value.substring(0, 1);
						_tmp$20 = value.substring(1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = value.substring(3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 26) || (std === 31)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = value.substring(0, 1);
						_tmp$25 = value.substring(1, 3);
						_tmp$26 = value.substring(4, 6);
						_tmp$27 = value.substring(7, 9);
						_tmp$28 = value.substring(9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 23) || (std === 28)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = value.substring(0, 1);
						_tmp$30 = value.substring(1, 3);
						_tmp$31 = value.substring(3, 5);
						_tmp$32 = value.substring(5, 7);
						_tmp$33 = value.substring(7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = value.substring(0, 1);
						_tmp$35 = value.substring(1, 3);
						_tmp$36 = value.substring(3, 5);
						_tmp$37 = "00";
						_tmp$38 = value.substring(5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$17 = atoi(hour$1);
					hr = _tuple$17[0];
					err = _tuple$17[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(min$1);
						mm = _tuple$18[0];
						err = _tuple$18[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$19 = atoi(seconds);
						ss = _tuple$19[0];
						err = _tuple$19[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_6 = sign.charCodeAt(0);
					if (_6 === 43) {
					} else if (_6 === 45) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_3 === 21) {
					if (value.length >= 3 && value.substring(0, 3) === "UTC") {
						z = $pkg.UTC;
						value = value.substring(3);
						break;
					}
					_tuple$20 = parseTimeZone(value);
					n$1 = _tuple$20[0];
					ok = _tuple$20[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = value.substring(0, n$1);
					_tmp$43 = value.substring(n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_3 === 32) {
					ndigit = 1 + ((std >> 16 >> 0)) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$21 = parseNanoseconds(value, ndigit);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = value.substring(ndigit);
				} else if (_3 === 33) {
					if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i = 0;
					while (true) {
						if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
						i = i + (1) >> 0;
					}
					_tuple$22 = parseNanoseconds(value, 1 + i >> 0);
					nsec = _tuple$22[0];
					rangeErrString = _tuple$22[1];
					err = _tuple$22[2];
					value = value.substring((1 + i >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (day > daysIn((month >> 0), year)) {
			return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$1.nil)) { */ case 1:
			_r$1 = Date(year, (month >> 0), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return [_r$1, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((zoneOffset === -1))) { */ case 5:
			_r$2 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t = $clone(_r$2, Time);
			t.sec = (x = t.sec, x$1 = new $Int64(0, zoneOffset), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
			_r$3 = local.lookup((x$2 = t.sec, new $Int64(x$2.$high + -15, x$2.$low + 2288912640))); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$23 = _r$3;
			name = _tuple$23[0];
			offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				return [t, $ifaceNil];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			return [t, $ifaceNil];
		/* } */ case 6:
		/* */ if (!(zoneName === "")) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!(zoneName === "")) { */ case 9:
			_r$4 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			t$1 = $clone(_r$4, Time);
			_r$5 = local.lookupName(zoneName, (x$3 = t$1.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$24 = _r$5;
			offset$1 = _tuple$24[0];
			ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$4 = t$1.sec, x$5 = new $Int64(0, offset$1), new $Int64(x$4.$high - x$5.$high, x$4.$low - x$5.$low));
				t$1.loc = local;
				return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && zoneName.substring(0, 3) === "GMT") {
				_tuple$25 = atoi(zoneName.substring(3));
				offset$1 = _tuple$25[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			return [t$1, $ifaceNil];
		/* } */ case 10:
		_r$6 = Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ $s = 14; case 14:
		return [_r$6, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$25 = _tuple$25; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var $ptr, _7, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && (value.substring(0, 4) === "ChST" || value.substring(0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if (value.substring(0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_7 = nUpper;
		if ((_7 === 0) || (_7 === 1) || (_7 === 2) || (_7 === 6)) {
			_tmp$6 = 0;
			_tmp$7 = false;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		} else if (_7 === 5) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5;
				_tmp$9 = true;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			}
		} else if (_7 === 4) {
			if (value.charCodeAt(3) === 84) {
				_tmp$10 = 4;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_7 === 3) {
			_tmp$12 = 3;
			_tmp$13 = true;
			length = _tmp$12;
			ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0;
		_tmp$15 = false;
		length = _tmp$14;
		ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var $ptr, _tuple$1, err, rem, sign, value, x;
		value = value.substring(3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt(value.substring(1));
		x = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var $ptr, _tuple$1, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi(value.substring(1, nbytes));
		ns = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x;
		_tmp$7 = s.substring(i);
		_tmp$8 = $ifaceNil;
		x = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x, rem, err];
	};
	ParseDuration = function(s) {
		var $ptr, _entry, _tmp, _tmp$1, _tuple$1, _tuple$2, _tuple$3, c, c$1, d, err, f, i, n, neg, ok, orig, pl, pl$1, post, pre, s, scale, u, unit, v, x, x$1, x$2;
		orig = s;
		d = new $Int64(0, 0);
		neg = false;
		if (!(s === "")) {
			c = s.charCodeAt(0);
			if ((c === 45) || (c === 43)) {
				neg = c === 45;
				s = s.substring(1);
			}
		}
		if (s === "0") {
			return [new Duration(0, 0), $ifaceNil];
		}
		if (s === "") {
			return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
		}
		while (true) {
			if (!(!(s === ""))) { break; }
			_tmp = new $Int64(0, 0);
			_tmp$1 = new $Int64(0, 0);
			v = _tmp;
			f = _tmp$1;
			scale = 1;
			err = $ifaceNil;
			if (!((s.charCodeAt(0) === 46) || 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			pl = s.length;
			_tuple$1 = leadingInt(s);
			v = _tuple$1[0];
			s = _tuple$1[1];
			err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			pre = !((pl === s.length));
			post = false;
			if (!(s === "") && (s.charCodeAt(0) === 46)) {
				s = s.substring(1);
				pl$1 = s.length;
				_tuple$2 = leadingInt(s);
				f = _tuple$2[0];
				s = _tuple$2[1];
				err = _tuple$2[2];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
				}
				n = pl$1 - s.length >> 0;
				while (true) {
					if (!(n > 0)) { break; }
					scale = scale * (10);
					n = n - (1) >> 0;
				}
				post = !((pl$1 === s.length));
			}
			if (!pre && !post) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			i = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				c$1 = s.charCodeAt(i);
				if ((c$1 === 46) || 48 <= c$1 && c$1 <= 57) {
					break;
				}
				i = i + (1) >> 0;
			}
			if (i === 0) {
				return [new Duration(0, 0), errors.New("time: missing unit in duration " + orig)];
			}
			u = s.substring(0, i);
			s = s.substring(i);
			_tuple$3 = (_entry = unitMap[$String.keyFor(u)], _entry !== undefined ? [_entry.v, true] : [new $Int64(0, 0), false]);
			unit = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok) {
				return [new Duration(0, 0), errors.New("time: unknown unit " + u + " in duration " + orig)];
			}
			if ((x = $div64(new $Int64(2147483647, 4294967295), unit, false), (v.$high > x.$high || (v.$high === x.$high && v.$low > x.$low)))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			v = $mul64(v, (unit));
			if ((f.$high > 0 || (f.$high === 0 && f.$low > 0))) {
				v = (x$1 = new $Int64(0, $flatten64(f) * ($flatten64(unit) / scale)), new $Int64(v.$high + x$1.$high, v.$low + x$1.$low));
				if ((v.$high < 0 || (v.$high === 0 && v.$low < 0))) {
					return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
				}
			}
			d = (x$2 = v, new $Int64(d.$high + x$2.$high, d.$low + x$2.$low));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
		}
		if (neg) {
			d = new $Int64(-d.$high, -d.$low);
		}
		return [new Duration(d.$high, d.$low), $ifaceNil];
	};
	$pkg.ParseDuration = ParseDuration;
	Time.ptr.prototype.After = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var $ptr, t, u, x, x$1;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var $ptr, m, x;
		m = this.$val;
		return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? $throwRuntimeError("index out of range") : months[x]));
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var $ptr, d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? $throwRuntimeError("index out of range") : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, l, offset, sec, t, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
				sec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$2 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				offset = _tuple$1[1];
				sec = (x$4 = new $Int64(0, offset), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			/* } */ case 8:
		/* } */ case 5:
		return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$2 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				name = _tuple$1[0];
				offset = _tuple$1[1];
			/* } */ case 9:
			sec = (x$3 = new $Int64(0, offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = (x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low));
		return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var $ptr, _r$1, _tuple$1, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var $ptr, _r$1, _tuple$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var $ptr, _r$1, _tuple$1, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		month = _tuple$1[1];
		return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var $ptr, _r$1, _tuple$1, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		day = _tuple$1[2];
		return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var $ptr, _r$1, _r$2, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absWeekday(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var $ptr, _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return ((_q = (sec.$low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.ptr.prototype.ISOWeek = function() {
		var $ptr, _q, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple$1, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple$1 = $f._tuple$1; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		_r$3 = t.Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		wday = (_r$2 = ((_r$3 + 6 >> 0) >> 0) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$4 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$5 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple$1 = _tuple$1; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var $ptr, _r$1, _r$2, _tuple$1, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absClock(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		/* */ $s = 3; case 3:
		return [hour, min, sec];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var $ptr, _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = ($div64(abs, new $Uint64(0, 86400), true).$low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return (_q = ($div64(_r$1, new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return (_q = ($div64(_r$1, new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return ($div64(_r$1, new $Uint64(0, 60), true).$low >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var $ptr, t;
		t = $clone(this, Time);
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var $ptr, _r$1, _tuple$1, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		yday = _tuple$1[3];
		return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var $ptr, _tuple$1, _tuple$2, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$4.zero();
		w = 32;
		u = new $Uint64(d.$high, d.$low);
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
			}
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			_tuple$2 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$2[0];
			u = _tuple$2[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
		}
		return $bytesToString($subslice(new sliceType$3(buf), w));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var $ptr, _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = ((digit.$low << 24 >>> 24) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var $ptr, buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = (($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var $ptr, d;
		d = this;
		return new $Int64(d.$high, d.$low);
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var $ptr, d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return $flatten64(sec) + $flatten64(nsec) * 1e-09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var $ptr, d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return $flatten64(min) + $flatten64(nsec) * 1.6666666666666667e-11;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var $ptr, d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return $flatten64(hour) + $flatten64(nsec) * 2.777777777777778e-13;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.ptr.prototype.Add = function(d) {
		var $ptr, d, nsec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = $clone(this, Time);
		t.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = t.nsec + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			t.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.nsec = nsec;
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var $ptr, d, t, u, x, x$1, x$2, x$3, x$4;
		u = $clone(u, Time);
		t = $clone(this, Time);
		d = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low)), new Duration(0, 1000000000)), x$4 = new Duration(0, (t.nsec - u.nsec >> 0)), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));
		if (u.Add(d).Equal(t)) {
			return d;
		} else if (t.Before(u)) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		_r$2 = t.Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		hour = _tuple$2[0];
		min = _tuple$2[1];
		sec = _tuple$2[2];
		_r$3 = Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var $ptr, _r$1, _r$2, _tuple$1, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absDate(_r$1, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		/* */ $s = 3; case 3:
		return [year, month, day, yday];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var $ptr, _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = ((x$9 = (x$10 = new $Int64(y.$high, y.$low), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0);
		yday = (d.$low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		end = ((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$11])) >> 0);
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = (((month < 0 || month >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[month]) >> 0);
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var $ptr, m, x, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return ((((m < 0 || m >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[m]) - (x = m - 1 >> 0, ((x < 0 || x >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x])) >> 0) >> 0);
	};
	Now = function() {
		var $ptr, _tuple$1, nsec, sec;
		_tuple$1 = now();
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), nsec, $pkg.Local);
	};
	$pkg.Now = Now;
	Time.ptr.prototype.UTC = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.UTC;
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.Local;
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var $ptr, loc, t;
		t = $clone(this, Time);
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var $ptr, l, t;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$1.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var $ptr, _r$1, _tuple$1, name, offset, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; name = $f.name; offset = $f.offset; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = $clone(this, Time);
		_r$1 = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.name = name; $f.offset = offset; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var $ptr, t, x, x$1, x$2;
		t = $clone(this, Time);
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = new $Int64(0, t.nsec), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var $ptr, _q, _r$1, _r$2, _tuple$1, enc, offset, offsetMin, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; enc = $f.enc; offset = $f.offset; offsetMin = $f.offsetMin; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		offsetMin = 0;
		/* */ if (t.Location() === utcLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.Location() === utcLoc) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = t.Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			offset = _tuple$1[1];
			if (!(((_r$2 = offset % 60, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0))) {
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		/* } */ case 3:
		enc = new sliceType$3([1, ($shiftRightInt64(t.sec, 56).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).$low << 24 >>> 24), (t.sec.$low << 24 >>> 24), ((t.nsec >> 24 >> 0) << 24 >>> 24), ((t.nsec >> 16 >> 0) << 24 >>> 24), ((t.nsec >> 8 >> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.enc = enc; $f.offset = offset; $f.offsetMin = offsetMin; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var $ptr, _r$1, _tuple$1, buf, data$1, localoff, offset, t, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; buf = $f.buf; data$1 = $f.data$1; localoff = $f.localoff; offset = $f.offset; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) === 1))) {
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, (7 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 7])), x$7 = $shiftLeft64(new $Int64(0, (6 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 6])), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, (5 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 5])), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, (4 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 4])), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, (3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3])), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, (2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2])), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, (1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1])), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, (0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0])), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = ((((3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3]) >> 0) | (((2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2]) >> 0) << 8 >> 0)) | (((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) >> 0) << 16 >> 0)) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) >> 0) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) << 16 >> 16) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0), 60);
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.loc = utcLoc;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $pkg.Local.lookup((x$14 = t.sec, new $Int64(x$14.$high + -15, x$14.$low + 2288912640))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			localoff = _tuple$1[1];
			if (offset === localoff) {
				t.loc = $pkg.Local;
			} else {
				t.loc = FixedZone("", offset);
			}
		/* } */ case 3:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.data$1 = data$1; $f.localoff = localoff; $f.offset = offset; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var $ptr, _r$1, data$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; data$1 = $f.data$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = t.UnmarshalBinary(data$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.data$1 = data$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var $ptr, _r$1, _r$2, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$2 = t.AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		b = _r$2;
		b = $append(b, 34);
		return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = this;
		_r$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var $ptr, _r$1, _r$2, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$2 = t.AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return [_r$2, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = this;
		_r$1 = Parse("2006-01-02T15:04:05Z07:00", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = function(sec, nsec) {
		var $ptr, n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), ((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0), $pkg.Local);
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var $ptr, _r$1, _r$2, _r$3, year;
		return ((_r$1 = year % 4, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$2 = year % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$3 = year % 400, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple$1 = norm(year, m, 12);
		year = _tuple$1[0];
		m = _tuple$1[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000);
		sec = _tuple$2[0];
		nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60);
		min = _tuple$3[0];
		sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60);
		hour = _tuple$4[0];
		min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24);
		day = _tuple$5[0];
		hour = _tuple$5[1];
		y = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$9]))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0)), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = new $Int64(abs.$high, abs.$low), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r$1 = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$6 = _r$1;
		offset = _tuple$6[1];
		start = _tuple$6[3];
		end = _tuple$6[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
				utc = (x$14 = new $Int64(0, offset), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
				/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
				/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
					_r$2 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$7 = _r$2;
					offset = _tuple$7[1];
					$s = 7; continue;
				/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
					_r$3 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$8 = _r$3;
					offset = _tuple$8[1];
				/* } */ case 7:
			case 4:
			unix = (x$15 = new $Int64(0, offset), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		return new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), loc);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var $ptr, _tuple$1, d, r, t;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d);
		r = _tuple$1[1];
		return t.Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var $ptr, _tuple$1, d, r, t, x;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d);
		r = _tuple$1[1];
		if ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {
			return t.Add(new Duration(-r.$high, -r.$low));
		}
		return t.Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var $ptr, _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		t = $clone(t, Time);
		neg = false;
		nsec = t.nsec;
		if ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				t.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {
			qmod2 = ((_q = nsec / ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r$1 = nsec % ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")));
		} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {
			d1 = (x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low));
			qmod2 = ((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$8 = $mul64((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low)), new Duration(0, 1000000000)), x$10 = new Duration(0, nsec), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		} else {
			sec = (x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64(new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$13 = new $Uint64(0, nsec), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));
			}
			d1$1 = new $Uint64(d.$high, d.$low);
			while (true) {
				if (!(!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));
					}
					u1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = new $Uint64(d.$high, d.$low), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = new Duration(u0.$high, u0.$low);
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var $ptr, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$1.nil) {
			return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.$ptr = $ptr; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var $ptr, _r$1, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1.name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var $ptr, l, name, offset, x;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var $ptr, _q, _r$1, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).when;
		return [name, offset, isDST, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var $ptr, _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).isDST) {
			zi = ((x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).index >> 0) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var $ptr, _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var $ptr, _i, _i$1, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, i, i$1, isDST, isDST$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple$1 = $f._tuple$1; i = $f.i; i$1 = $f.i$1; isDST = $f.isDST; isDST$1 = $f.isDST$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$2 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				nam = _tuple$1[0];
				offset$1 = _tuple$1[1];
				isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = isDST$1;
					_tmp$2 = true;
					offset = _tmp;
					isDST = _tmp$1;
					ok = _tmp$2;
					return [offset, isDST, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset;
				_tmp$4 = zone$2.isDST;
				_tmp$5 = true;
				offset = _tmp$3;
				isDST = _tmp$4;
				ok = _tmp$5;
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		return [offset, isDST, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple$1 = _tuple$1; $f.i = i; $f.i$1 = i$1; $f.isDST = isDST; $f.isDST$1 = isDST$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$1], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$6.methods = [{prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$1.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$1], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	ParseError.init([{prop: "Layout", name: "Layout", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", pkg: "", typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", pkg: "", typ: $String, tag: ""}, {prop: "Message", name: "Message", pkg: "", typ: $String, tag: ""}]);
	Time.init([{prop: "sec", name: "sec", pkg: "time", typ: $Int64, tag: ""}, {prop: "nsec", name: "nsec", pkg: "time", typ: $Int32, tag: ""}, {prop: "loc", name: "loc", pkg: "time", typ: ptrType$1, tag: ""}]);
	Location.init([{prop: "name", name: "name", pkg: "time", typ: $String, tag: ""}, {prop: "zone", name: "zone", pkg: "time", typ: sliceType, tag: ""}, {prop: "tx", name: "tx", pkg: "time", typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", pkg: "time", typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", pkg: "time", typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", pkg: "time", typ: ptrType, tag: ""}]);
	zone.init([{prop: "name", name: "name", pkg: "time", typ: $String, tag: ""}, {prop: "offset", name: "offset", pkg: "time", typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", pkg: "time", typ: $Bool, tag: ""}]);
	zoneTrans.init([{prop: "when", name: "when", pkg: "time", typ: $Int64, tag: ""}, {prop: "index", name: "index", pkg: "time", typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", pkg: "time", typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", pkg: "time", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		unitMap = $makeMap($String.keyFor, [{ k: "ns", v: new $Int64(0, 1) }, { k: "us", v: new $Int64(0, 1000) }, { k: "\xC2\xB5s", v: new $Int64(0, 1000) }, { k: "\xCE\xBCs", v: new $Int64(0, 1000) }, { k: "ms", v: new $Int64(0, 1000000) }, { k: "s", v: new $Int64(0, 1000000000) }, { k: "m", v: new $Int64(13, 4165425152) }, { k: "h", v: new $Int64(838, 817405952) }]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		_r = syscall.Getenv("ZONEINFO"); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		zoneDirs = new sliceType$2(["/usr/share/zoneinfo/", "/usr/share/lib/zoneinfo/", "/usr/lib/locale/TZ/", runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, io, runtime, sync, atomic, syscall, time, PathError, SyscallError, LinkError, File, file, dirInfo, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, sliceType$2, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$12, funcType$1, ptrType$13, arrayType$1, arrayType$5, ptrType$15, errFinished, lstat, runtime_args, init, runtime_beforeExit, NewSyscallError, IsNotExist, isNotExist, fixCount, sigpipe, syscallMode, NewFile, epipecheck, Lstat, basename, init$1, Exit, fillFileStatFromSys, timespecToTime;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", "PathError", "os", function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", "SyscallError", "os", function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", "LinkError", "os", function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", "File", "os", function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$12.nil;
			return;
		}
		this.file = file_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", "file", "os", function(fd_, name_, dirinfo_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fd = 0;
			this.name = "";
			this.dirinfo = ptrType.nil;
			return;
		}
		this.fd = fd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", "dirInfo", "os", function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$1.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", "FileInfo", "os", null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", "FileMode", "os", null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", "fileStat", "os", function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil);
			this.sys = new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero());
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(dirInfo);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType(FileInfo);
	ptrType$1 = $ptrType(File);
	ptrType$2 = $ptrType(PathError);
	ptrType$3 = $ptrType(LinkError);
	ptrType$4 = $ptrType(SyscallError);
	ptrType$12 = $ptrType(file);
	funcType$1 = $funcType([ptrType$12], [$error], false);
	ptrType$13 = $ptrType(time.Location);
	arrayType$1 = $arrayType($Int64, 3);
	arrayType$5 = $arrayType($Uint8, 32);
	ptrType$15 = $ptrType(fileStat);
	runtime_args = function() {
		var $ptr;
		return $pkg.Args;
	};
	init = function() {
		var $ptr, argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError("index out of range") : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	runtime_beforeExit = function() {
		var $ptr;
	};
	File.ptr.prototype.readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, d, err, errno, f, n, names, nb, nc, size;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType.nil) {
			f.file.dirinfo = new dirInfo.ptr(sliceType$1.nil, 0, 0);
			f.file.dirinfo.buf = $makeSlice(sliceType$1, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType, 0, size);
		while (true) {
			if (!(!((n === 0)))) { break; }
			if (d.bufp >= d.nbuf) {
				d.bufp = 0;
				errno = $ifaceNil;
				_tuple$1 = syscall.ReadDirent(f.file.fd, d.buf);
				_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = NewSyscallError("readdirent", errno);
					names = _tmp;
					err = _tmp$1;
					return [names, err];
				}
				if (d.nbuf <= 0) {
					break;
				}
			}
			_tmp$2 = 0;
			_tmp$3 = 0;
			nb = _tmp$2;
			nc = _tmp$3;
			_tuple$2 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names);
			nb = _tuple$2[0];
			nc = _tuple$2[1];
			names = _tuple$2[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		}
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names;
			_tmp$5 = io.EOF;
			names = _tmp$4;
			err = _tmp$5;
			return [names, err];
		}
		_tmp$6 = names;
		_tmp$7 = $ifaceNil;
		names = _tmp$6;
		err = _tmp$7;
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	File.ptr.prototype.Readdir = function(n) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, err, f, fi, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; fi = $f.fi; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$2.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = sliceType$2.nil;
			_tmp$1 = $pkg.ErrInvalid;
			fi = _tmp;
			err = _tmp$1;
			return [fi, err];
		}
		_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fi = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.fi = fi; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, n, names;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			return [names, err];
		}
		_tuple = f.readdirnames(n);
		names = _tuple[0];
		err = _tuple[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return e.Op + " " + e.Path + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return e.Syscall + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = function(syscall$1, err) {
		var $ptr, err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsNotExist = function(err) {
		var $ptr, err;
		return isNotExist(err);
	};
	$pkg.IsNotExist = IsNotExist;
	isNotExist = function(err) {
		var $ptr, _ref, err, pe, pe$1, pe$2, pe$3;
		_ref = err;
		if (_ref === $ifaceNil) {
			pe = _ref;
			return false;
		} else if ($assertType(_ref, ptrType$2, true)[1]) {
			pe$1 = _ref.$val;
			err = pe$1.Err;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			pe$2 = _ref.$val;
			err = pe$2.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			pe$3 = _ref.$val;
			err = pe$3.Err;
		}
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	File.ptr.prototype.Name = function() {
		var $ptr, f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.read(b);
		n = _tuple[0];
		e = _tuple[1];
		if ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("read", f.file.name, e);
		}
		_tmp$4 = n;
		_tmp$5 = err;
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pread(b, off);
			m = _tuple[0];
			e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {
				_tmp$2 = n;
				_tmp$3 = io.EOF;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.write(b);
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("write", f.file.name, e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tuple, b, e, err, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pwrite(b, off);
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, f, offset, r, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $pkg.ErrInvalid;
			ret = _tmp;
			err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.seek(offset, whence);
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = new PathError.ptr("seek", f.file.name, e);
			ret = _tmp$2;
			err = _tmp$3;
			return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, n, s;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.Write(new sliceType$1($stringToBytes(s)));
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.Chdir = function() {
		var $ptr, e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chdir", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	fixCount = function(n, err) {
		var $ptr, err, n;
		if (n < 0) {
			n = 0;
		}
		return [n, err];
	};
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var $ptr, i, o;
		o = 0;
		o = (o | ((new FileMode(i).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.Chmod = function(mode) {
		var $ptr, e, f, mode;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var $ptr, e, f, gid, uid;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chown", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var $ptr, e, f, size;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("truncate", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var $ptr, e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return NewSyscallError("fsync", e);
		}
		return $ifaceNil;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Fd = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType$1.nil) {
			return 4294967295;
		}
		return (f.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var $ptr, f, fd, fdi, name;
		fdi = (fd >> 0);
		if (fdi < 0) {
			return ptrType$1.nil;
		}
		f = new File.ptr(new file.ptr(fdi, name, ptrType.nil));
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$12, "close")));
		return f;
	};
	$pkg.NewFile = NewFile;
	epipecheck = function(file$1, e) {
		var $ptr, e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32)) && ((file$1.file.fd === 1) || (file$1.file.fd === 2))) {
			sigpipe();
		}
	};
	File.ptr.prototype.Close = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		return f.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var $ptr, e, err, file$1;
		file$1 = this;
		if (file$1 === ptrType$12.nil || file$1.fd < 0) {
			return new syscall.Errno(22);
		}
		err = $ifaceNil;
		e = syscall.Close(file$1.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("close", file$1.name, e);
		}
		file$1.fd = -1;
		runtime.SetFinalizer(file$1, $ifaceNil);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.Stat = function() {
		var $ptr, err, f, fs;
		f = this;
		if (f === ptrType$1.nil) {
			return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil), new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero()));
		err = syscall.Fstat(f.file.fd, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs, f.file.name);
		return [fs, $ifaceNil];
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Lstat = function(name) {
		var $ptr, err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil), new syscall.Stat_t.ptr(new $Uint64(0, 0), new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Uint64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), arrayType$1.zero()));
		err = syscall.Lstat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("lstat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	$pkg.Lstat = Lstat;
	File.ptr.prototype.readdir = function(n) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$2.nil;
		err = $ifaceNil;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_tuple = f.Readdirnames(n);
		names = _tuple[0];
		err = _tuple[1];
		fi = $makeSlice(sliceType$2, 0, names.$length);
		_ref = names;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = lstat(dirname + "/" + filename); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			fip = _tuple$1[0];
			lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi;
				_tmp$1 = lerr;
				fi = _tmp;
				err = _tmp$1;
				return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = fi;
		_tmp$3 = err;
		fi = _tmp$2;
		err = _tmp$3;
		return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.read = function(b) {
		var $ptr, _tuple, _tuple$1, b, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (false && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Read(f.file.fd, b);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (false && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pread(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var $ptr, _tmp, _tmp$1, _tuple, _tuple$1, b, bcap, err, err$1, f, m, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		while (true) {
			bcap = b;
			if (false && bcap.$length > 1073741824) {
				bcap = $subslice(bcap, 0, 1073741824);
			}
			_tuple$1 = syscall.Write(f.file.fd, bcap);
			_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
			m = _tuple[0];
			err$1 = _tuple[1];
			n = n + (m) >> 0;
			if (0 < m && m < bcap.$length || $interfaceIsEqual(err$1, new syscall.Errno(4))) {
				b = $subslice(b, m);
				continue;
			}
			if (false && !((bcap.$length === b.$length)) && $interfaceIsEqual(err$1, $ifaceNil)) {
				b = $subslice(b, m);
				continue;
			}
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (false && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pwrite(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var $ptr, _tuple, err, f, offset, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		_tuple = syscall.Seek(f.file.fd, offset, whence);
		ret = _tuple[0];
		err = _tuple[1];
		return [ret, err];
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	basename = function(name) {
		var $ptr, i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = name.substring(0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = name.substring((i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$1 = function() {
		var $ptr;
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	Exit = function(code) {
		var $ptr, code;
		if (code === 0) {
			runtime_beforeExit();
		}
		syscall.Exit(code);
	};
	$pkg.Exit = Exit;
	fillFileStatFromSys = function(fs, name) {
		var $ptr, _1, fs, name;
		fs.name = basename(name);
		fs.size = fs.sys.Size;
		time.Time.copy(fs.modTime, timespecToTime(fs.sys.Mtim));
		fs.mode = (((fs.sys.Mode & 511) >>> 0) >>> 0);
		_1 = (fs.sys.Mode & 61440) >>> 0;
		if (_1 === 24576) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_1 === 8192) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_1 === 16384) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_1 === 4096) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_1 === 40960) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_1 === 32768) {
		} else if (_1 === 49152) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((fs.sys.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((fs.sys.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((fs.sys.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
	};
	timespecToTime = function(ts) {
		var $ptr, ts;
		ts = $clone(ts, syscall.Timespec);
		return time.Unix(ts.Sec, ts.Nsec);
	};
	FileMode.prototype.String = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType$5.zero();
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c << 24 >>> 24));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c$1 << 24 >>> 24));
			} else {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return $bytesToString($subslice(new sliceType$1(buf), 0, w));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var $ptr, m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var $ptr, m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var $ptr, m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var $ptr, fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var $ptr, fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var $ptr, fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var $ptr, fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var $ptr, fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var $ptr, fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}];
	ptrType$12.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$15.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	PathError.init([{prop: "Op", name: "Op", pkg: "", typ: $String, tag: ""}, {prop: "Path", name: "Path", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	SyscallError.init([{prop: "Syscall", name: "Syscall", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	LinkError.init([{prop: "Op", name: "Op", pkg: "", typ: $String, tag: ""}, {prop: "Old", name: "Old", pkg: "", typ: $String, tag: ""}, {prop: "New", name: "New", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	File.init([{prop: "file", name: "", pkg: "os", typ: ptrType$12, tag: ""}]);
	file.init([{prop: "fd", name: "fd", pkg: "os", typ: $Int, tag: ""}, {prop: "name", name: "name", pkg: "os", typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", pkg: "os", typ: ptrType, tag: ""}]);
	dirInfo.init([{prop: "buf", name: "buf", pkg: "os", typ: sliceType$1, tag: ""}, {prop: "nbuf", name: "nbuf", pkg: "os", typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", pkg: "os", typ: $Int, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init([{prop: "name", name: "name", pkg: "os", typ: $String, tag: ""}, {prop: "size", name: "size", pkg: "os", typ: $Int64, tag: ""}, {prop: "mode", name: "mode", pkg: "os", typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", pkg: "os", typ: time.Time, tag: ""}, {prop: "sys", name: "sys", pkg: "os", typ: syscall.Stat_t, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		errFinished = errors.New("os: process already finished");
		$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		lstat = Lstat;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, mapIter, Type, Kind, rtype, typeAlg, method, uncommonType, ChanDir, arrayType, chanType, funcType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, StructField, StructTag, fieldScan, Value, flag, ValueError, nonEmptyInterface, ptrType$1, sliceType$1, sliceType$2, ptrType$3, funcType$1, sliceType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$4, sliceType$5, sliceType$6, structType$6, sliceType$7, sliceType$8, ptrType$8, arrayType$1, structType$7, ptrType$9, sliceType$9, ptrType$10, ptrType$11, ptrType$12, sliceType$11, sliceType$12, ptrType$13, sliceType$13, ptrType$18, sliceType$15, funcType$3, funcType$4, funcType$5, arrayType$3, ptrType$20, initialized, stringPtrMap, callHelper, jsObjectPtr, selectHelper, kindNames, uint8Type, init, jsType, reflectType, setKindType, newStringPtr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, makemap, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, typesMustMatch, MakeMap, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", "mapIter", "reflect", function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", "Type", "reflect", null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", "Kind", "reflect", null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", "rtype", "reflect", function(size_, ptrdata_, hash_, _$3_, align_, fieldAlign_, kind_, alg_, gcdata_, string_, uncommonType_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this._$3 = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$4.nil;
			this.gcdata = ptrType$5.nil;
			this.string = ptrType$6.nil;
			this.uncommonType = ptrType$7.nil;
			this.ptrToThis = ptrType$1.nil;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this._$3 = _$3_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gcdata = gcdata_;
		this.string = string_;
		this.uncommonType = uncommonType_;
		this.ptrToThis = ptrToThis_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", "typeAlg", "reflect", function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", "method", "reflect", function(name_, pkgPath_, mtyp_, typ_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$6.nil;
			this.pkgPath = ptrType$6.nil;
			this.mtyp = ptrType$1.nil;
			this.typ = ptrType$1.nil;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.mtyp = mtyp_;
		this.typ = typ_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", "uncommonType", "reflect", function(name_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$6.nil;
			this.pkgPath = ptrType$6.nil;
			this.methods = sliceType$4.nil;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", "ChanDir", "reflect", null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", "arrayType", "reflect", function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", "chanType", "reflect", function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", "funcType", "reflect", function(rtype_, dotdotdot_, in$2_, out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.dotdotdot = false;
			this.in$2 = sliceType$1.nil;
			this.out = sliceType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.dotdotdot = dotdotdot_;
		this.in$2 = in$2_;
		this.out = out_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", "imethod", "reflect", function(name_, pkgPath_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$6.nil;
			this.pkgPath = ptrType$6.nil;
			this.typ = ptrType$1.nil;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", "interfaceType", "reflect", function(rtype_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.methods = sliceType$5.nil;
			return;
		}
		this.rtype = rtype_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", "mapType", "reflect", function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_, needkeyupdate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			this.reflexivekey = false;
			this.needkeyupdate = false;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
		this.reflexivekey = reflexivekey_;
		this.needkeyupdate = needkeyupdate_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", "ptrType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", "sliceType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", "structField", "reflect", function(name_, pkgPath_, typ_, tag_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$6.nil;
			this.pkgPath = ptrType$6.nil;
			this.typ = ptrType$1.nil;
			this.tag = ptrType$6.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.typ = typ_;
		this.tag = tag_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", "structType", "reflect", function(rtype_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.fields = sliceType$6.nil;
			return;
		}
		this.rtype = rtype_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", "Method", "reflect", function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", "StructField", "reflect", function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$11.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", "StructTag", "reflect", null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", "fieldScan", "reflect", function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$13.nil;
			this.index = sliceType$11.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", "Value", "reflect", function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", "flag", "reflect", null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", "ValueError", "reflect", function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	nonEmptyInterface = $pkg.nonEmptyInterface = $newType(0, $kindStruct, "reflect.nonEmptyInterface", "nonEmptyInterface", "reflect", function(itab_, word_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.itab = ptrType$9.nil;
			this.word = 0;
			return;
		}
		this.itab = itab_;
		this.word = word_;
	});
	ptrType$1 = $ptrType(rtype);
	sliceType$1 = $sliceType(ptrType$1);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$2], [ptrType$3], true);
	sliceType$3 = $sliceType($String);
	ptrType$4 = $ptrType(typeAlg);
	ptrType$5 = $ptrType($Uint8);
	ptrType$6 = $ptrType($String);
	ptrType$7 = $ptrType(uncommonType);
	sliceType$4 = $sliceType(method);
	sliceType$5 = $sliceType(imethod);
	sliceType$6 = $sliceType(structField);
	structType$6 = $structType([{prop: "str", name: "str", pkg: "reflect", typ: $String, tag: ""}]);
	sliceType$7 = $sliceType(ptrType$3);
	sliceType$8 = $sliceType(Value);
	ptrType$8 = $ptrType(nonEmptyInterface);
	arrayType$1 = $arrayType($UnsafePointer, 100000);
	structType$7 = $structType([{prop: "ityp", name: "ityp", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "link", name: "link", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "bad", name: "bad", pkg: "reflect", typ: $Int32, tag: ""}, {prop: "unused", name: "unused", pkg: "reflect", typ: $Int32, tag: ""}, {prop: "fun", name: "fun", pkg: "reflect", typ: arrayType$1, tag: ""}]);
	ptrType$9 = $ptrType(structType$7);
	sliceType$9 = $sliceType(sliceType$7);
	ptrType$10 = $ptrType(method);
	ptrType$11 = $ptrType(interfaceType);
	ptrType$12 = $ptrType(imethod);
	sliceType$11 = $sliceType($Int);
	sliceType$12 = $sliceType(fieldScan);
	ptrType$13 = $ptrType(structType);
	sliceType$13 = $sliceType($Uint8);
	ptrType$18 = $ptrType($UnsafePointer);
	sliceType$15 = $sliceType($Int32);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	arrayType$3 = $arrayType($Uintptr, 2);
	ptrType$20 = $ptrType(ValueError);
	init = function() {
		var $ptr, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var $ptr, i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(ptrType$6.nil, ptrType$6.nil, sliceType$4.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(ptrType$6.nil, ptrType$6.nil, ptrType$1.nil, ptrType$1.nil, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), false, sliceType$1.nil, sliceType$1.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), sliceType$5.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), sliceType$6.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(ptrType$6.nil, ptrType$6.nil, ptrType$1.nil), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(ptrType$6.nil, ptrType$6.nil, ptrType$1.nil, ptrType$6.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var $ptr, typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var $ptr, _1, _i, _i$1, _i$2, _i$3, _i$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, out, params, reflectFields, reflectMethods, results, rt, t, typ;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr((($parseInt(typ.size) >> 0) >>> 0), 0, 0, 0, 0, 0, (($parseInt(typ.kind) >> 0) << 24 >>> 24), ptrType$4.nil, ptrType$5.nil, newStringPtr(typ.string), ptrType$7.nil, ptrType$1.nil);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!($internalize(typ.typeName, $String) === "") || !(($parseInt(methodSet.length) === 0))) {
				reflectMethods = $makeSlice(sliceType$4, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					t = m.typ;
					method.copy(((i < 0 || i >= reflectMethods.$length) ? $throwRuntimeError("index out of range") : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newStringPtr(m.name), newStringPtr(m.pkg), reflectType(t), reflectType($funcType(new ($global.Array)(typ).concat(t.params), t.results, t.variadic)), 0, 0));
					_i++;
				}
				rt.uncommonType = new uncommonType.ptr(newStringPtr(typ.typeName), newStringPtr(typ.pkg), reflectMethods);
				rt.uncommonType.jsType = typ;
			}
			_1 = rt.Kind();
			if (_1 === 17) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), reflectType(typ.elem), ptrType$1.nil, (($parseInt(typ.len) >> 0) >>> 0)));
			} else if (_1 === 18) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), reflectType(typ.elem), (dir >>> 0)));
			} else if (_1 === 19) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$1, $parseInt(params.length));
				_ref$1 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$1, $parseInt(results.length));
				_ref$2 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), !!(typ.variadic), in$1, out));
			} else if (_1 === 20) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$5, $parseInt(methods.length));
				_ref$3 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					imethod.copy(((i$3 < 0 || i$3 >= imethods.$length) ? $throwRuntimeError("index out of range") : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newStringPtr(m$1.name), newStringPtr(m$1.pkg), reflectType(m$1.typ)));
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), imethods));
			} else if (_1 === 21) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false));
			} else if (_1 === 22) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), reflectType(typ.elem)));
			} else if (_1 === 23) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), reflectType(typ.elem)));
			} else if (_1 === 25) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$6, $parseInt(fields.length));
				_ref$4 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					structField.copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? $throwRuntimeError("index out of range") : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr(newStringPtr(f.name), newStringPtr(f.pkg), reflectType(f.typ), newStringPtr(f.tag), (i$4 >>> 0)));
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), reflectFields));
			}
		}
		return typ.reflectType;
	};
	setKindType = function(rt, kindType) {
		var $ptr, kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	newStringPtr = function(strObj) {
		var $ptr, _entry, _key, _tuple, c, ok, ptr, str, str$24ptr, strObj;
		c = new structType$6.ptr("");
		c.str = strObj;
		str = c.str;
		if (str === "") {
			return ptrType$6.nil;
		}
		_tuple = (_entry = stringPtrMap[$String.keyFor(str)], _entry !== undefined ? [_entry.v, true] : [ptrType$6.nil, false]);
		ptr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			ptr = (str$24ptr || (str$24ptr = new ptrType$6(function() { return str; }, function($v) { str = $v; })));
			_key = str; (stringPtrMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: ptr };
		}
		return ptr;
	};
	isWrapped = function(typ) {
		var $ptr, typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var $ptr, dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return new Value.ptr(rt, v, (fl | (_r$4 >>> 0)) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ $s = 12; case 12:
		return new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (_r$5 >>> 0)) >>> 0) | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var $ptr, _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var $ptr, _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ $s = 3; case 3:
			return _r$2.zero();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var $ptr, i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	rtype.ptr.prototype.ptrTo = function() {
		var $ptr, t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var $ptr, t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var $ptr, _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f.$ptr = $ptr; $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var $ptr, _3, typ;
		_3 = typ.Kind();
		if (_3 === 25) {
			return new (jsType(typ).ptr)();
		} else if (_3 === 17) {
			return jsType(typ).zero();
		} else {
			return $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));
		}
	};
	makeInt = function(f, bits, t) {
		var $ptr, _4, _r, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_4 = typ.Kind();
		if (_4 === 3) {
			ptr.$set((bits.$low << 24 >> 24));
		} else if (_4 === 4) {
			ptr.$set((bits.$low << 16 >> 16));
		} else if ((_4 === 2) || (_4 === 5)) {
			ptr.$set((bits.$low >> 0));
		} else if (_4 === 6) {
			ptr.$set(new $Int64(bits.$high, bits.$low));
		} else if (_4 === 8) {
			ptr.$set((bits.$low << 24 >>> 24));
		} else if (_4 === 9) {
			ptr.$set((bits.$low << 16 >>> 16));
		} else if ((_4 === 7) || (_4 === 10) || (_4 === 12)) {
			ptr.$set((bits.$low >>> 0));
		} else if (_4 === 11) {
			ptr.$set(bits);
		}
		return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f.$ptr = $ptr; $f._4 = _4; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var $ptr, dst, src, t;
		dst.$set(src.$get());
	};
	makemap = function(t) {
		var $ptr, m, t;
		m = 0;
		m = new ($global.Object)();
		return m;
	};
	keyFor = function(t, key) {
		var $ptr, k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var $ptr, _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));
	};
	mapassign = function(t, m, key, val) {
		var $ptr, _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var $ptr, _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var $ptr, m, t;
		return new mapIter.ptr(t, m, $keys(m), 0);
	};
	mapiterkey = function(it) {
		var $ptr, _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = it;
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2);
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var $ptr, it, iter;
		iter = it;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var $ptr, m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var $ptr, _6, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _6 = $f._6; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		srcVal = v.object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_6 = k;
			/* */ if (_6 === 23) { $s = 7; continue; }
			/* */ if (_6 === 22) { $s = 8; continue; }
			/* */ if (_6 === 25) { $s = 9; continue; }
			/* */ if ((_6 === 17) || (_6 === 1) || (_6 === 18) || (_6 === 19) || (_6 === 20) || (_6 === 21) || (_6 === 24)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_6 === 23) { */ case 7:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 12; continue;
			/* } else if (_6 === 22) { */ case 8:
				_r$2 = typ.Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 25) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_r$3 === 25) { */ case 13:
					_r$4 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 17:
						val = srcVal;
						/* break; */ $s = 5; continue;
					/* } */ case 18:
					val = new (jsType(typ))();
					_arg = val;
					_arg$1 = srcVal;
					_r$5 = typ.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = _r$5;
					$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 5; continue;
				/* } */ case 14:
				val = new (jsType(typ))(srcVal.$get, srcVal.$set);
				$s = 12; continue;
			/* } else if (_6 === 25) { */ case 9:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 12; continue;
			/* } else if ((_6 === 17) || (_6 === 1) || (_6 === 18) || (_6 === 19) || (_6 === 20) || (_6 === 21) || (_6 === 24)) { */ case 10:
				val = v.ptr;
				$s = 12; continue;
			/* } else { */ case 11:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 12:
		case 5:
		_r$6 = typ.common(); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ $s = 24; case 24:
		return new Value.ptr(_r$6, val, (((v.flag & 224) >>> 0) | (_r$7 >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f.$ptr = $ptr; $f._6 = _6; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Copy = function(dst, src) {
		var $ptr, dk, dst, dstVal, sk, src, srcVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; dk = $f.dk; dst = $f.dst; dstVal = $f.dstVal; sk = $f.sk; src = $f.src; srcVal = $f.srcVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		src = src;
		dst = dst;
		dk = new flag(dst.flag).kind();
		if (!((dk === 17)) && !((dk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", dk));
		}
		if (dk === 17) {
			new flag(dst.flag).mustBeAssignable();
		}
		new flag(dst.flag).mustBeExported();
		sk = new flag(src.flag).kind();
		if (!((sk === 17)) && !((sk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", sk));
		}
		new flag(src.flag).mustBeExported();
		$r = typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		dstVal = dst.object();
		if (dk === 17) {
			dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
		}
		srcVal = src.object();
		if (sk === 17) {
			srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
		}
		return $parseInt($copySlice(dstVal, srcVal)) >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.$ptr = $ptr; $f.dk = dk; $f.dst = dst; $f.dstVal = dstVal; $f.sk = sk; $f.src = src; $f.srcVal = srcVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	methodReceiver = function(op, v, i) {
		var $ptr, fn, i, iface, m, m$1, op, prop, rcvr, rcvrtype, t, tt, ut, v, x, x$1;
		rcvrtype = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		v = v;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!(m.pkgPath === ptrType$6.nil)) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			iface = $pointerOfStructConversion(v.ptr, ptrType$8);
			if (iface.itab === ptrType$9.nil) {
				$panic(new $String("reflect: " + op + " of method on nil interface value"));
			}
			t = m.typ;
			prop = m.name.$get();
		} else {
			ut = v.typ.uncommonType.uncommon();
			if (ut === ptrType$7.nil || i < 0 || i >= ut.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			if (!(m$1.pkgPath === ptrType$6.nil)) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = m$1.mtyp;
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = v.object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = rcvr[$externalize(prop, $String)];
		return [rcvrtype, t, fn];
	};
	valueInterface = function(v, safe) {
		var $ptr, _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			return new (jsType(v.typ))(v.object());
		}
		return v.object();
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f.$ptr = $ptr; $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var $ptr, dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		var $ptr;
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var $ptr, _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		v = v;
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, v, (v.flag >> 0) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = v.object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = $makeFunc((function(fn, rcvr) { return function(arguments$1) {
			var $ptr, arguments$1;
			return fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$7));
		}; })(fn, rcvr));
		_r = v.Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return new Value.ptr(_r, fv, (((v.flag & 96) >>> 0) | 19) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var $ptr, _7, t;
		t = this;
		_7 = t.Kind();
		if ((_7 === 22) || (_7 === 21) || (_7 === 18) || (_7 === 19) || (_7 === 25) || (_7 === 17)) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var $ptr, _8, _r, _r$1, _r$2, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _8 = $f._8; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_8 = t.Kind();
			/* */ if ((_8 === 19) || (_8 === 23) || (_8 === 21)) { $s = 2; continue; }
			/* */ if (_8 === 17) { $s = 3; continue; }
			/* */ if (_8 === 25) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_8 === 19) || (_8 === 23) || (_8 === 21)) { */ case 2:
				return false;
			/* } else if (_8 === 17) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 7; case 7:
				return _r;
			/* } else if (_8 === 25) { */ case 4:
				i = 0;
				/* while (true) { */ case 8:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 9; continue; }
					_r$1 = t.Field(i); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = _r$1.Type.Comparable(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (!_r$2) { */ case 10:
						return false;
					/* } */ case 11:
					i = i + (1) >> 0;
				/* } */ $s = 8; continue; case 9:
			/* } */ case 5:
		case 1:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f.$ptr = $ptr; $f._8 = _8; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	uncommonType.ptr.prototype.Method = function(i) {
		var $ptr, fl, fn, i, m, mt, p, prop, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t === ptrType$7.nil || i < 0 || i >= t.methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		if (!(p.name === ptrType$6.nil)) {
			m.Name = p.name.$get();
		}
		fl = 19;
		if (!(p.pkgPath === ptrType$6.nil)) {
			m.PkgPath = p.pkgPath.$get();
			fl = (fl | (32)) >>> 0;
		}
		mt = p.typ;
		m.Type = mt;
		prop = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = $makeFunc((function(arguments$1) {
			var $ptr, arguments$1, rcvr;
			rcvr = (0 >= arguments$1.$length ? $throwRuntimeError("index out of range") : arguments$1.$array[arguments$1.$offset + 0]);
			return rcvr[$externalize(prop, $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$7));
		}));
		m.Func = new Value.ptr(mt, fn, fl);
		m.Index = i;
		return m;
	};
	uncommonType.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var $ptr, _9, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_9 = v.typ.Kind();
					if ((_9 === 11) || (_9 === 6)) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_9 === 15) || (_9 === 16)) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_9 === 23) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var $ptr, _10, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _10 = $f._10; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = v.typ;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 512) >>> 0) === 0))) {
			_tuple = methodReceiver(op, v, (v.flag >> 0) >> 10 >> 0);
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = v.object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			fn = v.object();
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (x.Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = ((i < 0 || i >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i]).Type();
			_tmp$1 = t.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x$1]));
				xt$1 = x$2.Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = slice.Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = _r$8.Set(x$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$8, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$9 = t.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = arg.assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = _r$10.object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		/* } */ $s = 21; continue; case 22:
		_r$13 = callHelper(new sliceType$2([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
			_10 = nout;
			/* */ if (_10 === 0) { $s = 29; continue; }
			/* */ if (_10 === 1) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (_10 === 0) { */ case 29:
				return sliceType$8.nil;
			/* } else if (_10 === 1) { */ case 30:
				_r$14 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ $s = 34; case 34:
				return new sliceType$8([$clone(_r$14, Value)]);
			/* } else { */ case 31:
				ret = $makeSlice(sliceType$8, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 35:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 36; continue; }
					i$3 = _i$2;
					_r$15 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 37; case 37: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i$3] = _r$15);
					_i$2++;
				/* } */ $s = 35; continue; case 36:
				return ret;
			/* } */ case 32:
		case 28:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f.$ptr = $ptr; $f._10 = _10; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var $ptr, _11, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_11 = k;
		if (_11 === 17) {
			return v.typ.Len();
		} else if ((_11 === 18) || (_11 === 23)) {
			return $parseInt(v.object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var $ptr, _12, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _12 = $f._12; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_12 = k;
			/* */ if (_12 === 20) { $s = 2; continue; }
			/* */ if (_12 === 22) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_12 === 20) { */ case 2:
				val = v.object();
				if (val === $ifaceNil) {
					return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, (v.flag & 96) >>> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 7; case 7:
				return _r;
			/* } else if (_12 === 22) { */ case 3:
				if (v.IsNil()) {
					return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = v.object();
				tt = v.typ.kindType;
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | ((tt.elem.Kind() >>> 0))) >>> 0;
				return new Value.ptr(tt.elem, wrapJsObject(tt.elem, val$1), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f.$ptr = $ptr; $f._12 = _12; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		if (i < 0 || i >= tt.fields.$length) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | (typ[0].Kind() >>> 0)) >>> 0;
		if (!(field.pkgPath === ptrType$6.nil)) {
			if (field.name === ptrType$6.nil) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = (x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).tag;
		/* */ if (!(tag === ptrType$6.nil) && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === ptrType$6.nil) && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag.$get());
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = v.Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = v.object().object;
						return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							var $ptr;
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var $ptr, x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ)), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				var $ptr;
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var $ptr, x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ)), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 16; case 16:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var $ptr, _tuple, i, name, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (name === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var $ptr, _13, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _13 = $f._13; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_13 = k;
			/* */ if (_13 === 17) { $s = 2; continue; }
			/* */ if (_13 === 23) { $s = 3; continue; }
			/* */ if (_13 === 24) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_13 === 17) { */ case 2:
				tt = v.typ.kindType;
				if (i[0] < 0 || i[0] > (tt.len >> 0)) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ$1[0] = tt.elem;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | ((typ$1[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 7:
					return new Value.ptr(typ$1[0], new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ$1[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl);
				/* } */ case 8:
				_r = makeValue(typ$1[0], wrapJsObject(typ$1[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 10; case 10:
				return _r;
			/* } else if (_13 === 23) { */ case 3:
				s = v.object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = v.typ.kindType;
				typ[0] = tt$1.elem;
				fl$1 = (384 | ((v.flag & 96) >>> 0)) >>> 0;
				fl$1 = (fl$1 | ((typ[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 11:
					return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a$1[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl$1);
				/* } */ case 12:
				_r$1 = makeValue(typ[0], wrapJsObject(typ[0], a$1[0][i[0]]), fl$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ $s = 14; case 14:
				return _r$1;
			/* } else if (_13 === 24) { */ case 4:
				str = v.ptr.$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((v.flag & 96) >>> 0) | 8) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				return new Value.ptr(uint8Type, (c.$ptr || (c.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c))), (fl$2 | 128) >>> 0);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._13 = _13; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var $ptr, v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var $ptr, _14, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_14 = k;
		if ((_14 === 22) || (_14 === 23)) {
			return v.object() === jsType(v.typ).nil;
		} else if (_14 === 18) {
			return v.object() === $chanNil;
		} else if (_14 === 19) {
			return v.object() === $throwNilPointerError;
		} else if (_14 === 21) {
			return v.object() === false;
		} else if (_14 === 20) {
			return v.object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var $ptr, _15, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_15 = k;
		if ((_15 === 17) || (_15 === 24)) {
			return $parseInt(v.object().length);
		} else if (_15 === 23) {
			return $parseInt(v.object().$length) >> 0;
		} else if (_15 === 18) {
			return $parseInt(v.object().$buffer.length) >> 0;
		} else if (_15 === 21) {
			return $parseInt($keys(v.object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var $ptr, _16, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_16 = k;
		if ((_16 === 18) || (_16 === 21) || (_16 === 22) || (_16 === 26)) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object();
		} else if (_16 === 19) {
			if (v.IsNil()) {
				return 0;
			}
			return 1;
		} else if (_16 === 23) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var $ptr, _17, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _17 = $f._17; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_17 = v.typ.Kind();
				/* */ if (_17 === 17) { $s = 5; continue; }
				/* */ if (_17 === 20) { $s = 6; continue; }
				/* */ if (_17 === 25) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_17 === 17) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_17 === 20) { */ case 6:
					_r$1 = valueInterface(x, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_17 === 25) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set(x.object());
				/* } */ case 9:
			case 4:
			return;
		/* } */ case 3:
		v.ptr = x.ptr;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._17 = _17; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var $ptr, _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var $ptr, _18, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _18 = $f._18; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_18 = kind;
			/* */ if (_18 === 17) { $s = 2; continue; }
			/* */ if (_18 === 23) { $s = 3; continue; }
			/* */ if (_18 === 24) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_18 === 17) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = v.typ.kindType;
				cap = (tt.len >> 0);
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))(v.object());
				$s = 6; continue;
			/* } else if (_18 === 23) { */ case 3:
				typ = v.typ;
				s = v.object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_18 === 24) { */ case 4:
				str = v.ptr.$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String(str.substring(i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return _r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), (v.flag & 96) >>> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 10; case 10:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f.$ptr = $ptr; $f._18 = _18; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var $ptr, _19, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _19 = $f._19; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_19 = kind;
		if (_19 === 17) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
		} else if (_19 === 23) {
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), (v.flag & 96) >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f.$ptr = $ptr; $f._19 = _19; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close(v.object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(t, ch, nb, val) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$9([new sliceType$7([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$7([]));
		}
		_r = selectHelper(new sliceType$2([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(t, ch, val, nb) {
		var $ptr, _r, ch, comms, nb, selectRes, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$9([new sliceType$7([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$7([]));
		}
		_r = selectHelper(new sliceType$2([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			return false;
		}
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.prototype.String = function() {
		var $ptr, k;
		k = this.$val;
		if ((k >> 0) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? $throwRuntimeError("index out of range") : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	uncommonType.ptr.prototype.uncommon = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	uncommonType.prototype.uncommon = function() { return this.$val.uncommon(); };
	uncommonType.ptr.prototype.PkgPath = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$7.nil || t.pkgPath === ptrType$6.nil) {
			return "";
		}
		return t.pkgPath.$get();
	};
	uncommonType.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	uncommonType.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$7.nil || t.name === ptrType$6.nil) {
			return "";
		}
		return t.name.$get();
	};
	uncommonType.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.String = function() {
		var $ptr, t;
		t = this;
		return t.string.$get();
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var $ptr, t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var $ptr, k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul((t.size >> 0), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var $ptr, t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var $ptr, t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var $ptr, t;
		t = this;
		return (((t.kind & 31) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	uncommonType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$7.nil) {
			return 0;
		}
		return t.methods.$length;
	};
	uncommonType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	uncommonType.ptr.prototype.MethodByName = function(name) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$7.nil) {
			return [m, ok];
		}
		p = ptrType$10.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!(p.name === ptrType$6.nil) && p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	uncommonType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.NumMethod = function() {
		var $ptr, t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			return tt.NumMethod();
		}
		return t.uncommonType.NumMethod();
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.Method = function(i) {
		var $ptr, i, m, t, tt;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			Method.copy(m, tt.Method(i));
			return m;
		}
		Method.copy(m, t.uncommonType.Method(i));
		return m;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	rtype.ptr.prototype.MethodByName = function(name) {
		var $ptr, _tuple, _tuple$1, m, name, ok, t, tt;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			_tuple = tt.MethodByName(name);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			return [m, ok];
		}
		_tuple$1 = t.uncommonType.MethodByName(name);
		Method.copy(m, _tuple$1[0]);
		ok = _tuple$1[1];
		return [m, ok];
	};
	rtype.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.PkgPath = function() {
		var $ptr, t;
		t = this;
		return t.uncommonType.PkgPath();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		return t.uncommonType.Name();
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = t.kindType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = t.kindType;
		return tt.dotdotdot;
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var $ptr, _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === 17) {
			tt = t.kindType;
			return toType(tt.elem);
		} else if (_1 === 18) {
			tt$1 = t.kindType;
			return toType(tt$1.elem);
		} else if (_1 === 21) {
			tt$2 = t.kindType;
			return toType(tt$2.elem);
		} else if (_1 === 22) {
			tt$3 = t.kindType;
			return toType(tt$3.elem);
		} else if (_1 === 23) {
			tt$4 = t.kindType;
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var $ptr, _r, i, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name) {
		var $ptr, _r, name, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByName(name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = t.kindType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = t.kindType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = t.kindType;
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = t.kindType;
		return tt.in$2.$length;
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = t.kindType;
		return tt.out.$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.out, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var $ptr, _2, d;
		d = this.$val;
		_2 = d;
		if (_2 === 2) {
			return "chan<-";
		} else if (_2 === 1) {
			return "<-chan";
		} else if (_2 === 3) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var $ptr, i, m, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		m.Name = p.name.$get();
		if (!(p.pkgPath === ptrType$6.nil)) {
			m.PkgPath = p.pkgPath.$get();
		}
		m.Type = toType(p.typ);
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$11.nil) {
			return [m, ok];
		}
		p = ptrType$12.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	StructTag.prototype.Get = function(key) {
		var $ptr, _tuple, err, i, key, name, qvalue, tag, value;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (key === name) {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				return value;
			}
		}
		return "";
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	structType.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, f, i, p, t, t$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; i = $f.i; p = $f.p; t = $f.t; t$1 = $f.t$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			return f;
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		/* */ if (!(p.name === ptrType$6.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(p.name === ptrType$6.nil)) { */ case 1:
			f.Name = p.name.$get();
			$s = 3; continue;
		/* } else { */ case 2:
			t$1 = f.Type;
			_r = t$1.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 22) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === 22) { */ case 4:
				_r$1 = t$1.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				t$1 = _r$1;
			/* } */ case 5:
			_r$2 = t$1.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			f.Name = _r$2;
			f.Anonymous = true;
		/* } */ case 3:
		if (!(p.pkgPath === ptrType$6.nil)) {
			f.PkgPath = p.pkgPath.$get();
		}
		if (!(p.tag === ptrType$6.nil)) {
			f.Tag = p.tag.$get();
		}
		f.Offset = p.offset;
		f.Index = new sliceType$11([i]);
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.i = i; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
		ok = false;
		t = this;
		current = new sliceType$12([]);
		next = new sliceType$12([new fieldScan.ptr(t, sliceType$11.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$13.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$13.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$13.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
					fname = "";
					ntyp = ptrType$1.nil;
					/* */ if (!(f.name === ptrType$6.nil)) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!(f.name === ptrType$6.nil)) { */ case 9:
						fname = f.name.$get();
						$s = 11; continue;
					/* } else { */ case 10:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 12; continue; }
						/* */ $s = 13; continue;
						/* if (ntyp.Kind() === 22) { */ case 12:
							_r = ntyp.Elem().common(); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 13:
						fname = ntyp.Name();
					/* } */ case 11:
					_r$1 = match(fname); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_r$1) { */ case 15:
						if ((_entry$1 = count[ptrType$13.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							return [result, ok];
						}
						_r$2 = t$1.Field(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						StructField.copy(result, _r$2);
						result.Index = sliceType$11.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 16:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = ntyp.kindType;
					if ((_entry$2 = nextCount[ptrType$13.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$13.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$13.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$11.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name, present, t, tf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name = $f.name; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = [name];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
		present = false;
		t = this;
		hasAnon = false;
		/* */ if (!(name[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name[0] === "")) { */ case 1:
			_ref = t.fields;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				/* */ if (tf.name === ptrType$6.nil) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (tf.name === ptrType$6.nil) { */ case 5:
					hasAnon = true;
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				/* */ if (tf.name.$get() === name[0]) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (tf.name.$get() === name[0]) { */ case 7:
					_r = t.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp = $clone(_r, StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					/* */ $s = 10; case 10:
					return [f, present];
				/* } */ case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		if (!hasAnon) {
			return [f, present];
		}
		_r$1 = t.FieldByNameFunc((function(name) { return function(s) {
			var $ptr, s;
			return s === name[0];
		}; })(name)); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		/* */ $s = 12; case 12:
		return [f, present];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name = name; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	PtrTo = function(t) {
		var $ptr, t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var $ptr, _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var $ptr, t, u, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var $ptr, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return !(_r === $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var $ptr, T, V, i, i$1, j, j$1, t, tm, tm$1, v, v$1, vm, vm$1, x, x$1, x$2, x$3;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.kindType;
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.kindType;
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				if (vm.name.$get() === tm.name.$get() && vm.pkgPath === tm.pkgPath && vm.typ === tm.typ) {
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommonType.uncommon();
		if (v$1 === ptrType$7.nil) {
			return false;
		}
		i$1 = 0;
		j$1 = 0;
		while (true) {
			if (!(j$1 < v$1.methods.$length)) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			vm$1 = (x$3 = v$1.methods, ((j$1 < 0 || j$1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + j$1]));
			if (vm$1.name.$get() === tm$1.name.$get() && vm$1.pkgPath === tm$1.pkgPath && vm$1.mtyp === tm$1.typ) {
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var $ptr, T, V;
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var $ptr, T, V, _3, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, i, i$1, i$2, kind, t, t$1, t$2, tf, typ, typ$1, v, v$1, v$2, vf, x, x$1, x$2, x$3;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_3 = kind;
		if (_3 === 17) {
			return $interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_3 === 18) {
			if ((V.ChanDir() === 3) && $interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_3 === 19) {
			t = T.kindType;
			v = V.kindType;
			if (!(t.dotdotdot === v.dotdotdot) || !((t.in$2.$length === v.in$2.$length)) || !((t.out.$length === v.out.$length))) {
				return false;
			}
			_ref = t.in$2;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				typ = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (!(typ === (x = v.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])))) {
					return false;
				}
				_i++;
			}
			_ref$1 = t.out;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				typ$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (!(typ$1 === (x$1 = v.out, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
			return true;
		} else if (_3 === 20) {
			t$1 = T.kindType;
			v$1 = V.kindType;
			if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
				return true;
			}
			return false;
		} else if (_3 === 21) {
			return $interfaceIsEqual(T.Key(), V.Key()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if ((_3 === 22) || (_3 === 23)) {
			return $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_3 === 25) {
			t$2 = T.kindType;
			v$2 = V.kindType;
			if (!((t$2.fields.$length === v$2.fields.$length))) {
				return false;
			}
			_ref$2 = t$2.fields;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				i$2 = _i$2;
				tf = (x$2 = t$2.fields, ((i$2 < 0 || i$2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$2]));
				vf = (x$3 = v$2.fields, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2]));
				if (!(tf.name === vf.name) && (tf.name === ptrType$6.nil || vf.name === ptrType$6.nil || !(tf.name.$get() === vf.name.$get()))) {
					return false;
				}
				if (!(tf.pkgPath === vf.pkgPath) && (tf.pkgPath === ptrType$6.nil || vf.pkgPath === ptrType$6.nil || !(tf.pkgPath.$get() === vf.pkgPath.$get()))) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!(tf.tag === vf.tag) && (tf.tag === ptrType$6.nil || vf.tag === ptrType$6.nil || !(tf.tag.$get() === vf.tag.$get()))) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i$2++;
			}
			return true;
		}
		return false;
	};
	toType = function(t) {
		var $ptr, t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var $ptr, t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var $ptr, f;
		f = this.$val;
		return (((f & 31) >>> 0) >>> 0);
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var $ptr, v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var $ptr, expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var $ptr, v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 96) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(1);
		return v.ptr.$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		return v.ptr.$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		return v.ptr.$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var $ptr, v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var $ptr, v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var $ptr, _2, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_2 = k;
		if (_2 === 15) {
			return (x = v.ptr.$get(), new $Complex128(x.$real, x.$imag));
		} else if (_2 === 16) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = v.Field((0 >= index.$length ? $throwRuntimeError("index out of range") : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (i > 0) { */ case 7:
				if (!(v.Kind() === 22)) { _v = false; $s = 11; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
					if (v.IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = v.Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 10:
			/* } */ case 8:
			_r$3 = v.Field(x); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 5; continue; case 6:
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name) {
		var $ptr, _r, _r$1, _tuple, f, name, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name = $f.name; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$1;
		/* } */ case 3:
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name = name; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$1;
		/* } */ case 3:
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var $ptr, _4, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_4 = k;
		if (_4 === 13) {
			return v.ptr.$get();
		} else if (_4 === 14) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var $ptr, _6, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_6 = k;
		if (_6 === 2) {
			return new $Int64(0, p.$get());
		} else if (_6 === 3) {
			return new $Int64(0, p.$get());
		} else if (_6 === 4) {
			return new $Int64(0, p.$get());
		} else if (_6 === 5) {
			return new $Int64(0, p.$get());
		} else if (_6 === 6) {
			return p.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var $ptr, v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var $ptr, _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface(v, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		/* */ $s = 2; case 2:
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var $ptr, v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var $ptr, v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var $ptr, _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		key = key;
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		e = mapaccess(v.typ, v.pointer(), k);
		if (e === 0) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 96) >>> 0;
		fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, e);
			return new Value.ptr(typ, c, (fl | 128) >>> 0);
		} else {
			return new Value.ptr(typ, e.$get(), fl);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var $ptr, _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		keyType = tt.key;
		fl = (((v.flag & 96) >>> 0) | (keyType.Kind() >>> 0)) >>> 0;
		m = v.pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$8, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				typedmemmove(keyType, c, key);
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 128) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, key.$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var $ptr, fl, i, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0)) || (i >>> 0) >= (v.typ.NumMethod() >>> 0)) {
			$panic(new $String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 160) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | (((((i >>> 0) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		return new Value.ptr(v.typ, v.ptr, fl);
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name) {
		var $ptr, _tuple, m, name, ok, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_tuple = v.typ.MethodByName(name);
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		return v.Method(m.Index);
	};
	Value.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	Value.ptr.prototype.NumField = function() {
		var $ptr, tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var $ptr, _9, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_9 = k;
		if (_9 === 15) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_9 === 16) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var $ptr, _10, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_10 = k;
		if (_10 === 13) {
			return overflowFloat32(x);
		} else if (_10 === 14) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var $ptr, x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var $ptr, _11, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_11 = k;
		if ((_11 === 2) || (_11 === 3) || (_11 === 4) || (_11 === 5) || (_11 === 6)) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var $ptr, _12, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_12 = k;
		if ((_12 === 7) || (_12 === 12) || (_12 === 8) || (_12 === 9) || (_12 === 10) || (_12 === 11)) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		/* */ $s = 2; case 2:
		return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var $ptr, _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, (t.Kind() >>> 0));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		_r = chanrecv(v.typ, v.pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var $ptr, _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		x = x;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = (x.$ptr_ptr || (x.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x)));
		}
		_r$1 = chansend(v.typ, v.pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		/* */ $s = 3; case 3:
		return selected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		v.ptr.$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		v.ptr.$set(x);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var $ptr, _14, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_14 = k;
		if (_14 === 15) {
			v.ptr.$set(new $Complex64(x.$real, x.$imag));
		} else if (_14 === 16) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var $ptr, _15, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_15 = k;
		if (_15 === 13) {
			v.ptr.$set($fround(x));
		} else if (_15 === 14) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var $ptr, _16, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_16 = k;
		if (_16 === 2) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_16 === 3) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_16 === 4) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_16 === 5) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_16 === 6) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var $ptr, _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		key = key;
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, v.pointer(), k);
			return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = val.assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 128) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		$r = mapassign(v.typ, v.pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var $ptr, _17, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_17 = k;
		if (_17 === 7) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_17 === 8) {
			v.ptr.$set((x.$low << 24 >>> 24));
		} else if (_17 === 9) {
			v.ptr.$set((x.$low << 16 >>> 16));
		} else if (_17 === 10) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_17 === 11) {
			v.ptr.$set(x);
		} else if (_17 === 12) {
			v.ptr.$set((x.$low >>> 0));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		v.ptr.$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		v.ptr.$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var $ptr, _20, _r, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _20 = $f._20; _r = $f._r; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_20 = k;
		if (_20 === 0) {
			return "<invalid Value>";
		} else if (_20 === 24) {
			return v.ptr.$get();
		}
		_r = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return "<" + _r + " Value>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f.$ptr = $ptr; $f._20 = _20; $f._r = _r; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		/* */ $s = 2; case 2:
		return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var $ptr, f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 512) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if ((i >>> 0) >= (tt.methods.$length >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			return m.typ;
		}
		ut = v.typ.uncommonType.uncommon();
		if (ut === ptrType$7.nil || (i >>> 0) >= (ut.methods.$length >>> 0)) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
		return m$1.mtyp;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var $ptr, _21, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_21 = k;
		if (_21 === 7) {
			return new $Uint64(0, p.$get());
		} else if (_21 === 8) {
			return new $Uint64(0, p.$get());
		} else if (_21 === 9) {
			return new $Uint64(0, p.$get());
		} else if (_21 === 10) {
			return new $Uint64(0, p.$get());
		} else if (_21 === 11) {
			return p.$get();
		} else if (_21 === 12) {
			return (x = p.$get(), new $Uint64(0, x.constructor === Number ? x : 1));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.ptr;
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		var $ptr, _r, _r$1, t1, t2, what, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t1 = $f.t1; t2 = $f.t2; what = $f.what; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(t1, t2))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(t1, t2))) { */ case 1:
			_r = t1.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = t2.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(what + ": " + _r + " != " + _r$1));
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: typesMustMatch }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t1 = t1; $f.t2 = t2; $f.what = what; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeMap = function(typ) {
		var $ptr, _r, _r$1, m, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; m = $f.m; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 21))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 21))) { */ case 1:
			$panic(new $String("reflect.MakeMap of non-map type"));
		/* } */ case 2:
		m = makemap($assertType(typ, ptrType$1));
		_r$1 = typ.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return new Value.ptr(_r$1, m, 21);
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeMap }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.m = m; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeMap = MakeMap;
	New = function(typ) {
		var $ptr, _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return new Value.ptr(_r$1, ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var $ptr, _r, _r$1, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			/* */ if (directlyAssignable(dst, v.typ)) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (directlyAssignable(dst, v.typ)) { */ case 5:
				v.typ = dst;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | ((dst.Kind() >>> 0))) >>> 0;
				return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$1 = valueInterface(v, false); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				x = _r$1;
				if (dst.NumMethod() === 0) {
					target.$set(x);
				} else {
					ifaceE2I(dst, x, target);
				}
				return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op(v, t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 10; case 10:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var $ptr, _23, _24, _25, _26, _27, _28, _29, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _23 = $f._23; _24 = $f._24; _25 = $f._25; _26 = $f._26; _27 = $f._27; _28 = $f._28; _29 = $f._29; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_23 = src.Kind();
			/* */ if ((_23 === 2) || (_23 === 3) || (_23 === 4) || (_23 === 5) || (_23 === 6)) { $s = 2; continue; }
			/* */ if ((_23 === 7) || (_23 === 8) || (_23 === 9) || (_23 === 10) || (_23 === 11) || (_23 === 12)) { $s = 3; continue; }
			/* */ if ((_23 === 13) || (_23 === 14)) { $s = 4; continue; }
			/* */ if ((_23 === 15) || (_23 === 16)) { $s = 5; continue; }
			/* */ if (_23 === 24) { $s = 6; continue; }
			/* */ if (_23 === 23) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_23 === 2) || (_23 === 3) || (_23 === 4) || (_23 === 5) || (_23 === 6)) { */ case 2:
				_24 = dst.Kind();
				if ((_24 === 2) || (_24 === 3) || (_24 === 4) || (_24 === 5) || (_24 === 6) || (_24 === 7) || (_24 === 8) || (_24 === 9) || (_24 === 10) || (_24 === 11) || (_24 === 12)) {
					return cvtInt;
				} else if ((_24 === 13) || (_24 === 14)) {
					return cvtIntFloat;
				} else if (_24 === 24) {
					return cvtIntString;
				}
				$s = 8; continue;
			/* } else if ((_23 === 7) || (_23 === 8) || (_23 === 9) || (_23 === 10) || (_23 === 11) || (_23 === 12)) { */ case 3:
				_25 = dst.Kind();
				if ((_25 === 2) || (_25 === 3) || (_25 === 4) || (_25 === 5) || (_25 === 6) || (_25 === 7) || (_25 === 8) || (_25 === 9) || (_25 === 10) || (_25 === 11) || (_25 === 12)) {
					return cvtUint;
				} else if ((_25 === 13) || (_25 === 14)) {
					return cvtUintFloat;
				} else if (_25 === 24) {
					return cvtUintString;
				}
				$s = 8; continue;
			/* } else if ((_23 === 13) || (_23 === 14)) { */ case 4:
				_26 = dst.Kind();
				if ((_26 === 2) || (_26 === 3) || (_26 === 4) || (_26 === 5) || (_26 === 6)) {
					return cvtFloatInt;
				} else if ((_26 === 7) || (_26 === 8) || (_26 === 9) || (_26 === 10) || (_26 === 11) || (_26 === 12)) {
					return cvtFloatUint;
				} else if ((_26 === 13) || (_26 === 14)) {
					return cvtFloat;
				}
				$s = 8; continue;
			/* } else if ((_23 === 15) || (_23 === 16)) { */ case 5:
				_27 = dst.Kind();
				if ((_27 === 15) || (_27 === 16)) {
					return cvtComplex;
				}
				$s = 8; continue;
			/* } else if (_23 === 24) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 11; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
						_r$1 = dst.Elem().Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_28 = _r$1;
						if (_28 === 8) {
							return cvtStringBytes;
						} else if (_28 === 5) {
							return cvtStringRunes;
						}
					case 13:
				/* } */ case 10:
				$s = 8; continue;
			/* } else if (_23 === 23) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 17; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 17:
				/* */ if (_v$1) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_v$1) { */ case 15:
						_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_29 = _r$3;
						if (_29 === 8) {
							return cvtBytesString;
						} else if (_29 === 5) {
							return cvtRunesString;
						}
					case 19:
				/* } */ case 16:
			/* } */ case 8:
		case 1:
		if (haveIdenticalUnderlyingType(dst, src)) {
			return cvtDirect;
		}
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 23; continue s; }
		_r$4 = dst.Elem().common(); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = src.Elem().common(); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v$2 = _r$6; case 23:
		/* */ if (_v$2) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_v$2) { */ case 21:
			return cvtDirect;
		/* } */ case 22:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				return cvtI2I;
			}
			return cvtT2I;
		}
		return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f.$ptr = $ptr; $f._23 = _23; $f._24 = _24; $f._25 = _25; $f._26 = _26; $f._27 = _27; $f._28 = _28; $f._29 = _29; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var $ptr, _31, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _31 = $f._31; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_31 = typ.size;
		if (_31 === 4) {
			ptr.$set($fround(v));
		} else if (_31 === 8) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f.$ptr = $ptr; $f._31 = _31; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var $ptr, _32, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _32 = $f._32; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_32 = typ.size;
		if (_32 === 8) {
			ptr.$set(new $Complex64(v.$real, v.$imag));
		} else if (_32 === 16) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f.$ptr = $ptr; $f._32 = _32; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		ret.SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, (x = v.Int(), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, v.Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, (x = new $Int64(0, v.Float()), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, new $Uint64(0, v.Float()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 96) >>> 0, $flatten64(v.Int()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 96) >>> 0, $flatten64(v.Uint()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 96) >>> 0, v.Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeComplex((v.flag & 96) >>> 0, v.Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 96) >>> 0, $encodeRune(v.Int().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 96) >>> 0, $encodeRune(v.Uint().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $bytesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$13($stringToBytes(_r));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $runesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$15($stringToRunes(_r));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface(v, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			target.$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 9; case 9:
		return new Value.ptr(_r$4, target, (((((v.flag & 96) >>> 0) | 128) >>> 0) | 20) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		/* */ if (v.IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (((v.flag & 96) >>> 0))) >>> 0;
			return ret;
		/* } */ case 2:
		_r$1 = v.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I(_r$1, typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ptrType$7.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$7], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$13.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$3], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$8], [sliceType$8], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$3], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$13], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$13], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$15], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$8], [sliceType$8], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$8], [sliceType$8], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$8], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$15], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$20.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	mapIter.init([{prop: "t", name: "t", pkg: "reflect", typ: Type, tag: ""}, {prop: "m", name: "m", pkg: "reflect", typ: ptrType$3, tag: ""}, {prop: "keys", name: "keys", pkg: "reflect", typ: ptrType$3, tag: ""}, {prop: "i", name: "i", pkg: "reflect", typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$7], false)}]);
	rtype.init([{prop: "size", name: "size", pkg: "reflect", typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", pkg: "reflect", typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", pkg: "reflect", typ: $Uint32, tag: ""}, {prop: "_$3", name: "_", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "align", name: "align", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", pkg: "reflect", typ: ptrType$4, tag: ""}, {prop: "gcdata", name: "gcdata", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "string", name: "string", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "uncommonType", name: "", pkg: "reflect", typ: ptrType$7, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	typeAlg.init([{prop: "hash", name: "hash", pkg: "reflect", typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", pkg: "reflect", typ: funcType$5, tag: ""}]);
	method.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "mtyp", name: "mtyp", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "ifn", name: "ifn", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "tfn", name: "tfn", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	uncommonType.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "methods", name: "methods", pkg: "reflect", typ: sliceType$4, tag: ""}]);
	arrayType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "len", name: "len", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	chanType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	funcType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"func\""}, {prop: "dotdotdot", name: "dotdotdot", pkg: "reflect", typ: $Bool, tag: ""}, {prop: "in$2", name: "in", pkg: "reflect", typ: sliceType$1, tag: ""}, {prop: "out", name: "out", pkg: "reflect", typ: sliceType$1, tag: ""}]);
	imethod.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	interfaceType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"interface\""}, {prop: "methods", name: "methods", pkg: "reflect", typ: sliceType$5, tag: ""}]);
	mapType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", pkg: "reflect", typ: $Uint16, tag: ""}, {prop: "reflexivekey", name: "reflexivekey", pkg: "reflect", typ: $Bool, tag: ""}, {prop: "needkeyupdate", name: "needkeyupdate", pkg: "reflect", typ: $Bool, tag: ""}]);
	ptrType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	sliceType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	structField.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "tag", name: "tag", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "offset", name: "offset", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	structType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"struct\""}, {prop: "fields", name: "fields", pkg: "reflect", typ: sliceType$6, tag: ""}]);
	Method.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Type, tag: ""}, {prop: "Func", name: "Func", pkg: "", typ: Value, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: $Int, tag: ""}]);
	StructField.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Type, tag: ""}, {prop: "Tag", name: "Tag", pkg: "", typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: sliceType$11, tag: ""}, {prop: "Anonymous", name: "Anonymous", pkg: "", typ: $Bool, tag: ""}]);
	fieldScan.init([{prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$13, tag: ""}, {prop: "index", name: "index", pkg: "reflect", typ: sliceType$11, tag: ""}]);
	Value.init([{prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "", pkg: "reflect", typ: flag, tag: ""}]);
	ValueError.init([{prop: "Method", name: "Method", pkg: "", typ: $String, tag: ""}, {prop: "Kind", name: "Kind", pkg: "", typ: Kind, tag: ""}]);
	nonEmptyInterface.init([{prop: "itab", name: "itab", pkg: "reflect", typ: ptrType$9, tag: ""}, {prop: "word", name: "word", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = false;
		stringPtrMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		kindNames = new sliceType$3(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		jsObjectPtr = reflectType($jsObjectPtr);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, runeUnreader, scanError, ss, ssave, sliceType, sliceType$1, ptrType, arrayType, arrayType$1, ptrType$1, arrayType$2, sliceType$2, ptrType$2, ptrType$5, ptrType$25, funcType, padZeroBytes, padSpaceBytes, trueBytes, falseBytes, commaSpaceBytes, nilAngleBytes, nilParenBytes, nilBytes, mapBytes, percentBangBytes, missingBytes, badIndexBytes, panicBytes, extraBytes, irparenBytes, bytesBytes, badWidthBytes, badPrecBytes, noVerbBytes, ppFree, intBits, uintptrBits, byteType, space, ssFree, complexError, boolError, _r, _r$1, init, doPrec, newPrinter, Fprintf, Printf, Sprintf, Errorf, Fprint, Fprintln, getField, tooLarge, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", "fmtFlags", "fmt", function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, unicode_, uniQuote_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.unicode = false;
			this.uniQuote = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.unicode = unicode_;
		this.uniQuote = uniQuote_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", "fmt", "fmt", function(intbuf_, buf_, wid_, prec_, fmtFlags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.intbuf = arrayType$1.zero();
			this.buf = ptrType$1.nil;
			this.wid = 0;
			this.prec = 0;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false);
			return;
		}
		this.intbuf = intbuf_;
		this.buf = buf_;
		this.wid = wid_;
		this.prec = prec_;
		this.fmtFlags = fmtFlags_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", "State", "fmt", null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", "Formatter", "fmt", null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", "Stringer", "fmt", null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", "GoStringer", "fmt", null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", "buffer", "fmt", null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", "pp", "fmt", function(n_, panicking_, erroring_, buf_, arg_, value_, reordered_, goodArgNum_, runeBuf_, fmt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.n = 0;
			this.panicking = false;
			this.erroring = false;
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.reordered = false;
			this.goodArgNum = false;
			this.runeBuf = arrayType.zero();
			this.fmt = new fmt.ptr(arrayType$1.zero(), ptrType$1.nil, 0, 0, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false));
			return;
		}
		this.n = n_;
		this.panicking = panicking_;
		this.erroring = erroring_;
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.runeBuf = runeBuf_;
		this.fmt = fmt_;
	});
	runeUnreader = $pkg.runeUnreader = $newType(8, $kindInterface, "fmt.runeUnreader", "runeUnreader", "fmt", null);
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", "scanError", "fmt", function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", "ss", "fmt", function(rr_, buf_, peekRune_, prevRune_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rr = $ifaceNil;
			this.buf = buffer.nil;
			this.peekRune = 0;
			this.prevRune = 0;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rr = rr_;
		this.buf = buf_;
		this.peekRune = peekRune_;
		this.prevRune = prevRune_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", "ssave", "fmt", function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 65);
	ptrType$1 = $ptrType(buffer);
	arrayType$2 = $arrayType($Uint16, 2);
	sliceType$2 = $sliceType(arrayType$2);
	ptrType$2 = $ptrType(pp);
	ptrType$5 = $ptrType(ss);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	init = function() {
		var $ptr, i;
		i = 0;
		while (true) {
			if (!(i < 65)) { break; }
			((i < 0 || i >= padZeroBytes.$length) ? $throwRuntimeError("index out of range") : padZeroBytes.$array[padZeroBytes.$offset + i] = 48);
			((i < 0 || i >= padSpaceBytes.$length) ? $throwRuntimeError("index out of range") : padSpaceBytes.$array[padSpaceBytes.$offset + i] = 32);
			i = i + (1) >> 0;
		}
	};
	fmt.ptr.prototype.clearflags = function() {
		var $ptr, f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var $ptr, buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.computePadding = function(width) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, f, left, leftWidth, padding, rightWidth, w, width;
		padding = sliceType.nil;
		leftWidth = 0;
		rightWidth = 0;
		f = this;
		left = !f.fmtFlags.minus;
		w = f.wid;
		if (w < 0) {
			left = false;
			w = -w;
		}
		w = w - (width) >> 0;
		if (w > 0) {
			if (left && f.fmtFlags.zero) {
				_tmp = padZeroBytes;
				_tmp$1 = w;
				_tmp$2 = 0;
				padding = _tmp;
				leftWidth = _tmp$1;
				rightWidth = _tmp$2;
				return [padding, leftWidth, rightWidth];
			}
			if (left) {
				_tmp$3 = padSpaceBytes;
				_tmp$4 = w;
				_tmp$5 = 0;
				padding = _tmp$3;
				leftWidth = _tmp$4;
				rightWidth = _tmp$5;
				return [padding, leftWidth, rightWidth];
			} else {
				_tmp$6 = padSpaceBytes;
				_tmp$7 = 0;
				_tmp$8 = w;
				padding = _tmp$6;
				leftWidth = _tmp$7;
				rightWidth = _tmp$8;
				return [padding, leftWidth, rightWidth];
			}
		}
		return [padding, leftWidth, rightWidth];
	};
	fmt.prototype.computePadding = function(width) { return this.$val.computePadding(width); };
	fmt.ptr.prototype.writePadding = function(n, padding) {
		var $ptr, f, m, n, padding;
		f = this;
		while (true) {
			if (!(n > 0)) { break; }
			m = n;
			if (m > 65) {
				m = 65;
			}
			f.buf.Write($subslice(padding, 0, m));
			n = n - (m) >> 0;
		}
	};
	fmt.prototype.writePadding = function(n, padding) { return this.$val.writePadding(n, padding); };
	fmt.ptr.prototype.pad = function(b) {
		var $ptr, _tuple, b, f, left, padding, right;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCount(b));
		padding = _tuple[0];
		left = _tuple[1];
		right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.Write(b);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var $ptr, _tuple, f, left, padding, right, s;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCountInString(s));
		padding = _tuple[0];
		left = _tuple[1];
		right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.WriteString(s);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var $ptr, f, v;
		f = this;
		if (v) {
			f.pad(trueBytes);
		} else {
			f.pad(falseBytes);
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.integer = function(a, base, signedness, digits) {
		var $ptr, _1, _2, a, base, buf, digits, f, i, j, negative, next, prec, runeWidth, signedness, ua, width, width$1, x, x$1, x$2, x$3;
		f = this;
		if (f.fmtFlags.precPresent && (f.prec === 0) && (a.$high === 0 && a.$low === 0)) {
			return;
		}
		negative = signedness && (a.$high < 0 || (a.$high === 0 && a.$low < 0));
		if (negative) {
			a = new $Int64(-a.$high, -a.$low);
		}
		buf = $subslice(new sliceType(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent || f.fmtFlags.plus || f.fmtFlags.space) {
			width = f.wid + f.prec >> 0;
			if ((base.$high === 0 && base.$low === 16) && f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
			if (f.fmtFlags.unicode) {
				width = width + (2) >> 0;
				if (f.fmtFlags.uniQuote) {
					width = width + (7) >> 0;
				}
			}
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				width = width + (1) >> 0;
			}
			if (width > 65) {
				buf = $makeSlice(sliceType, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			f.fmtFlags.zero = false;
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent && !f.fmtFlags.minus && f.wid > 0) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		ua = new $Uint64(a.$high, a.$low);
		_1 = base;
		if ((_1.$high === 0 && _1.$low === 10)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(ua, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x = new $Uint64(0 + ua.$high, 48 + ua.$low), x$1 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low)).$low << 24 >>> 24));
				ua = next;
			}
		} else if ((_1.$high === 0 && _1.$low === 16)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(ua.$high & 0, (ua.$low & 15) >>> 0))));
				ua = $shiftRightUint64(ua, (4));
			}
		} else if ((_1.$high === 0 && _1.$low === 8)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$2 = new $Uint64(ua.$high & 0, (ua.$low & 7) >>> 0), new $Uint64(0 + x$2.$high, 48 + x$2.$low)).$low << 24 >>> 24));
				ua = $shiftRightUint64(ua, (3));
			}
		} else if ((_1.$high === 0 && _1.$low === 2)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$3 = new $Uint64(ua.$high & 0, (ua.$low & 1) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24));
				ua = $shiftRightUint64(ua, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(ua)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if ((_2.$high === 0 && _2.$low === 8)) {
				if (!((((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
				}
			} else if ((_2.$high === 0 && _2.$low === 16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((120 + digits.charCodeAt(10) << 24 >>> 24) - 97 << 24 >>> 24));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (f.fmtFlags.unicode) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 85);
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 32);
		}
		if (f.fmtFlags.unicode && f.fmtFlags.uniQuote && (a.$high > 0 || (a.$high === 0 && a.$low >= 0)) && (a.$high < 0 || (a.$high === 0 && a.$low <= 1114111)) && strconv.IsPrint(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0))) {
			runeWidth = utf8.RuneLen(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			width$1 = (2 + runeWidth >> 0) + 1 >> 0;
			$copySlice($subslice(buf, (i - width$1 >> 0)), $subslice(buf, i));
			i = i - (width$1) >> 0;
			j = buf.$length - width$1 >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 32);
			j = j + (1) >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39);
			j = j + (1) >> 0;
			utf8.EncodeRune($subslice(buf, j), ((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			j = j + (runeWidth) >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39);
		}
		f.pad($subslice(buf, i));
	};
	fmt.prototype.integer = function(a, base, signedness, digits) { return this.$val.integer(a, base, signedness, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var $ptr, _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < utf8.RuneCountInString(s)) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				if (n === 0) {
					s = s.substring(0, i);
					break;
				}
				n = n - (1) >> 0;
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var $ptr, f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var $ptr, b, buf, c, digits, f, i, n, s, x;
		f = this;
		n = b.$length;
		if (b === sliceType.nil) {
			n = s.length;
		}
		x = (digits.charCodeAt(10) - 97 << 24 >>> 24) + 120 << 24 >>> 24;
		buf = sliceType.nil;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			if (i > 0 && f.fmtFlags.space) {
				buf = $append(buf, 32);
			}
			if (f.fmtFlags.sharp && (f.fmtFlags.space || (i === 0))) {
				buf = $append(buf, 48, x);
			}
			c = 0;
			if (b === sliceType.nil) {
				c = s.charCodeAt(i);
			} else {
				c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.pad(buf);
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var $ptr, digits, f, s;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < s.length) {
			s = s.substring(0, f.prec);
		}
		f.fmt_sbx(s, sliceType.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var $ptr, b, digits, f;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < b.$length) {
			b = $subslice(b, 0, f.prec);
		}
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var $ptr, f, quoted, s;
		f = this;
		s = f.truncate(s);
		quoted = "";
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			quoted = "`" + s + "`";
		} else {
			if (f.fmtFlags.plus) {
				quoted = strconv.QuoteToASCII(s);
			} else {
				quoted = strconv.Quote(s);
			}
		}
		f.padString(quoted);
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var $ptr, c, f, quoted;
		f = this;
		quoted = sliceType.nil;
		if (f.fmtFlags.plus) {
			quoted = strconv.AppendQuoteRuneToASCII($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		} else {
			quoted = strconv.AppendQuoteRune($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		}
		f.pad(quoted);
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	doPrec = function(f, def) {
		var $ptr, def, f;
		if (f.fmtFlags.precPresent) {
			return f.prec;
		}
		return def;
	};
	fmt.ptr.prototype.formatFloat = function(v, verb, prec, n) {
		var $ptr, f, n, num, prec, v, verb, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		f = this;
		num = strconv.AppendFloat($subslice(new sliceType(f.intbuf), 0, 1), v, verb, prec, n);
		if (((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 43);
		}
		if (math.IsInf(v, 0)) {
			if (f.fmtFlags.zero) {
				$deferred.push([(function() {
					var $ptr;
					f.fmtFlags.zero = true;
				}), []]);
				f.fmtFlags.zero = false;
			}
		}
		if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
			if (f.fmtFlags.space && v >= 0) {
				f.buf.WriteByte(32);
				f.wid = f.wid - (1) >> 0;
			} else if (f.fmtFlags.plus || v < 0) {
				f.buf.WriteByte((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]));
				f.wid = f.wid - (1) >> 0;
			}
			f.pad($subslice(num, 1));
			return;
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 43)) {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 32);
			f.pad(num);
			return;
		}
		if (f.fmtFlags.plus || ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 45) || math.IsInf(v, 0)) {
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	fmt.prototype.formatFloat = function(v, verb, prec, n) { return this.$val.formatFloat(v, verb, prec, n); };
	fmt.ptr.prototype.fmt_e64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_e64 = function(v) { return this.$val.fmt_e64(v); };
	fmt.ptr.prototype.fmt_E64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_E64 = function(v) { return this.$val.fmt_E64(v); };
	fmt.ptr.prototype.fmt_f64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_f64 = function(v) { return this.$val.fmt_f64(v); };
	fmt.ptr.prototype.fmt_g64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_g64 = function(v) { return this.$val.fmt_g64(v); };
	fmt.ptr.prototype.fmt_G64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_G64 = function(v) { return this.$val.fmt_G64(v); };
	fmt.ptr.prototype.fmt_fb64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 98, 0, 64);
	};
	fmt.prototype.fmt_fb64 = function(v) { return this.$val.fmt_fb64(v); };
	fmt.ptr.prototype.fmt_e32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_e32 = function(v) { return this.$val.fmt_e32(v); };
	fmt.ptr.prototype.fmt_E32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_E32 = function(v) { return this.$val.fmt_E32(v); };
	fmt.ptr.prototype.fmt_f32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_f32 = function(v) { return this.$val.fmt_f32(v); };
	fmt.ptr.prototype.fmt_g32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_g32 = function(v) { return this.$val.fmt_g32(v); };
	fmt.ptr.prototype.fmt_G32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_G32 = function(v) { return this.$val.fmt_G32(v); };
	fmt.ptr.prototype.fmt_fb32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 98, 0, 32);
	};
	fmt.prototype.fmt_fb32 = function(v) { return this.$val.fmt_fb32(v); };
	fmt.ptr.prototype.fmt_c64 = function(v, verb) {
		var $ptr, f, v, verb;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 32, verb);
	};
	fmt.prototype.fmt_c64 = function(v, verb) { return this.$val.fmt_c64(v, verb); };
	fmt.ptr.prototype.fmt_c128 = function(v, verb) {
		var $ptr, f, v, verb;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 64, verb);
	};
	fmt.prototype.fmt_c128 = function(v, verb) { return this.$val.fmt_c128(v, verb); };
	fmt.ptr.prototype.fmt_complex = function(r, j, size, verb) {
		var $ptr, _3, f, i, j, oldPlus, oldSpace, oldWid, r, size, verb;
		f = this;
		f.buf.WriteByte(40);
		oldPlus = f.fmtFlags.plus;
		oldSpace = f.fmtFlags.space;
		oldWid = f.wid;
		i = 0;
		while (true) {
			_3 = verb;
			if (_3 === 98) {
				f.formatFloat(r, 98, 0, size);
			} else if (_3 === 101) {
				f.formatFloat(r, 101, doPrec(f, 6), size);
			} else if (_3 === 69) {
				f.formatFloat(r, 69, doPrec(f, 6), size);
			} else if ((_3 === 102) || (_3 === 70)) {
				f.formatFloat(r, 102, doPrec(f, 6), size);
			} else if (_3 === 103) {
				f.formatFloat(r, 103, doPrec(f, -1), size);
			} else if (_3 === 71) {
				f.formatFloat(r, 71, doPrec(f, -1), size);
			}
			if (!((i === 0))) {
				break;
			}
			f.fmtFlags.plus = true;
			f.fmtFlags.space = false;
			f.wid = oldWid;
			r = j;
			i = i + (1) >> 0;
		}
		f.fmtFlags.space = oldSpace;
		f.fmtFlags.plus = oldPlus;
		f.wid = oldWid;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_complex = function(r, j, size, verb) { return this.$val.fmt_complex(r, j, size, verb); };
	$ptrType(buffer).prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.$set($appendSlice(b.$get(), p));
		_tmp = p.$length;
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.$set($appendSlice(b.$get(), s));
		_tmp = s.length;
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var $ptr, b, c;
		b = this;
		b.$set($append(b.$get(), c));
		return $ifaceNil;
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var $ptr, b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), (r << 24 >>> 24)));
			return $ifaceNil;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
		return $ifaceNil;
	};
	newPrinter = function() {
		var $ptr, _r$2, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = $assertType(_r$2, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var $ptr, p;
		p = this;
		if (p.buf.$capacity > 1024) {
			return;
		}
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var $ptr, _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var $ptr, _1, b, p;
		p = this;
		_1 = b;
		if (_1 === 45) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === 43) {
			return p.fmt.fmtFlags.plus;
		} else if (_1 === 35) {
			return p.fmt.fmtFlags.sharp;
		} else if (_1 === 32) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === 48) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.add = function(c) {
		var $ptr, c, p;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(c);
	};
	pp.prototype.add = function(c) { return this.$val.add(c); };
	pp.ptr.prototype.Write = function(b) {
		var $ptr, _tuple, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		_tuple = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b);
		ret = _tuple[0];
		err = _tuple[1];
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Fprintf = function(w, format, a) {
		var $ptr, _r$2, _r$3, _tuple, a, err, format, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintf = Fprintf;
	Printf = function(format, a) {
		var $ptr, _r$2, _tuple, a, err, format, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = Fprintf(os.Stdout, format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Printf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Printf = Printf;
	Sprintf = function(format, a) {
		var $ptr, _r$2, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var $ptr, _r$2, _r$3, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = errors.New(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	Fprint = function(w, a) {
		var $ptr, _r$2, _r$3, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, false, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprint = Fprint;
	Fprintln = function(w, a) {
		var $ptr, _r$2, _r$3, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, true, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintln }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintln = Fprintln;
	getField = function(v, i) {
		var $ptr, _r$2, _r$3, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r$2 = v.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		val = _r$2;
		/* */ if ((val.Kind() === 20) && !val.IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((val.Kind() === 20) && !val.IsNil()) { */ case 2:
			_r$3 = val.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			val = _r$3;
		/* } */ case 3:
		return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var $ptr, x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var $ptr, _r$2, _r$3, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		p = this;
		if (!v.IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
			return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r$2 = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		p.add(37);
		p.add(33);
		p.add(verb);
		p.add(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if (p.value.IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r$2 = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				p.add(61);
				_r$4 = p.printArg(p.arg, 118, 0); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$s = 5; continue;
			/* } else if (p.value.IsValid()) { */ case 3:
				_r$5 = p.value.Type().String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				p.add(61);
				_r$7 = p.printValue(p.value, 118, 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
			/* } */ case 5:
		case 1:
		p.add(41);
		p.erroring = false;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var $ptr, _2, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_2 = verb;
			/* */ if ((_2 === 116) || (_2 === 118)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_2 === 116) || (_2 === 118)) { */ case 2:
				p.fmt.fmt_boolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f.$ptr = $ptr; $f._2 = _2; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmtC = function(c) {
		var $ptr, c, p, r, w, x;
		p = this;
		r = ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0);
		if (!((x = new $Int64(0, r), (x.$high === c.$high && x.$low === c.$low)))) {
			r = 65533;
		}
		w = utf8.EncodeRune($subslice(new sliceType(p.runeBuf), 0, 4), r);
		p.fmt.pad($subslice(new sliceType(p.runeBuf), 0, w));
	};
	pp.prototype.fmtC = function(c) { return this.$val.fmtC(c); };
	pp.ptr.prototype.fmtInt64 = function(v, verb) {
		var $ptr, _3, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_3 = verb;
			/* */ if (_3 === 98) { $s = 2; continue; }
			/* */ if (_3 === 99) { $s = 3; continue; }
			/* */ if ((_3 === 100) || (_3 === 118)) { $s = 4; continue; }
			/* */ if (_3 === 111) { $s = 5; continue; }
			/* */ if (_3 === 113) { $s = 6; continue; }
			/* */ if (_3 === 120) { $s = 7; continue; }
			/* */ if (_3 === 85) { $s = 8; continue; }
			/* */ if (_3 === 88) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_3 === 98) { */ case 2:
				p.fmt.integer(v, new $Uint64(0, 2), true, "0123456789abcdef");
				$s = 11; continue;
			/* } else if (_3 === 99) { */ case 3:
				p.fmtC(v);
				$s = 11; continue;
			/* } else if ((_3 === 100) || (_3 === 118)) { */ case 4:
				p.fmt.integer(v, new $Uint64(0, 10), true, "0123456789abcdef");
				$s = 11; continue;
			/* } else if (_3 === 111) { */ case 5:
				p.fmt.integer(v, new $Uint64(0, 8), true, "0123456789abcdef");
				$s = 11; continue;
			/* } else if (_3 === 113) { */ case 6:
				/* */ if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 12:
					p.fmt.fmt_qc(v);
					$s = 14; continue;
				/* } else { */ case 13:
					$r = p.badVerb(verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_3 === 120) { */ case 7:
				p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789abcdef");
				$s = 11; continue;
			/* } else if (_3 === 85) { */ case 8:
				p.fmtUnicode(v);
				$s = 11; continue;
			/* } else if (_3 === 88) { */ case 9:
				p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789ABCDEF");
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInt64 }; } $f.$ptr = $ptr; $f._3 = _3; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInt64 = function(v, verb) { return this.$val.fmtInt64(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var $ptr, leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtUnicode = function(v) {
		var $ptr, p, prec, precPresent, sharp, v;
		p = this;
		precPresent = p.fmt.fmtFlags.precPresent;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = false;
		prec = p.fmt.prec;
		if (!precPresent) {
			p.fmt.prec = 4;
			p.fmt.fmtFlags.precPresent = true;
		}
		p.fmt.fmtFlags.unicode = true;
		p.fmt.fmtFlags.uniQuote = sharp;
		p.fmt.integer(v, new $Uint64(0, 16), false, "0123456789ABCDEF");
		p.fmt.fmtFlags.unicode = false;
		p.fmt.fmtFlags.uniQuote = false;
		p.fmt.prec = prec;
		p.fmt.fmtFlags.precPresent = precPresent;
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmtUnicode = function(v) { return this.$val.fmtUnicode(v); };
	pp.ptr.prototype.fmtUint64 = function(v, verb) {
		var $ptr, _4, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_4 = verb;
			/* */ if (_4 === 98) { $s = 2; continue; }
			/* */ if (_4 === 99) { $s = 3; continue; }
			/* */ if (_4 === 100) { $s = 4; continue; }
			/* */ if (_4 === 118) { $s = 5; continue; }
			/* */ if (_4 === 111) { $s = 6; continue; }
			/* */ if (_4 === 113) { $s = 7; continue; }
			/* */ if (_4 === 120) { $s = 8; continue; }
			/* */ if (_4 === 88) { $s = 9; continue; }
			/* */ if (_4 === 85) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_4 === 98) { */ case 2:
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 2), false, "0123456789abcdef");
				$s = 12; continue;
			/* } else if (_4 === 99) { */ case 3:
				p.fmtC(new $Int64(v.$high, v.$low));
				$s = 12; continue;
			/* } else if (_4 === 100) { */ case 4:
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
				$s = 12; continue;
			/* } else if (_4 === 118) { */ case 5:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
				}
				$s = 12; continue;
			/* } else if (_4 === 111) { */ case 6:
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 8), false, "0123456789abcdef");
				$s = 12; continue;
			/* } else if (_4 === 113) { */ case 7:
				/* */ if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 13:
					p.fmt.fmt_qc(new $Int64(v.$high, v.$low));
					$s = 15; continue;
				/* } else { */ case 14:
					$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				$s = 12; continue;
			/* } else if (_4 === 120) { */ case 8:
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
				$s = 12; continue;
			/* } else if (_4 === 88) { */ case 9:
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789ABCDEF");
				$s = 12; continue;
			/* } else if (_4 === 85) { */ case 10:
				p.fmtUnicode(new $Int64(v.$high, v.$low));
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtUint64 }; } $f.$ptr = $ptr; $f._4 = _4; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtUint64 = function(v, verb) { return this.$val.fmtUint64(v, verb); };
	pp.ptr.prototype.fmtFloat32 = function(v, verb) {
		var $ptr, _5, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _5 = $f._5; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_5 = verb;
			/* */ if (_5 === 98) { $s = 2; continue; }
			/* */ if (_5 === 101) { $s = 3; continue; }
			/* */ if (_5 === 69) { $s = 4; continue; }
			/* */ if ((_5 === 102) || (_5 === 70)) { $s = 5; continue; }
			/* */ if ((_5 === 103) || (_5 === 118)) { $s = 6; continue; }
			/* */ if (_5 === 71) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_5 === 98) { */ case 2:
				p.fmt.fmt_fb32(v);
				$s = 9; continue;
			/* } else if (_5 === 101) { */ case 3:
				p.fmt.fmt_e32(v);
				$s = 9; continue;
			/* } else if (_5 === 69) { */ case 4:
				p.fmt.fmt_E32(v);
				$s = 9; continue;
			/* } else if ((_5 === 102) || (_5 === 70)) { */ case 5:
				p.fmt.fmt_f32(v);
				$s = 9; continue;
			/* } else if ((_5 === 103) || (_5 === 118)) { */ case 6:
				p.fmt.fmt_g32(v);
				$s = 9; continue;
			/* } else if (_5 === 71) { */ case 7:
				p.fmt.fmt_G32(v);
				$s = 9; continue;
			/* } else { */ case 8:
				$r = p.badVerb(verb); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 9:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat32 }; } $f.$ptr = $ptr; $f._5 = _5; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat32 = function(v, verb) { return this.$val.fmtFloat32(v, verb); };
	pp.ptr.prototype.fmtFloat64 = function(v, verb) {
		var $ptr, _6, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _6 = $f._6; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_6 = verb;
			/* */ if (_6 === 98) { $s = 2; continue; }
			/* */ if (_6 === 101) { $s = 3; continue; }
			/* */ if (_6 === 69) { $s = 4; continue; }
			/* */ if ((_6 === 102) || (_6 === 70)) { $s = 5; continue; }
			/* */ if ((_6 === 103) || (_6 === 118)) { $s = 6; continue; }
			/* */ if (_6 === 71) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_6 === 98) { */ case 2:
				p.fmt.fmt_fb64(v);
				$s = 9; continue;
			/* } else if (_6 === 101) { */ case 3:
				p.fmt.fmt_e64(v);
				$s = 9; continue;
			/* } else if (_6 === 69) { */ case 4:
				p.fmt.fmt_E64(v);
				$s = 9; continue;
			/* } else if ((_6 === 102) || (_6 === 70)) { */ case 5:
				p.fmt.fmt_f64(v);
				$s = 9; continue;
			/* } else if ((_6 === 103) || (_6 === 118)) { */ case 6:
				p.fmt.fmt_g64(v);
				$s = 9; continue;
			/* } else if (_6 === 71) { */ case 7:
				p.fmt.fmt_G64(v);
				$s = 9; continue;
			/* } else { */ case 8:
				$r = p.badVerb(verb); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 9:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat64 }; } $f.$ptr = $ptr; $f._6 = _6; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat64 = function(v, verb) { return this.$val.fmtFloat64(v, verb); };
	pp.ptr.prototype.fmtComplex64 = function(v, verb) {
		var $ptr, _7, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _7 = $f._7; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_7 = verb;
			/* */ if ((_7 === 98) || (_7 === 101) || (_7 === 69) || (_7 === 102) || (_7 === 70) || (_7 === 103) || (_7 === 71)) { $s = 2; continue; }
			/* */ if (_7 === 118) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((_7 === 98) || (_7 === 101) || (_7 === 69) || (_7 === 102) || (_7 === 70) || (_7 === 103) || (_7 === 71)) { */ case 2:
				p.fmt.fmt_c64(v, verb);
				$s = 5; continue;
			/* } else if (_7 === 118) { */ case 3:
				p.fmt.fmt_c64(v, 103);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex64 }; } $f.$ptr = $ptr; $f._7 = _7; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex64 = function(v, verb) { return this.$val.fmtComplex64(v, verb); };
	pp.ptr.prototype.fmtComplex128 = function(v, verb) {
		var $ptr, _8, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _8 = $f._8; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_8 = verb;
			/* */ if ((_8 === 98) || (_8 === 101) || (_8 === 69) || (_8 === 102) || (_8 === 70) || (_8 === 103) || (_8 === 71)) { $s = 2; continue; }
			/* */ if (_8 === 118) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((_8 === 98) || (_8 === 101) || (_8 === 69) || (_8 === 102) || (_8 === 70) || (_8 === 103) || (_8 === 71)) { */ case 2:
				p.fmt.fmt_c128(v, verb);
				$s = 5; continue;
			/* } else if (_8 === 118) { */ case 3:
				p.fmt.fmt_c128(v, 103);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex128 }; } $f.$ptr = $ptr; $f._8 = _8; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex128 = function(v, verb) { return this.$val.fmtComplex128(v, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var $ptr, _9, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _9 = $f._9; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_9 = verb;
			/* */ if (_9 === 118) { $s = 2; continue; }
			/* */ if (_9 === 115) { $s = 3; continue; }
			/* */ if (_9 === 120) { $s = 4; continue; }
			/* */ if (_9 === 88) { $s = 5; continue; }
			/* */ if (_9 === 113) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_9 === 118) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmt_q(v);
				} else {
					p.fmt.fmt_s(v);
				}
				$s = 8; continue;
			/* } else if (_9 === 115) { */ case 3:
				p.fmt.fmt_s(v);
				$s = 8; continue;
			/* } else if (_9 === 120) { */ case 4:
				p.fmt.fmt_sx(v, "0123456789abcdef");
				$s = 8; continue;
			/* } else if (_9 === 88) { */ case 5:
				p.fmt.fmt_sx(v, "0123456789ABCDEF");
				$s = 8; continue;
			/* } else if (_9 === 113) { */ case 6:
				p.fmt.fmt_q(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f.$ptr = $ptr; $f._9 = _9; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typ, depth) {
		var $ptr, _10, _i, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, c, depth, i, p, typ, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _10 = $f._10; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; c = $f.c; depth = $f.depth; i = $f.i; p = $f.p; typ = $f.typ; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ((verb === 118) || (verb === 100)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((verb === 118) || (verb === 100)) { */ case 1:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 3:
				/* */ if (v === sliceType.nil) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (v === sliceType.nil) { */ case 6:
					/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 8:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("[]byte(nil)");
						$s = 10; continue;
					/* } else { */ case 9:
						_r$2 = typ.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilParenBytes);
					/* } */ case 10:
					return;
				/* } */ case 7:
				/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 13:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(bytesBytes);
					$s = 15; continue;
				/* } else { */ case 14:
					_r$4 = typ.String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$4); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				/* } */ case 15:
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
			/* } */ case 5:
			_ref = v;
			_i = 0;
			/* while (true) { */ case 18:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 19; continue; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				_r$6 = p.printArg(new $Uint8(c), 118, depth + 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				_i++;
			/* } */ $s = 18; continue; case 19:
			if (p.fmt.fmtFlags.sharpV) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			} else {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
			}
			return;
		/* } */ case 2:
			_10 = verb;
			/* */ if (_10 === 115) { $s = 22; continue; }
			/* */ if (_10 === 120) { $s = 23; continue; }
			/* */ if (_10 === 88) { $s = 24; continue; }
			/* */ if (_10 === 113) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_10 === 115) { */ case 22:
				p.fmt.fmt_s($bytesToString(v));
				$s = 27; continue;
			/* } else if (_10 === 120) { */ case 23:
				p.fmt.fmt_bx(v, "0123456789abcdef");
				$s = 27; continue;
			/* } else if (_10 === 88) { */ case 24:
				p.fmt.fmt_bx(v, "0123456789ABCDEF");
				$s = 27; continue;
			/* } else if (_10 === 113) { */ case 25:
				p.fmt.fmt_q($bytesToString(v));
				$s = 27; continue;
			/* } else { */ case 26:
				$r = p.badVerb(verb); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 27:
		case 21:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f.$ptr = $ptr; $f._10 = _10; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f.c = c; $f.depth = depth; $f.i = i; $f.p = p; $f.typ = typ; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typ, depth) { return this.$val.fmtBytes(v, verb, typ, depth); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var $ptr, _11, _12, _r$2, _r$3, p, u, use0x64, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _11 = $f._11; _12 = $f._12; _r$2 = $f._r$2; _r$3 = $f._r$3; p = $f.p; u = $f.u; use0x64 = $f.use0x64; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		p = this;
		use0x64 = true;
			_11 = verb;
			/* */ if ((_11 === 112) || (_11 === 118)) { $s = 2; continue; }
			/* */ if ((_11 === 98) || (_11 === 100) || (_11 === 111) || (_11 === 120) || (_11 === 88)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((_11 === 112) || (_11 === 118)) { */ case 2:
				$s = 5; continue;
			/* } else if ((_11 === 98) || (_11 === 100) || (_11 === 111) || (_11 === 120) || (_11 === 88)) { */ case 3:
				use0x64 = false;
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 5:
		case 1:
		u = 0;
			_12 = value.Kind();
			/* */ if ((_12 === 18) || (_12 === 19) || (_12 === 21) || (_12 === 22) || (_12 === 23) || (_12 === 26)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((_12 === 18) || (_12 === 19) || (_12 === 21) || (_12 === 22) || (_12 === 23) || (_12 === 26)) { */ case 8:
				u = value.Pointer();
				$s = 10; continue;
			/* } else { */ case 9:
				$r = p.badVerb(verb); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 10:
		case 7:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
		/* */ if ((verb === 118) && (u === 0)) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
			p.add(40);
			_r$2 = value.Type().String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.add(41);
			p.add(40);
			if (u === 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilBytes);
			} else {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);
			}
			p.add(41);
			$s = 15; continue;
		/* } else if ((verb === 118) && (u === 0)) { */ case 13:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
			$s = 15; continue;
		/* } else { */ case 14:
			/* */ if (use0x64) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (use0x64) { */ case 18:
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
				$s = 20; continue;
			/* } else { */ case 19:
				$r = p.fmtUint64(new $Uint64(0, u.constructor === Number ? u : 1), verb); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 20:
		/* } */ case 15:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f.$ptr = $ptr; $f._11 = _11; $f._12 = _12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.p = p; $f.u = u; $f.use0x64 = use0x64; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var $ptr, _r$2, _r$3, arg, err, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; arg = $f.arg; err = $f.err; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r$2 = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
			if ((v.Kind() === 22) && v.IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				return;
			}
			if (p.panicking) {
				$panic(err);
			}
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
			p.add(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(panicBytes);
			p.panicking = true;
			_r$3 = p.printArg(err, 118, 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.arg = arg; $f.err = err; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.clearSpecialFlags = function() {
		var $ptr, p, plusV, sharpV;
		plusV = false;
		sharpV = false;
		p = this;
		plusV = p.fmt.fmtFlags.plusV;
		if (plusV) {
			p.fmt.fmtFlags.plus = true;
			p.fmt.fmtFlags.plusV = false;
		}
		sharpV = p.fmt.fmtFlags.sharpV;
		if (sharpV) {
			p.fmt.fmtFlags.sharp = true;
			p.fmt.fmtFlags.sharpV = false;
		}
		return [plusV, sharpV];
	};
	pp.prototype.clearSpecialFlags = function() { return this.$val.clearSpecialFlags(); };
	pp.ptr.prototype.restoreSpecialFlags = function(plusV, sharpV) {
		var $ptr, p, plusV, sharpV;
		p = this;
		if (plusV) {
			p.fmt.fmtFlags.plus = false;
			p.fmt.fmtFlags.plusV = true;
		}
		if (sharpV) {
			p.fmt.fmtFlags.sharp = false;
			p.fmt.fmtFlags.sharpV = true;
		}
	};
	pp.prototype.restoreSpecialFlags = function(plusV, sharpV) { return this.$val.restoreSpecialFlags(plusV, sharpV); };
	pp.ptr.prototype.handleMethods = function(verb, depth) {
		var $ptr, _13, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _tuple, _tuple$1, _tuple$2, depth, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _13 = $f._13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; depth = $f.depth; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true);
		formatter = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			_tuple$1 = p.clearSpecialFlags();
			$deferred.push([$methodVal(p, "restoreSpecialFlags"), [_tuple$1[0], _tuple$1[1]]]);
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$2 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$2[0];
			ok$1 = _tuple$2[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r$2 = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r$2); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
				_13 = verb;
				/* */ if ((_13 === 118) || (_13 === 115) || (_13 === 120) || (_13 === 88) || (_13 === 113)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((_13 === 118) || (_13 === 115) || (_13 === 120) || (_13 === 88) || (_13 === 113)) { */ case 12:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 14:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$3 = v.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$4 = p.printArg(new $String(_r$3), verb, depth); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_r$4;
						return handled;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 15:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$5 = v$1.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$6 = p.printArg(new $String(_r$5), verb, depth); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
						return handled;
					/* } */ case 16:
				/* } */ case 13:
			case 11:
		/* } */ case 6:
		handled = false;
		return handled;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f.$ptr = $ptr; $f._13 = _13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.depth = depth; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb, depth) { return this.$val.handleMethods(verb, depth); };
	pp.ptr.prototype.printArg = function(arg, verb, depth) {
		var $ptr, _14, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, arg, depth, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, handled, p, verb, wasString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _14 = $f._14; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; arg = $f.arg; depth = $f.depth; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; handled = $f.handled; p = $f.p; verb = $f.verb; wasString = $f.wasString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
			/* */ if ((verb === 84) || (verb === 118)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((verb === 84) || (verb === 118)) { */ case 3:
				p.fmt.pad(nilAngleBytes);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			wasString = false;
			return wasString;
		/* } */ case 2:
			_14 = verb;
			/* */ if (_14 === 84) { $s = 8; continue; }
			/* */ if (_14 === 112) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_14 === 84) { */ case 8:
				_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = p.printArg(new $String(_r$2), 115, 0); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				wasString = false;
				return wasString;
			/* } else if (_14 === 112) { */ case 9:
				_r$4 = reflect.ValueOf(arg); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = p.fmtPointer(_r$4, verb); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				wasString = false;
				return wasString;
			/* } */ case 10:
		case 7:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, sliceType, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 33; continue; }
		/* */ $s = 34; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 15:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 16:
			f$1 = _ref.$val;
			$r = p.fmtFloat32(f$1, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 17:
			f$2 = _ref.$val;
			$r = p.fmtFloat64(f$2, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 18:
			f$3 = _ref.$val;
			$r = p.fmtComplex64(f$3, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 19:
			f$4 = _ref.$val;
			$r = p.fmtComplex128(f$4, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 20:
			f$5 = _ref.$val;
			$r = p.fmtInt64(new $Int64(0, f$5), verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 21:
			f$6 = _ref.$val;
			$r = p.fmtInt64(new $Int64(0, f$6), verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 22:
			f$7 = _ref.$val;
			$r = p.fmtInt64(new $Int64(0, f$7), verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 23:
			f$8 = _ref.$val;
			$r = p.fmtInt64(new $Int64(0, f$8), verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 24:
			f$9 = _ref.$val;
			$r = p.fmtInt64(f$9, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 25:
			f$10 = _ref.$val;
			$r = p.fmtUint64(new $Uint64(0, f$10), verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 26:
			f$11 = _ref.$val;
			$r = p.fmtUint64(new $Uint64(0, f$11), verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 27:
			f$12 = _ref.$val;
			$r = p.fmtUint64(new $Uint64(0, f$12), verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 28:
			f$13 = _ref.$val;
			$r = p.fmtUint64(new $Uint64(0, f$13), verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 29:
			f$14 = _ref.$val;
			$r = p.fmtUint64(f$14, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 30:
			f$15 = _ref.$val;
			$r = p.fmtUint64(new $Uint64(0, f$15.constructor === Number ? f$15 : 1), verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 31:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = (verb === 115) || (verb === 118);
			$s = 35; continue;
		/* } else if ($assertType(_ref, sliceType, true)[1]) { */ case 32:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, $ifaceNil, depth); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = verb === 115;
			$s = 35; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 33:
			f$18 = _ref.$val;
			_r$5 = p.printReflectValue(f$18, verb, depth); /* */ $s = 54; case 54: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			wasString = _r$5;
			/* */ $s = 55; case 55:
			return wasString;
		/* } else { */ case 34:
			f$19 = _ref;
			_r$6 = p.handleMethods(verb, depth); /* */ $s = 56; case 56: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			handled = _r$6;
			if (handled) {
				wasString = false;
				return wasString;
			}
			_r$7 = reflect.ValueOf(arg); /* */ $s = 57; case 57: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = p.printReflectValue(_r$7, verb, depth); /* */ $s = 58; case 58: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			wasString = _r$8;
			/* */ $s = 59; case 59:
			return wasString;
		/* } */ case 35:
		p.arg = $ifaceNil;
		return wasString;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f.$ptr = $ptr; $f._14 = _14; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f.arg = arg; $f.depth = depth; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.handled = handled; $f.p = p; $f.verb = verb; $f.wasString = wasString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb, depth) { return this.$val.printArg(arg, verb, depth); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var $ptr, _15, _r$2, _r$3, _r$4, _r$5, _r$6, depth, handled, p, value, verb, wasString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _15 = $f._15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; depth = $f.depth; handled = $f.handled; p = $f.p; value = $f.value; verb = $f.verb; wasString = $f.wasString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		value = value;
		p = this;
		/* */ if (!value.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!value.IsValid()) { */ case 1:
			/* */ if ((verb === 84) || (verb === 118)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((verb === 84) || (verb === 118)) { */ case 3:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			wasString = false;
			return wasString;
		/* } */ case 2:
			_15 = verb;
			/* */ if (_15 === 84) { $s = 8; continue; }
			/* */ if (_15 === 112) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_15 === 84) { */ case 8:
				_r$2 = value.Type().String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = p.printArg(new $String(_r$2), 115, 0); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				wasString = false;
				return wasString;
			/* } else if (_15 === 112) { */ case 9:
				$r = p.fmtPointer(value, verb); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				wasString = false;
				return wasString;
			/* } */ case 10:
		case 7:
		p.arg = $ifaceNil;
		/* */ if (value.CanInterface()) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (value.CanInterface()) { */ case 14:
			_r$4 = value.Interface(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			p.arg = _r$4;
		/* } */ case 15:
		_r$5 = p.handleMethods(verb, depth); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		handled = _r$5;
		if (handled) {
			wasString = false;
			return wasString;
		}
		_r$6 = p.printReflectValue(value, verb, depth); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		wasString = _r$6;
		/* */ $s = 19; case 19:
		return wasString;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f.$ptr = $ptr; $f._15 = _15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.depth = depth; $f.handled = handled; $f.p = p; $f.value = value; $f.verb = verb; $f.wasString = wasString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	pp.ptr.prototype.printReflectValue = function(value, verb, depth) {
		var $ptr, _16, _17, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _v, a, bytes, depth, f, f$1, i, i$1, i$2, i$3, key, keys, oldValue, p, t, typ, v, v$1, value, value$1, verb, wasString, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _16 = $f._16; _17 = $f._17; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; f$1 = $f.f$1; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; key = $f.key; keys = $f.keys; oldValue = $f.oldValue; p = $f.p; t = $f.t; typ = $f.typ; v = $f.v; v$1 = $f.v$1; value = $f.value; value$1 = $f.value$1; verb = $f.verb; wasString = $f.wasString; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		value = value;
		p = this;
		oldValue = p.value;
		p.value = value;
			f = value;
			_16 = f.Kind();
			/* */ if (_16 === 0) { $s = 2; continue; }
			/* */ if (_16 === 1) { $s = 3; continue; }
			/* */ if ((_16 === 2) || (_16 === 3) || (_16 === 4) || (_16 === 5) || (_16 === 6)) { $s = 4; continue; }
			/* */ if ((_16 === 7) || (_16 === 8) || (_16 === 9) || (_16 === 10) || (_16 === 11) || (_16 === 12)) { $s = 5; continue; }
			/* */ if ((_16 === 13) || (_16 === 14)) { $s = 6; continue; }
			/* */ if ((_16 === 15) || (_16 === 16)) { $s = 7; continue; }
			/* */ if (_16 === 24) { $s = 8; continue; }
			/* */ if (_16 === 21) { $s = 9; continue; }
			/* */ if (_16 === 25) { $s = 10; continue; }
			/* */ if (_16 === 20) { $s = 11; continue; }
			/* */ if ((_16 === 17) || (_16 === 23)) { $s = 12; continue; }
			/* */ if (_16 === 22) { $s = 13; continue; }
			/* */ if ((_16 === 18) || (_16 === 19) || (_16 === 26)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (_16 === 0) { */ case 2:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<invalid reflect.Value>");
				$s = 16; continue;
			/* } else if (_16 === 1) { */ case 3:
				$r = p.fmtBool(f.Bool(), verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else if ((_16 === 2) || (_16 === 3) || (_16 === 4) || (_16 === 5) || (_16 === 6)) { */ case 4:
				$r = p.fmtInt64(f.Int(), verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else if ((_16 === 7) || (_16 === 8) || (_16 === 9) || (_16 === 10) || (_16 === 11) || (_16 === 12)) { */ case 5:
				$r = p.fmtUint64(f.Uint(), verb); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else if ((_16 === 13) || (_16 === 14)) { */ case 6:
				_r$2 = f.Type().Size(); /* */ $s = 23; case 23: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (_r$2 === 4) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (_r$2 === 4) { */ case 20:
					$r = p.fmtFloat32($fround(f.Float()), verb); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 22; continue;
				/* } else { */ case 21:
					$r = p.fmtFloat64(f.Float(), verb); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 22:
				$s = 16; continue;
			/* } else if ((_16 === 15) || (_16 === 16)) { */ case 7:
				_r$3 = f.Type().Size(); /* */ $s = 29; case 29: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 8) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (_r$3 === 8) { */ case 26:
					$r = p.fmtComplex64((x = f.Complex(), new $Complex64(x.$real, x.$imag)), verb); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 28; continue;
				/* } else { */ case 27:
					$r = p.fmtComplex128(f.Complex(), verb); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 28:
				$s = 16; continue;
			/* } else if (_16 === 24) { */ case 8:
				_r$4 = f.String(); /* */ $s = 32; case 32: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$4, verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else if (_16 === 21) { */ case 9:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 34; continue; }
				/* */ $s = 35; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 34:
					_r$5 = f.Type().String(); /* */ $s = 37; case 37: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 38; case 38: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					if (f.IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						/* break; */ $s = 1; continue;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 36; continue;
				/* } else { */ case 35:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(mapBytes);
				/* } */ case 36:
				_r$7 = f.MapKeys(); /* */ $s = 39; case 39: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				keys = _r$7;
				_ref = keys;
				_i = 0;
				/* while (true) { */ case 40:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 41; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					_r$8 = p.printValue(key, verb, depth + 1 >> 0); /* */ $s = 42; case 42: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					_r$9 = f.MapIndex(key); /* */ $s = 43; case 43: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_r$10 = p.printValue(_r$9, verb, depth + 1 >> 0); /* */ $s = 44; case 44: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$10;
					_i++;
				/* } */ $s = 40; continue; case 41:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 16; continue;
			/* } else if (_16 === 25) { */ case 10:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 45; continue; }
				/* */ $s = 46; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 45:
					_r$11 = value.Type().String(); /* */ $s = 47; case 47: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_r$12 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$11); /* */ $s = 48; case 48: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$12;
				/* } */ case 46:
				p.add(123);
				v = f;
				t = v.Type();
				i$1 = 0;
				/* while (true) { */ case 49:
					/* if (!(i$1 < v.NumField())) { break; } */ if(!(i$1 < v.NumField())) { $s = 50; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 51; continue; }
					/* */ $s = 52; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 51:
						_r$13 = t.Field(i$1); /* */ $s = 53; case 53: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						f$1 = $clone(_r$13, reflect.StructField);
						if (!(f$1.Name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(f$1.Name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
						}
					/* } */ case 52:
					_r$14 = getField(v, i$1); /* */ $s = 54; case 54: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_r$15 = p.printValue(_r$14, verb, depth + 1 >> 0); /* */ $s = 55; case 55: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_r$15;
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 49; continue; case 50:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				$s = 16; continue;
			/* } else if (_16 === 20) { */ case 11:
				_r$16 = f.Elem(); /* */ $s = 56; case 56: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				value$1 = _r$16;
				/* */ if (!value$1.IsValid()) { $s = 57; continue; }
				/* */ $s = 58; continue;
				/* if (!value$1.IsValid()) { */ case 57:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 60; continue; }
					/* */ $s = 61; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 60:
						_r$17 = f.Type().String(); /* */ $s = 63; case 63: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						_r$18 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$17); /* */ $s = 64; case 64: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						_r$18;
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilParenBytes);
						$s = 62; continue;
					/* } else { */ case 61:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
					/* } */ case 62:
					$s = 59; continue;
				/* } else { */ case 58:
					_r$19 = p.printValue(value$1, verb, depth + 1 >> 0); /* */ $s = 65; case 65: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					wasString = _r$19;
				/* } */ case 59:
				$s = 16; continue;
			/* } else if ((_16 === 17) || (_16 === 23)) { */ case 12:
				typ = f.Type();
				_r$20 = typ.Elem(); /* */ $s = 69; case 69: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_r$21 = _r$20.Kind(); /* */ $s = 70; case 70: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				if (!(_r$21 === 8)) { _v = false; $s = 68; continue s; }
				_r$22 = typ.Elem(); /* */ $s = 71; case 71: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_v = $interfaceIsEqual(_r$22, byteType) || (verb === 115) || (verb === 113) || (verb === 120); case 68:
				/* */ if (_v) { $s = 66; continue; }
				/* */ $s = 67; continue;
				/* if (_v) { */ case 66:
					bytes = sliceType.nil;
					/* */ if (f.Kind() === 23) { $s = 72; continue; }
					/* */ if (f.CanAddr()) { $s = 73; continue; }
					/* */ $s = 74; continue;
					/* if (f.Kind() === 23) { */ case 72:
						_r$23 = f.Bytes(); /* */ $s = 76; case 76: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
						bytes = _r$23;
						$s = 75; continue;
					/* } else if (f.CanAddr()) { */ case 73:
						_r$24 = f.Slice(0, f.Len()); /* */ $s = 77; case 77: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
						_r$25 = _r$24.Bytes(); /* */ $s = 78; case 78: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
						bytes = _r$25;
						$s = 75; continue;
					/* } else { */ case 74:
						bytes = $makeSlice(sliceType, f.Len());
						_ref$1 = bytes;
						_i$1 = 0;
						/* while (true) { */ case 79:
							/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 80; continue; }
							i$2 = _i$1;
							_r$26 = f.Index(i$2); /* */ $s = 81; case 81: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
							_r$27 = _r$26.Uint(); /* */ $s = 82; case 82: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
							((i$2 < 0 || i$2 >= bytes.$length) ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + i$2] = (_r$27.$low << 24 >>> 24));
							_i$1++;
						/* } */ $s = 79; continue; case 80:
					/* } */ case 75:
					$r = p.fmtBytes(bytes, verb, typ, depth); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					wasString = verb === 115;
					/* break; */ $s = 1; continue;
				/* } */ case 67:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 84; continue; }
				/* */ $s = 85; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 84:
					_r$28 = value.Type().String(); /* */ $s = 87; case 87: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					_r$29 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$28); /* */ $s = 88; case 88: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					_r$29;
					if ((f.Kind() === 23) && f.IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						/* break; */ $s = 1; continue;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 86; continue;
				/* } else { */ case 85:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
				/* } */ case 86:
				i$3 = 0;
				/* while (true) { */ case 89:
					/* if (!(i$3 < f.Len())) { break; } */ if(!(i$3 < f.Len())) { $s = 90; continue; }
					if (i$3 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					_r$30 = f.Index(i$3); /* */ $s = 91; case 91: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					_r$31 = p.printValue(_r$30, verb, depth + 1 >> 0); /* */ $s = 92; case 92: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
					_r$31;
					i$3 = i$3 + (1) >> 0;
				/* } */ $s = 89; continue; case 90:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 16; continue;
			/* } else if (_16 === 22) { */ case 13:
				v$1 = f.Pointer();
				/* */ if (!((v$1 === 0)) && (depth === 0)) { $s = 93; continue; }
				/* */ $s = 94; continue;
				/* if (!((v$1 === 0)) && (depth === 0)) { */ case 93:
						_r$32 = f.Elem(); /* */ $s = 96; case 96: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
						a = _r$32;
						_17 = a.Kind();
						/* */ if ((_17 === 17) || (_17 === 23)) { $s = 97; continue; }
						/* */ if (_17 === 25) { $s = 98; continue; }
						/* */ if (_17 === 21) { $s = 99; continue; }
						/* */ $s = 100; continue;
						/* if ((_17 === 17) || (_17 === 23)) { */ case 97:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							_r$33 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 101; case 101: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
							_r$33;
							/* break BigSwitch; */ $s = 1; continue s;
							$s = 100; continue;
						/* } else if (_17 === 25) { */ case 98:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							_r$34 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 102; case 102: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
							_r$34;
							/* break BigSwitch; */ $s = 1; continue s;
							$s = 100; continue;
						/* } else if (_17 === 21) { */ case 99:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							_r$35 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 103; case 103: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
							_r$35;
							/* break BigSwitch; */ $s = 1; continue s;
						/* } */ case 100:
					case 95:
				/* } */ case 94:
				$r = p.fmtPointer(value, verb); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else if ((_16 === 18) || (_16 === 19) || (_16 === 26)) { */ case 14:
				$r = p.fmtPointer(value, verb); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else { */ case 15:
				$r = p.unknownType(f); /* */ $s = 106; case 106: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 16:
		case 1:
		p.value = oldValue;
		wasString = wasString;
		return wasString;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printReflectValue }; } $f.$ptr = $ptr; $f._16 = _16; $f._17 = _17; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.f$1 = f$1; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.key = key; $f.keys = keys; $f.oldValue = oldValue; $f.p = p; $f.t = t; $f.typ = typ; $f.v = v; $f.v$1 = v$1; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.wasString = wasString; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printReflectValue = function(value, verb, depth) { return this.$val.printReflectValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var $ptr, _18, _r$2, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _18 = $f._18; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; argNum = $f.argNum; isInt = $f.isInt; n = $f.n; n$1 = $f.n$1; newArgNum = $f.newArgNum; num = $f.num; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r$2 = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
					_18 = v.Kind();
					if ((_18 === 2) || (_18 === 3) || (_18 === 4) || (_18 === 5) || (_18 === 6)) {
						n = v.Int();
						if ((x = new $Int64(0, ((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)), (x.$high === n.$high && x.$low === n.$low))) {
							num = ((n.$low + ((n.$high >> 31) * 4294967296)) >> 0);
							isInt = true;
						}
					} else if ((_18 === 7) || (_18 === 8) || (_18 === 9) || (_18 === 10) || (_18 === 11) || (_18 === 12)) {
						n$1 = v.Uint();
						if ((x$1 = new $Int64(n$1.$high, n$1.$low), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = new $Uint64(0, (n$1.$low >> 0)), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = (n$1.$low >> 0);
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		return [num, isInt, newArgNum];
		/* */ } return; } if ($f === undefined) { $f = { $blk: intFromArg }; } $f.$ptr = $ptr; $f._18 = _18; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.argNum = argNum; $f.isInt = isInt; $f.n = n; $f.n$1 = n$1; $f.newArgNum = newArgNum; $f.num = num; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseArgNumber = function(format) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber(format.substring(i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var $ptr, _19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, arg$1, argNum, c, end, format, i, lasti, p, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _19 = $f._19; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; arg$1 = $f.arg$1; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; lasti = $f.lasti; p = $f.p; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(format.substring(lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			F:
			while (true) {
				if (!(i < end)) { break; }
				_19 = format.charCodeAt(i);
				if (_19 === 35) {
					p.fmt.fmtFlags.sharp = true;
				} else if (_19 === 48) {
					p.fmt.fmtFlags.zero = true;
				} else if (_19 === 43) {
					p.fmt.fmtFlags.plus = true;
				} else if (_19 === 45) {
					p.fmt.fmtFlags.minus = true;
				} else if (_19 === 32) {
					p.fmt.fmtFlags.space = true;
				} else {
					break F;
				}
				i = i + (1) >> 0;
			}
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 3:
				i = i + (1) >> 0;
				_r$2 = intFromArg(a, argNum); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badWidthBytes);
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
				}
				afterIndex = false;
				$s = 5; continue;
			/* } else { */ case 4:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 5:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 7:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 9:
					i = i + (1) >> 0;
					_r$3 = intFromArg(a, argNum); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$4 = _r$3;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badPrecBytes);
					}
					afterIndex = false;
					$s = 11; continue;
				/* } else { */ case 10:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 11:
			/* } */ case 8:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			/* */ if (i >= end) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (i >= end) { */ case 13:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(noVerbBytes);
				/* continue; */ $s = 1; continue;
			/* } */ case 14:
			_tuple$7 = utf8.DecodeRuneInString(format.substring(i));
			c = _tuple$7[0];
			w = _tuple$7[1];
			i = i + (w) >> 0;
			/* */ if (c === 37) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (c === 37) { */ case 15:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
				/* continue; */ $s = 1; continue;
			/* } */ case 16:
			/* */ if (!p.goodArgNum) { $s = 17; continue; }
			/* */ if (argNum >= a.$length) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (!p.goodArgNum) { */ case 17:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
				p.add(c);
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badIndexBytes);
				/* continue; */ $s = 1; continue;
				$s = 19; continue;
			/* } else if (argNum >= a.$length) { */ case 18:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
				p.add(c);
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(missingBytes);
				/* continue; */ $s = 1; continue;
			/* } */ case 19:
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			argNum = argNum + (1) >> 0;
			if (c === 118) {
				if (p.fmt.fmtFlags.sharp) {
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.sharpV = true;
				}
				if (p.fmt.fmtFlags.plus) {
					p.fmt.fmtFlags.plus = false;
					p.fmt.fmtFlags.plusV = true;
				}
			}
			_r$4 = p.printArg(arg, c, 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 21:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(extraBytes);
			/* while (true) { */ case 23:
				/* if (!(argNum < a.$length)) { break; } */ if(!(argNum < a.$length)) { $s = 24; continue; }
				arg$1 = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
				/* */ if (!($interfaceIsEqual(arg$1, $ifaceNil))) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (!($interfaceIsEqual(arg$1, $ifaceNil))) { */ case 25:
					_r$5 = reflect.TypeOf(arg$1).String(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				/* } */ case 26:
				_r$7 = p.printArg(arg$1, 118, 0); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				if ((argNum + 1 >> 0) < a.$length) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
				}
				argNum = argNum + (1) >> 0;
			/* } */ $s = 23; continue; case 24:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 22:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f.$ptr = $ptr; $f._19 = _19; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.arg$1 = arg$1; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.lasti = lasti; $f.p = p; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a, addspace, addnewline) {
		var $ptr, _r$2, _r$3, _v, a, addnewline, addspace, arg, argNum, isString, p, prevString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _v = $f._v; a = $f.a; addnewline = $f.addnewline; addspace = $f.addspace; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		argNum = 0;
		/* while (true) { */ case 1:
			/* if (!(argNum < a.$length)) { break; } */ if(!(argNum < a.$length)) { $s = 2; continue; }
			p.fmt.clearflags();
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			/* */ if (argNum > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (argNum > 0) { */ case 3:
				if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 5; continue s; }
				_r$2 = reflect.TypeOf(arg).Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 24; case 5:
				isString = _v;
				if (addspace || !isString && !prevString) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
				}
			/* } */ case 4:
			_r$3 = p.printArg(arg, 118, 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			prevString = _r$3;
			argNum = argNum + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (addnewline) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._v = _v; $f.a = a; $f.addnewline = addnewline; $f.addspace = addspace; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrint = function(a, addspace, addnewline) { return this.$val.doPrint(a, addspace, addnewline); };
	ss.ptr.prototype.Read = function(buf) {
		var $ptr, _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var $ptr, _r$2, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.peekRune >= 0) {
			s.count = s.count + (1) >> 0;
			r = s.peekRune;
			size = utf8.RuneLen(r);
			s.prevRune = r;
			s.peekRune = -1;
			return [r, size, err];
		}
		if (s.atEOF || s.ssave.nlIsEnd && (s.prevRune === 10) || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			return [r, size, err];
		}
		_r$2 = s.rr.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			s.prevRune = r;
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var $ptr, _r$2, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r$2 = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				return r;
			}
			s.error(err);
		}
		return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var $ptr, _r$2, _tuple, ok, s, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; ok = $f.ok; s = $f.s; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_tuple = $assertType(s.rr, runeUnreader, true);
		u = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$2 = u.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			s.peekRune = s.prevRune;
		/* } */ case 3:
		s.prevRune = -1;
		s.count = s.count - (1) >> 0;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.ok = ok; $f.s = s; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var $ptr, _r$2, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r$2 = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		tok = _r$2;
		return [tok, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var $ptr, _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), arrayType$2);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var $ptr, r;
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var $ptr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f.$ptr = $ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.free = function(old) {
		var $ptr, old, s;
		old = $clone(old, ssave);
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rr = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var $ptr, _r$2, _r$3, _r$4, _v, r, s, stopAtNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _v = $f._v; r = $f.r; s = $f.s; stopAtNewline = $f.stopAtNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r$2 = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			r = _r$2;
			if (r === -1) {
				return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$3 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (stopAtNewline) {
					/* break; */ $s = 2; continue;
				}
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$4 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.skipSpace }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._v = _v; $f.r = r; $f.s = s; $f.stopAtNewline = stopAtNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var $ptr, _r$2, _r$3, _r$4, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.skipSpace(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r$2 = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			r = _r$2;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$3 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$3) { */ case 7:
				_r$4 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		return (x = s.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var $ptr, _r$2, _r$3, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		r = _r$2;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$3 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 3:
		return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "computePadding", name: "computePadding", pkg: "fmt", typ: $funcType([$Int], [sliceType, $Int, $Int], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int, sliceType], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "integer", name: "integer", pkg: "fmt", typ: $funcType([$Int64, $Uint64, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "formatFloat", name: "formatFloat", pkg: "fmt", typ: $funcType([$Float64, $Uint8, $Int, $Int], [], false)}, {prop: "fmt_e64", name: "fmt_e64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_E64", name: "fmt_E64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_f64", name: "fmt_f64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_g64", name: "fmt_g64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_G64", name: "fmt_G64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_fb64", name: "fmt_fb64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_e32", name: "fmt_e32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_E32", name: "fmt_E32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_f32", name: "fmt_f32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_g32", name: "fmt_g32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_G32", name: "fmt_G32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_fb32", name: "fmt_fb32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_c64", name: "fmt_c64", pkg: "fmt", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmt_c128", name: "fmt_c128", pkg: "fmt", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmt_complex", name: "fmt_complex", pkg: "fmt", typ: $funcType([$Float64, $Float64, $Int, $Int32], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$error], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "add", name: "add", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmtC", name: "fmtC", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "fmtInt64", name: "fmtInt64", pkg: "fmt", typ: $funcType([$Int64, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtUnicode", name: "fmtUnicode", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "fmtUint64", name: "fmtUint64", pkg: "fmt", typ: $funcType([$Uint64, $Int32], [], false)}, {prop: "fmtFloat32", name: "fmtFloat32", pkg: "fmt", typ: $funcType([$Float32, $Int32], [], false)}, {prop: "fmtFloat64", name: "fmtFloat64", pkg: "fmt", typ: $funcType([$Float64, $Int32], [], false)}, {prop: "fmtComplex64", name: "fmtComplex64", pkg: "fmt", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmtComplex128", name: "fmtComplex128", pkg: "fmt", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType, $Int32, reflect.Type, $Int], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "clearSpecialFlags", name: "clearSpecialFlags", pkg: "fmt", typ: $funcType([], [$Bool, $Bool], false)}, {prop: "restoreSpecialFlags", name: "restoreSpecialFlags", pkg: "fmt", typ: $funcType([$Bool, $Bool], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32, $Int], [$Bool], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "printReflectValue", name: "printReflectValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType$1, $Bool, $Bool], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [$Int, $error], false)}];
	fmtFlags.init([{prop: "widPresent", name: "widPresent", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "minus", name: "minus", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "plus", name: "plus", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "space", name: "space", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "unicode", name: "unicode", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "uniQuote", name: "uniQuote", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "zero", name: "zero", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", pkg: "fmt", typ: $Bool, tag: ""}]);
	fmt.init([{prop: "intbuf", name: "intbuf", pkg: "fmt", typ: arrayType$1, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: ptrType$1, tag: ""}, {prop: "wid", name: "wid", pkg: "fmt", typ: $Int, tag: ""}, {prop: "prec", name: "prec", pkg: "fmt", typ: $Int, tag: ""}, {prop: "fmtFlags", name: "", pkg: "fmt", typ: fmtFlags, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init([{prop: "n", name: "n", pkg: "fmt", typ: $Int, tag: ""}, {prop: "panicking", name: "panicking", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: buffer, tag: ""}, {prop: "arg", name: "arg", pkg: "fmt", typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", pkg: "fmt", typ: reflect.Value, tag: ""}, {prop: "reordered", name: "reordered", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "runeBuf", name: "runeBuf", pkg: "fmt", typ: arrayType, tag: ""}, {prop: "fmt", name: "fmt", pkg: "fmt", typ: fmt, tag: ""}]);
	runeUnreader.init([{prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	scanError.init([{prop: "err", name: "err", pkg: "fmt", typ: $error, tag: ""}]);
	ss.init([{prop: "rr", name: "rr", pkg: "fmt", typ: io.RuneReader, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: buffer, tag: ""}, {prop: "peekRune", name: "peekRune", pkg: "fmt", typ: $Int32, tag: ""}, {prop: "prevRune", name: "prevRune", pkg: "fmt", typ: $Int32, tag: ""}, {prop: "count", name: "count", pkg: "fmt", typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "ssave", name: "", pkg: "fmt", typ: ssave, tag: ""}]);
	ssave.init([{prop: "validSave", name: "validSave", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", pkg: "fmt", typ: $Int, tag: ""}, {prop: "limit", name: "limit", pkg: "fmt", typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", pkg: "fmt", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		padZeroBytes = $makeSlice(sliceType, 65);
		padSpaceBytes = $makeSlice(sliceType, 65);
		trueBytes = new sliceType($stringToBytes("true"));
		falseBytes = new sliceType($stringToBytes("false"));
		commaSpaceBytes = new sliceType($stringToBytes(", "));
		nilAngleBytes = new sliceType($stringToBytes("<nil>"));
		nilParenBytes = new sliceType($stringToBytes("(nil)"));
		nilBytes = new sliceType($stringToBytes("nil"));
		mapBytes = new sliceType($stringToBytes("map["));
		percentBangBytes = new sliceType($stringToBytes("%!"));
		missingBytes = new sliceType($stringToBytes("(MISSING)"));
		badIndexBytes = new sliceType($stringToBytes("(BADINDEX)"));
		panicBytes = new sliceType($stringToBytes("(PANIC="));
		extraBytes = new sliceType($stringToBytes("%!(EXTRA "));
		irparenBytes = new sliceType($stringToBytes("i)"));
		bytesBytes = new sliceType($stringToBytes("[]byte{"));
		badWidthBytes = new sliceType($stringToBytes("%!(BADWIDTH)"));
		badPrecBytes = new sliceType($stringToBytes("%!(BADPREC)"));
		noVerbBytes = new sliceType($stringToBytes("%!(NOVERB)"));
		ppFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			var $ptr;
			return new pp.ptr(0, false, false, buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), false, false, arrayType.zero(), new fmt.ptr(arrayType$1.zero(), ptrType$1.nil, 0, 0, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false)));
		}));
		_r = reflect.TypeOf(new $Int(0)).Bits(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		intBits = _r;
		_r$1 = reflect.TypeOf(new $Uintptr(0)).Bits(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		uintptrBits = _r$1;
		byteType = reflect.TypeOf(new $Uint8(0));
		space = new sliceType$2([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			var $ptr;
			return new ss.ptr($ifaceNil, buffer.nil, 0, 0, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, StringSlice, sliceType$2, Search, SearchStrings, insertionSort, siftDown, heapSort, medianOfThree, doPivot, quickSort, Sort;
	StringSlice = $pkg.StringSlice = $newType(12, $kindSlice, "sort.StringSlice", "StringSlice", "sort", null);
	sliceType$2 = $sliceType($String);
	Search = function(n, f) {
		var $ptr, _q, _r, _tmp, _tmp$1, f, h, i, j, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; f = $f.f; h = $f.h; i = $f.i; j = $f.j; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = n;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				i = h + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				j = h;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Search }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.f = f; $f.h = h; $f.i = i; $f.j = j; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Search = Search;
	SearchStrings = function(a, x) {
		var $ptr, _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = Search(a[0].$length, (function(a, x) { return function(i) {
			var $ptr, i;
			return ((i < 0 || i >= a[0].$length) ? $throwRuntimeError("index out of range") : a[0].$array[a[0].$offset + i]) >= x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SearchStrings }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SearchStrings = SearchStrings;
	StringSlice.prototype.Search = function(x) {
		var $ptr, _r, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = SearchStrings($subslice(new sliceType$2(p.$array), p.$offset, p.$offset + p.$length), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Search }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	insertionSort = function(data, a, b) {
		var $ptr, _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var $ptr, _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var $ptr, _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f.$ptr = $ptr; $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, m1, m0, m2) {
		var $ptr, _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth) {
		var $ptr, _r, _r$1, _tuple, a, b, data, i, maxDepth, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth = $f.maxDepth; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 4:
			maxDepth = maxDepth - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth = maxDepth; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var $ptr, _r, data, i, maxDepth, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; i = $f.i; maxDepth = $f.maxDepth; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		maxDepth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			maxDepth = maxDepth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		maxDepth = $imul(maxDepth, (2));
		$r = quickSort(data, 0, n, maxDepth); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.i = i; $f.maxDepth = maxDepth; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	StringSlice.prototype.Len = function() {
		var $ptr, p;
		p = this;
		return p.$length;
	};
	$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var $ptr, i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
	};
	$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var $ptr, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Sort }; } $f.$ptr = $ptr; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };
	StringSlice.methods = [{prop: "Search", name: "Search", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}];
	StringSlice.init($String);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["flag"] = (function() {
	var $pkg = {}, $init, errors, fmt, io, os, sort, strconv, time, boolValue, boolFlag, intValue, int64Value, uintValue, uint64Value, stringValue, float64Value, durationValue, Value, ErrorHandling, FlagSet, Flag, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, sliceType$1, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, sliceType$2, funcType, ptrType$17, funcType$1, mapType, x, newBoolValue, newIntValue, newInt64Value, newUintValue, newUint64Value, newStringValue, newFloat64Value, newDurationValue, sortFlags, isZeroValue, UnquoteUsage, PrintDefaults, defaultUsage, Bool, Int, Uint, String, Duration, NewFlagSet;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	os = $packages["os"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	time = $packages["time"];
	boolValue = $pkg.boolValue = $newType(1, $kindBool, "flag.boolValue", "boolValue", "flag", null);
	boolFlag = $pkg.boolFlag = $newType(8, $kindInterface, "flag.boolFlag", "boolFlag", "flag", null);
	intValue = $pkg.intValue = $newType(4, $kindInt, "flag.intValue", "intValue", "flag", null);
	int64Value = $pkg.int64Value = $newType(8, $kindInt64, "flag.int64Value", "int64Value", "flag", null);
	uintValue = $pkg.uintValue = $newType(4, $kindUint, "flag.uintValue", "uintValue", "flag", null);
	uint64Value = $pkg.uint64Value = $newType(8, $kindUint64, "flag.uint64Value", "uint64Value", "flag", null);
	stringValue = $pkg.stringValue = $newType(8, $kindString, "flag.stringValue", "stringValue", "flag", null);
	float64Value = $pkg.float64Value = $newType(8, $kindFloat64, "flag.float64Value", "float64Value", "flag", null);
	durationValue = $pkg.durationValue = $newType(8, $kindInt64, "flag.durationValue", "durationValue", "flag", null);
	Value = $pkg.Value = $newType(8, $kindInterface, "flag.Value", "Value", "flag", null);
	ErrorHandling = $pkg.ErrorHandling = $newType(4, $kindInt, "flag.ErrorHandling", "ErrorHandling", "flag", null);
	FlagSet = $pkg.FlagSet = $newType(0, $kindStruct, "flag.FlagSet", "FlagSet", "flag", function(Usage_, name_, parsed_, actual_, formal_, args_, errorHandling_, output_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Usage = $throwNilPointerError;
			this.name = "";
			this.parsed = false;
			this.actual = false;
			this.formal = false;
			this.args = sliceType$2.nil;
			this.errorHandling = 0;
			this.output = $ifaceNil;
			return;
		}
		this.Usage = Usage_;
		this.name = name_;
		this.parsed = parsed_;
		this.actual = actual_;
		this.formal = formal_;
		this.args = args_;
		this.errorHandling = errorHandling_;
		this.output = output_;
	});
	Flag = $pkg.Flag = $newType(0, $kindStruct, "flag.Flag", "Flag", "flag", function(Name_, Usage_, Value_, DefValue_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Usage = "";
			this.Value = $ifaceNil;
			this.DefValue = "";
			return;
		}
		this.Name = Name_;
		this.Usage = Usage_;
		this.Value = Value_;
		this.DefValue = DefValue_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(boolValue);
	ptrType$1 = $ptrType(intValue);
	ptrType$2 = $ptrType(int64Value);
	ptrType$3 = $ptrType(uintValue);
	ptrType$4 = $ptrType(uint64Value);
	ptrType$5 = $ptrType(stringValue);
	ptrType$6 = $ptrType(float64Value);
	ptrType$7 = $ptrType(durationValue);
	ptrType$8 = $ptrType(time.Duration);
	ptrType$9 = $ptrType(Flag);
	sliceType$1 = $sliceType(ptrType$9);
	ptrType$10 = $ptrType($Bool);
	ptrType$11 = $ptrType($Int);
	ptrType$12 = $ptrType($Int64);
	ptrType$13 = $ptrType($Uint);
	ptrType$14 = $ptrType($Uint64);
	ptrType$15 = $ptrType($String);
	ptrType$16 = $ptrType($Float64);
	sliceType$2 = $sliceType($String);
	funcType = $funcType([ptrType$9], [], false);
	ptrType$17 = $ptrType(FlagSet);
	funcType$1 = $funcType([], [], false);
	mapType = $mapType($String, ptrType$9);
	newBoolValue = function(val, p) {
		var $ptr, _ptr, p, val;
		p.$set(val);
		return (_ptr = p, new ptrType(function() { return _ptr.$get(); }, function($v) { _ptr.$set($v); }, _ptr.$target));
	};
	$ptrType(boolValue).prototype.Set = function(s) {
		var $ptr, _tuple, b, err, s, v;
		b = this;
		_tuple = strconv.ParseBool(s);
		v = _tuple[0];
		err = _tuple[1];
		b.$set(v);
		return err;
	};
	$ptrType(boolValue).prototype.Get = function() {
		var $ptr, b;
		b = this;
		return new $Bool(b.$get());
	};
	$ptrType(boolValue).prototype.String = function() {
		var $ptr, _r, b, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = fmt.Sprintf("%v", new sliceType([new boolValue(b.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(boolValue).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(boolValue).prototype.IsBoolFlag = function() {
		var $ptr, b;
		b = this;
		return true;
	};
	newIntValue = function(val, p) {
		var $ptr, _ptr, p, val;
		p.$set(val);
		return (_ptr = p, new ptrType$1(function() { return (_ptr.$get() >> 0); }, function($v) { _ptr.$set(($v >> 0)); }, _ptr.$target));
	};
	$ptrType(intValue).prototype.Set = function(s) {
		var $ptr, _tuple, err, i, s, v;
		i = this;
		_tuple = strconv.ParseInt(s, 0, 64);
		v = _tuple[0];
		err = _tuple[1];
		i.$set(((v.$low + ((v.$high >> 31) * 4294967296)) >> 0));
		return err;
	};
	$ptrType(intValue).prototype.Get = function() {
		var $ptr, i;
		i = this;
		return new $Int((i.$get() >> 0));
	};
	$ptrType(intValue).prototype.String = function() {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = fmt.Sprintf("%v", new sliceType([new intValue(i.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(intValue).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	newInt64Value = function(val, p) {
		var $ptr, _ptr, p, val, x$1;
		p.$set(val);
		return (_ptr = p, new ptrType$2(function() { return (x$1 = _ptr.$get(), new int64Value(x$1.$high, x$1.$low)); }, function($v) { _ptr.$set(new $Int64($v.$high, $v.$low)); }, _ptr.$target));
	};
	$ptrType(int64Value).prototype.Set = function(s) {
		var $ptr, _tuple, err, i, s, v;
		i = this;
		_tuple = strconv.ParseInt(s, 0, 64);
		v = _tuple[0];
		err = _tuple[1];
		i.$set(new int64Value(v.$high, v.$low));
		return err;
	};
	$ptrType(int64Value).prototype.Get = function() {
		var $ptr, i, x$1;
		i = this;
		return (x$1 = i.$get(), new $Int64(x$1.$high, x$1.$low));
	};
	$ptrType(int64Value).prototype.String = function() {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = fmt.Sprintf("%v", new sliceType([i.$get()])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(int64Value).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	newUintValue = function(val, p) {
		var $ptr, _ptr, p, val;
		p.$set(val);
		return (_ptr = p, new ptrType$3(function() { return (_ptr.$get() >>> 0); }, function($v) { _ptr.$set(($v >>> 0)); }, _ptr.$target));
	};
	$ptrType(uintValue).prototype.Set = function(s) {
		var $ptr, _tuple, err, i, s, v;
		i = this;
		_tuple = strconv.ParseUint(s, 0, 64);
		v = _tuple[0];
		err = _tuple[1];
		i.$set((v.$low >>> 0));
		return err;
	};
	$ptrType(uintValue).prototype.Get = function() {
		var $ptr, i;
		i = this;
		return new $Uint((i.$get() >>> 0));
	};
	$ptrType(uintValue).prototype.String = function() {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = fmt.Sprintf("%v", new sliceType([new uintValue(i.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(uintValue).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	newUint64Value = function(val, p) {
		var $ptr, _ptr, p, val, x$1;
		p.$set(val);
		return (_ptr = p, new ptrType$4(function() { return (x$1 = _ptr.$get(), new uint64Value(x$1.$high, x$1.$low)); }, function($v) { _ptr.$set(new $Uint64($v.$high, $v.$low)); }, _ptr.$target));
	};
	$ptrType(uint64Value).prototype.Set = function(s) {
		var $ptr, _tuple, err, i, s, v;
		i = this;
		_tuple = strconv.ParseUint(s, 0, 64);
		v = _tuple[0];
		err = _tuple[1];
		i.$set(new uint64Value(v.$high, v.$low));
		return err;
	};
	$ptrType(uint64Value).prototype.Get = function() {
		var $ptr, i, x$1;
		i = this;
		return (x$1 = i.$get(), new $Uint64(x$1.$high, x$1.$low));
	};
	$ptrType(uint64Value).prototype.String = function() {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = fmt.Sprintf("%v", new sliceType([i.$get()])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(uint64Value).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	newStringValue = function(val, p) {
		var $ptr, _ptr, p, val;
		p.$set(val);
		return (_ptr = p, new ptrType$5(function() { return _ptr.$get(); }, function($v) { _ptr.$set($v); }, _ptr.$target));
	};
	$ptrType(stringValue).prototype.Set = function(val) {
		var $ptr, s, val;
		s = this;
		s.$set(val);
		return $ifaceNil;
	};
	$ptrType(stringValue).prototype.Get = function() {
		var $ptr, s;
		s = this;
		return new $String(s.$get());
	};
	$ptrType(stringValue).prototype.String = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = fmt.Sprintf("%s", new sliceType([new stringValue(s.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(stringValue).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	newFloat64Value = function(val, p) {
		var $ptr, _ptr, p, val;
		p.$set(val);
		return (_ptr = p, new ptrType$6(function() { return _ptr.$get(); }, function($v) { _ptr.$set($v); }, _ptr.$target));
	};
	$ptrType(float64Value).prototype.Set = function(s) {
		var $ptr, _tuple, err, f, s, v;
		f = this;
		_tuple = strconv.ParseFloat(s, 64);
		v = _tuple[0];
		err = _tuple[1];
		f.$set(v);
		return err;
	};
	$ptrType(float64Value).prototype.Get = function() {
		var $ptr, f;
		f = this;
		return new $Float64(f.$get());
	};
	$ptrType(float64Value).prototype.String = function() {
		var $ptr, _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = fmt.Sprintf("%v", new sliceType([new float64Value(f.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(float64Value).prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	newDurationValue = function(val, p) {
		var $ptr, _ptr, p, val, x$1;
		p.$set(val);
		return (_ptr = p, new ptrType$7(function() { return (x$1 = _ptr.$get(), new durationValue(x$1.$high, x$1.$low)); }, function($v) { _ptr.$set(new time.Duration($v.$high, $v.$low)); }, _ptr.$target));
	};
	$ptrType(durationValue).prototype.Set = function(s) {
		var $ptr, _tuple, d, err, s, v;
		d = this;
		_tuple = time.ParseDuration(s);
		v = _tuple[0];
		err = _tuple[1];
		d.$set(new durationValue(v.$high, v.$low));
		return err;
	};
	$ptrType(durationValue).prototype.Get = function() {
		var $ptr, d, x$1;
		d = this;
		return (x$1 = d.$get(), new time.Duration(x$1.$high, x$1.$low));
	};
	$ptrType(durationValue).prototype.String = function() {
		var $ptr, _ptr, d, x$1;
		d = this;
		return (_ptr = d, new ptrType$8(function() { return (x$1 = _ptr.$get(), new time.Duration(x$1.$high, x$1.$low)); }, function($v) { _ptr.$set(new durationValue($v.$high, $v.$low)); }, _ptr.$target)).String();
	};
	sortFlags = function(flags) {
		var $ptr, _entry, _entry$1, _i, _i$1, _keys, _ref, _ref$1, f, flags, i, i$1, list, name, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _keys = $f._keys; _ref = $f._ref; _ref$1 = $f._ref$1; f = $f.f; flags = $f.flags; i = $f.i; i$1 = $f.i$1; list = $f.list; name = $f.name; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		list = $makeSlice(sort.StringSlice, $keys(flags).length);
		i = 0;
		_ref = flags;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			f = _entry.v;
			((i < 0 || i >= list.$length) ? $throwRuntimeError("index out of range") : list.$array[list.$offset + i] = f.Name);
			i = i + (1) >> 0;
			_i++;
		}
		$r = list.Sort(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		result = $makeSlice(sliceType$1, list.$length);
		_ref$1 = list;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			name = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + i$1] = (_entry$1 = flags[$String.keyFor(name)], _entry$1 !== undefined ? _entry$1.v : ptrType$9.nil));
			_i$1++;
		}
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sortFlags }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._keys = _keys; $f._ref = _ref; $f._ref$1 = _ref$1; $f.f = f; $f.flags = flags; $f.i = i; $f.i$1 = i$1; $f.list = list; $f.name = name; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.ptr.prototype.out = function() {
		var $ptr, f;
		f = this;
		if ($interfaceIsEqual(f.output, $ifaceNil)) {
			return os.Stderr;
		}
		return f.output;
	};
	FlagSet.prototype.out = function() { return this.$val.out(); };
	FlagSet.ptr.prototype.SetOutput = function(output) {
		var $ptr, f, output;
		f = this;
		f.output = output;
	};
	FlagSet.prototype.SetOutput = function(output) { return this.$val.SetOutput(output); };
	FlagSet.ptr.prototype.VisitAll = function(fn) {
		var $ptr, _i, _r, _ref, f, flag, fn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; f = $f.f; flag = $f.flag; fn = $f.fn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = sortFlags(f.formal); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			flag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = fn(flag); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.VisitAll }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.f = f; $f.flag = flag; $f.fn = fn; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.VisitAll = function(fn) { return this.$val.VisitAll(fn); };
	FlagSet.ptr.prototype.Visit = function(fn) {
		var $ptr, _i, _r, _ref, f, flag, fn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; f = $f.f; flag = $f.flag; fn = $f.fn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = sortFlags(f.actual); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			flag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = fn(flag); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Visit }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.f = f; $f.flag = flag; $f.fn = fn; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Visit = function(fn) { return this.$val.Visit(fn); };
	FlagSet.ptr.prototype.Lookup = function(name) {
		var $ptr, _entry, f, name;
		f = this;
		return (_entry = f.formal[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$9.nil);
	};
	FlagSet.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	FlagSet.ptr.prototype.Set = function(name, value) {
		var $ptr, _entry, _key, _r, _r$1, _tuple, err, f, flag, name, ok, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; f = $f.f; flag = $f.flag; name = $f.name; ok = $f.ok; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_tuple = (_entry = f.formal[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]);
		flag = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = fmt.Errorf("no such flag -%v", new sliceType([new $String(name)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		_r$1 = flag.Value.Set(value); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (f.actual === false) {
			f.actual = {};
		}
		_key = name; (f.actual || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: flag };
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.flag = flag; $f.name = name; $f.ok = ok; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Set = function(name, value) { return this.$val.Set(name, value); };
	isZeroValue = function(value) {
		var $ptr, _1, value;
		_1 = value;
		if (_1 === "false") {
			return true;
		} else if (_1 === "") {
			return true;
		} else if (_1 === "0") {
			return true;
		}
		return false;
	};
	UnquoteUsage = function(flag) {
		var $ptr, _ref, _tmp, _tmp$1, flag, i, j, name, usage;
		name = "";
		usage = "";
		usage = flag.Usage;
		i = 0;
		while (true) {
			if (!(i < usage.length)) { break; }
			if (usage.charCodeAt(i) === 96) {
				j = i + 1 >> 0;
				while (true) {
					if (!(j < usage.length)) { break; }
					if (usage.charCodeAt(j) === 96) {
						name = usage.substring((i + 1 >> 0), j);
						usage = usage.substring(0, i) + name + usage.substring((j + 1 >> 0));
						_tmp = name;
						_tmp$1 = usage;
						name = _tmp;
						usage = _tmp$1;
						return [name, usage];
					}
					j = j + (1) >> 0;
				}
				break;
			}
			i = i + (1) >> 0;
		}
		name = "value";
		_ref = flag.Value;
		if ($assertType(_ref, boolFlag, true)[1]) {
			name = "";
		} else if ($assertType(_ref, ptrType$7, true)[1]) {
			name = "duration";
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			name = "float";
		} else if ($assertType(_ref, ptrType$1, true)[1] || $assertType(_ref, ptrType$2, true)[1]) {
			name = "int";
		} else if ($assertType(_ref, ptrType$5, true)[1]) {
			name = "string";
		} else if ($assertType(_ref, ptrType$3, true)[1] || $assertType(_ref, ptrType$4, true)[1]) {
			name = "uint";
		}
		return [name, usage];
	};
	$pkg.UnquoteUsage = UnquoteUsage;
	FlagSet.ptr.prototype.PrintDefaults = function() {
		var $ptr, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		f[0] = this;
		$r = f[0].VisitAll((function(f) { return function $b(flag) {
			var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, flag, name, ok, s, usage, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; flag = $f.flag; name = $f.name; ok = $f.ok; s = $f.s; usage = $f.usage; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = fmt.Sprintf("  -%s", new sliceType([new $String(flag.Name)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = _r;
			_tuple = UnquoteUsage(flag);
			name = _tuple[0];
			usage = _tuple[1];
			if (name.length > 0) {
				s = s + (" " + name);
			}
			if (s.length <= 4) {
				s = s + ("\t");
			} else {
				s = s + ("\n    \t");
			}
			s = s + (usage);
			/* */ if (!isZeroValue(flag.DefValue)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (!isZeroValue(flag.DefValue)) { */ case 2:
				_tuple$1 = $assertType(flag.Value, ptrType$5, true);
				ok = _tuple$1[1];
				/* */ if (ok) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (ok) { */ case 4:
					_r$1 = fmt.Sprintf(" (default %q)", new sliceType([new $String(flag.DefValue)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					s = s + (_r$1);
					$s = 6; continue;
				/* } else { */ case 5:
					_r$2 = fmt.Sprintf(" (default %v)", new sliceType([new $String(flag.DefValue)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					s = s + (_r$2);
				/* } */ case 6:
			/* } */ case 3:
			_r$3 = fmt.Fprint(f[0].out(), new sliceType([new $String(s), new $String("\n")])); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.flag = flag; $f.name = name; $f.ok = ok; $f.s = s; $f.usage = usage; $f.$s = $s; $f.$r = $r; return $f;
		}; })(f)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.PrintDefaults }; } $f.$ptr = $ptr; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.PrintDefaults = function() { return this.$val.PrintDefaults(); };
	PrintDefaults = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = $pkg.CommandLine.PrintDefaults(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PrintDefaults }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PrintDefaults = PrintDefaults;
	defaultUsage = function(f) {
		var $ptr, _r, _r$1, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (f.name === "") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.name === "") { */ case 1:
			_r = fmt.Fprintf(f.out(), "Usage:\n", new sliceType([])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = fmt.Fprintf(f.out(), "Usage of %s:\n", new sliceType([new $String(f.name)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$r = f.PrintDefaults(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: defaultUsage }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.ptr.prototype.NFlag = function() {
		var $ptr, f;
		f = this;
		return $keys(f.actual).length;
	};
	FlagSet.prototype.NFlag = function() { return this.$val.NFlag(); };
	FlagSet.ptr.prototype.Arg = function(i) {
		var $ptr, f, i, x$1;
		f = this;
		if (i < 0 || i >= f.args.$length) {
			return "";
		}
		return (x$1 = f.args, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
	};
	FlagSet.prototype.Arg = function(i) { return this.$val.Arg(i); };
	FlagSet.ptr.prototype.NArg = function() {
		var $ptr, f;
		f = this;
		return f.args.$length;
	};
	FlagSet.prototype.NArg = function() { return this.$val.NArg(); };
	FlagSet.ptr.prototype.Args = function() {
		var $ptr, f;
		f = this;
		return f.args;
	};
	FlagSet.prototype.Args = function() { return this.$val.Args(); };
	FlagSet.ptr.prototype.BoolVar = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newBoolValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.BoolVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.BoolVar = function(p, name, value, usage) { return this.$val.BoolVar(p, name, value, usage); };
	FlagSet.ptr.prototype.Bool = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(false, ptrType$10);
		$r = f.BoolVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Bool }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Bool = function(name, value, usage) { return this.$val.Bool(name, value, usage); };
	Bool = function(name, value, usage) {
		var $ptr, _r, name, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.CommandLine.Bool(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Bool }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Bool = Bool;
	FlagSet.ptr.prototype.IntVar = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newIntValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.IntVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.IntVar = function(p, name, value, usage) { return this.$val.IntVar(p, name, value, usage); };
	FlagSet.ptr.prototype.Int = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(0, ptrType$11);
		$r = f.IntVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Int }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Int = function(name, value, usage) { return this.$val.Int(name, value, usage); };
	Int = function(name, value, usage) {
		var $ptr, _r, name, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.CommandLine.Int(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Int = Int;
	FlagSet.ptr.prototype.Int64Var = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newInt64Value(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Int64Var }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Int64Var = function(p, name, value, usage) { return this.$val.Int64Var(p, name, value, usage); };
	FlagSet.ptr.prototype.Int64 = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(new $Int64(0, 0), ptrType$12);
		$r = f.Int64Var(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Int64 }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Int64 = function(name, value, usage) { return this.$val.Int64(name, value, usage); };
	FlagSet.ptr.prototype.UintVar = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newUintValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.UintVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.UintVar = function(p, name, value, usage) { return this.$val.UintVar(p, name, value, usage); };
	FlagSet.ptr.prototype.Uint = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(0, ptrType$13);
		$r = f.UintVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Uint }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Uint = function(name, value, usage) { return this.$val.Uint(name, value, usage); };
	Uint = function(name, value, usage) {
		var $ptr, _r, name, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.CommandLine.Uint(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Uint }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Uint = Uint;
	FlagSet.ptr.prototype.Uint64Var = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newUint64Value(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Uint64Var }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Uint64Var = function(p, name, value, usage) { return this.$val.Uint64Var(p, name, value, usage); };
	FlagSet.ptr.prototype.Uint64 = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(new $Uint64(0, 0), ptrType$14);
		$r = f.Uint64Var(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Uint64 }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Uint64 = function(name, value, usage) { return this.$val.Uint64(name, value, usage); };
	FlagSet.ptr.prototype.StringVar = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newStringValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.StringVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.StringVar = function(p, name, value, usage) { return this.$val.StringVar(p, name, value, usage); };
	FlagSet.ptr.prototype.String = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer("", ptrType$15);
		$r = f.StringVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.String }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.String = function(name, value, usage) { return this.$val.String(name, value, usage); };
	String = function(name, value, usage) {
		var $ptr, _r, name, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.CommandLine.String(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: String }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.String = String;
	FlagSet.ptr.prototype.Float64Var = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newFloat64Value(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Float64Var }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Float64Var = function(p, name, value, usage) { return this.$val.Float64Var(p, name, value, usage); };
	FlagSet.ptr.prototype.Float64 = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(0, ptrType$16);
		$r = f.Float64Var(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Float64 }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Float64 = function(name, value, usage) { return this.$val.Float64(name, value, usage); };
	FlagSet.ptr.prototype.DurationVar = function(p, name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.Var(newDurationValue(value, p), name, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.DurationVar }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.DurationVar = function(p, name, value, usage) { return this.$val.DurationVar(p, name, value, usage); };
	FlagSet.ptr.prototype.Duration = function(name, value, usage) {
		var $ptr, f, name, p, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; name = $f.name; p = $f.p; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		p = $newDataPointer(new time.Duration(0, 0), ptrType$8);
		$r = f.DurationVar(p, name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Duration }; } $f.$ptr = $ptr; $f.f = f; $f.name = name; $f.p = p; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Duration = function(name, value, usage) { return this.$val.Duration(name, value, usage); };
	Duration = function(name, value, usage) {
		var $ptr, _r, name, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.CommandLine.Duration(name, value, usage); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Duration }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Duration = Duration;
	FlagSet.ptr.prototype.Var = function(value, name, usage) {
		var $ptr, _entry, _key, _r, _r$1, _r$2, _r$3, _tuple, alreadythere, f, flag, msg, name, usage, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; alreadythere = $f.alreadythere; f = $f.f; flag = $f.flag; msg = $f.msg; name = $f.name; usage = $f.usage; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = value.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		flag = new Flag.ptr(name, usage, value, _r);
		_tuple = (_entry = f.formal[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]);
		alreadythere = _tuple[1];
		/* */ if (alreadythere) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (alreadythere) { */ case 2:
			msg = "";
			/* */ if (f.name === "") { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (f.name === "") { */ case 4:
				_r$1 = fmt.Sprintf("flag redefined: %s", new sliceType([new $String(name)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				msg = _r$1;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$2 = fmt.Sprintf("%s flag redefined: %s", new sliceType([new $String(f.name), new $String(name)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				msg = _r$2;
			/* } */ case 6:
			_r$3 = fmt.Fprintln(f.out(), new sliceType([new $String(msg)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			$panic(new $String(msg));
		/* } */ case 3:
		if (f.formal === false) {
			f.formal = {};
		}
		_key = name; (f.formal || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: flag };
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Var }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.alreadythere = alreadythere; $f.f = f; $f.flag = flag; $f.msg = msg; $f.name = name; $f.usage = usage; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Var = function(value, name, usage) { return this.$val.Var(value, name, usage); };
	FlagSet.ptr.prototype.failf = function(format, a) {
		var $ptr, _r, _r$1, a, err, f, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; a = $f.a; err = $f.err; f = $f.f; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = fmt.Errorf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		_r$1 = fmt.Fprintln(f.out(), new sliceType([err])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$r = f.usage(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.failf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.err = err; $f.f = f; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.failf = function(format, a) { return this.$val.failf(format, a); };
	FlagSet.ptr.prototype.usage = function() {
		var $ptr, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* */ if (f.Usage === $throwNilPointerError) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.Usage === $throwNilPointerError) { */ case 1:
			/* */ if (f === $pkg.CommandLine) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (f === $pkg.CommandLine) { */ case 4:
				$r = $pkg.Usage(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				$r = defaultUsage(f); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			$s = 3; continue;
		/* } else { */ case 2:
			$r = f.Usage(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.usage }; } $f.$ptr = $ptr; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.usage = function() { return this.$val.usage(); };
	FlagSet.ptr.prototype.parseOne = function() {
		var $ptr, _entry, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, _tuple$1, _v, alreadythere, err, err$1, err$2, f, flag, fv, hasValue, i, m, name, numMinuses, ok, s, value, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; alreadythere = $f.alreadythere; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; flag = $f.flag; fv = $f.fv; hasValue = $f.hasValue; i = $f.i; m = $f.m; name = $f.name; numMinuses = $f.numMinuses; ok = $f.ok; s = $f.s; value = $f.value; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f.args.$length === 0) {
			return [false, $ifaceNil];
		}
		s = (x$1 = f.args, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0]));
		if ((s.length === 0) || !((s.charCodeAt(0) === 45)) || (s.length === 1)) {
			return [false, $ifaceNil];
		}
		numMinuses = 1;
		if (s.charCodeAt(1) === 45) {
			numMinuses = numMinuses + (1) >> 0;
			if (s.length === 2) {
				f.args = $subslice(f.args, 1);
				return [false, $ifaceNil];
			}
		}
		name = s.substring(numMinuses);
		/* */ if ((name.length === 0) || (name.charCodeAt(0) === 45) || (name.charCodeAt(0) === 61)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((name.length === 0) || (name.charCodeAt(0) === 45) || (name.charCodeAt(0) === 61)) { */ case 1:
			_r = f.failf("bad flag syntax: %s", new sliceType([new $String(s)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return [false, _r];
		/* } */ case 2:
		f.args = $subslice(f.args, 1);
		hasValue = false;
		value = "";
		i = 1;
		while (true) {
			if (!(i < name.length)) { break; }
			if (name.charCodeAt(i) === 61) {
				value = name.substring((i + 1 >> 0));
				hasValue = true;
				name = name.substring(0, i);
				break;
			}
			i = i + (1) >> 0;
		}
		m = f.formal;
		_tuple = (_entry = m[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]);
		flag = _tuple[0];
		alreadythere = _tuple[1];
		/* */ if (!alreadythere) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!alreadythere) { */ case 5:
			/* */ if (name === "help" || name === "h") { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (name === "help" || name === "h") { */ case 7:
				$r = f.usage(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return [false, $pkg.ErrHelp];
			/* } */ case 8:
			_r$1 = f.failf("flag provided but not defined: -%s", new sliceType([new $String(name)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 11; case 11:
			return [false, _r$1];
		/* } */ case 6:
		_tuple$1 = $assertType(flag.Value, boolFlag, true);
		fv = _tuple$1[0];
		ok = _tuple$1[1];
		if (!(ok)) { _v = false; $s = 15; continue s; }
		_r$2 = fv.IsBoolFlag(); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2; case 15:
		/* */ if (_v) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (_v) { */ case 12:
			/* */ if (hasValue) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (hasValue) { */ case 17:
				_r$3 = fv.Set(value); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 21:
					_r$4 = f.failf("invalid boolean value %q for -%s: %v", new sliceType([new $String(value), new $String(name), err])); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ $s = 24; case 24:
					return [false, _r$4];
				/* } */ case 22:
				$s = 19; continue;
			/* } else { */ case 18:
				_r$5 = fv.Set("true"); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				err$1 = _r$5;
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 26:
					_r$6 = f.failf("invalid boolean flag %s: %v", new sliceType([new $String(name), err$1])); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					/* */ $s = 29; case 29:
					return [false, _r$6];
				/* } */ case 27:
			/* } */ case 19:
			$s = 14; continue;
		/* } else { */ case 13:
			if (!hasValue && f.args.$length > 0) {
				hasValue = true;
				_tmp = (x$2 = f.args, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0]));
				_tmp$1 = $subslice(f.args, 1);
				value = _tmp;
				f.args = _tmp$1;
			}
			/* */ if (!hasValue) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (!hasValue) { */ case 30:
				_r$7 = f.failf("flag needs an argument: -%s", new sliceType([new $String(name)])); /* */ $s = 32; case 32: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ $s = 33; case 33:
				return [false, _r$7];
			/* } */ case 31:
			_r$8 = flag.Value.Set(value); /* */ $s = 34; case 34: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			err$2 = _r$8;
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 35:
				_r$9 = f.failf("invalid value %q for flag -%s: %v", new sliceType([new $String(value), new $String(name), err$2])); /* */ $s = 37; case 37: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ $s = 38; case 38:
				return [false, _r$9];
			/* } */ case 36:
		/* } */ case 14:
		if (f.actual === false) {
			f.actual = {};
		}
		_key = name; (f.actual || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: flag };
		return [true, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.parseOne }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.alreadythere = alreadythere; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.flag = flag; $f.fv = fv; $f.hasValue = hasValue; $f.i = i; $f.m = m; $f.name = name; $f.numMinuses = numMinuses; $f.ok = ok; $f.s = s; $f.value = value; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.parseOne = function() { return this.$val.parseOne(); };
	FlagSet.ptr.prototype.Parse = function(arguments$1) {
		var $ptr, _2, _r, _tuple, arguments$1, err, f, seen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _r = $f._r; _tuple = $f._tuple; arguments$1 = $f.arguments$1; err = $f.err; f = $f.f; seen = $f.seen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		f.parsed = true;
		f.args = arguments$1;
		/* while (true) { */ case 1:
			_r = f.parseOne(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			seen = _tuple[0];
			err = _tuple[1];
			if (seen) {
				/* continue; */ $s = 1; continue;
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				/* break; */ $s = 2; continue;
			}
			_2 = f.errorHandling;
			if (_2 === 0) {
				return err;
			} else if (_2 === 1) {
				os.Exit(2);
			} else if (_2 === 2) {
				$panic(err);
			}
		/* } */ $s = 1; continue; case 2:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FlagSet.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._2 = _2; $f._r = _r; $f._tuple = _tuple; $f.arguments$1 = arguments$1; $f.err = err; $f.f = f; $f.seen = seen; $f.$s = $s; $f.$r = $r; return $f;
	};
	FlagSet.prototype.Parse = function(arguments$1) { return this.$val.Parse(arguments$1); };
	FlagSet.ptr.prototype.Parsed = function() {
		var $ptr, f;
		f = this;
		return f.parsed;
	};
	FlagSet.prototype.Parsed = function() { return this.$val.Parsed(); };
	NewFlagSet = function(name, errorHandling) {
		var $ptr, errorHandling, f, name;
		f = new FlagSet.ptr($throwNilPointerError, name, false, false, false, sliceType$2.nil, errorHandling, $ifaceNil);
		return f;
	};
	$pkg.NewFlagSet = NewFlagSet;
	FlagSet.ptr.prototype.Init = function(name, errorHandling) {
		var $ptr, errorHandling, f, name;
		f = this;
		f.name = name;
		f.errorHandling = errorHandling;
	};
	FlagSet.prototype.Init = function(name, errorHandling) { return this.$val.Init(name, errorHandling); };
	ptrType.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsBoolFlag", name: "IsBoolFlag", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$1.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$17.methods = [{prop: "out", name: "out", pkg: "flag", typ: $funcType([], [io.Writer], false)}, {prop: "SetOutput", name: "SetOutput", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "VisitAll", name: "VisitAll", pkg: "", typ: $funcType([funcType], [], false)}, {prop: "Visit", name: "Visit", pkg: "", typ: $funcType([funcType], [], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [ptrType$9], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $String], [$error], false)}, {prop: "PrintDefaults", name: "PrintDefaults", pkg: "", typ: $funcType([], [], false)}, {prop: "NFlag", name: "NFlag", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Arg", name: "Arg", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "NArg", name: "NArg", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Args", name: "Args", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "BoolVar", name: "BoolVar", pkg: "", typ: $funcType([ptrType$10, $String, $Bool, $String], [], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([$String, $Bool, $String], [ptrType$10], false)}, {prop: "IntVar", name: "IntVar", pkg: "", typ: $funcType([ptrType$11, $String, $Int, $String], [], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([$String, $Int, $String], [ptrType$11], false)}, {prop: "Int64Var", name: "Int64Var", pkg: "", typ: $funcType([ptrType$12, $String, $Int64, $String], [], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([$String, $Int64, $String], [ptrType$12], false)}, {prop: "UintVar", name: "UintVar", pkg: "", typ: $funcType([ptrType$13, $String, $Uint, $String], [], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([$String, $Uint, $String], [ptrType$13], false)}, {prop: "Uint64Var", name: "Uint64Var", pkg: "", typ: $funcType([ptrType$14, $String, $Uint64, $String], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([$String, $Uint64, $String], [ptrType$14], false)}, {prop: "StringVar", name: "StringVar", pkg: "", typ: $funcType([ptrType$15, $String, $String, $String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([$String, $String, $String], [ptrType$15], false)}, {prop: "Float64Var", name: "Float64Var", pkg: "", typ: $funcType([ptrType$16, $String, $Float64, $String], [], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([$String, $Float64, $String], [ptrType$16], false)}, {prop: "DurationVar", name: "DurationVar", pkg: "", typ: $funcType([ptrType$8, $String, time.Duration, $String], [], false)}, {prop: "Duration", name: "Duration", pkg: "", typ: $funcType([$String, time.Duration, $String], [ptrType$8], false)}, {prop: "Var", name: "Var", pkg: "", typ: $funcType([Value, $String, $String], [], false)}, {prop: "failf", name: "failf", pkg: "flag", typ: $funcType([$String, sliceType], [$error], true)}, {prop: "usage", name: "usage", pkg: "flag", typ: $funcType([], [], false)}, {prop: "parseOne", name: "parseOne", pkg: "flag", typ: $funcType([], [$Bool, $error], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([sliceType$2], [$error], false)}, {prop: "Parsed", name: "Parsed", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([$String, ErrorHandling], [], false)}];
	boolFlag.init([{prop: "IsBoolFlag", name: "IsBoolFlag", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	Value.init([{prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	FlagSet.init([{prop: "Usage", name: "Usage", pkg: "", typ: funcType$1, tag: ""}, {prop: "name", name: "name", pkg: "flag", typ: $String, tag: ""}, {prop: "parsed", name: "parsed", pkg: "flag", typ: $Bool, tag: ""}, {prop: "actual", name: "actual", pkg: "flag", typ: mapType, tag: ""}, {prop: "formal", name: "formal", pkg: "flag", typ: mapType, tag: ""}, {prop: "args", name: "args", pkg: "flag", typ: sliceType$2, tag: ""}, {prop: "errorHandling", name: "errorHandling", pkg: "flag", typ: ErrorHandling, tag: ""}, {prop: "output", name: "output", pkg: "flag", typ: io.Writer, tag: ""}]);
	Flag.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Usage", name: "Usage", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: Value, tag: ""}, {prop: "DefValue", name: "DefValue", pkg: "", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrHelp = errors.New("flag: help requested");
		$pkg.CommandLine = NewFlagSet((x = os.Args, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), 1);
		$pkg.Usage = (function $b() {
			var $ptr, _r, x$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = fmt.Fprintf(os.Stderr, "Usage of %s:\n", new sliceType([new $String((x$1 = os.Args, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$r = PrintDefaults(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
		});
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/debug"] = (function() {
	var $pkg = {}, $init, os, runtime, sort, time;
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	time = $packages["time"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = os.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/pprof"] = (function() {
	var $pkg = {}, $init, io, sync;
	io = $packages["io"];
	sync = $packages["sync"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/trace"] = (function() {
	var $pkg = {}, $init, io, runtime;
	io = $packages["io"];
	runtime = $packages["runtime"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["testing"] = (function() {
	var $pkg = {}, $init, bytes, flag, fmt, nosync, io, os, runtime, debug, pprof, trace, strconv, strings, atomic, time, matchBenchmarks, benchTime, benchmarkMemory, short$1, outputDir, chatty, count, coverProfile, match, memProfile, memProfileRate, cpuProfile, blockProfile, blockProfileRate, traceFile, timeout, cpuListStr, parallel, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17;
	bytes = $packages["bytes"];
	flag = $packages["flag"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	debug = $packages["runtime/debug"];
	pprof = $packages["runtime/pprof"];
	trace = $packages["runtime/trace"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	atomic = $packages["sync/atomic"];
	time = $packages["time"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = flag.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debug.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pprof.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = trace.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = flag.String("test.bench", "", "regular expression to select benchmarks to run"); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		matchBenchmarks = _r;
		_r$1 = flag.Duration("test.benchtime", new time.Duration(0, 1000000000), "approximate run time for each benchmark"); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		benchTime = _r$1;
		_r$2 = flag.Bool("test.benchmem", false, "print memory allocations for benchmarks"); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		benchmarkMemory = _r$2;
		_r$3 = flag.Bool("test.short", false, "run smaller test suite to save time"); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		short$1 = _r$3;
		_r$4 = flag.String("test.outputdir", "", "directory in which to write profiles"); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		outputDir = _r$4;
		_r$5 = flag.Bool("test.v", false, "verbose: print additional output"); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		chatty = _r$5;
		_r$6 = flag.Uint("test.count", 1, "run tests and benchmarks `n` times"); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		count = _r$6;
		_r$7 = flag.String("test.coverprofile", "", "write a coverage profile to the named file after execution"); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		coverProfile = _r$7;
		_r$8 = flag.String("test.run", "", "regular expression to select tests and examples to run"); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		match = _r$8;
		_r$9 = flag.String("test.memprofile", "", "write a memory profile to the named file after execution"); /* */ $s = 24; case 24: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		memProfile = _r$9;
		_r$10 = flag.Int("test.memprofilerate", 0, "if >=0, sets runtime.MemProfileRate"); /* */ $s = 25; case 25: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		memProfileRate = _r$10;
		_r$11 = flag.String("test.cpuprofile", "", "write a cpu profile to the named file during execution"); /* */ $s = 26; case 26: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		cpuProfile = _r$11;
		_r$12 = flag.String("test.blockprofile", "", "write a goroutine blocking profile to the named file after execution"); /* */ $s = 27; case 27: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		blockProfile = _r$12;
		_r$13 = flag.Int("test.blockprofilerate", 1, "if >= 0, calls runtime.SetBlockProfileRate()"); /* */ $s = 28; case 28: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		blockProfileRate = _r$13;
		_r$14 = flag.String("test.trace", "", "write an execution trace to the named file after execution"); /* */ $s = 29; case 29: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		traceFile = _r$14;
		_r$15 = flag.Duration("test.timeout", new time.Duration(0, 0), "if positive, sets an aggregate time limit for all tests"); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		timeout = _r$15;
		_r$16 = flag.String("test.cpu", "", "comma-separated list of number of CPUs to use for each test"); /* */ $s = 31; case 31: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		cpuListStr = _r$16;
		_r$17 = flag.Int("test.parallel", runtime.GOMAXPROCS(0), "maximum test parallelism"); /* */ $s = 32; case 32: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		parallel = _r$17;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf16"] = (function() {
	var $pkg = {}, $init, IsSurrogate, DecodeRune;
	IsSurrogate = function(r) {
		var $ptr, r;
		return 55296 <= r && r < 57344;
	};
	$pkg.IsSurrogate = IsSurrogate;
	DecodeRune = function(r1, r2) {
		var $ptr, r1, r2;
		if (55296 <= r1 && r1 < 56320 && 56320 <= r2 && r2 < 57344) {
			return ((((r1 - 55296 >> 0)) << 10 >> 0) | ((r2 - 56320 >> 0))) + 65536 >> 0;
		}
		return 65533;
	};
	$pkg.DecodeRune = DecodeRune;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/json"] = (function() {
	var $pkg = {}, $init, bytes, encoding, base64, errors, fmt, nosync, io, math, reflect, runtime, sort, strconv, strings, testing, unicode, utf16, utf8, Unmarshaler, UnmarshalTypeError, InvalidUnmarshalError, Number, decodeState, unquotedValue, Marshaler, UnsupportedTypeError, UnsupportedValueError, MarshalerError, encodeState, encoderFunc, floatEncoder, structEncoder, mapEncoder, sliceEncoder, arrayEncoder, ptrEncoder, condAddrEncoder, stringValues, field, byName, byIndex, SyntaxError, scanner, tagOptions, sliceType, mapType, structType, sliceType$1, mapType$1, structType$1, sliceType$2, ptrType, ptrType$1, sliceType$3, ptrType$2, mapType$2, ptrType$3, arrayType, arrayType$1, ptrType$4, sliceType$4, ptrType$8, ptrType$9, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, funcType, ptrType$23, funcType$1, errPhase, nullLiteral, numberType, hex, encoderCache, marshalerType, textMarshalerType, float32Encoder, float64Encoder, fieldCache, _r, _r$1, Unmarshal, isValidNumber, getu4, unquote, unquoteBytes, Marshal, isEmptyValue, valueEncoder, typeEncoder, newTypeEncoder, invalidValueEncoder, marshalerEncoder, addrMarshalerEncoder, textMarshalerEncoder, addrTextMarshalerEncoder, boolEncoder, intEncoder, uintEncoder, stringEncoder, interfaceEncoder, unsupportedTypeEncoder, newStructEncoder, newMapEncoder, encodeByteSlice, newSliceEncoder, newArrayEncoder, newPtrEncoder, newCondAddrEncoder, isValidTag, fieldByIndex, typeByIndex, fillField, typeFields, dominantField, cachedTypeFields, foldFunc, equalFoldRight, asciiEqualFold, simpleLetterEqualFold, compact, checkValid, nextValue, isSpace, stateBeginValueOrEmpty, stateBeginValue, stateBeginStringOrEmpty, stateBeginString, stateEndValue, stateEndTop, stateInString, stateInStringEsc, stateInStringEscU, stateInStringEscU1, stateInStringEscU12, stateInStringEscU123, stateNeg, state1, state0, stateDot, stateDot0, stateE, stateESign, stateE0, stateT, stateTr, stateTru, stateF, stateFa, stateFal, stateFals, stateN, stateNu, stateNul, stateError, quoteChar, stateRedo, parseTag;
	bytes = $packages["bytes"];
	encoding = $packages["encoding"];
	base64 = $packages["encoding/base64"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	testing = $packages["testing"];
	unicode = $packages["unicode"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	Unmarshaler = $pkg.Unmarshaler = $newType(8, $kindInterface, "json.Unmarshaler", "Unmarshaler", "encoding/json", null);
	UnmarshalTypeError = $pkg.UnmarshalTypeError = $newType(0, $kindStruct, "json.UnmarshalTypeError", "UnmarshalTypeError", "encoding/json", function(Value_, Type_, Offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = "";
			this.Type = $ifaceNil;
			this.Offset = new $Int64(0, 0);
			return;
		}
		this.Value = Value_;
		this.Type = Type_;
		this.Offset = Offset_;
	});
	InvalidUnmarshalError = $pkg.InvalidUnmarshalError = $newType(0, $kindStruct, "json.InvalidUnmarshalError", "InvalidUnmarshalError", "encoding/json", function(Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			return;
		}
		this.Type = Type_;
	});
	Number = $pkg.Number = $newType(8, $kindString, "json.Number", "Number", "encoding/json", null);
	decodeState = $pkg.decodeState = $newType(0, $kindStruct, "json.decodeState", "decodeState", "encoding/json", function(data_, off_, scan_, nextscan_, savedError_, useNumber_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.data = sliceType$2.nil;
			this.off = 0;
			this.scan = new scanner.ptr($throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
			this.nextscan = new scanner.ptr($throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
			this.savedError = $ifaceNil;
			this.useNumber = false;
			return;
		}
		this.data = data_;
		this.off = off_;
		this.scan = scan_;
		this.nextscan = nextscan_;
		this.savedError = savedError_;
		this.useNumber = useNumber_;
	});
	unquotedValue = $pkg.unquotedValue = $newType(0, $kindStruct, "json.unquotedValue", "unquotedValue", "encoding/json", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	Marshaler = $pkg.Marshaler = $newType(8, $kindInterface, "json.Marshaler", "Marshaler", "encoding/json", null);
	UnsupportedTypeError = $pkg.UnsupportedTypeError = $newType(0, $kindStruct, "json.UnsupportedTypeError", "UnsupportedTypeError", "encoding/json", function(Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			return;
		}
		this.Type = Type_;
	});
	UnsupportedValueError = $pkg.UnsupportedValueError = $newType(0, $kindStruct, "json.UnsupportedValueError", "UnsupportedValueError", "encoding/json", function(Value_, Str_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
			this.Str = "";
			return;
		}
		this.Value = Value_;
		this.Str = Str_;
	});
	MarshalerError = $pkg.MarshalerError = $newType(0, $kindStruct, "json.MarshalerError", "MarshalerError", "encoding/json", function(Type_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			this.Err = $ifaceNil;
			return;
		}
		this.Type = Type_;
		this.Err = Err_;
	});
	encodeState = $pkg.encodeState = $newType(0, $kindStruct, "json.encodeState", "encodeState", "encoding/json", function(Buffer_, scratch_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Buffer = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			this.scratch = arrayType$1.zero();
			return;
		}
		this.Buffer = Buffer_;
		this.scratch = scratch_;
	});
	encoderFunc = $pkg.encoderFunc = $newType(4, $kindFunc, "json.encoderFunc", "encoderFunc", "encoding/json", null);
	floatEncoder = $pkg.floatEncoder = $newType(4, $kindInt, "json.floatEncoder", "floatEncoder", "encoding/json", null);
	structEncoder = $pkg.structEncoder = $newType(0, $kindStruct, "json.structEncoder", "structEncoder", "encoding/json", function(fields_, fieldEncs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fields = sliceType$1.nil;
			this.fieldEncs = sliceType$4.nil;
			return;
		}
		this.fields = fields_;
		this.fieldEncs = fieldEncs_;
	});
	mapEncoder = $pkg.mapEncoder = $newType(0, $kindStruct, "json.mapEncoder", "mapEncoder", "encoding/json", function(elemEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.elemEnc = $throwNilPointerError;
			return;
		}
		this.elemEnc = elemEnc_;
	});
	sliceEncoder = $pkg.sliceEncoder = $newType(0, $kindStruct, "json.sliceEncoder", "sliceEncoder", "encoding/json", function(arrayEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.arrayEnc = $throwNilPointerError;
			return;
		}
		this.arrayEnc = arrayEnc_;
	});
	arrayEncoder = $pkg.arrayEncoder = $newType(0, $kindStruct, "json.arrayEncoder", "arrayEncoder", "encoding/json", function(elemEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.elemEnc = $throwNilPointerError;
			return;
		}
		this.elemEnc = elemEnc_;
	});
	ptrEncoder = $pkg.ptrEncoder = $newType(0, $kindStruct, "json.ptrEncoder", "ptrEncoder", "encoding/json", function(elemEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.elemEnc = $throwNilPointerError;
			return;
		}
		this.elemEnc = elemEnc_;
	});
	condAddrEncoder = $pkg.condAddrEncoder = $newType(0, $kindStruct, "json.condAddrEncoder", "condAddrEncoder", "encoding/json", function(canAddrEnc_, elseEnc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.canAddrEnc = $throwNilPointerError;
			this.elseEnc = $throwNilPointerError;
			return;
		}
		this.canAddrEnc = canAddrEnc_;
		this.elseEnc = elseEnc_;
	});
	stringValues = $pkg.stringValues = $newType(12, $kindSlice, "json.stringValues", "stringValues", "encoding/json", null);
	field = $pkg.field = $newType(0, $kindStruct, "json.field", "field", "encoding/json", function(name_, nameBytes_, equalFold_, tag_, index_, typ_, omitEmpty_, quoted_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.nameBytes = sliceType$2.nil;
			this.equalFold = $throwNilPointerError;
			this.tag = false;
			this.index = sliceType$3.nil;
			this.typ = $ifaceNil;
			this.omitEmpty = false;
			this.quoted = false;
			return;
		}
		this.name = name_;
		this.nameBytes = nameBytes_;
		this.equalFold = equalFold_;
		this.tag = tag_;
		this.index = index_;
		this.typ = typ_;
		this.omitEmpty = omitEmpty_;
		this.quoted = quoted_;
	});
	byName = $pkg.byName = $newType(12, $kindSlice, "json.byName", "byName", "encoding/json", null);
	byIndex = $pkg.byIndex = $newType(12, $kindSlice, "json.byIndex", "byIndex", "encoding/json", null);
	SyntaxError = $pkg.SyntaxError = $newType(0, $kindStruct, "json.SyntaxError", "SyntaxError", "encoding/json", function(msg_, Offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.msg = "";
			this.Offset = new $Int64(0, 0);
			return;
		}
		this.msg = msg_;
		this.Offset = Offset_;
	});
	scanner = $pkg.scanner = $newType(0, $kindStruct, "json.scanner", "scanner", "encoding/json", function(step_, endTop_, parseState_, err_, redo_, redoCode_, redoState_, bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.step = $throwNilPointerError;
			this.endTop = false;
			this.parseState = sliceType$3.nil;
			this.err = $ifaceNil;
			this.redo = false;
			this.redoCode = 0;
			this.redoState = $throwNilPointerError;
			this.bytes = new $Int64(0, 0);
			return;
		}
		this.step = step_;
		this.endTop = endTop_;
		this.parseState = parseState_;
		this.err = err_;
		this.redo = redo_;
		this.redoCode = redoCode_;
		this.redoState = redoState_;
		this.bytes = bytes_;
	});
	tagOptions = $pkg.tagOptions = $newType(8, $kindString, "json.tagOptions", "tagOptions", "encoding/json", null);
	sliceType = $sliceType($emptyInterface);
	mapType = $mapType(reflect.Type, encoderFunc);
	structType = $structType([{prop: "RWMutex", name: "", pkg: "", typ: nosync.RWMutex, tag: ""}, {prop: "m", name: "m", pkg: "encoding/json", typ: mapType, tag: ""}]);
	sliceType$1 = $sliceType(field);
	mapType$1 = $mapType(reflect.Type, sliceType$1);
	structType$1 = $structType([{prop: "RWMutex", name: "", pkg: "", typ: nosync.RWMutex, tag: ""}, {prop: "m", name: "m", pkg: "encoding/json", typ: mapType$1, tag: ""}]);
	sliceType$2 = $sliceType($Uint8);
	ptrType = $ptrType(Marshaler);
	ptrType$1 = $ptrType(encoding.TextMarshaler);
	sliceType$3 = $sliceType($Int);
	ptrType$2 = $ptrType(reflect.rtype);
	mapType$2 = $mapType($String, $emptyInterface);
	ptrType$3 = $ptrType(field);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$4 = $ptrType(encodeState);
	sliceType$4 = $sliceType(encoderFunc);
	ptrType$8 = $ptrType(SyntaxError);
	ptrType$9 = $ptrType(UnmarshalTypeError);
	ptrType$11 = $ptrType(InvalidUnmarshalError);
	ptrType$12 = $ptrType(decodeState);
	ptrType$13 = $ptrType(UnsupportedTypeError);
	ptrType$14 = $ptrType(UnsupportedValueError);
	ptrType$16 = $ptrType(MarshalerError);
	ptrType$17 = $ptrType(structEncoder);
	ptrType$18 = $ptrType(mapEncoder);
	ptrType$19 = $ptrType(sliceEncoder);
	ptrType$20 = $ptrType(arrayEncoder);
	ptrType$21 = $ptrType(ptrEncoder);
	ptrType$22 = $ptrType(condAddrEncoder);
	funcType = $funcType([sliceType$2, sliceType$2], [$Bool], false);
	ptrType$23 = $ptrType(scanner);
	funcType$1 = $funcType([ptrType$23, $Uint8], [$Int], false);
	Unmarshal = function(data, v) {
		var $ptr, _r$2, _r$3, d, data, err, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; d = $f.d; data = $f.data; err = $f.err; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = new decodeState.ptr(sliceType$2.nil, 0, new scanner.ptr($throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0)), new scanner.ptr($throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0)), $ifaceNil, false);
		_r$2 = checkValid(data, d.scan); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err = _r$2;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		d.init(data);
		_r$3 = d.unmarshal(v); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Unmarshal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.d = d; $f.data = data; $f.err = err; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Unmarshal = Unmarshal;
	UnmarshalTypeError.ptr.prototype.Error = function() {
		var $ptr, _r$2, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$2 = e.Type.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return "json: cannot unmarshal " + e.Value + " into Go value of type " + _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnmarshalTypeError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnmarshalTypeError.prototype.Error = function() { return this.$val.Error(); };
	InvalidUnmarshalError.ptr.prototype.Error = function() {
		var $ptr, _r$2, _r$3, _r$4, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		if ($interfaceIsEqual(e.Type, $ifaceNil)) {
			return "json: Unmarshal(nil)";
		}
		_r$2 = e.Type.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!((_r$2 === 22))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$2 === 22))) { */ case 1:
			_r$3 = e.Type.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return "json: Unmarshal(non-pointer " + _r$3 + ")";
		/* } */ case 2:
		_r$4 = e.Type.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 7; case 7:
		return "json: Unmarshal(nil " + _r$4 + ")";
		/* */ } return; } if ($f === undefined) { $f = { $blk: InvalidUnmarshalError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	InvalidUnmarshalError.prototype.Error = function() { return this.$val.Error(); };
	decodeState.ptr.prototype.unmarshal = function(v) {
		var $ptr, _r$2, d, err, rv, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; d = $f.d; err = $f.err; rv = $f.rv; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		d = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, ok, r;
			r = $recover();
			if (!($interfaceIsEqual(r, $ifaceNil))) {
				_tuple = $assertType(r, runtime.Error, true);
				ok = _tuple[1];
				if (ok) {
					$panic(r);
				}
				err[0] = $assertType(r, $error);
			}
		}; })(err), []]);
		_r$2 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		rv = _r$2;
		if (!((rv.Kind() === 22)) || rv.IsNil()) {
			err[0] = new InvalidUnmarshalError.ptr(reflect.TypeOf(v));
			return err[0];
		}
		d.scan.reset();
		$r = d.value(rv); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err[0] = d.savedError;
		return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.unmarshal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.d = d; $f.err = err; $f.rv = rv; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	decodeState.prototype.unmarshal = function(v) { return this.$val.unmarshal(v); };
	Number.prototype.String = function() {
		var $ptr, n;
		n = this.$val;
		return n;
	};
	$ptrType(Number).prototype.String = function() { return new Number(this.$get()).String(); };
	Number.prototype.Float64 = function() {
		var $ptr, n;
		n = this.$val;
		return strconv.ParseFloat(n, 64);
	};
	$ptrType(Number).prototype.Float64 = function() { return new Number(this.$get()).Float64(); };
	Number.prototype.Int64 = function() {
		var $ptr, n;
		n = this.$val;
		return strconv.ParseInt(n, 10, 64);
	};
	$ptrType(Number).prototype.Int64 = function() { return new Number(this.$get()).Int64(); };
	isValidNumber = function(s) {
		var $ptr, s;
		if (s === "") {
			return false;
		}
		if (s.charCodeAt(0) === 45) {
			s = s.substring(1);
			if (s === "") {
				return false;
			}
		}
		if ((s.charCodeAt(0) === 48)) {
			s = s.substring(1);
		} else if (49 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57) {
			s = s.substring(1);
			while (true) {
				if (!(s.length > 0 && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
				s = s.substring(1);
			}
		} else {
			return false;
		}
		if (s.length >= 2 && (s.charCodeAt(0) === 46) && 48 <= s.charCodeAt(1) && s.charCodeAt(1) <= 57) {
			s = s.substring(2);
			while (true) {
				if (!(s.length > 0 && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
				s = s.substring(1);
			}
		}
		if (s.length >= 2 && ((s.charCodeAt(0) === 101) || (s.charCodeAt(0) === 69))) {
			s = s.substring(1);
			if ((s.charCodeAt(0) === 43) || (s.charCodeAt(0) === 45)) {
				s = s.substring(1);
				if (s === "") {
					return false;
				}
			}
			while (true) {
				if (!(s.length > 0 && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
				s = s.substring(1);
			}
		}
		return s === "";
	};
	decodeState.ptr.prototype.init = function(data) {
		var $ptr, d, data;
		d = this;
		d.data = data;
		d.off = 0;
		d.savedError = $ifaceNil;
		return d;
	};
	decodeState.prototype.init = function(data) { return this.$val.init(data); };
	decodeState.ptr.prototype.error = function(err) {
		var $ptr, d, err;
		d = this;
		$panic(err);
	};
	decodeState.prototype.error = function(err) { return this.$val.error(err); };
	decodeState.ptr.prototype.saveError = function(err) {
		var $ptr, d, err;
		d = this;
		if ($interfaceIsEqual(d.savedError, $ifaceNil)) {
			d.savedError = err;
		}
	};
	decodeState.prototype.saveError = function(err) { return this.$val.saveError(err); };
	decodeState.ptr.prototype.next = function() {
		var $ptr, _r$2, _r$3, _r$4, _tuple, c, d, err, item, rest, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; c = $f.c; d = $f.d; err = $f.err; item = $f.item; rest = $f.rest; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		c = (x = d.data, x$1 = d.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		_r$2 = nextValue($subslice(d.data, d.off), d.nextscan); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		item = _tuple[0];
		rest = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			d.error(err);
		}
		d.off = d.data.$length - rest.$length >> 0;
		/* */ if (c === 123) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (c === 123) { */ case 2:
			_r$3 = d.scan.step(d.scan, 125); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			$s = 4; continue;
		/* } else { */ case 3:
			_r$4 = d.scan.step(d.scan, 93); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 4:
		return item;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.next }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.c = c; $f.d = d; $f.err = err; $f.item = item; $f.rest = rest; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.next = function() { return this.$val.next(); };
	decodeState.ptr.prototype.scanWhile = function(op) {
		var $ptr, _r$2, _r$3, c, d, newOp, op, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; d = $f.d; newOp = $f.newOp; op = $f.op; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		newOp = 0;
		/* while (true) { */ case 1:
			/* */ if (d.off >= d.data.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.off >= d.data.$length) { */ case 3:
				_r$2 = d.scan.eof(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				newOp = _r$2;
				d.off = d.data.$length + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				c = (x = d.data, x$1 = d.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
				d.off = d.off + (1) >> 0;
				_r$3 = d.scan.step(d.scan, c); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				newOp = _r$3;
			/* } */ case 5:
			if (!((newOp === op))) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		return newOp;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.scanWhile }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.d = d; $f.newOp = newOp; $f.op = op; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.scanWhile = function(op) { return this.$val.scanWhile(op); };
	decodeState.ptr.prototype.value = function(v) {
		var $ptr, _1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, d, err, n, op, rest, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; d = $f.d; err = $f.err; n = $f.n; op = $f.op; rest = $f.rest; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		d = this;
		/* */ if (!v.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!v.IsValid()) { */ case 1:
			_r$2 = nextValue($subslice(d.data, d.off), d.nextscan); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			rest = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			d.off = d.data.$length - rest.$length >> 0;
			if (d.scan.redo) {
				d.scan.redo = false;
				d.scan.step = stateBeginValue;
			}
			_r$3 = d.scan.step(d.scan, 34); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = d.scan.step(d.scan, 34); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			n = d.scan.parseState.$length;
			/* */ if (n > 0 && ((x = d.scan.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) === 0)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (n > 0 && ((x = d.scan.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) === 0)) { */ case 6:
				_r$5 = d.scan.step(d.scan, 58); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				_r$6 = d.scan.step(d.scan, 34); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				_r$7 = d.scan.step(d.scan, 34); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				_r$8 = d.scan.step(d.scan, 125); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
			/* } */ case 7:
			return;
		/* } */ case 2:
			_r$9 = d.scanWhile(9); /* */ $s = 13; case 13: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			op = _r$9;
			_1 = op;
			/* */ if (_1 === 6) { $s = 14; continue; }
			/* */ if (_1 === 2) { $s = 15; continue; }
			/* */ if (_1 === 1) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_1 === 6) { */ case 14:
				$r = d.array(v); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else if (_1 === 2) { */ case 15:
				$r = d.object(v); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else if (_1 === 1) { */ case 16:
				$r = d.literal(v); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else { */ case 17:
				d.error(errPhase);
			/* } */ case 18:
		case 12:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.value }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.n = n; $f.op = op; $f.rest = rest; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.value = function(v) { return this.$val.value(v); };
	decodeState.ptr.prototype.valueQuoted = function() {
		var $ptr, _2, _r$2, _r$3, _ref, d, op, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; d = $f.d; op = $f.op; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
			_r$2 = d.scanWhile(9); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			op = _r$2;
			_2 = op;
			/* */ if (_2 === 6) { $s = 3; continue; }
			/* */ if (_2 === 2) { $s = 4; continue; }
			/* */ if (_2 === 1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_2 === 6) { */ case 3:
				$r = d.array(new reflect.Value.ptr(ptrType$2.nil, 0, 0)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else if (_2 === 2) { */ case 4:
				$r = d.object(new reflect.Value.ptr(ptrType$2.nil, 0, 0)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else if (_2 === 1) { */ case 5:
				_r$3 = d.literalInterface(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_ref = _r$3;
				/* */ if (_ref === $ifaceNil || $assertType(_ref, $String, true)[1]) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_ref === $ifaceNil || $assertType(_ref, $String, true)[1]) { */ case 11:
					v = _ref;
					return v;
				/* } */ case 12:
				$s = 7; continue;
			/* } else { */ case 6:
				d.error(errPhase);
			/* } */ case 7:
		case 1:
		return (x = new unquotedValue.ptr(), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.valueQuoted }; } $f.$ptr = $ptr; $f._2 = _2; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.d = d; $f.op = op; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.valueQuoted = function() { return this.$val.valueQuoted(); };
	decodeState.ptr.prototype.indirect = function(v, decodingNull) {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _v, _v$1, _v$2, d, decodingNull, e, ok, ok$1, u, u$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; d = $f.d; decodingNull = $f.decodingNull; e = $f.e; ok = $f.ok; ok$1 = $f.ok$1; u = $f.u; u$1 = $f.u$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		d = this;
		if (!(!((v.Kind() === 22)))) { _v = false; $s = 3; continue s; }
		_r$2 = v.Type().Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = !(_r$2 === ""); case 3:
		/* */ if (_v && v.CanAddr()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v && v.CanAddr()) { */ case 1:
			v = v.Addr();
		/* } */ case 2:
		/* while (true) { */ case 5:
			/* */ if ((v.Kind() === 20) && !v.IsNil()) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((v.Kind() === 20) && !v.IsNil()) { */ case 7:
				_r$3 = v.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				e = _r$3;
				if (!((e.Kind() === 22) && !e.IsNil())) { _v$1 = false; $s = 12; continue s; }
				if (!decodingNull) { _v$2 = true; $s = 13; continue s; }
				_r$4 = e.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = _r$4.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_v$2 = _r$5 === 22; case 13:
				_v$1 = _v$2; case 12:
				/* */ if (_v$1) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v$1) { */ case 10:
					v = e;
					/* continue; */ $s = 5; continue;
				/* } */ case 11:
			/* } */ case 8:
			if (!((v.Kind() === 22))) {
				/* break; */ $s = 6; continue;
			}
			_r$6 = v.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = _r$6.Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (!((_r$7 === 22)) && decodingNull && v.CanSet()) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (!((_r$7 === 22)) && decodingNull && v.CanSet()) { */ case 16:
				/* break; */ $s = 6; continue;
			/* } */ case 17:
			/* */ if (v.IsNil()) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (v.IsNil()) { */ case 20:
				_r$8 = v.Type().Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = reflect.New(_r$8); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$r = v.Set(_r$9); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 21:
			_r$10 = v.Type().NumMethod(); /* */ $s = 27; case 27: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			/* */ if (_r$10 > 0) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_r$10 > 0) { */ case 25:
				_r$11 = v.Interface(); /* */ $s = 28; case 28: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_tuple = $assertType(_r$11, Unmarshaler, true);
				u = _tuple[0];
				ok = _tuple[1];
				if (ok) {
					return [u, $ifaceNil, new reflect.Value.ptr(ptrType$2.nil, 0, 0)];
				}
				_r$12 = v.Interface(); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_tuple$1 = $assertType(_r$12, encoding.TextUnmarshaler, true);
				u$1 = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1) {
					return [$ifaceNil, u$1, new reflect.Value.ptr(ptrType$2.nil, 0, 0)];
				}
			/* } */ case 26:
			_r$13 = v.Elem(); /* */ $s = 30; case 30: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			v = _r$13;
		/* } */ $s = 5; continue; case 6:
		return [$ifaceNil, $ifaceNil, v];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.indirect }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.d = d; $f.decodingNull = decodingNull; $f.e = e; $f.ok = ok; $f.ok$1 = ok$1; $f.u = u; $f.u$1 = u$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.indirect = function(v, decodingNull) { return this.$val.indirect(v, decodingNull); };
	decodeState.ptr.prototype.array = function(v) {
		var $ptr, _3, _q, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, d, err, i, newcap, newv, op, pv, u, ut, v, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _q = $f._q; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; d = $f.d; err = $f.err; i = $f.i; newcap = $f.newcap; newv = $f.newv; op = $f.op; pv = $f.pv; u = $f.u; ut = $f.ut; v = $f.v; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		d = this;
		_r$2 = d.indirect(v, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		u = _tuple[0];
		ut = _tuple[1];
		pv = _tuple[2];
		/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 2:
			d.off = d.off - (1) >> 0;
			_r$3 = d.next(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = u.UnmarshalJSON(_r$3); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			return;
		/* } */ case 3:
		/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 6:
			d.saveError(new UnmarshalTypeError.ptr("array", v.Type(), new $Int64(0, d.off)));
			d.off = d.off - (1) >> 0;
			_r$5 = d.next(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			return;
		/* } */ case 7:
		v = pv;
			_3 = v.Kind();
			/* */ if (_3 === 20) { $s = 10; continue; }
			/* */ if (_3 === 17) { $s = 11; continue; }
			/* */ if (_3 === 23) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_3 === 20) { */ case 10:
				/* */ if (v.NumMethod() === 0) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (v.NumMethod() === 0) { */ case 15:
					_r$6 = d.arrayInterface(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = reflect.ValueOf(_r$6); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = v.Set(_r$7); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return;
				/* } */ case 16:
				d.saveError(new UnmarshalTypeError.ptr("array", v.Type(), new $Int64(0, d.off)));
				d.off = d.off - (1) >> 0;
				_r$8 = d.next(); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				return;
			/* } else if (_3 === 17) { */ case 11:
				$s = 14; continue;
			/* } else if (_3 === 23) { */ case 12:
				/* break; */ $s = 9; continue;
				$s = 14; continue;
			/* } else { */ case 13:
				d.saveError(new UnmarshalTypeError.ptr("array", v.Type(), new $Int64(0, d.off)));
				d.off = d.off - (1) >> 0;
				_r$9 = d.next(); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
				return;
			/* } */ case 14:
		case 9:
		i = 0;
		/* while (true) { */ case 22:
			_r$10 = d.scanWhile(9); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			op = _r$10;
			if (op === 8) {
				/* break; */ $s = 23; continue;
			}
			d.off = d.off - (1) >> 0;
			d.scan.undo(op);
			/* */ if (v.Kind() === 23) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (v.Kind() === 23) { */ case 25:
				/* */ if (i >= v.Cap()) { $s = 27; continue; }
				/* */ $s = 28; continue;
				/* if (i >= v.Cap()) { */ case 27:
					newcap = v.Cap() + (_q = v.Cap() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					if (newcap < 4) {
						newcap = 4;
					}
					_r$11 = reflect.MakeSlice(v.Type(), v.Len(), newcap); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					newv = _r$11;
					_r$12 = reflect.Copy(newv, v); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$12;
					$r = v.Set(newv); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 28:
				if (i >= v.Len()) {
					v.SetLen(i + 1 >> 0);
				}
			/* } */ case 26:
			/* */ if (i < v.Len()) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (i < v.Len()) { */ case 32:
				_r$13 = v.Index(i); /* */ $s = 35; case 35: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				$r = d.value(_r$13); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 34; continue;
			/* } else { */ case 33:
				$r = d.value(new reflect.Value.ptr(ptrType$2.nil, 0, 0)); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 34:
			i = i + (1) >> 0;
			_r$14 = d.scanWhile(9); /* */ $s = 38; case 38: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			op = _r$14;
			if (op === 8) {
				/* break; */ $s = 23; continue;
			}
			if (!((op === 7))) {
				d.error(errPhase);
			}
		/* } */ $s = 22; continue; case 23:
		/* */ if (i < v.Len()) { $s = 39; continue; }
		/* */ $s = 40; continue;
		/* if (i < v.Len()) { */ case 39:
			/* */ if (v.Kind() === 17) { $s = 41; continue; }
			/* */ $s = 42; continue;
			/* if (v.Kind() === 17) { */ case 41:
				_r$15 = v.Type().Elem(); /* */ $s = 44; case 44: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$16 = reflect.Zero(_r$15); /* */ $s = 45; case 45: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				z = _r$16;
				/* while (true) { */ case 46:
					/* if (!(i < v.Len())) { break; } */ if(!(i < v.Len())) { $s = 47; continue; }
					_r$17 = v.Index(i); /* */ $s = 48; case 48: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					$r = _r$17.Set(z); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (1) >> 0;
				/* } */ $s = 46; continue; case 47:
				$s = 43; continue;
			/* } else { */ case 42:
				v.SetLen(i);
			/* } */ case 43:
		/* } */ case 40:
		/* */ if ((i === 0) && (v.Kind() === 23)) { $s = 50; continue; }
		/* */ $s = 51; continue;
		/* if ((i === 0) && (v.Kind() === 23)) { */ case 50:
			_r$18 = reflect.MakeSlice(v.Type(), 0, 0); /* */ $s = 52; case 52: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			$r = v.Set(_r$18); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 51:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.array }; } $f.$ptr = $ptr; $f._3 = _3; $f._q = _q; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.i = i; $f.newcap = newcap; $f.newv = newv; $f.op = op; $f.pv = pv; $f.u = u; $f.ut = ut; $f.v = v; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.array = function(v) { return this.$val.array(v); };
	decodeState.ptr.prototype.object = function(v) {
		var $ptr, _4, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _v, d, destring, elemType, err, f, ff, fields, i, i$1, item, key, kv, mapElem, ok, op, pv, qv, qv$1, qv$2, start, subv, t, u, ut, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; d = $f.d; destring = $f.destring; elemType = $f.elemType; err = $f.err; f = $f.f; ff = $f.ff; fields = $f.fields; i = $f.i; i$1 = $f.i$1; item = $f.item; key = $f.key; kv = $f.kv; mapElem = $f.mapElem; ok = $f.ok; op = $f.op; pv = $f.pv; qv = $f.qv; qv$1 = $f.qv$1; qv$2 = $f.qv$2; start = $f.start; subv = $f.subv; t = $f.t; u = $f.u; ut = $f.ut; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		d = this;
		_r$2 = d.indirect(v, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		u = _tuple[0];
		ut = _tuple[1];
		pv = _tuple[2];
		/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 2:
			d.off = d.off - (1) >> 0;
			_r$3 = d.next(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = u.UnmarshalJSON(_r$3); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			return;
		/* } */ case 3:
		/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 6:
			d.saveError(new UnmarshalTypeError.ptr("object", v.Type(), new $Int64(0, d.off)));
			d.off = d.off - (1) >> 0;
			_r$5 = d.next(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			return;
		/* } */ case 7:
		v = pv;
		/* */ if ((v.Kind() === 20) && (v.NumMethod() === 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((v.Kind() === 20) && (v.NumMethod() === 0)) { */ case 9:
			_r$6 = d.objectInterface(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = reflect.ValueOf(new mapType$2(_r$6)); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$r = v.Set(_r$7); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 10:
			_4 = v.Kind();
			/* */ if (_4 === 21) { $s = 15; continue; }
			/* */ if (_4 === 25) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_4 === 21) { */ case 15:
				t = v.Type();
				_r$8 = t.Key(); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = _r$8.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ if (!((_r$9 === 24))) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (!((_r$9 === 24))) { */ case 19:
					d.saveError(new UnmarshalTypeError.ptr("object", v.Type(), new $Int64(0, d.off)));
					d.off = d.off - (1) >> 0;
					_r$10 = d.next(); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$10;
					return;
				/* } */ case 20:
				/* */ if (v.IsNil()) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (v.IsNil()) { */ case 24:
					_r$11 = reflect.MakeMap(t); /* */ $s = 26; case 26: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$r = v.Set(_r$11); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 25:
				$s = 18; continue;
			/* } else if (_4 === 25) { */ case 16:
				$s = 18; continue;
			/* } else { */ case 17:
				d.saveError(new UnmarshalTypeError.ptr("object", v.Type(), new $Int64(0, d.off)));
				d.off = d.off - (1) >> 0;
				_r$12 = d.next(); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$12;
				return;
			/* } */ case 18:
		case 14:
		mapElem = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
		/* while (true) { */ case 29:
			_r$13 = d.scanWhile(9); /* */ $s = 31; case 31: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			op = _r$13;
			if (op === 5) {
				/* break; */ $s = 30; continue;
			}
			if (!((op === 1))) {
				d.error(errPhase);
			}
			start = d.off - 1 >> 0;
			_r$14 = d.scanWhile(0); /* */ $s = 32; case 32: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			op = _r$14;
			item = $subslice(d.data, start, (d.off - 1 >> 0));
			_tuple$1 = unquoteBytes(item);
			key = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				d.error(errPhase);
			}
			subv = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
			destring = false;
			/* */ if (v.Kind() === 21) { $s = 33; continue; }
			/* */ $s = 34; continue;
			/* if (v.Kind() === 21) { */ case 33:
				_r$15 = v.Type().Elem(); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				elemType = _r$15;
				/* */ if (!mapElem.IsValid()) { $s = 37; continue; }
				/* */ $s = 38; continue;
				/* if (!mapElem.IsValid()) { */ case 37:
					_r$16 = reflect.New(elemType); /* */ $s = 40; case 40: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					_r$17 = _r$16.Elem(); /* */ $s = 41; case 41: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					mapElem = _r$17;
					$s = 39; continue;
				/* } else { */ case 38:
					_r$18 = reflect.Zero(elemType); /* */ $s = 42; case 42: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					$r = mapElem.Set(_r$18); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 39:
				subv = mapElem;
				$s = 35; continue;
			/* } else { */ case 34:
				f = ptrType$3.nil;
				_r$19 = cachedTypeFields(v.Type()); /* */ $s = 44; case 44: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				fields = _r$19;
				_ref = fields;
				_i = 0;
				/* while (true) { */ case 45:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 46; continue; }
					i = _i;
					ff = ((i < 0 || i >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + i]);
					if (bytes.Equal(ff.nameBytes, key)) {
						f = ff;
						/* break; */ $s = 46; continue;
					}
					if (!(f === ptrType$3.nil)) { _v = false; $s = 49; continue s; }
					_r$20 = ff.equalFold(ff.nameBytes, key); /* */ $s = 50; case 50: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					_v = _r$20; case 49:
					/* */ if (_v) { $s = 47; continue; }
					/* */ $s = 48; continue;
					/* if (_v) { */ case 47:
						f = ff;
					/* } */ case 48:
					_i++;
				/* } */ $s = 45; continue; case 46:
				/* */ if (!(f === ptrType$3.nil)) { $s = 51; continue; }
				/* */ $s = 52; continue;
				/* if (!(f === ptrType$3.nil)) { */ case 51:
					subv = v;
					destring = f.quoted;
					_ref$1 = f.index;
					_i$1 = 0;
					/* while (true) { */ case 53:
						/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 54; continue; }
						i$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						/* */ if (subv.Kind() === 22) { $s = 55; continue; }
						/* */ $s = 56; continue;
						/* if (subv.Kind() === 22) { */ case 55:
							/* */ if (subv.IsNil()) { $s = 57; continue; }
							/* */ $s = 58; continue;
							/* if (subv.IsNil()) { */ case 57:
								_r$21 = subv.Type().Elem(); /* */ $s = 59; case 59: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
								_r$22 = reflect.New(_r$21); /* */ $s = 60; case 60: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
								$r = subv.Set(_r$22); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 58:
							_r$23 = subv.Elem(); /* */ $s = 62; case 62: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
							subv = _r$23;
						/* } */ case 56:
						_r$24 = subv.Field(i$1); /* */ $s = 63; case 63: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
						subv = _r$24;
						_i$1++;
					/* } */ $s = 53; continue; case 54:
				/* } */ case 52:
			/* } */ case 35:
			/* */ if (op === 9) { $s = 64; continue; }
			/* */ $s = 65; continue;
			/* if (op === 9) { */ case 64:
				_r$25 = d.scanWhile(9); /* */ $s = 66; case 66: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				op = _r$25;
			/* } */ case 65:
			if (!((op === 3))) {
				d.error(errPhase);
			}
			/* */ if (destring) { $s = 67; continue; }
			/* */ $s = 68; continue;
			/* if (destring) { */ case 67:
				_r$26 = d.valueQuoted(); /* */ $s = 70; case 70: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_ref$2 = _r$26;
				/* */ if (_ref$2 === $ifaceNil) { $s = 71; continue; }
				/* */ if ($assertType(_ref$2, $String, true)[1]) { $s = 72; continue; }
				/* */ $s = 73; continue;
				/* if (_ref$2 === $ifaceNil) { */ case 71:
					qv = _ref$2;
					$r = d.literalStore(nullLiteral, subv, false); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 74; continue;
				/* } else if ($assertType(_ref$2, $String, true)[1]) { */ case 72:
					qv$1 = _ref$2.$val;
					$r = d.literalStore(new sliceType$2($stringToBytes(qv$1)), subv, true); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 74; continue;
				/* } else { */ case 73:
					qv$2 = _ref$2;
					_r$27 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal unquoted value into %v", new sliceType([subv.Type()])); /* */ $s = 77; case 77: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					$r = d.saveError(_r$27); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 74:
				$s = 69; continue;
			/* } else { */ case 68:
				$r = d.value(subv); /* */ $s = 79; case 79: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 69:
			/* */ if (v.Kind() === 21) { $s = 80; continue; }
			/* */ $s = 81; continue;
			/* if (v.Kind() === 21) { */ case 80:
				_r$28 = reflect.ValueOf(key); /* */ $s = 82; case 82: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				_r$29 = v.Type().Key(); /* */ $s = 83; case 83: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_r$30 = _r$28.Convert(_r$29); /* */ $s = 84; case 84: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				kv = _r$30;
				$r = v.SetMapIndex(kv, subv); /* */ $s = 85; case 85: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 81:
			_r$31 = d.scanWhile(9); /* */ $s = 86; case 86: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			op = _r$31;
			if (op === 5) {
				/* break; */ $s = 30; continue;
			}
			if (!((op === 4))) {
				d.error(errPhase);
			}
		/* } */ $s = 29; continue; case 30:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.object }; } $f.$ptr = $ptr; $f._4 = _4; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.d = d; $f.destring = destring; $f.elemType = elemType; $f.err = err; $f.f = f; $f.ff = ff; $f.fields = fields; $f.i = i; $f.i$1 = i$1; $f.item = item; $f.key = key; $f.kv = kv; $f.mapElem = mapElem; $f.ok = ok; $f.op = op; $f.pv = pv; $f.qv = qv; $f.qv$1 = qv$1; $f.qv$2 = qv$2; $f.start = start; $f.subv = subv; $f.t = t; $f.u = u; $f.ut = ut; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.object = function(v) { return this.$val.object(v); };
	decodeState.ptr.prototype.literal = function(v) {
		var $ptr, _r$2, d, op, start, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; d = $f.d; op = $f.op; start = $f.start; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		d = this;
		start = d.off - 1 >> 0;
		_r$2 = d.scanWhile(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		d.off = d.off - (1) >> 0;
		d.scan.undo(op);
		$r = d.literalStore($subslice(d.data, start, d.off), v, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.d = d; $f.op = op; $f.start = start; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.literal = function(v) { return this.$val.literal(v); };
	decodeState.ptr.prototype.convertNumber = function(s) {
		var $ptr, _tuple, d, err, f, s;
		d = this;
		if (d.useNumber) {
			return [new Number(s), $ifaceNil];
		}
		_tuple = strconv.ParseFloat(s, 64);
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new UnmarshalTypeError.ptr("number " + s, reflect.TypeOf(new $Float64(0)), new $Int64(0, d.off))];
		}
		return [new $Float64(f), $ifaceNil];
	};
	decodeState.prototype.convertNumber = function(s) { return this.$val.convertNumber(s); };
	decodeState.ptr.prototype.literalStore = function(item, v, fromQuoted) {
		var $ptr, _5, _6, _7, _8, _9, _arg, _arg$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, b, c, d, err, err$1, err$2, err$3, err$4, err$5, err$6, fromQuoted, item, n, n$1, n$2, n$3, n$4, ok, ok$1, pv, s, s$1, s$2, u, ut, v, value, wantptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _5 = $f._5; _6 = $f._6; _7 = $f._7; _8 = $f._8; _9 = $f._9; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; b = $f.b; c = $f.c; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; fromQuoted = $f.fromQuoted; item = $f.item; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; ok = $f.ok; ok$1 = $f.ok$1; pv = $f.pv; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; u = $f.u; ut = $f.ut; v = $f.v; value = $f.value; wantptr = $f.wantptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		d = this;
		/* */ if (item.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (item.$length === 0) { */ case 1:
			_r$2 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$r = d.saveError(_r$2); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 2:
		wantptr = (0 >= item.$length ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]) === 110;
		_r$3 = d.indirect(v, wantptr); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		u = _tuple[0];
		ut = _tuple[1];
		pv = _tuple[2];
		/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 6:
			_r$4 = u.UnmarshalJSON(item); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			return;
		/* } */ case 7:
		/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 9:
			/* */ if (!(((0 >= item.$length ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]) === 34))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!(((0 >= item.$length ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]) === 34))) { */ case 11:
				/* */ if (fromQuoted) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (fromQuoted) { */ case 13:
					_r$5 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = d.saveError(_r$5); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 15; continue;
				/* } else { */ case 14:
					d.saveError(new UnmarshalTypeError.ptr("string", v.Type(), new $Int64(0, d.off)));
				/* } */ case 15:
				return;
			/* } */ case 12:
			_tuple$1 = unquoteBytes(item);
			s = _tuple$1[0];
			ok = _tuple$1[1];
			/* */ if (!ok) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (!ok) { */ case 18:
				/* */ if (fromQuoted) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (fromQuoted) { */ case 20:
					_r$6 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = d.error(_r$6); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 22; continue;
				/* } else { */ case 21:
					d.error(errPhase);
				/* } */ case 22:
			/* } */ case 19:
			_r$7 = ut.UnmarshalText(s); /* */ $s = 25; case 25: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			err$1 = _r$7;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				d.error(err$1);
			}
			return;
		/* } */ case 10:
		v = pv;
			c = (0 >= item.$length ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]);
			_5 = c;
			/* */ if (_5 === 110) { $s = 27; continue; }
			/* */ if ((_5 === 116) || (_5 === 102)) { $s = 28; continue; }
			/* */ if (_5 === 34) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (_5 === 110) { */ case 27:
					_6 = v.Kind();
					/* */ if ((_6 === 20) || (_6 === 22) || (_6 === 21) || (_6 === 23)) { $s = 33; continue; }
					/* */ $s = 34; continue;
					/* if ((_6 === 20) || (_6 === 22) || (_6 === 21) || (_6 === 23)) { */ case 33:
						_r$8 = reflect.Zero(v.Type()); /* */ $s = 35; case 35: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						$r = v.Set(_r$8); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 34:
				case 32:
				$s = 31; continue;
			/* } else if ((_5 === 116) || (_5 === 102)) { */ case 28:
				value = c === 116;
					_7 = v.Kind();
					/* */ if (_7 === 1) { $s = 38; continue; }
					/* */ if (_7 === 20) { $s = 39; continue; }
					/* */ if (fromQuoted) { $s = 40; continue; }
					/* */ $s = 41; continue;
					/* if (_7 === 1) { */ case 38:
						v.SetBool(value);
						$s = 42; continue;
					/* } else if (_7 === 20) { */ case 39:
						/* */ if (v.NumMethod() === 0) { $s = 43; continue; }
						/* */ $s = 44; continue;
						/* if (v.NumMethod() === 0) { */ case 43:
							_r$9 = reflect.ValueOf(new $Bool(value)); /* */ $s = 46; case 46: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
							$r = v.Set(_r$9); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 45; continue;
						/* } else { */ case 44:
							d.saveError(new UnmarshalTypeError.ptr("bool", v.Type(), new $Int64(0, d.off)));
						/* } */ case 45:
						$s = 42; continue;
					/* } else if (fromQuoted) { */ case 40:
						_r$10 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 48; case 48: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$r = d.saveError(_r$10); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 42; continue;
					/* } else { */ case 41:
						d.saveError(new UnmarshalTypeError.ptr("bool", v.Type(), new $Int64(0, d.off)));
					/* } */ case 42:
				case 37:
				$s = 31; continue;
			/* } else if (_5 === 34) { */ case 29:
				_tuple$2 = unquoteBytes(item);
				s$1 = _tuple$2[0];
				ok$1 = _tuple$2[1];
				/* */ if (!ok$1) { $s = 50; continue; }
				/* */ $s = 51; continue;
				/* if (!ok$1) { */ case 50:
					/* */ if (fromQuoted) { $s = 52; continue; }
					/* */ $s = 53; continue;
					/* if (fromQuoted) { */ case 52:
						_r$11 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 55; case 55: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						$r = d.error(_r$11); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 54; continue;
					/* } else { */ case 53:
						d.error(errPhase);
					/* } */ case 54:
				/* } */ case 51:
					_8 = v.Kind();
					/* */ if (_8 === 23) { $s = 58; continue; }
					/* */ if (_8 === 24) { $s = 59; continue; }
					/* */ if (_8 === 20) { $s = 60; continue; }
					/* */ $s = 61; continue;
					/* if (_8 === 23) { */ case 58:
						_r$12 = v.Type().Elem(); /* */ $s = 65; case 65: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						_r$13 = _r$12.Kind(); /* */ $s = 66; case 66: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						/* */ if (!((_r$13 === 8))) { $s = 63; continue; }
						/* */ $s = 64; continue;
						/* if (!((_r$13 === 8))) { */ case 63:
							d.saveError(new UnmarshalTypeError.ptr("string", v.Type(), new $Int64(0, d.off)));
							/* break; */ $s = 57; continue;
						/* } */ case 64:
						b = $makeSlice(sliceType$2, base64.StdEncoding.DecodedLen(s$1.$length));
						_tuple$3 = base64.StdEncoding.Decode(b, s$1);
						n = _tuple$3[0];
						err$2 = _tuple$3[1];
						if (!($interfaceIsEqual(err$2, $ifaceNil))) {
							d.saveError(err$2);
							/* break; */ $s = 57; continue;
						}
						$r = v.SetBytes($subslice(b, 0, n)); /* */ $s = 67; case 67: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 62; continue;
					/* } else if (_8 === 24) { */ case 59:
						v.SetString($bytesToString(s$1));
						$s = 62; continue;
					/* } else if (_8 === 20) { */ case 60:
						/* */ if (v.NumMethod() === 0) { $s = 68; continue; }
						/* */ $s = 69; continue;
						/* if (v.NumMethod() === 0) { */ case 68:
							_r$14 = reflect.ValueOf(new $String($bytesToString(s$1))); /* */ $s = 71; case 71: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
							$r = v.Set(_r$14); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 70; continue;
						/* } else { */ case 69:
							d.saveError(new UnmarshalTypeError.ptr("string", v.Type(), new $Int64(0, d.off)));
						/* } */ case 70:
						$s = 62; continue;
					/* } else { */ case 61:
						d.saveError(new UnmarshalTypeError.ptr("string", v.Type(), new $Int64(0, d.off)));
					/* } */ case 62:
				case 57:
				$s = 31; continue;
			/* } else { */ case 30:
				/* */ if (!((c === 45)) && (c < 48 || c > 57)) { $s = 73; continue; }
				/* */ $s = 74; continue;
				/* if (!((c === 45)) && (c < 48 || c > 57)) { */ case 73:
					/* */ if (fromQuoted) { $s = 75; continue; }
					/* */ $s = 76; continue;
					/* if (fromQuoted) { */ case 75:
						_r$15 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 78; case 78: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						$r = d.error(_r$15); /* */ $s = 79; case 79: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 77; continue;
					/* } else { */ case 76:
						d.error(errPhase);
					/* } */ case 77:
				/* } */ case 74:
				s$2 = $bytesToString(item);
					_9 = v.Kind();
					/* */ if (_9 === 20) { $s = 81; continue; }
					/* */ if ((_9 === 2) || (_9 === 3) || (_9 === 4) || (_9 === 5) || (_9 === 6)) { $s = 82; continue; }
					/* */ if ((_9 === 7) || (_9 === 8) || (_9 === 9) || (_9 === 10) || (_9 === 11) || (_9 === 12)) { $s = 83; continue; }
					/* */ if ((_9 === 13) || (_9 === 14)) { $s = 84; continue; }
					/* */ $s = 85; continue;
					/* if (_9 === 20) { */ case 81:
						_tuple$4 = d.convertNumber(s$2);
						n$1 = _tuple$4[0];
						err$3 = _tuple$4[1];
						if (!($interfaceIsEqual(err$3, $ifaceNil))) {
							d.saveError(err$3);
							/* break; */ $s = 80; continue;
						}
						if (!((v.NumMethod() === 0))) {
							d.saveError(new UnmarshalTypeError.ptr("number", v.Type(), new $Int64(0, d.off)));
							/* break; */ $s = 80; continue;
						}
						_r$16 = reflect.ValueOf(n$1); /* */ $s = 87; case 87: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						$r = v.Set(_r$16); /* */ $s = 88; case 88: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 86; continue;
					/* } else if ((_9 === 2) || (_9 === 3) || (_9 === 4) || (_9 === 5) || (_9 === 6)) { */ case 82:
						_tuple$5 = strconv.ParseInt(s$2, 10, 64);
						n$2 = _tuple$5[0];
						err$4 = _tuple$5[1];
						if (!($interfaceIsEqual(err$4, $ifaceNil)) || v.OverflowInt(n$2)) {
							d.saveError(new UnmarshalTypeError.ptr("number " + s$2, v.Type(), new $Int64(0, d.off)));
							/* break; */ $s = 80; continue;
						}
						v.SetInt(n$2);
						$s = 86; continue;
					/* } else if ((_9 === 7) || (_9 === 8) || (_9 === 9) || (_9 === 10) || (_9 === 11) || (_9 === 12)) { */ case 83:
						_tuple$6 = strconv.ParseUint(s$2, 10, 64);
						n$3 = _tuple$6[0];
						err$5 = _tuple$6[1];
						if (!($interfaceIsEqual(err$5, $ifaceNil)) || v.OverflowUint(n$3)) {
							d.saveError(new UnmarshalTypeError.ptr("number " + s$2, v.Type(), new $Int64(0, d.off)));
							/* break; */ $s = 80; continue;
						}
						v.SetUint(n$3);
						$s = 86; continue;
					/* } else if ((_9 === 13) || (_9 === 14)) { */ case 84:
						_arg = s$2;
						_r$17 = v.Type().Bits(); /* */ $s = 89; case 89: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						_arg$1 = _r$17;
						_r$18 = strconv.ParseFloat(_arg, _arg$1); /* */ $s = 90; case 90: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						_tuple$7 = _r$18;
						n$4 = _tuple$7[0];
						err$6 = _tuple$7[1];
						if (!($interfaceIsEqual(err$6, $ifaceNil)) || v.OverflowFloat(n$4)) {
							d.saveError(new UnmarshalTypeError.ptr("number " + s$2, v.Type(), new $Int64(0, d.off)));
							/* break; */ $s = 80; continue;
						}
						v.SetFloat(n$4);
						$s = 86; continue;
					/* } else { */ case 85:
						/* */ if ((v.Kind() === 24) && $interfaceIsEqual(v.Type(), numberType)) { $s = 91; continue; }
						/* */ $s = 92; continue;
						/* if ((v.Kind() === 24) && $interfaceIsEqual(v.Type(), numberType)) { */ case 91:
							v.SetString(s$2);
							/* */ if (!isValidNumber(s$2)) { $s = 93; continue; }
							/* */ $s = 94; continue;
							/* if (!isValidNumber(s$2)) { */ case 93:
								_r$19 = fmt.Errorf("json: invalid number literal, trying to unmarshal %q into Number", new sliceType([item])); /* */ $s = 95; case 95: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
								$r = d.error(_r$19); /* */ $s = 96; case 96: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 94:
							/* break; */ $s = 80; continue;
						/* } */ case 92:
						/* */ if (fromQuoted) { $s = 97; continue; }
						/* */ $s = 98; continue;
						/* if (fromQuoted) { */ case 97:
							_r$20 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, v.Type()])); /* */ $s = 100; case 100: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
							$r = d.error(_r$20); /* */ $s = 101; case 101: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 99; continue;
						/* } else { */ case 98:
							d.error(new UnmarshalTypeError.ptr("number", v.Type(), new $Int64(0, d.off)));
						/* } */ case 99:
					/* } */ case 86:
				case 80:
			/* } */ case 31:
		case 26:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literalStore }; } $f.$ptr = $ptr; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._8 = _8; $f._9 = _9; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.b = b; $f.c = c; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.fromQuoted = fromQuoted; $f.item = item; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.ok = ok; $f.ok$1 = ok$1; $f.pv = pv; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.u = u; $f.ut = ut; $f.v = v; $f.value = value; $f.wantptr = wantptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.literalStore = function(item, v, fromQuoted) { return this.$val.literalStore(item, v, fromQuoted); };
	decodeState.ptr.prototype.valueInterface = function() {
		var $ptr, _10, _r$2, _r$3, _r$4, _r$5, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _10 = $f._10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
			_r$2 = d.scanWhile(9); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_10 = _r$2;
			/* */ if (_10 === 6) { $s = 3; continue; }
			/* */ if (_10 === 2) { $s = 4; continue; }
			/* */ if (_10 === 1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_10 === 6) { */ case 3:
				_r$3 = d.arrayInterface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ $s = 9; case 9:
				return _r$3;
			/* } else if (_10 === 2) { */ case 4:
				_r$4 = d.objectInterface(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ $s = 11; case 11:
				return new mapType$2(_r$4);
			/* } else if (_10 === 1) { */ case 5:
				_r$5 = d.literalInterface(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ $s = 13; case 13:
				return _r$5;
			/* } else { */ case 6:
				d.error(errPhase);
				$panic(new $String("unreachable"));
			/* } */ case 7:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.valueInterface }; } $f.$ptr = $ptr; $f._10 = _10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.valueInterface = function() { return this.$val.valueInterface(); };
	decodeState.ptr.prototype.arrayInterface = function() {
		var $ptr, _r$2, _r$3, _r$4, d, op, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; d = $f.d; op = $f.op; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		v = $makeSlice(sliceType, 0);
		/* while (true) { */ case 1:
			_r$2 = d.scanWhile(9); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			op = _r$2;
			if (op === 8) {
				/* break; */ $s = 2; continue;
			}
			d.off = d.off - (1) >> 0;
			d.scan.undo(op);
			_r$3 = d.valueInterface(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = $append(v, _r$3);
			_r$4 = d.scanWhile(9); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			op = _r$4;
			if (op === 8) {
				/* break; */ $s = 2; continue;
			}
			if (!((op === 7))) {
				d.error(errPhase);
			}
		/* } */ $s = 1; continue; case 2:
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.arrayInterface }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.d = d; $f.op = op; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.arrayInterface = function() { return this.$val.arrayInterface(); };
	decodeState.ptr.prototype.objectInterface = function() {
		var $ptr, _key, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, d, item, key, m, ok, op, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; d = $f.d; item = $f.item; key = $f.key; m = $f.m; ok = $f.ok; op = $f.op; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		m = {};
		/* while (true) { */ case 1:
			_r$2 = d.scanWhile(9); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			op = _r$2;
			if (op === 5) {
				/* break; */ $s = 2; continue;
			}
			if (!((op === 1))) {
				d.error(errPhase);
			}
			start = d.off - 1 >> 0;
			_r$3 = d.scanWhile(0); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			op = _r$3;
			item = $subslice(d.data, start, (d.off - 1 >> 0));
			_tuple = unquote(item);
			key = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				d.error(errPhase);
			}
			/* */ if (op === 9) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (op === 9) { */ case 5:
				_r$4 = d.scanWhile(9); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				op = _r$4;
			/* } */ case 6:
			if (!((op === 3))) {
				d.error(errPhase);
			}
			_r$5 = d.valueInterface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_key = key; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: _r$5 };
			_r$6 = d.scanWhile(9); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			op = _r$6;
			if (op === 5) {
				/* break; */ $s = 2; continue;
			}
			if (!((op === 4))) {
				d.error(errPhase);
			}
		/* } */ $s = 1; continue; case 2:
		return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.objectInterface }; } $f.$ptr = $ptr; $f._key = _key; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.d = d; $f.item = item; $f.key = key; $f.m = m; $f.ok = ok; $f.op = op; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.objectInterface = function() { return this.$val.objectInterface(); };
	decodeState.ptr.prototype.literalInterface = function() {
		var $ptr, _11, _r$2, _tuple, _tuple$1, c, d, err, item, n, ok, op, s, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _11 = $f._11; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; d = $f.d; err = $f.err; item = $f.item; n = $f.n; ok = $f.ok; op = $f.op; s = $f.s; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		start = d.off - 1 >> 0;
		_r$2 = d.scanWhile(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		d.off = d.off - (1) >> 0;
		d.scan.undo(op);
		item = $subslice(d.data, start, d.off);
		c = (0 >= item.$length ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]);
		_11 = c;
		if (_11 === 110) {
			return $ifaceNil;
		} else if ((_11 === 116) || (_11 === 102)) {
			return new $Bool((c === 116));
		} else if (_11 === 34) {
			_tuple = unquote(item);
			s = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				d.error(errPhase);
			}
			return new $String(s);
		} else {
			if (!((c === 45)) && (c < 48 || c > 57)) {
				d.error(errPhase);
			}
			_tuple$1 = d.convertNumber($bytesToString(item));
			n = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.saveError(err);
			}
			return n;
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literalInterface }; } $f.$ptr = $ptr; $f._11 = _11; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.d = d; $f.err = err; $f.item = item; $f.n = n; $f.ok = ok; $f.op = op; $f.s = s; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.literalInterface = function() { return this.$val.literalInterface(); };
	getu4 = function(s) {
		var $ptr, _tuple, err, r, s;
		if (s.$length < 6 || !(((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) === 92)) || !(((1 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 1]) === 117))) {
			return -1;
		}
		_tuple = strconv.ParseUint($bytesToString($subslice(s, 2, 6)), 16, 64);
		r = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return -1;
		}
		return (r.$low >> 0);
	};
	unquote = function(s) {
		var $ptr, _tuple, ok, s, t;
		t = "";
		ok = false;
		_tuple = unquoteBytes(s);
		s = _tuple[0];
		ok = _tuple[1];
		t = $bytesToString(s);
		return [t, ok];
	};
	unquoteBytes = function(s) {
		var $ptr, _12, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, b, c, c$1, dec, nb, ok, r, rr, rr$1, rr$2, rr1, s, size, size$1, t, w, x;
		t = sliceType$2.nil;
		ok = false;
		if (s.$length < 2 || !(((0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) === 34)) || !(((x = s.$length - 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) === 34))) {
			return [t, ok];
		}
		s = $subslice(s, 1, (s.$length - 1 >> 0));
		r = 0;
		while (true) {
			if (!(r < s.$length)) { break; }
			c = ((r < 0 || r >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + r]);
			if ((c === 92) || (c === 34) || c < 32) {
				break;
			}
			if (c < 128) {
				r = r + (1) >> 0;
				continue;
			}
			_tuple = utf8.DecodeRune($subslice(s, r));
			rr = _tuple[0];
			size = _tuple[1];
			if ((rr === 65533) && (size === 1)) {
				break;
			}
			r = r + (size) >> 0;
		}
		if (r === s.$length) {
			_tmp = s;
			_tmp$1 = true;
			t = _tmp;
			ok = _tmp$1;
			return [t, ok];
		}
		b = $makeSlice(sliceType$2, (s.$length + 8 >> 0));
		w = $copySlice(b, $subslice(s, 0, r));
		while (true) {
			if (!(r < s.$length)) { break; }
			if (w >= (b.$length - 8 >> 0)) {
				nb = $makeSlice(sliceType$2, ($imul(((b.$length + 4 >> 0)), 2)));
				$copySlice(nb, $subslice(b, 0, w));
				b = nb;
			}
			c$1 = ((r < 0 || r >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + r]);
			if ((c$1 === 92)) {
				r = r + (1) >> 0;
				if (r >= s.$length) {
					return [t, ok];
				}
				switch (0) { default:
					_12 = ((r < 0 || r >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + r]);
					if ((_12 === 34) || (_12 === 92) || (_12 === 47) || (_12 === 39)) {
						((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = ((r < 0 || r >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + r]));
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_12 === 98) {
						((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 8);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_12 === 102) {
						((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 12);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_12 === 110) {
						((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 10);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_12 === 114) {
						((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 13);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_12 === 116) {
						((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 9);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_12 === 117) {
						r = r - (1) >> 0;
						rr$1 = getu4($subslice(s, r));
						if (rr$1 < 0) {
							return [t, ok];
						}
						r = r + (6) >> 0;
						if (utf16.IsSurrogate(rr$1)) {
							rr1 = getu4($subslice(s, r));
							dec = utf16.DecodeRune(rr$1, rr1);
							if (!((dec === 65533))) {
								r = r + (6) >> 0;
								w = w + (utf8.EncodeRune($subslice(b, w), dec)) >> 0;
								break;
							}
							rr$1 = 65533;
						}
						w = w + (utf8.EncodeRune($subslice(b, w), rr$1)) >> 0;
					} else {
						return [t, ok];
					}
				}
			} else if (((c$1 === 34)) || (c$1 < 32)) {
				return [t, ok];
			} else if (c$1 < 128) {
				((w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = c$1);
				r = r + (1) >> 0;
				w = w + (1) >> 0;
			} else {
				_tuple$1 = utf8.DecodeRune($subslice(s, r));
				rr$2 = _tuple$1[0];
				size$1 = _tuple$1[1];
				r = r + (size$1) >> 0;
				w = w + (utf8.EncodeRune($subslice(b, w), rr$2)) >> 0;
			}
		}
		_tmp$2 = $subslice(b, 0, w);
		_tmp$3 = true;
		t = _tmp$2;
		ok = _tmp$3;
		return [t, ok];
	};
	Marshal = function(v) {
		var $ptr, _r$2, e, err, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; err = $f.err; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = new encodeState.ptr(new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType.zero(), arrayType$1.zero(), 0), arrayType$1.zero());
		_r$2 = e.marshal(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err = _r$2;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType$2.nil, err];
		}
		return [e.Buffer.Bytes(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Marshal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.err = err; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Marshal = Marshal;
	UnsupportedTypeError.ptr.prototype.Error = function() {
		var $ptr, _r$2, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$2 = e.Type.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return "json: unsupported type: " + _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnsupportedTypeError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnsupportedTypeError.prototype.Error = function() { return this.$val.Error(); };
	UnsupportedValueError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "json: unsupported value: " + e.Str;
	};
	UnsupportedValueError.prototype.Error = function() { return this.$val.Error(); };
	MarshalerError.ptr.prototype.Error = function() {
		var $ptr, _r$2, _r$3, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$2 = e.Type.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = e.Err.Error(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return "json: error calling MarshalJSON for type " + _r$2 + ": " + _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MarshalerError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	MarshalerError.prototype.Error = function() { return this.$val.Error(); };
	encodeState.ptr.prototype.marshal = function(v) {
		var $ptr, _r$2, e, err, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; err = $f.err; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		e = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, _tuple$1, ok, ok$1, r, s;
			r = $recover();
			if (!($interfaceIsEqual(r, $ifaceNil))) {
				_tuple = $assertType(r, runtime.Error, true);
				ok = _tuple[1];
				if (ok) {
					$panic(r);
				}
				_tuple$1 = $assertType(r, $String, true);
				s = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1) {
					$panic(new $String(s));
				}
				err[0] = $assertType(r, $error);
			}
		}; })(err), []]);
		_r$2 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = e.reflectValue(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err[0] = $ifaceNil;
		return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: encodeState.ptr.prototype.marshal }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.err = err; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	encodeState.prototype.marshal = function(v) { return this.$val.marshal(v); };
	encodeState.ptr.prototype.error = function(err) {
		var $ptr, e, err;
		e = this;
		$panic(err);
	};
	encodeState.prototype.error = function(err) { return this.$val.error(err); };
	isEmptyValue = function(v) {
		var $ptr, _1, v, x, x$1;
		v = v;
		_1 = v.Kind();
		if ((_1 === 17) || (_1 === 21) || (_1 === 23) || (_1 === 24)) {
			return v.Len() === 0;
		} else if (_1 === 1) {
			return !v.Bool();
		} else if ((_1 === 2) || (_1 === 3) || (_1 === 4) || (_1 === 5) || (_1 === 6)) {
			return (x = v.Int(), (x.$high === 0 && x.$low === 0));
		} else if ((_1 === 7) || (_1 === 8) || (_1 === 9) || (_1 === 10) || (_1 === 11) || (_1 === 12)) {
			return (x$1 = v.Uint(), (x$1.$high === 0 && x$1.$low === 0));
		} else if ((_1 === 13) || (_1 === 14)) {
			return v.Float() === 0;
		} else if ((_1 === 20) || (_1 === 22)) {
			return v.IsNil();
		}
		return false;
	};
	encodeState.ptr.prototype.reflectValue = function(v) {
		var $ptr, _r$2, e, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		e = this;
		_r$2 = valueEncoder(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = _r$2(e, v, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encodeState.ptr.prototype.reflectValue }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encodeState.prototype.reflectValue = function(v) { return this.$val.reflectValue(v); };
	valueEncoder = function(v) {
		var $ptr, _r$2, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (!v.IsValid()) {
			return invalidValueEncoder;
		}
		_r$2 = typeEncoder(v.Type()); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	typeEncoder = function(t) {
		var $ptr, _entry, _key, _key$1, _r$2, f, t, wg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _key$1 = $f._key$1; _r$2 = $f._r$2; f = $f.f; t = $f.t; wg = $f.wg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		wg = [wg];
		encoderCache.RWMutex.RLock();
		f[0] = (_entry = encoderCache.m[reflect.Type.keyFor(t)], _entry !== undefined ? _entry.v : $throwNilPointerError);
		encoderCache.RWMutex.RUnlock();
		if (!(f[0] === $throwNilPointerError)) {
			return f[0];
		}
		encoderCache.RWMutex.Lock();
		if (encoderCache.m === false) {
			encoderCache.m = {};
		}
		wg[0] = new nosync.WaitGroup.ptr(0);
		wg[0].Add(1);
		_key = t; (encoderCache.m || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: (function(f, wg) { return function $b(e, v, quoted) {
			var $ptr, e, quoted, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; quoted = $f.quoted; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			v = v;
			wg[0].Wait();
			$r = f[0](e, v, quoted); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.e = e; $f.quoted = quoted; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(f, wg) };
		encoderCache.RWMutex.Unlock();
		_r$2 = newTypeEncoder(t, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		f[0] = _r$2;
		wg[0].Done();
		encoderCache.RWMutex.Lock();
		_key$1 = t; (encoderCache.m || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: f[0] };
		encoderCache.RWMutex.Unlock();
		return f[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeEncoder }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._key$1 = _key$1; $f._r$2 = _r$2; $f.f = f; $f.t = t; $f.wg = wg; $f.$s = $s; $f.$r = $r; return $f;
	};
	newTypeEncoder = function(t, allowAddr) {
		var $ptr, _2, _arg, _arg$1, _arg$2, _arg$3, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, allowAddr, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; allowAddr = $f.allowAddr; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = t.Implements(marshalerType); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$2) { */ case 1:
			return marshalerEncoder;
		/* } */ case 2:
		_r$3 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((_r$3 === 22)) && allowAddr) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((_r$3 === 22)) && allowAddr) { */ case 4:
			_r$4 = reflect.PtrTo(t).Implements(marshalerType); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_r$4) { */ case 7:
				_arg = addrMarshalerEncoder;
				_r$5 = newTypeEncoder(t, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$1 = _r$5;
				_r$6 = newCondAddrEncoder(_arg, _arg$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				/* */ $s = 12; case 12:
				return _r$6;
			/* } */ case 8:
		/* } */ case 5:
		_r$7 = t.Implements(textMarshalerType); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ if (_r$7) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (_r$7) { */ case 13:
			return textMarshalerEncoder;
		/* } */ case 14:
		_r$8 = t.Kind(); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ if (!((_r$8 === 22)) && allowAddr) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!((_r$8 === 22)) && allowAddr) { */ case 16:
			_r$9 = reflect.PtrTo(t).Implements(textMarshalerType); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ if (_r$9) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (_r$9) { */ case 19:
				_arg$2 = addrTextMarshalerEncoder;
				_r$10 = newTypeEncoder(t, false); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_arg$3 = _r$10;
				_r$11 = newCondAddrEncoder(_arg$2, _arg$3); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				/* */ $s = 24; case 24:
				return _r$11;
			/* } */ case 20:
		/* } */ case 17:
			_r$12 = t.Kind(); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_2 = _r$12;
			/* */ if (_2 === 1) { $s = 27; continue; }
			/* */ if ((_2 === 2) || (_2 === 3) || (_2 === 4) || (_2 === 5) || (_2 === 6)) { $s = 28; continue; }
			/* */ if ((_2 === 7) || (_2 === 8) || (_2 === 9) || (_2 === 10) || (_2 === 11) || (_2 === 12)) { $s = 29; continue; }
			/* */ if (_2 === 13) { $s = 30; continue; }
			/* */ if (_2 === 14) { $s = 31; continue; }
			/* */ if (_2 === 24) { $s = 32; continue; }
			/* */ if (_2 === 20) { $s = 33; continue; }
			/* */ if (_2 === 25) { $s = 34; continue; }
			/* */ if (_2 === 21) { $s = 35; continue; }
			/* */ if (_2 === 23) { $s = 36; continue; }
			/* */ if (_2 === 17) { $s = 37; continue; }
			/* */ if (_2 === 22) { $s = 38; continue; }
			/* */ $s = 39; continue;
			/* if (_2 === 1) { */ case 27:
				return boolEncoder;
			/* } else if ((_2 === 2) || (_2 === 3) || (_2 === 4) || (_2 === 5) || (_2 === 6)) { */ case 28:
				return intEncoder;
			/* } else if ((_2 === 7) || (_2 === 8) || (_2 === 9) || (_2 === 10) || (_2 === 11) || (_2 === 12)) { */ case 29:
				return uintEncoder;
			/* } else if (_2 === 13) { */ case 30:
				return float32Encoder;
			/* } else if (_2 === 14) { */ case 31:
				return float64Encoder;
			/* } else if (_2 === 24) { */ case 32:
				return stringEncoder;
			/* } else if (_2 === 20) { */ case 33:
				return interfaceEncoder;
			/* } else if (_2 === 25) { */ case 34:
				_r$13 = newStructEncoder(t); /* */ $s = 41; case 41: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				/* */ $s = 42; case 42:
				return _r$13;
			/* } else if (_2 === 21) { */ case 35:
				_r$14 = newMapEncoder(t); /* */ $s = 43; case 43: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ $s = 44; case 44:
				return _r$14;
			/* } else if (_2 === 23) { */ case 36:
				_r$15 = newSliceEncoder(t); /* */ $s = 45; case 45: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ $s = 46; case 46:
				return _r$15;
			/* } else if (_2 === 17) { */ case 37:
				_r$16 = newArrayEncoder(t); /* */ $s = 47; case 47: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				/* */ $s = 48; case 48:
				return _r$16;
			/* } else if (_2 === 22) { */ case 38:
				_r$17 = newPtrEncoder(t); /* */ $s = 49; case 49: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				/* */ $s = 50; case 50:
				return _r$17;
			/* } else { */ case 39:
				return unsupportedTypeEncoder;
			/* } */ case 40:
		case 25:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: newTypeEncoder }; } $f.$ptr = $ptr; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.allowAddr = allowAddr; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	invalidValueEncoder = function(e, v, quoted) {
		var $ptr, e, quoted, v;
		v = v;
		e.Buffer.WriteString("null");
	};
	marshalerEncoder = function(e, v, quoted) {
		var $ptr, _r$2, _r$3, _r$4, _tuple, b, e, err, m, quoted, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; quoted = $f.quoted; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if ((v.Kind() === 22) && v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_r$2 = v.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		m = $assertType(_r$2, Marshaler);
		_r$3 = m.MarshalJSON(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		b = _tuple[0];
		err = _tuple[1];
		/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 3:
			_r$4 = compact(e.Buffer, b, true); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
		/* } */ case 4:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: marshalerEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.quoted = quoted; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	addrMarshalerEncoder = function(e, v, quoted) {
		var $ptr, _r$2, _r$3, _r$4, _tuple, b, e, err, m, quoted, v, va, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; quoted = $f.quoted; v = $f.v; va = $f.va; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		va = v.Addr();
		if (va.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_r$2 = va.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		m = $assertType(_r$2, Marshaler);
		_r$3 = m.MarshalJSON(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		b = _tuple[0];
		err = _tuple[1];
		/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 3:
			_r$4 = compact(e.Buffer, b, true); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
		/* } */ case 4:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: addrMarshalerEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.quoted = quoted; $f.v = v; $f.va = va; $f.$s = $s; $f.$r = $r; return $f;
	};
	textMarshalerEncoder = function(e, v, quoted) {
		var $ptr, _r$2, _r$3, _tuple, b, e, err, m, quoted, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; quoted = $f.quoted; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if ((v.Kind() === 22) && v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_r$2 = v.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		m = $assertType(_r$2, encoding.TextMarshaler);
		_r$3 = m.MarshalText(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		b = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
		e.stringBytes(b);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: textMarshalerEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.quoted = quoted; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	addrTextMarshalerEncoder = function(e, v, quoted) {
		var $ptr, _r$2, _r$3, _tuple, b, e, err, m, quoted, v, va, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; quoted = $f.quoted; v = $f.v; va = $f.va; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		va = v.Addr();
		if (va.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_r$2 = va.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		m = $assertType(_r$2, encoding.TextMarshaler);
		_r$3 = m.MarshalText(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		b = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
		e.stringBytes(b);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: addrTextMarshalerEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.quoted = quoted; $f.v = v; $f.va = va; $f.$s = $s; $f.$r = $r; return $f;
	};
	boolEncoder = function(e, v, quoted) {
		var $ptr, e, quoted, v;
		v = v;
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		if (v.Bool()) {
			e.Buffer.WriteString("true");
		} else {
			e.Buffer.WriteString("false");
		}
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	intEncoder = function(e, v, quoted) {
		var $ptr, b, e, quoted, v;
		v = v;
		b = strconv.AppendInt($subslice(new sliceType$2(e.scratch), 0, 0), v.Int(), 10);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	uintEncoder = function(e, v, quoted) {
		var $ptr, b, e, quoted, v;
		v = v;
		b = strconv.AppendUint($subslice(new sliceType$2(e.scratch), 0, 0), v.Uint(), 10);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	floatEncoder.prototype.encode = function(e, v, quoted) {
		var $ptr, b, bits, e, f, quoted, v;
		v = v;
		bits = this.$val;
		f = v.Float();
		if (math.IsInf(f, 0) || math.IsNaN(f)) {
			e.error(new UnsupportedValueError.ptr($clone(v, reflect.Value), strconv.FormatFloat(f, 103, -1, (bits >> 0))));
		}
		b = strconv.AppendFloat($subslice(new sliceType$2(e.scratch), 0, 0), f, 103, -1, (bits >> 0));
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	$ptrType(floatEncoder).prototype.encode = function(e, v, quoted) { return new floatEncoder(this.$get()).encode(e, v, quoted); };
	stringEncoder = function(e, v, quoted) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, e, err, numStr, quoted, sb, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; e = $f.e; err = $f.err; numStr = $f.numStr; quoted = $f.quoted; sb = $f.sb; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		/* */ if ($interfaceIsEqual(v.Type(), numberType)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(v.Type(), numberType)) { */ case 1:
			_r$2 = v.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			numStr = _r$2;
			if (numStr === "") {
				numStr = "0";
			}
			/* */ if (!isValidNumber(numStr)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!isValidNumber(numStr)) { */ case 4:
				_r$3 = fmt.Errorf("json: invalid number literal %q", new sliceType([new $String(numStr)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = e.error(_r$3); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			e.Buffer.WriteString(numStr);
			return;
		/* } */ case 2:
		/* */ if (quoted) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (quoted) { */ case 8:
			_r$4 = v.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = Marshal(new $String(_r$4)); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple = _r$5;
			sb = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				e.error(err);
			}
			e.string($bytesToString(sb));
			$s = 10; continue;
		/* } else { */ case 9:
			_r$6 = v.String(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = e.string(_r$6); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
		/* } */ case 10:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: stringEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.numStr = numStr; $f.quoted = quoted; $f.sb = sb; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	interfaceEncoder = function(e, v, quoted) {
		var $ptr, _r$2, e, quoted, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; e = $f.e; quoted = $f.quoted; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_r$2 = v.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = e.reflectValue(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: interfaceEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.e = e; $f.quoted = quoted; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	unsupportedTypeEncoder = function(e, v, quoted) {
		var $ptr, e, quoted, v;
		v = v;
		e.error(new UnsupportedTypeError.ptr(v.Type()));
	};
	structEncoder.ptr.prototype.encode = function(e, v, quoted) {
		var $ptr, _i, _r$2, _ref, e, f, first, fv, i, quoted, se, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _ref = $f._ref; e = $f.e; f = $f.f; first = $f.first; fv = $f.fv; i = $f.i; quoted = $f.quoted; se = $f.se; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		se = this;
		e.Buffer.WriteByte(123);
		first = true;
		_ref = se.fields;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			_r$2 = fieldByIndex(v, f.index); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			fv = _r$2;
			/* */ if (!fv.IsValid() || f.omitEmpty && isEmptyValue(fv)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!fv.IsValid() || f.omitEmpty && isEmptyValue(fv)) { */ case 4:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			if (first) {
				first = false;
			} else {
				e.Buffer.WriteByte(44);
			}
			e.string(f.name);
			e.Buffer.WriteByte(58);
			$r = (x = se.fieldEncs, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]))(e, fv, f.quoted); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		e.Buffer.WriteByte(125);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: structEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._ref = _ref; $f.e = e; $f.f = f; $f.first = first; $f.fv = fv; $f.i = i; $f.quoted = quoted; $f.se = se; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structEncoder.prototype.encode = function(e, v, quoted) { return this.$val.encode(e, v, quoted); };
	newStructEncoder = function(t) {
		var $ptr, _i, _r$2, _r$3, _r$4, _ref, f, fields, i, se, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; f = $f.f; fields = $f.fields; i = $f.i; se = $f.se; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = cachedTypeFields(t); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		fields = _r$2;
		se = new structEncoder.ptr(fields, $makeSlice(sliceType$4, fields.$length));
		_ref = fields;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			_r$3 = typeByIndex(t, f.index); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = typeEncoder(_r$3); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			(x = se.fieldEncs, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = _r$4));
			_i++;
		/* } */ $s = 2; continue; case 3:
		return $methodVal(se, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newStructEncoder }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.f = f; $f.fields = fields; $f.i = i; $f.se = se; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapEncoder.ptr.prototype.encode = function(e, v, param) {
		var $ptr, _arg, _arg$1, _i, _r$2, _r$3, _r$4, _r$5, _ref, e, i, k, me, param, sv, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; e = $f.e; i = $f.i; k = $f.k; me = $f.me; param = $f.param; sv = $f.sv; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		me = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		e.Buffer.WriteByte(123);
		_r$2 = v.MapKeys(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		sv = (x = _r$2, $subslice(new stringValues(x.$array), x.$offset, x.$offset + x.$length));
		$r = sort.Sort(sv); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = sv;
		_i = 0;
		/* while (true) { */ case 3:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
			i = _i;
			k = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				e.Buffer.WriteByte(44);
			}
			_r$3 = k.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = e.string(_r$3); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			e.Buffer.WriteByte(58);
			_arg = e;
			_r$5 = v.MapIndex(k); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$1 = _r$5;
			$r = me.elemEnc(_arg, _arg$1, false); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 3; continue; case 4:
		e.Buffer.WriteByte(125);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.e = e; $f.i = i; $f.k = k; $f.me = me; $f.param = param; $f.sv = sv; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newMapEncoder = function(t) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, me, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; me = $f.me; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = t.Key(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((_r$3 === 24))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$3 === 24))) { */ case 1:
			return unsupportedTypeEncoder;
		/* } */ case 2:
		_r$4 = t.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = typeEncoder(_r$4); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		me = new mapEncoder.ptr(_r$5);
		return $methodVal(me, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newMapEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.me = me; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	encodeByteSlice = function(e, v, param) {
		var $ptr, _r$2, _r$3, _r$4, dst, e, enc, param, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; dst = $f.dst; e = $f.e; enc = $f.enc; param = $f.param; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_r$2 = v.Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		s = _r$2;
		e.Buffer.WriteByte(34);
		/* */ if (s.$length < 1024) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (s.$length < 1024) { */ case 2:
			dst = $makeSlice(sliceType$2, base64.StdEncoding.EncodedLen(s.$length));
			base64.StdEncoding.Encode(dst, s);
			e.Buffer.Write(dst);
			$s = 4; continue;
		/* } else { */ case 3:
			enc = base64.NewEncoder(base64.StdEncoding, e);
			_r$3 = enc.Write(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = enc.Close(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 4:
		e.Buffer.WriteByte(34);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: encodeByteSlice }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.dst = dst; $f.e = e; $f.enc = enc; $f.param = param; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	sliceEncoder.ptr.prototype.encode = function(e, v, param) {
		var $ptr, e, param, se, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; e = $f.e; param = $f.param; se = $f.se; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		se = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		$r = se.arrayEnc(e, v, false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: sliceEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f.e = e; $f.param = param; $f.se = se; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	sliceEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newSliceEncoder = function(t) {
		var $ptr, _r$2, _r$3, _r$4, enc, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; enc = $f.enc; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = t.Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 8) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$3 === 8) { */ case 1:
			return encodeByteSlice;
		/* } */ case 2:
		_r$4 = newArrayEncoder(t); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		enc = new sliceEncoder.ptr(_r$4);
		return $methodVal(enc, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newSliceEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.enc = enc; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayEncoder.ptr.prototype.encode = function(e, v, param) {
		var $ptr, _arg, _arg$1, _r$2, ae, e, i, n, param, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; ae = $f.ae; e = $f.e; i = $f.i; n = $f.n; param = $f.param; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		ae = this;
		e.Buffer.WriteByte(91);
		n = v.Len();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			if (i > 0) {
				e.Buffer.WriteByte(44);
			}
			_arg = e;
			_r$2 = v.Index(i); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$1 = _r$2;
			$r = ae.elemEnc(_arg, _arg$1, false); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		e.Buffer.WriteByte(93);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: arrayEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f.ae = ae; $f.e = e; $f.i = i; $f.n = n; $f.param = param; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newArrayEncoder = function(t) {
		var $ptr, _r$2, _r$3, enc, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; enc = $f.enc; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = t.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = typeEncoder(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		enc = new arrayEncoder.ptr(_r$3);
		return $methodVal(enc, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newArrayEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.enc = enc; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrEncoder.ptr.prototype.encode = function(e, v, quoted) {
		var $ptr, _arg, _arg$1, _arg$2, _r$2, e, pe, quoted, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$2 = $f._r$2; e = $f.e; pe = $f.pe; quoted = $f.quoted; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		pe = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		_arg = e;
		_r$2 = v.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_arg$2 = quoted;
		$r = pe.elemEnc(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ptrEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$2 = _r$2; $f.e = e; $f.pe = pe; $f.quoted = quoted; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrEncoder.prototype.encode = function(e, v, quoted) { return this.$val.encode(e, v, quoted); };
	newPtrEncoder = function(t) {
		var $ptr, _r$2, _r$3, enc, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; enc = $f.enc; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = t.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = typeEncoder(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		enc = new ptrEncoder.ptr(_r$3);
		return $methodVal(enc, "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPtrEncoder }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.enc = enc; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	condAddrEncoder.ptr.prototype.encode = function(e, v, quoted) {
		var $ptr, ce, e, quoted, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ce = $f.ce; e = $f.e; quoted = $f.quoted; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		ce = this;
		/* */ if (v.CanAddr()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.CanAddr()) { */ case 1:
			$r = ce.canAddrEnc(e, v, quoted); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			$r = ce.elseEnc(e, v, quoted); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: condAddrEncoder.ptr.prototype.encode }; } $f.$ptr = $ptr; $f.ce = ce; $f.e = e; $f.quoted = quoted; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	condAddrEncoder.prototype.encode = function(e, v, quoted) { return this.$val.encode(e, v, quoted); };
	newCondAddrEncoder = function(canAddrEnc, elseEnc) {
		var $ptr, canAddrEnc, elseEnc, enc;
		enc = new condAddrEncoder.ptr(canAddrEnc, elseEnc);
		return $methodVal(enc, "encode");
	};
	isValidTag = function(s) {
		var $ptr, _i, _ref, _rune, c, s;
		if (s === "") {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (strings.ContainsRune("!#$%&()*+-./:<=>?@[]^_{|}~ ", c)) {
			} else if (!unicode.IsLetter(c) && !unicode.IsDigit(c)) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	fieldByIndex = function(v, index) {
		var $ptr, _i, _r$2, _r$3, _ref, i, index, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; i = $f.i; index = $f.index; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (v.Kind() === 22) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (v.Kind() === 22) { */ case 3:
				if (v.IsNil()) {
					return new reflect.Value.ptr(ptrType$2.nil, 0, 0);
				}
				_r$2 = v.Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				v = _r$2;
			/* } */ case 4:
			_r$3 = v.Field(i); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 1; continue; case 2:
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.i = i; $f.index = index; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	typeByIndex = function(t, index) {
		var $ptr, _i, _r$2, _r$3, _r$4, _ref, i, index, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; i = $f.i; index = $f.index; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$2 = t.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 === 22) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$2 === 22) { */ case 3:
				_r$3 = t.Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				t = _r$3;
			/* } */ case 4:
			_r$4 = t.Field(i); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			t = _r$4.Type;
			_i++;
		/* } */ $s = 1; continue; case 2:
		return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.i = i; $f.index = index; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringValues.prototype.Len = function() {
		var $ptr, sv;
		sv = this;
		return sv.$length;
	};
	$ptrType(stringValues).prototype.Len = function() { return this.$get().Len(); };
	stringValues.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, sv;
		sv = this;
		_tmp = ((j < 0 || j >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + j]);
		_tmp$1 = ((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]);
		((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i] = _tmp);
		((j < 0 || j >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + j] = _tmp$1);
	};
	$ptrType(stringValues).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	stringValues.prototype.Less = function(i, j) {
		var $ptr, _r$2, _r$3, i, j, sv, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; j = $f.j; sv = $f.sv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sv = this;
		_r$2 = sv.get(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = sv.get(j); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$2 < _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringValues.prototype.Less }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.j = j; $f.sv = sv; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(stringValues).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	stringValues.prototype.get = function(i) {
		var $ptr, _r$2, i, sv, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; i = $f.i; sv = $f.sv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sv = this;
		_r$2 = ((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringValues.prototype.get }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.i = i; $f.sv = sv; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(stringValues).prototype.get = function(i) { return this.$get().get(i); };
	encodeState.ptr.prototype.string = function(s) {
		var $ptr, _3, _tuple, b, c, e, i, len0, s, size, start;
		e = this;
		len0 = e.Buffer.Len();
		e.Buffer.WriteByte(34);
		start = 0;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			b = s.charCodeAt(i);
			if (b < 128) {
				if (32 <= b && !((b === 92)) && !((b === 34)) && !((b === 60)) && !((b === 62)) && !((b === 38))) {
					i = i + (1) >> 0;
					continue;
				}
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				_3 = b;
				if ((_3 === 92) || (_3 === 34)) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(b);
				} else if (_3 === 10) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(110);
				} else if (_3 === 13) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(114);
				} else if (_3 === 9) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(116);
				} else {
					e.Buffer.WriteString("\\u00");
					e.Buffer.WriteByte(hex.charCodeAt((b >>> 4 << 24 >>> 24)));
					e.Buffer.WriteByte(hex.charCodeAt(((b & 15) >>> 0)));
				}
				i = i + (1) >> 0;
				start = i;
				continue;
			}
			_tuple = utf8.DecodeRuneInString(s.substring(i));
			c = _tuple[0];
			size = _tuple[1];
			if ((c === 65533) && (size === 1)) {
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				e.Buffer.WriteString("\\ufffd");
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			if ((c === 8232) || (c === 8233)) {
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				e.Buffer.WriteString("\\u202");
				e.Buffer.WriteByte(hex.charCodeAt((c & 15)));
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			i = i + (size) >> 0;
		}
		if (start < s.length) {
			e.Buffer.WriteString(s.substring(start));
		}
		e.Buffer.WriteByte(34);
		return e.Buffer.Len() - len0 >> 0;
	};
	encodeState.prototype.string = function(s) { return this.$val.string(s); };
	encodeState.ptr.prototype.stringBytes = function(s) {
		var $ptr, _4, _tuple, b, c, e, i, len0, s, size, start;
		e = this;
		len0 = e.Buffer.Len();
		e.Buffer.WriteByte(34);
		start = 0;
		i = 0;
		while (true) {
			if (!(i < s.$length)) { break; }
			b = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			if (b < 128) {
				if (32 <= b && !((b === 92)) && !((b === 34)) && !((b === 60)) && !((b === 62)) && !((b === 38))) {
					i = i + (1) >> 0;
					continue;
				}
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				_4 = b;
				if ((_4 === 92) || (_4 === 34)) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(b);
				} else if (_4 === 10) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(110);
				} else if (_4 === 13) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(114);
				} else if (_4 === 9) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(116);
				} else {
					e.Buffer.WriteString("\\u00");
					e.Buffer.WriteByte(hex.charCodeAt((b >>> 4 << 24 >>> 24)));
					e.Buffer.WriteByte(hex.charCodeAt(((b & 15) >>> 0)));
				}
				i = i + (1) >> 0;
				start = i;
				continue;
			}
			_tuple = utf8.DecodeRune($subslice(s, i));
			c = _tuple[0];
			size = _tuple[1];
			if ((c === 65533) && (size === 1)) {
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				e.Buffer.WriteString("\\ufffd");
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			if ((c === 8232) || (c === 8233)) {
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				e.Buffer.WriteString("\\u202");
				e.Buffer.WriteByte(hex.charCodeAt((c & 15)));
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			i = i + (size) >> 0;
		}
		if (start < s.$length) {
			e.Buffer.Write($subslice(s, start));
		}
		e.Buffer.WriteByte(34);
		return e.Buffer.Len() - len0 >> 0;
	};
	encodeState.prototype.stringBytes = function(s) { return this.$val.stringBytes(s); };
	fillField = function(f) {
		var $ptr, f;
		f = $clone(f, field);
		f.nameBytes = new sliceType$2($stringToBytes(f.name));
		f.equalFold = foldFunc(f.nameBytes);
		return f;
	};
	byName.prototype.Len = function() {
		var $ptr, x;
		x = this;
		return x.$length;
	};
	$ptrType(byName).prototype.Len = function() { return this.$get().Len(); };
	byName.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = $clone(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), field);
		_tmp$1 = $clone(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), field);
		field.copy(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), _tmp);
		field.copy(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), _tmp$1);
	};
	$ptrType(byName).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byName.prototype.Less = function(i, j) {
		var $ptr, i, j, x;
		x = this;
		if (!(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).name === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).name)) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).name < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).name;
		}
		if (!((((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length))) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length;
		}
		if (!(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).tag === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).tag)) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).tag;
		}
		return $subslice(new byIndex(x.$array), x.$offset, x.$offset + x.$length).Less(i, j);
	};
	$ptrType(byName).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byIndex.prototype.Len = function() {
		var $ptr, x;
		x = this;
		return x.$length;
	};
	$ptrType(byIndex).prototype.Len = function() { return this.$get().Len(); };
	byIndex.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = $clone(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), field);
		_tmp$1 = $clone(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), field);
		field.copy(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), _tmp);
		field.copy(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), _tmp$1);
	};
	$ptrType(byIndex).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byIndex.prototype.Less = function(i, j) {
		var $ptr, _i, _ref, i, j, k, x, x$1, x$2, xik;
		x = this;
		_ref = ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			k = _i;
			xik = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (k >= ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length) {
				return false;
			}
			if (!((xik === (x$1 = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + k]))))) {
				return xik < (x$2 = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + k]));
			}
			_i++;
		}
		return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length;
	};
	$ptrType(byIndex).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	typeFields = function(t) {
		var $ptr, _5, _entry, _entry$1, _entry$2, _entry$3, _i, _key, _key$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _v, _v$1, advance, count, current, dominant, f, fi, fields, fj, ft, i, i$1, index, name, name$1, next, nextCount, ok, opts, out, quoted, sf, t, tag, tagged, visited, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _5 = $f._5; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; advance = $f.advance; count = $f.count; current = $f.current; dominant = $f.dominant; f = $f.f; fi = $f.fi; fields = $f.fields; fj = $f.fj; ft = $f.ft; i = $f.i; i$1 = $f.i$1; index = $f.index; name = $f.name; name$1 = $f.name$1; next = $f.next; nextCount = $f.nextCount; ok = $f.ok; opts = $f.opts; out = $f.out; quoted = $f.quoted; sf = $f.sf; t = $f.t; tag = $f.tag; tagged = $f.tagged; visited = $f.visited; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		current = new sliceType$1([]);
		next = new sliceType$1([new field.ptr("", sliceType$2.nil, $throwNilPointerError, false, sliceType$3.nil, t, false, false)]);
		count = $makeMap(reflect.Type.keyFor, []);
		nextCount = $makeMap(reflect.Type.keyFor, []);
		visited = $makeMap(reflect.Type.keyFor, []);
		fields = sliceType$1.nil;
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			_tmp$2 = nextCount;
			_tmp$3 = $makeMap(reflect.Type.keyFor, []);
			count = _tmp$2;
			nextCount = _tmp$3;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
				/* */ if ((_entry = visited[reflect.Type.keyFor(f.typ)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[reflect.Type.keyFor(f.typ)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = f.typ; (visited || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: true };
				i = 0;
				/* while (true) { */ case 7:
					_r$2 = f.typ.NumField(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* if (!(i < _r$2)) { break; } */ if(!(i < _r$2)) { $s = 8; continue; }
					_r$3 = f.typ.Field(i); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					sf = $clone(_r$3, reflect.StructField);
					/* */ if (!(sf.PkgPath === "") && !sf.Anonymous) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (!(sf.PkgPath === "") && !sf.Anonymous) { */ case 11:
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 12:
					tag = new reflect.StructTag(sf.Tag).Get("json");
					/* */ if (tag === "-") { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (tag === "-") { */ case 13:
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 14:
					_tuple = parseTag(tag);
					name = _tuple[0];
					opts = _tuple[1];
					if (!isValidTag(name)) {
						name = "";
					}
					index = $makeSlice(sliceType$3, (f.index.$length + 1 >> 0));
					$copySlice(index, f.index);
					(x = f.index.$length, ((x < 0 || x >= index.$length) ? $throwRuntimeError("index out of range") : index.$array[index.$offset + x] = i));
					ft = sf.Type;
					_r$4 = ft.Name(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					if (!(_r$4 === "")) { _v = false; $s = 17; continue s; }
					_r$5 = ft.Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_v = _r$5 === 22; case 17:
					/* */ if (_v) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_v) { */ case 15:
						_r$6 = ft.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						ft = _r$6;
					/* } */ case 16:
					quoted = false;
					/* */ if (new tagOptions(opts).Contains("string")) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (new tagOptions(opts).Contains("string")) { */ case 21:
							_r$7 = ft.Kind(); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
							_5 = _r$7;
							if ((_5 === 1) || (_5 === 2) || (_5 === 3) || (_5 === 4) || (_5 === 5) || (_5 === 6) || (_5 === 7) || (_5 === 8) || (_5 === 9) || (_5 === 10) || (_5 === 11) || (_5 === 13) || (_5 === 14) || (_5 === 24)) {
								quoted = true;
							}
						case 23:
					/* } */ case 22:
					if (!(name === "") || !sf.Anonymous) { _v$1 = true; $s = 27; continue s; }
					_r$8 = ft.Kind(); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_v$1 = !((_r$8 === 25)); case 27:
					/* */ if (_v$1) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (_v$1) { */ case 25:
						tagged = !(name === "");
						if (name === "") {
							name = sf.Name;
						}
						fields = $append(fields, fillField(new field.ptr(name, sliceType$2.nil, $throwNilPointerError, tagged, index, ft, new tagOptions(opts).Contains("omitempty"), quoted)));
						if ((_entry$1 = count[reflect.Type.keyFor(f.typ)], _entry$1 !== undefined ? _entry$1.v : 0) > 1) {
							fields = $append(fields, (x$1 = fields.$length - 1 >> 0, ((x$1 < 0 || x$1 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + x$1])));
						}
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 26:
					_key$1 = ft; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: (_entry$2 = nextCount[reflect.Type.keyFor(ft)], _entry$2 !== undefined ? _entry$2.v : 0) + (1) >> 0 };
					/* */ if ((_entry$3 = nextCount[reflect.Type.keyFor(ft)], _entry$3 !== undefined ? _entry$3.v : 0) === 1) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if ((_entry$3 = nextCount[reflect.Type.keyFor(ft)], _entry$3 !== undefined ? _entry$3.v : 0) === 1) { */ case 29:
						_r$9 = ft.Name(); /* */ $s = 31; case 31: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$10 = fillField(new field.ptr(_r$9, sliceType$2.nil, $throwNilPointerError, false, index, ft, false, false)); /* */ $s = 32; case 32: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						next = $append(next, _r$10);
					/* } */ case 30:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ $s = 1; continue; case 2:
		$r = sort.Sort($subslice(new byName(fields.$array), fields.$offset, fields.$offset + fields.$length)); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		out = $subslice(fields, 0, 0);
		_tmp$4 = 0;
		_tmp$5 = 0;
		advance = _tmp$4;
		i$1 = _tmp$5;
		/* while (true) { */ case 34:
			/* if (!(i$1 < fields.$length)) { break; } */ if(!(i$1 < fields.$length)) { $s = 35; continue; }
			fi = $clone(((i$1 < 0 || i$1 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + i$1]), field);
			name$1 = fi.name;
			advance = 1;
			while (true) {
				if (!((i$1 + advance >> 0) < fields.$length)) { break; }
				fj = $clone((x$2 = i$1 + advance >> 0, ((x$2 < 0 || x$2 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + x$2])), field);
				if (!(fj.name === name$1)) {
					break;
				}
				advance = advance + (1) >> 0;
			}
			if (advance === 1) {
				out = $append(out, fi);
				i$1 = i$1 + (advance) >> 0;
				/* continue; */ $s = 34; continue;
			}
			_tuple$1 = dominantField($subslice(fields, i$1, (i$1 + advance >> 0)));
			dominant = $clone(_tuple$1[0], field);
			ok = _tuple$1[1];
			if (ok) {
				out = $append(out, dominant);
			}
			i$1 = i$1 + (advance) >> 0;
		/* } */ $s = 34; continue; case 35:
		fields = out;
		$r = sort.Sort($subslice(new byIndex(fields.$array), fields.$offset, fields.$offset + fields.$length)); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return fields;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeFields }; } $f.$ptr = $ptr; $f._5 = _5; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f.advance = advance; $f.count = count; $f.current = current; $f.dominant = dominant; $f.f = f; $f.fi = fi; $f.fields = fields; $f.fj = fj; $f.ft = ft; $f.i = i; $f.i$1 = i$1; $f.index = index; $f.name = name; $f.name$1 = name$1; $f.next = next; $f.nextCount = nextCount; $f.ok = ok; $f.opts = opts; $f.out = out; $f.quoted = quoted; $f.sf = sf; $f.t = t; $f.tag = tag; $f.tagged = tagged; $f.visited = visited; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	dominantField = function(fields) {
		var $ptr, _i, _ref, f, fields, i, length, tagged;
		length = (0 >= fields.$length ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]).index.$length;
		tagged = -1;
		_ref = fields;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			if (f.index.$length > length) {
				fields = $subslice(fields, 0, i);
				break;
			}
			if (f.tag) {
				if (tagged >= 0) {
					return [new field.ptr("", sliceType$2.nil, $throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, false), false];
				}
				tagged = i;
			}
			_i++;
		}
		if (tagged >= 0) {
			return [((tagged < 0 || tagged >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + tagged]), true];
		}
		if (fields.$length > 1) {
			return [new field.ptr("", sliceType$2.nil, $throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, false), false];
		}
		return [(0 >= fields.$length ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]), true];
	};
	cachedTypeFields = function(t) {
		var $ptr, _entry, _key, _r$2, f, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$2 = $f._r$2; f = $f.f; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fieldCache.RWMutex.RLock();
		f = (_entry = fieldCache.m[reflect.Type.keyFor(t)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		fieldCache.RWMutex.RUnlock();
		if (!(f === sliceType$1.nil)) {
			return f;
		}
		_r$2 = typeFields(t); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		f = _r$2;
		if (f === sliceType$1.nil) {
			f = new sliceType$1([]);
		}
		fieldCache.RWMutex.Lock();
		if (fieldCache.m === false) {
			fieldCache.m = $makeMap(reflect.Type.keyFor, []);
		}
		_key = t; (fieldCache.m || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: f };
		fieldCache.RWMutex.Unlock();
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cachedTypeFields }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$2 = _r$2; $f.f = f; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	foldFunc = function(s) {
		var $ptr, _i, _ref, b, nonLetter, s, special, upper;
		nonLetter = false;
		special = false;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b >= 128) {
				return bytes.EqualFold;
			}
			upper = (b & 223) >>> 0;
			if (upper < 65 || upper > 90) {
				nonLetter = true;
			} else if ((upper === 75) || (upper === 83)) {
				special = true;
			}
			_i++;
		}
		if (special) {
			return equalFoldRight;
		}
		if (nonLetter) {
			return asciiEqualFold;
		}
		return simpleLetterEqualFold;
	};
	equalFoldRight = function(s, t) {
		var $ptr, _1, _i, _ref, _tuple, s, sb, sbUpper, size, t, tb, tr;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (t.$length === 0) {
				return false;
			}
			tb = (0 >= t.$length ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]);
			if (tb < 128) {
				if (!((sb === tb))) {
					sbUpper = (sb & 223) >>> 0;
					if (65 <= sbUpper && sbUpper <= 90) {
						if (!((sbUpper === ((tb & 223) >>> 0)))) {
							return false;
						}
					} else {
						return false;
					}
				}
				t = $subslice(t, 1);
				_i++;
				continue;
			}
			_tuple = utf8.DecodeRune(t);
			tr = _tuple[0];
			size = _tuple[1];
			_1 = sb;
			if ((_1 === 115) || (_1 === 83)) {
				if (!((tr === 383))) {
					return false;
				}
			} else if ((_1 === 107) || (_1 === 75)) {
				if (!((tr === 8490))) {
					return false;
				}
			} else {
				return false;
			}
			t = $subslice(t, size);
			_i++;
		}
		if (t.$length > 0) {
			return false;
		}
		return true;
	};
	asciiEqualFold = function(s, t) {
		var $ptr, _i, _ref, i, s, sb, t, tb;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			sb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			tb = ((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]);
			if (sb === tb) {
				_i++;
				continue;
			}
			if ((97 <= sb && sb <= 122) || (65 <= sb && sb <= 90)) {
				if (!((((sb & 223) >>> 0) === ((tb & 223) >>> 0)))) {
					return false;
				}
			} else {
				return false;
			}
			_i++;
		}
		return true;
	};
	simpleLetterEqualFold = function(s, t) {
		var $ptr, _i, _ref, b, i, s, t;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((((b & 223) >>> 0) === ((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) & 223) >>> 0)))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	compact = function(dst, src, escape) {
		var $ptr, _i, _r$2, _r$3, _ref, c, dst, escape, i, origLen, scan, src, start, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; c = $f.c; dst = $f.dst; escape = $f.escape; i = $f.i; origLen = $f.origLen; scan = $f.scan; src = $f.src; start = $f.start; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		scan = [scan];
		origLen = dst.Len();
		scan[0] = new scanner.ptr($throwNilPointerError, false, sliceType$3.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
		scan[0].reset();
		start = 0;
		_ref = src;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (escape && ((c === 60) || (c === 62) || (c === 38))) {
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				dst.WriteString("\\u00");
				dst.WriteByte(hex.charCodeAt((c >>> 4 << 24 >>> 24)));
				dst.WriteByte(hex.charCodeAt(((c & 15) >>> 0)));
				start = i + 1 >> 0;
			}
			if ((c === 226) && (i + 2 >> 0) < src.$length && ((x = i + 1 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x])) === 128) && ((((x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$1])) & ~1) << 24 >>> 24) === 168)) {
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				dst.WriteString("\\u202");
				dst.WriteByte(hex.charCodeAt((((x$2 = i + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2])) & 15) >>> 0)));
				start = i + 3 >> 0;
			}
			_r$2 = scan[0].step(scan[0], c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
			if (v >= 9) {
				if (v === 11) {
					/* break; */ $s = 2; continue;
				}
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				start = i + 1 >> 0;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$3 = scan[0].eof(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 11) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 11) { */ case 4:
			dst.Truncate(origLen);
			return scan[0].err;
		/* } */ case 5:
		if (start < src.$length) {
			dst.Write($subslice(src, start));
		}
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compact }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.c = c; $f.dst = dst; $f.escape = escape; $f.i = i; $f.origLen = origLen; $f.scan = scan; $f.src = src; $f.start = start; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	checkValid = function(data, scan) {
		var $ptr, _i, _r$2, _r$3, _ref, c, data, scan, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; c = $f.c; data = $f.data; scan = $f.scan; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		scan.reset();
		_ref = data;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			scan.bytes = (x = scan.bytes, x$1 = new $Int64(0, 1), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
			_r$2 = scan.step(scan, c); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 === 11) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$2 === 11) { */ case 3:
				return scan.err;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$3 = scan.eof(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 11) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_r$3 === 11) { */ case 6:
			return scan.err;
		/* } */ case 7:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: checkValid }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.c = c; $f.data = data; $f.scan = scan; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	nextValue = function(data, scan) {
		var $ptr, _1, _i, _r$2, _r$3, _r$4, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, data, err, i, rest, scan, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; c = $f.c; data = $f.data; err = $f.err; i = $f.i; rest = $f.rest; scan = $f.scan; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = sliceType$2.nil;
		rest = sliceType$2.nil;
		err = $ifaceNil;
		scan.reset();
		_ref = data;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$2 = scan.step(scan, c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
			/* */ if (v >= 5) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (v >= 5) { */ case 4:
					_1 = v;
					/* */ if ((_1 === 5) || (_1 === 8)) { $s = 7; continue; }
					/* */ if (_1 === 11) { $s = 8; continue; }
					/* */ if (_1 === 10) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if ((_1 === 5) || (_1 === 8)) { */ case 7:
						_r$3 = scan.step(scan, 32); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						/* */ if (_r$3 === 10) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (_r$3 === 10) { */ case 11:
							_tmp = $subslice(data, 0, (i + 1 >> 0));
							_tmp$1 = $subslice(data, (i + 1 >> 0));
							_tmp$2 = $ifaceNil;
							value = _tmp;
							rest = _tmp$1;
							err = _tmp$2;
							return [value, rest, err];
						/* } */ case 12:
						$s = 10; continue;
					/* } else if (_1 === 11) { */ case 8:
						_tmp$3 = sliceType$2.nil;
						_tmp$4 = sliceType$2.nil;
						_tmp$5 = scan.err;
						value = _tmp$3;
						rest = _tmp$4;
						err = _tmp$5;
						return [value, rest, err];
					/* } else if (_1 === 10) { */ case 9:
						_tmp$6 = $subslice(data, 0, i);
						_tmp$7 = $subslice(data, i);
						_tmp$8 = $ifaceNil;
						value = _tmp$6;
						rest = _tmp$7;
						err = _tmp$8;
						return [value, rest, err];
					/* } */ case 10:
				case 6:
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$4 = scan.eof(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4 === 11) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (_r$4 === 11) { */ case 14:
			_tmp$9 = sliceType$2.nil;
			_tmp$10 = sliceType$2.nil;
			_tmp$11 = scan.err;
			value = _tmp$9;
			rest = _tmp$10;
			err = _tmp$11;
			return [value, rest, err];
		/* } */ case 15:
		_tmp$12 = data;
		_tmp$13 = sliceType$2.nil;
		_tmp$14 = $ifaceNil;
		value = _tmp$12;
		rest = _tmp$13;
		err = _tmp$14;
		return [value, rest, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: nextValue }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.c = c; $f.data = data; $f.err = err; $f.i = i; $f.rest = rest; $f.scan = scan; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyntaxError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	scanner.ptr.prototype.reset = function() {
		var $ptr, s;
		s = this;
		s.step = stateBeginValue;
		s.parseState = $subslice(s.parseState, 0, 0);
		s.err = $ifaceNil;
		s.redo = false;
		s.endTop = false;
	};
	scanner.prototype.reset = function() { return this.$val.reset(); };
	scanner.ptr.prototype.eof = function() {
		var $ptr, _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!($interfaceIsEqual(s.err, $ifaceNil))) {
			return 11;
		}
		if (s.endTop) {
			return 10;
		}
		_r$2 = s.step(s, 32); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		if (s.endTop) {
			return 10;
		}
		if ($interfaceIsEqual(s.err, $ifaceNil)) {
			s.err = new SyntaxError.ptr("unexpected end of JSON input", s.bytes);
		}
		return 11;
		/* */ } return; } if ($f === undefined) { $f = { $blk: scanner.ptr.prototype.eof }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	scanner.prototype.eof = function() { return this.$val.eof(); };
	scanner.ptr.prototype.pushParseState = function(p) {
		var $ptr, p, s;
		s = this;
		s.parseState = $append(s.parseState, p);
	};
	scanner.prototype.pushParseState = function(p) { return this.$val.pushParseState(p); };
	scanner.ptr.prototype.popParseState = function() {
		var $ptr, n, s;
		s = this;
		n = s.parseState.$length - 1 >> 0;
		s.parseState = $subslice(s.parseState, 0, n);
		s.redo = false;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
		} else {
			s.step = stateEndValue;
		}
	};
	scanner.prototype.popParseState = function() { return this.$val.popParseState(); };
	isSpace = function(c) {
		var $ptr, c;
		return (c === 32) || (c === 9) || (c === 13) || (c === 10);
	};
	stateBeginValueOrEmpty = function(s, c) {
		var $ptr, c, s;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		if (c === 93) {
			return stateEndValue(s, c);
		}
		return stateBeginValue(s, c);
	};
	stateBeginValue = function(s, c) {
		var $ptr, _2, c, s;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		_2 = c;
		if (_2 === 123) {
			s.step = stateBeginStringOrEmpty;
			s.pushParseState(0);
			return 2;
		} else if (_2 === 91) {
			s.step = stateBeginValueOrEmpty;
			s.pushParseState(2);
			return 6;
		} else if (_2 === 34) {
			s.step = stateInString;
			return 1;
		} else if (_2 === 45) {
			s.step = stateNeg;
			return 1;
		} else if (_2 === 48) {
			s.step = state0;
			return 1;
		} else if (_2 === 116) {
			s.step = stateT;
			return 1;
		} else if (_2 === 102) {
			s.step = stateF;
			return 1;
		} else if (_2 === 110) {
			s.step = stateN;
			return 1;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 1;
		}
		return s.error(c, "looking for beginning of value");
	};
	stateBeginStringOrEmpty = function(s, c) {
		var $ptr, c, n, s, x, x$1;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		if (c === 125) {
			n = s.parseState.$length;
			(x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = 1));
			return stateEndValue(s, c);
		}
		return stateBeginString(s, c);
	};
	stateBeginString = function(s, c) {
		var $ptr, c, s;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		if (c === 34) {
			s.step = stateInString;
			return 1;
		}
		return s.error(c, "looking for beginning of object key string");
	};
	stateEndValue = function(s, c) {
		var $ptr, _3, c, n, ps, s, x, x$1, x$2, x$3, x$4, x$5;
		n = s.parseState.$length;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
			return stateEndTop(s, c);
		}
		if (c <= 32 && isSpace(c)) {
			s.step = stateEndValue;
			return 9;
		}
		ps = (x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		_3 = ps;
		if (_3 === 0) {
			if (c === 58) {
				(x$2 = s.parseState, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3] = 1));
				s.step = stateBeginValue;
				return 3;
			}
			return s.error(c, "after object key");
		} else if (_3 === 1) {
			if (c === 44) {
				(x$4 = s.parseState, x$5 = n - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = 0));
				s.step = stateBeginString;
				return 4;
			}
			if (c === 125) {
				s.popParseState();
				return 5;
			}
			return s.error(c, "after object key:value pair");
		} else if (_3 === 2) {
			if (c === 44) {
				s.step = stateBeginValue;
				return 7;
			}
			if (c === 93) {
				s.popParseState();
				return 8;
			}
			return s.error(c, "after array element");
		}
		return s.error(c, "");
	};
	stateEndTop = function(s, c) {
		var $ptr, c, s;
		if (!((c === 32)) && !((c === 9)) && !((c === 13)) && !((c === 10))) {
			s.error(c, "after top-level value");
		}
		return 10;
	};
	stateInString = function(s, c) {
		var $ptr, c, s;
		if (c === 34) {
			s.step = stateEndValue;
			return 0;
		}
		if (c === 92) {
			s.step = stateInStringEsc;
			return 0;
		}
		if (c < 32) {
			return s.error(c, "in string literal");
		}
		return 0;
	};
	stateInStringEsc = function(s, c) {
		var $ptr, _4, c, s;
		_4 = c;
		if ((_4 === 98) || (_4 === 102) || (_4 === 110) || (_4 === 114) || (_4 === 116) || (_4 === 92) || (_4 === 47) || (_4 === 34)) {
			s.step = stateInString;
			return 0;
		} else if (_4 === 117) {
			s.step = stateInStringEscU;
			return 0;
		}
		return s.error(c, "in string escape code");
	};
	stateInStringEscU = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU1;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU1 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU12;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU12 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU123;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU123 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInString;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateNeg = function(s, c) {
		var $ptr, c, s;
		if (c === 48) {
			s.step = state0;
			return 0;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return s.error(c, "in numeric literal");
	};
	state1 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return state0(s, c);
	};
	state0 = function(s, c) {
		var $ptr, c, s;
		if (c === 46) {
			s.step = stateDot;
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateDot = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = stateDot0;
			return 0;
		}
		return s.error(c, "after decimal point in numeric literal");
	};
	stateDot0 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateE = function(s, c) {
		var $ptr, c, s;
		if ((c === 43) || (c === 45)) {
			s.step = stateESign;
			return 0;
		}
		return stateESign(s, c);
	};
	stateESign = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			s.step = stateE0;
			return 0;
		}
		return s.error(c, "in exponent of numeric literal");
	};
	stateE0 = function(s, c) {
		var $ptr, c, s;
		if (48 <= c && c <= 57) {
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateT = function(s, c) {
		var $ptr, c, s;
		if (c === 114) {
			s.step = stateTr;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'r')");
	};
	stateTr = function(s, c) {
		var $ptr, c, s;
		if (c === 117) {
			s.step = stateTru;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'u')");
	};
	stateTru = function(s, c) {
		var $ptr, c, s;
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'e')");
	};
	stateF = function(s, c) {
		var $ptr, c, s;
		if (c === 97) {
			s.step = stateFa;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'a')");
	};
	stateFa = function(s, c) {
		var $ptr, c, s;
		if (c === 108) {
			s.step = stateFal;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'l')");
	};
	stateFal = function(s, c) {
		var $ptr, c, s;
		if (c === 115) {
			s.step = stateFals;
			return 0;
		}
		return s.error(c, "in literal false (expecting 's')");
	};
	stateFals = function(s, c) {
		var $ptr, c, s;
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'e')");
	};
	stateN = function(s, c) {
		var $ptr, c, s;
		if (c === 117) {
			s.step = stateNu;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'u')");
	};
	stateNu = function(s, c) {
		var $ptr, c, s;
		if (c === 108) {
			s.step = stateNul;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateNul = function(s, c) {
		var $ptr, c, s;
		if (c === 108) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateError = function(s, c) {
		var $ptr, c, s;
		return 11;
	};
	scanner.ptr.prototype.error = function(c, context) {
		var $ptr, c, context, s;
		s = this;
		s.step = stateError;
		s.err = new SyntaxError.ptr("invalid character " + quoteChar(c) + " " + context, s.bytes);
		return 11;
	};
	scanner.prototype.error = function(c, context) { return this.$val.error(c, context); };
	quoteChar = function(c) {
		var $ptr, c, s;
		if (c === 39) {
			return "'\\''";
		}
		if (c === 34) {
			return "'\"'";
		}
		s = strconv.Quote($encodeRune(c));
		return "'" + s.substring(1, (s.length - 1 >> 0)) + "'";
	};
	scanner.ptr.prototype.undo = function(scanCode) {
		var $ptr, s, scanCode;
		s = this;
		if (s.redo) {
			$panic(new $String("json: invalid use of scanner"));
		}
		s.redoCode = scanCode;
		s.redoState = s.step;
		s.step = stateRedo;
		s.redo = true;
	};
	scanner.prototype.undo = function(scanCode) { return this.$val.undo(scanCode); };
	stateRedo = function(s, c) {
		var $ptr, c, s;
		s.redo = false;
		s.step = s.redoState;
		return s.redoCode;
	};
	parseTag = function(tag) {
		var $ptr, idx, tag;
		idx = strings.Index(tag, ",");
		if (!((idx === -1))) {
			return [tag.substring(0, idx), tag.substring((idx + 1 >> 0))];
		}
		return [tag, ""];
	};
	tagOptions.prototype.Contains = function(optionName) {
		var $ptr, _tmp, _tmp$1, i, next, o, optionName, s;
		o = this.$val;
		if (o.length === 0) {
			return false;
		}
		s = o;
		while (true) {
			if (!(!(s === ""))) { break; }
			next = "";
			i = strings.Index(s, ",");
			if (i >= 0) {
				_tmp = s.substring(0, i);
				_tmp$1 = s.substring((i + 1 >> 0));
				s = _tmp;
				next = _tmp$1;
			}
			if (s === optionName) {
				return true;
			}
			s = next;
		}
		return false;
	};
	$ptrType(tagOptions).prototype.Contains = function(optionName) { return new tagOptions(this.$get()).Contains(optionName); };
	ptrType$9.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Number.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64, $error], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64, $error], false)}];
	ptrType$12.methods = [{prop: "unmarshal", name: "unmarshal", pkg: "encoding/json", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "init", name: "init", pkg: "encoding/json", typ: $funcType([sliceType$2], [ptrType$12], false)}, {prop: "error", name: "error", pkg: "encoding/json", typ: $funcType([$error], [], false)}, {prop: "saveError", name: "saveError", pkg: "encoding/json", typ: $funcType([$error], [], false)}, {prop: "next", name: "next", pkg: "encoding/json", typ: $funcType([], [sliceType$2], false)}, {prop: "scanWhile", name: "scanWhile", pkg: "encoding/json", typ: $funcType([$Int], [$Int], false)}, {prop: "value", name: "value", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "valueQuoted", name: "valueQuoted", pkg: "encoding/json", typ: $funcType([], [$emptyInterface], false)}, {prop: "indirect", name: "indirect", pkg: "encoding/json", typ: $funcType([reflect.Value, $Bool], [Unmarshaler, encoding.TextUnmarshaler, reflect.Value], false)}, {prop: "array", name: "array", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "object", name: "object", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "literal", name: "literal", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "convertNumber", name: "convertNumber", pkg: "encoding/json", typ: $funcType([$String], [$emptyInterface, $error], false)}, {prop: "literalStore", name: "literalStore", pkg: "encoding/json", typ: $funcType([sliceType$2, reflect.Value, $Bool], [], false)}, {prop: "valueInterface", name: "valueInterface", pkg: "encoding/json", typ: $funcType([], [$emptyInterface], false)}, {prop: "arrayInterface", name: "arrayInterface", pkg: "encoding/json", typ: $funcType([], [sliceType], false)}, {prop: "objectInterface", name: "objectInterface", pkg: "encoding/json", typ: $funcType([], [mapType$2], false)}, {prop: "literalInterface", name: "literalInterface", pkg: "encoding/json", typ: $funcType([], [$emptyInterface], false)}];
	ptrType$13.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$14.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$16.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "marshal", name: "marshal", pkg: "encoding/json", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "error", name: "error", pkg: "encoding/json", typ: $funcType([$error], [], false)}, {prop: "reflectValue", name: "reflectValue", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "string", name: "string", pkg: "encoding/json", typ: $funcType([$String], [$Int], false)}, {prop: "stringBytes", name: "stringBytes", pkg: "encoding/json", typ: $funcType([sliceType$2], [$Int], false)}];
	floatEncoder.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$17.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$18.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$19.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$20.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$21.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$22.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", typ: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	stringValues.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "get", name: "get", pkg: "encoding/json", typ: $funcType([$Int], [$String], false)}];
	byName.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	byIndex.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$8.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$23.methods = [{prop: "reset", name: "reset", pkg: "encoding/json", typ: $funcType([], [], false)}, {prop: "eof", name: "eof", pkg: "encoding/json", typ: $funcType([], [$Int], false)}, {prop: "pushParseState", name: "pushParseState", pkg: "encoding/json", typ: $funcType([$Int], [], false)}, {prop: "popParseState", name: "popParseState", pkg: "encoding/json", typ: $funcType([], [], false)}, {prop: "error", name: "error", pkg: "encoding/json", typ: $funcType([$Uint8, $String], [$Int], false)}, {prop: "undo", name: "undo", pkg: "encoding/json", typ: $funcType([$Int], [], false)}];
	tagOptions.methods = [{prop: "Contains", name: "Contains", pkg: "", typ: $funcType([$String], [$Bool], false)}];
	Unmarshaler.init([{prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$2], [$error], false)}]);
	UnmarshalTypeError.init([{prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: reflect.Type, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Int64, tag: ""}]);
	InvalidUnmarshalError.init([{prop: "Type", name: "Type", pkg: "", typ: reflect.Type, tag: ""}]);
	decodeState.init([{prop: "data", name: "data", pkg: "encoding/json", typ: sliceType$2, tag: ""}, {prop: "off", name: "off", pkg: "encoding/json", typ: $Int, tag: ""}, {prop: "scan", name: "scan", pkg: "encoding/json", typ: scanner, tag: ""}, {prop: "nextscan", name: "nextscan", pkg: "encoding/json", typ: scanner, tag: ""}, {prop: "savedError", name: "savedError", pkg: "encoding/json", typ: $error, tag: ""}, {prop: "useNumber", name: "useNumber", pkg: "encoding/json", typ: $Bool, tag: ""}]);
	unquotedValue.init([]);
	Marshaler.init([{prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$2, $error], false)}]);
	UnsupportedTypeError.init([{prop: "Type", name: "Type", pkg: "", typ: reflect.Type, tag: ""}]);
	UnsupportedValueError.init([{prop: "Value", name: "Value", pkg: "", typ: reflect.Value, tag: ""}, {prop: "Str", name: "Str", pkg: "", typ: $String, tag: ""}]);
	MarshalerError.init([{prop: "Type", name: "Type", pkg: "", typ: reflect.Type, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	encodeState.init([{prop: "Buffer", name: "", pkg: "", typ: bytes.Buffer, tag: ""}, {prop: "scratch", name: "scratch", pkg: "encoding/json", typ: arrayType$1, tag: ""}]);
	encoderFunc.init([ptrType$4, reflect.Value, $Bool], [], false);
	structEncoder.init([{prop: "fields", name: "fields", pkg: "encoding/json", typ: sliceType$1, tag: ""}, {prop: "fieldEncs", name: "fieldEncs", pkg: "encoding/json", typ: sliceType$4, tag: ""}]);
	mapEncoder.init([{prop: "elemEnc", name: "elemEnc", pkg: "encoding/json", typ: encoderFunc, tag: ""}]);
	sliceEncoder.init([{prop: "arrayEnc", name: "arrayEnc", pkg: "encoding/json", typ: encoderFunc, tag: ""}]);
	arrayEncoder.init([{prop: "elemEnc", name: "elemEnc", pkg: "encoding/json", typ: encoderFunc, tag: ""}]);
	ptrEncoder.init([{prop: "elemEnc", name: "elemEnc", pkg: "encoding/json", typ: encoderFunc, tag: ""}]);
	condAddrEncoder.init([{prop: "canAddrEnc", name: "canAddrEnc", pkg: "encoding/json", typ: encoderFunc, tag: ""}, {prop: "elseEnc", name: "elseEnc", pkg: "encoding/json", typ: encoderFunc, tag: ""}]);
	stringValues.init(reflect.Value);
	field.init([{prop: "name", name: "name", pkg: "encoding/json", typ: $String, tag: ""}, {prop: "nameBytes", name: "nameBytes", pkg: "encoding/json", typ: sliceType$2, tag: ""}, {prop: "equalFold", name: "equalFold", pkg: "encoding/json", typ: funcType, tag: ""}, {prop: "tag", name: "tag", pkg: "encoding/json", typ: $Bool, tag: ""}, {prop: "index", name: "index", pkg: "encoding/json", typ: sliceType$3, tag: ""}, {prop: "typ", name: "typ", pkg: "encoding/json", typ: reflect.Type, tag: ""}, {prop: "omitEmpty", name: "omitEmpty", pkg: "encoding/json", typ: $Bool, tag: ""}, {prop: "quoted", name: "quoted", pkg: "encoding/json", typ: $Bool, tag: ""}]);
	byName.init(field);
	byIndex.init(field);
	SyntaxError.init([{prop: "msg", name: "msg", pkg: "encoding/json", typ: $String, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Int64, tag: ""}]);
	scanner.init([{prop: "step", name: "step", pkg: "encoding/json", typ: funcType$1, tag: ""}, {prop: "endTop", name: "endTop", pkg: "encoding/json", typ: $Bool, tag: ""}, {prop: "parseState", name: "parseState", pkg: "encoding/json", typ: sliceType$3, tag: ""}, {prop: "err", name: "err", pkg: "encoding/json", typ: $error, tag: ""}, {prop: "redo", name: "redo", pkg: "encoding/json", typ: $Bool, tag: ""}, {prop: "redoCode", name: "redoCode", pkg: "encoding/json", typ: $Int, tag: ""}, {prop: "redoState", name: "redoState", pkg: "encoding/json", typ: funcType$1, tag: ""}, {prop: "bytes", name: "bytes", pkg: "encoding/json", typ: $Int64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base64.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = testing.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		encoderCache = new structType.ptr(new nosync.RWMutex.ptr(false, 0), false);
		fieldCache = new structType$1.ptr(new nosync.RWMutex.ptr(false, 0), false);
		errPhase = errors.New("JSON decoder out of sync - data changing underfoot?");
		nullLiteral = new sliceType$2($stringToBytes("null"));
		numberType = reflect.TypeOf(new Number(""));
		hex = "0123456789abcdef";
		_r = reflect.TypeOf($newDataPointer($ifaceNil, ptrType)).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		marshalerType = _r;
		_r$1 = reflect.TypeOf($newDataPointer($ifaceNil, ptrType$1)).Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		textMarshalerType = _r$1;
		float32Encoder = $methodVal(new floatEncoder(32), "encode");
		float64Encoder = $methodVal(new floatEncoder(64), "encode");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/image/math/f32"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["text/tabwriter"] = (function() {
	var $pkg = {}, $init, bytes, io, utf8, cell, Writer, osError, sliceType, sliceType$1, ptrType, ptrType$1, arrayType, arrayType$1, arrayType$2, sliceType$2, sliceType$3, ptrType$2, newline, tabs, vbar, hbar, handlePanic, NewWriter;
	bytes = $packages["bytes"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	cell = $pkg.cell = $newType(0, $kindStruct, "tabwriter.cell", "cell", "text/tabwriter", function(size_, width_, htab_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.width = 0;
			this.htab = false;
			return;
		}
		this.size = size_;
		this.width = width_;
		this.htab = htab_;
	});
	Writer = $pkg.Writer = $newType(0, $kindStruct, "tabwriter.Writer", "Writer", "text/tabwriter", function(output_, minwidth_, tabwidth_, padding_, padbytes_, flags_, buf_, pos_, cell_, endChar_, lines_, widths_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.output = $ifaceNil;
			this.minwidth = 0;
			this.tabwidth = 0;
			this.padding = 0;
			this.padbytes = arrayType.zero();
			this.flags = 0;
			this.buf = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType$1.zero(), arrayType$2.zero(), 0);
			this.pos = 0;
			this.cell = new cell.ptr(0, 0, false);
			this.endChar = 0;
			this.lines = sliceType$2.nil;
			this.widths = sliceType$3.nil;
			return;
		}
		this.output = output_;
		this.minwidth = minwidth_;
		this.tabwidth = tabwidth_;
		this.padding = padding_;
		this.padbytes = padbytes_;
		this.flags = flags_;
		this.buf = buf_;
		this.pos = pos_;
		this.cell = cell_;
		this.endChar = endChar_;
		this.lines = lines_;
		this.widths = widths_;
	});
	osError = $pkg.osError = $newType(0, $kindStruct, "tabwriter.osError", "osError", "text/tabwriter", function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType(cell);
	ptrType = $ptrType(sliceType$1);
	ptrType$1 = $ptrType($error);
	arrayType = $arrayType($Uint8, 8);
	arrayType$1 = $arrayType($Uint8, 4);
	arrayType$2 = $arrayType($Uint8, 64);
	sliceType$2 = $sliceType(sliceType$1);
	sliceType$3 = $sliceType($Int);
	ptrType$2 = $ptrType(Writer);
	Writer.ptr.prototype.addLine = function() {
		var $ptr, b;
		b = this;
		b.lines = $append(b.lines, new sliceType$1([]));
	};
	Writer.prototype.addLine = function() { return this.$val.addLine(); };
	Writer.ptr.prototype.reset = function() {
		var $ptr, b;
		b = this;
		b.buf.Reset();
		b.pos = 0;
		cell.copy(b.cell, new cell.ptr(0, 0, false));
		b.endChar = 0;
		b.lines = $subslice(b.lines, 0, 0);
		b.widths = $subslice(b.widths, 0, 0);
		b.addLine();
	};
	Writer.prototype.reset = function() { return this.$val.reset(); };
	Writer.ptr.prototype.Init = function(output, minwidth, tabwidth, padding, padchar, flags) {
		var $ptr, _i, _ref, b, flags, i, minwidth, output, padchar, padding, tabwidth, x;
		b = this;
		if (minwidth < 0 || tabwidth < 0 || padding < 0) {
			$panic(new $String("negative minwidth, tabwidth, or padding"));
		}
		b.output = output;
		b.minwidth = minwidth;
		b.tabwidth = tabwidth;
		b.padding = padding;
		_ref = b.padbytes;
		_i = 0;
		while (true) {
			if (!(_i < 8)) { break; }
			i = _i;
			(x = b.padbytes, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = padchar));
			_i++;
		}
		if (padchar === 9) {
			flags = (flags & ~(4)) >>> 0;
		}
		b.flags = flags;
		b.reset();
		return b;
	};
	Writer.prototype.Init = function(output, minwidth, tabwidth, padding, padchar, flags) { return this.$val.Init(output, minwidth, tabwidth, padding, padchar, flags); };
	Writer.ptr.prototype.write0 = function(buf) {
		var $ptr, _r, _tuple, b, buf, err, n, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; buf = $f.buf; err = $f.err; n = $f.n; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.output.Write(buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!((n === buf.$length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic((x = new osError.ptr(err), new x.constructor.elem(x)));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.write0 }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.err = err; $f.n = n; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.write0 = function(buf) { return this.$val.write0(buf); };
	Writer.ptr.prototype.writeN = function(src, n) {
		var $ptr, b, n, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; n = $f.n; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		/* while (true) { */ case 1:
			/* if (!(n > src.$length)) { break; } */ if(!(n > src.$length)) { $s = 2; continue; }
			$r = b.write0(src); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			n = n - (src.$length) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = b.write0($subslice(src, 0, n)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.writeN }; } $f.$ptr = $ptr; $f.b = b; $f.n = n; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.writeN = function(src, n) { return this.$val.writeN(src, n); };
	Writer.ptr.prototype.writePadding = function(textw, cellw, useTabs) {
		var $ptr, _q, _q$1, b, cellw, n, textw, useTabs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; b = $f.b; cellw = $f.cellw; n = $f.n; textw = $f.textw; useTabs = $f.useTabs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		/* */ if ((b.padbytes[0] === 9) || useTabs) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((b.padbytes[0] === 9) || useTabs) { */ case 1:
			if (b.tabwidth === 0) {
				return;
			}
			cellw = $imul((_q = (((cellw + b.tabwidth >> 0) - 1 >> 0)) / b.tabwidth, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), b.tabwidth);
			n = cellw - textw >> 0;
			if (n < 0) {
				$panic(new $String("internal error"));
			}
			$r = b.writeN(tabs, (_q$1 = (((n + b.tabwidth >> 0) - 1 >> 0)) / b.tabwidth, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 2:
		$r = b.writeN($subslice(new sliceType(b.padbytes), 0), cellw - textw >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.writePadding }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f.b = b; $f.cellw = cellw; $f.n = n; $f.textw = textw; $f.useTabs = useTabs; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.writePadding = function(textw, cellw, useTabs) { return this.$val.writePadding(textw, cellw, useTabs); };
	Writer.ptr.prototype.writeLines = function(pos0, line0, line1) {
		var $ptr, _i, _ref, b, c, i, j, line, line0, line1, pos, pos0, useTabs, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; b = $f.b; c = $f.c; i = $f.i; j = $f.j; line = $f.line; line0 = $f.line0; line1 = $f.line1; pos = $f.pos; pos0 = $f.pos0; useTabs = $f.useTabs; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = 0;
		b = this;
		pos = pos0;
		i = line0;
		/* while (true) { */ case 1:
			/* if (!(i < line1)) { break; } */ if(!(i < line1)) { $s = 2; continue; }
			line = (x = b.lines, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			useTabs = !((((b.flags & 16) >>> 0) === 0));
			_ref = line;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				j = _i;
				c = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), cell);
				/* */ if (j > 0 && !((((b.flags & 32) >>> 0) === 0))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (j > 0 && !((((b.flags & 32) >>> 0) === 0))) { */ case 5:
					$r = b.write0(vbar); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				/* */ if (c.size === 0) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (c.size === 0) { */ case 8:
					/* */ if (j < b.widths.$length) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (j < b.widths.$length) { */ case 11:
						$r = b.writePadding(c.width, (x$1 = b.widths, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j])), useTabs); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 12:
					$s = 10; continue;
				/* } else { */ case 9:
					useTabs = false;
					/* */ if (((b.flags & 4) >>> 0) === 0) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (((b.flags & 4) >>> 0) === 0) { */ case 14:
						$r = b.write0($subslice(b.buf.Bytes(), pos, (pos + c.size >> 0))); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						pos = pos + (c.size) >> 0;
						/* */ if (j < b.widths.$length) { $s = 18; continue; }
						/* */ $s = 19; continue;
						/* if (j < b.widths.$length) { */ case 18:
							$r = b.writePadding(c.width, (x$2 = b.widths, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])), false); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 19:
						$s = 16; continue;
					/* } else { */ case 15:
						/* */ if (j < b.widths.$length) { $s = 21; continue; }
						/* */ $s = 22; continue;
						/* if (j < b.widths.$length) { */ case 21:
							$r = b.writePadding(c.width, (x$3 = b.widths, ((j < 0 || j >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + j])), false); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 22:
						$r = b.write0($subslice(b.buf.Bytes(), pos, (pos + c.size >> 0))); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						pos = pos + (c.size) >> 0;
					/* } */ case 16:
				/* } */ case 10:
				_i++;
			/* } */ $s = 3; continue; case 4:
			/* */ if ((i + 1 >> 0) === b.lines.$length) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if ((i + 1 >> 0) === b.lines.$length) { */ case 25:
				$r = b.write0($subslice(b.buf.Bytes(), pos, (pos + b.cell.size >> 0))); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				pos = pos + (b.cell.size) >> 0;
				$s = 27; continue;
			/* } else { */ case 26:
				$r = b.write0(newline); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 27:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.writeLines }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.b = b; $f.c = c; $f.i = i; $f.j = j; $f.line = line; $f.line0 = line0; $f.line1 = line1; $f.pos = pos; $f.pos0 = pos0; $f.useTabs = useTabs; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.writeLines = function(pos0, line0, line1) { return this.$val.writeLines(pos0, line0, line1); };
	Writer.ptr.prototype.format = function(pos0, line0, line1) {
		var $ptr, _r, _r$1, _r$2, b, c, column, discardable, line, line0, line1, pos, pos0, this$1, w, width, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; c = $f.c; column = $f.column; discardable = $f.discardable; line = $f.line; line0 = $f.line0; line1 = $f.line1; pos = $f.pos; pos0 = $f.pos0; this$1 = $f.this$1; w = $f.w; width = $f.width; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = 0;
		b = this;
		pos = pos0;
		column = b.widths.$length;
		this$1 = line0;
		/* while (true) { */ case 1:
			/* if (!(this$1 < line1)) { break; } */ if(!(this$1 < line1)) { $s = 2; continue; }
			line = (x = b.lines, ((this$1 < 0 || this$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + this$1]));
			/* */ if (column < (line.$length - 1 >> 0)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (column < (line.$length - 1 >> 0)) { */ case 3:
				_r = b.writeLines(pos, line0, this$1); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				pos = _r;
				line0 = this$1;
				width = b.minwidth;
				discardable = true;
				while (true) {
					if (!(this$1 < line1)) { break; }
					line = (x$1 = b.lines, ((this$1 < 0 || this$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + this$1]));
					if (column < (line.$length - 1 >> 0)) {
						c = $clone(((column < 0 || column >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + column]), cell);
						w = c.width + b.padding >> 0;
						if (w > width) {
							width = w;
						}
						if (c.width > 0 || c.htab) {
							discardable = false;
						}
					} else {
						break;
					}
					this$1 = this$1 + (1) >> 0;
				}
				if (discardable && !((((b.flags & 8) >>> 0) === 0))) {
					width = 0;
				}
				b.widths = $append(b.widths, width);
				_r$1 = b.format(pos, line0, this$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				pos = _r$1;
				b.widths = $subslice(b.widths, 0, (b.widths.$length - 1 >> 0));
				line0 = this$1;
			/* } */ case 4:
			this$1 = this$1 + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = b.writeLines(pos, line0, line1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		pos = _r$2;
		/* */ $s = 8; case 8:
		return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.format }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.c = c; $f.column = column; $f.discardable = discardable; $f.line = line; $f.line0 = line0; $f.line1 = line1; $f.pos = pos; $f.pos0 = pos0; $f.this$1 = this$1; $f.w = w; $f.width = width; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.format = function(pos0, line0, line1) { return this.$val.format(pos0, line0, line1); };
	Writer.ptr.prototype.append = function(text) {
		var $ptr, b, text;
		b = this;
		b.buf.Write(text);
		b.cell.size = b.cell.size + (text.$length) >> 0;
	};
	Writer.prototype.append = function(text) { return this.$val.append(text); };
	Writer.ptr.prototype.updateWidth = function() {
		var $ptr, b;
		b = this;
		b.cell.width = b.cell.width + (utf8.RuneCount($subslice(b.buf.Bytes(), b.pos, b.buf.Len()))) >> 0;
		b.pos = b.buf.Len();
	};
	Writer.prototype.updateWidth = function() { return this.$val.updateWidth(); };
	Writer.ptr.prototype.startEscape = function(ch) {
		var $ptr, _1, b, ch;
		b = this;
		_1 = ch;
		if (_1 === 255) {
			b.endChar = 255;
		} else if (_1 === 60) {
			b.endChar = 62;
		} else if (_1 === 38) {
			b.endChar = 59;
		}
	};
	Writer.prototype.startEscape = function(ch) { return this.$val.startEscape(ch); };
	Writer.ptr.prototype.endEscape = function() {
		var $ptr, _2, b;
		b = this;
		_2 = b.endChar;
		if (_2 === 255) {
			b.updateWidth();
			if (((b.flags & 2) >>> 0) === 0) {
				b.cell.width = b.cell.width - (2) >> 0;
			}
		} else if (_2 === 62) {
		} else if (_2 === 59) {
			b.cell.width = b.cell.width + (1) >> 0;
		}
		b.pos = b.buf.Len();
		b.endChar = 0;
	};
	Writer.prototype.endEscape = function() { return this.$val.endEscape(); };
	Writer.ptr.prototype.terminateCell = function(htab) {
		var $ptr, b, htab, line, x;
		b = this;
		b.cell.htab = htab;
		line = (x = b.lines, $indexPtr(x.$array, x.$offset + (b.lines.$length - 1 >> 0), ptrType));
		line.$set($append(line.$get(), b.cell));
		cell.copy(b.cell, new cell.ptr(0, 0, false));
		return line.$get().$length;
	};
	Writer.prototype.terminateCell = function(htab) { return this.$val.terminateCell(htab); };
	handlePanic = function(err, op) {
		var $ptr, _tuple, e, err, nerr, ok, op;
		e = $recover();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tuple = $assertType(e, osError, true);
			nerr = $clone(_tuple[0], osError);
			ok = _tuple[1];
			if (ok) {
				err.$set(nerr.err);
				return;
			}
			$panic(new $String("tabwriter: panic during " + op));
		}
	};
	Writer.ptr.prototype.Flush = function() {
		var $ptr, _r, b, err, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; err = $f.err; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		b = this;
		$deferred.push([$methodVal(b, "reset"), []]);
		$deferred.push([handlePanic, [(err.$ptr || (err.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err))), "Flush"]]);
		if (b.cell.size > 0) {
			if (!((b.endChar === 0))) {
				b.endEscape();
			}
			b.terminateCell(false);
		}
		_r = b.format(0, 0, b.lines.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Flush }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.err = err; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Writer.prototype.Flush = function() { return this.$val.Flush(); };
	Writer.ptr.prototype.Write = function(buf) {
		var $ptr, _3, _i, _r, _ref, b, buf, ch, err, i, j, n, ncells, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _i = $f._i; _r = $f._r; _ref = $f._ref; b = $f.b; buf = $f.buf; ch = $f.ch; err = $f.err; i = $f.i; j = $f.j; n = $f.n; ncells = $f.ncells; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		n = 0;
		err[0] = $ifaceNil;
		b = this;
		$deferred.push([handlePanic, [(err.$ptr || (err.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err))), "Write"]]);
		n = 0;
		_ref = buf;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			ch = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (b.endChar === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (b.endChar === 0) { */ case 3:
					_3 = ch;
					/* */ if ((_3 === 9) || (_3 === 11) || (_3 === 10) || (_3 === 12)) { $s = 7; continue; }
					/* */ if (_3 === 255) { $s = 8; continue; }
					/* */ if ((_3 === 60) || (_3 === 38)) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if ((_3 === 9) || (_3 === 11) || (_3 === 10) || (_3 === 12)) { */ case 7:
						b.append($subslice(buf, n, i));
						b.updateWidth();
						n = i + 1 >> 0;
						ncells = b.terminateCell(ch === 9);
						/* */ if ((ch === 10) || (ch === 12)) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if ((ch === 10) || (ch === 12)) { */ case 11:
							b.addLine();
							/* */ if ((ch === 12) || (ncells === 1)) { $s = 13; continue; }
							/* */ $s = 14; continue;
							/* if ((ch === 12) || (ncells === 1)) { */ case 13:
								_r = b.Flush(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
								err[0] = _r;
								if (!($interfaceIsEqual(err[0], $ifaceNil))) {
									return [n, err[0]];
								}
								/* */ if ((ch === 12) && !((((b.flags & 32) >>> 0) === 0))) { $s = 16; continue; }
								/* */ $s = 17; continue;
								/* if ((ch === 12) && !((((b.flags & 32) >>> 0) === 0))) { */ case 16:
									$r = b.write0(hbar); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 17:
							/* } */ case 14:
						/* } */ case 12:
						$s = 10; continue;
					/* } else if (_3 === 255) { */ case 8:
						b.append($subslice(buf, n, i));
						b.updateWidth();
						n = i;
						if (!((((b.flags & 2) >>> 0) === 0))) {
							n = n + (1) >> 0;
						}
						b.startEscape(255);
						$s = 10; continue;
					/* } else if ((_3 === 60) || (_3 === 38)) { */ case 9:
						if (!((((b.flags & 1) >>> 0) === 0))) {
							b.append($subslice(buf, n, i));
							b.updateWidth();
							n = i;
							b.startEscape(ch);
						}
					/* } */ case 10:
				case 6:
				$s = 5; continue;
			/* } else { */ case 4:
				if (ch === b.endChar) {
					j = i + 1 >> 0;
					if ((ch === 255) && !((((b.flags & 2) >>> 0) === 0))) {
						j = i;
					}
					b.append($subslice(buf, n, j));
					n = i + 1 >> 0;
					b.endEscape();
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		b.append($subslice(buf, n));
		n = buf.$length;
		return [n, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [n, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._3 = _3; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.b = b; $f.buf = buf; $f.ch = ch; $f.err = err; $f.i = i; $f.j = j; $f.n = n; $f.ncells = ncells; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Writer.prototype.Write = function(buf) { return this.$val.Write(buf); };
	NewWriter = function(output, minwidth, tabwidth, padding, padchar, flags) {
		var $ptr, flags, minwidth, output, padchar, padding, tabwidth;
		return new Writer.ptr($ifaceNil, 0, 0, 0, arrayType.zero(), 0, new bytes.Buffer.ptr(sliceType.nil, 0, arrayType$1.zero(), arrayType$2.zero(), 0), 0, new cell.ptr(0, 0, false), 0, sliceType$2.nil, sliceType$3.nil).Init(output, minwidth, tabwidth, padding, padchar, flags);
	};
	$pkg.NewWriter = NewWriter;
	ptrType$2.methods = [{prop: "addLine", name: "addLine", pkg: "text/tabwriter", typ: $funcType([], [], false)}, {prop: "reset", name: "reset", pkg: "text/tabwriter", typ: $funcType([], [], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([io.Writer, $Int, $Int, $Int, $Uint8, $Uint], [ptrType$2], false)}, {prop: "dump", name: "dump", pkg: "text/tabwriter", typ: $funcType([], [], false)}, {prop: "write0", name: "write0", pkg: "text/tabwriter", typ: $funcType([sliceType], [], false)}, {prop: "writeN", name: "writeN", pkg: "text/tabwriter", typ: $funcType([sliceType, $Int], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "text/tabwriter", typ: $funcType([$Int, $Int, $Bool], [], false)}, {prop: "writeLines", name: "writeLines", pkg: "text/tabwriter", typ: $funcType([$Int, $Int, $Int], [$Int], false)}, {prop: "format", name: "format", pkg: "text/tabwriter", typ: $funcType([$Int, $Int, $Int], [$Int], false)}, {prop: "append", name: "append", pkg: "text/tabwriter", typ: $funcType([sliceType], [], false)}, {prop: "updateWidth", name: "updateWidth", pkg: "text/tabwriter", typ: $funcType([], [], false)}, {prop: "startEscape", name: "startEscape", pkg: "text/tabwriter", typ: $funcType([$Uint8], [], false)}, {prop: "endEscape", name: "endEscape", pkg: "text/tabwriter", typ: $funcType([], [], false)}, {prop: "terminateCell", name: "terminateCell", pkg: "text/tabwriter", typ: $funcType([$Bool], [$Int], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	cell.init([{prop: "size", name: "size", pkg: "text/tabwriter", typ: $Int, tag: ""}, {prop: "width", name: "width", pkg: "text/tabwriter", typ: $Int, tag: ""}, {prop: "htab", name: "htab", pkg: "text/tabwriter", typ: $Bool, tag: ""}]);
	Writer.init([{prop: "output", name: "output", pkg: "text/tabwriter", typ: io.Writer, tag: ""}, {prop: "minwidth", name: "minwidth", pkg: "text/tabwriter", typ: $Int, tag: ""}, {prop: "tabwidth", name: "tabwidth", pkg: "text/tabwriter", typ: $Int, tag: ""}, {prop: "padding", name: "padding", pkg: "text/tabwriter", typ: $Int, tag: ""}, {prop: "padbytes", name: "padbytes", pkg: "text/tabwriter", typ: arrayType, tag: ""}, {prop: "flags", name: "flags", pkg: "text/tabwriter", typ: $Uint, tag: ""}, {prop: "buf", name: "buf", pkg: "text/tabwriter", typ: bytes.Buffer, tag: ""}, {prop: "pos", name: "pos", pkg: "text/tabwriter", typ: $Int, tag: ""}, {prop: "cell", name: "cell", pkg: "text/tabwriter", typ: cell, tag: ""}, {prop: "endChar", name: "endChar", pkg: "text/tabwriter", typ: $Uint8, tag: ""}, {prop: "lines", name: "lines", pkg: "text/tabwriter", typ: sliceType$2, tag: ""}, {prop: "widths", name: "widths", pkg: "text/tabwriter", typ: sliceType$3, tag: ""}]);
	osError.init([{prop: "err", name: "err", pkg: "text/tabwriter", typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		newline = new sliceType([10]);
		tabs = new sliceType($stringToBytes("\t\t\t\t\t\t\t\t"));
		vbar = new sliceType([124]);
		hbar = new sliceType($stringToBytes("---\n"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/go-gl/mathgl/mgl32"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, f32, math, sync, tabwriter, Mat2, Mat2x3, Mat2x4, Mat3x2, Mat3, Mat3x4, Mat4x2, Mat4x3, Mat4, Vec2, Vec3, Vec4, arrayType, arrayType$1, sliceType$2, arrayType$2, arrayType$3, sliceType$3, arrayType$4, arrayType$5, arrayType$6, funcType, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, Mat2FromCols, Mat3FromCols, Ident4, Mat4FromCols, Ortho, Ortho2D, Translate3D, HomogRotate3DZ, Scale3D, Abs, FloatEqual, FloatEqualThreshold;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	f32 = $packages["golang.org/x/image/math/f32"];
	math = $packages["math"];
	sync = $packages["sync"];
	tabwriter = $packages["text/tabwriter"];
	Mat2 = $pkg.Mat2 = $newType(16, $kindArray, "mgl32.Mat2", "Mat2", "github.com/go-gl/mathgl/mgl32", null);
	Mat2x3 = $pkg.Mat2x3 = $newType(24, $kindArray, "mgl32.Mat2x3", "Mat2x3", "github.com/go-gl/mathgl/mgl32", null);
	Mat2x4 = $pkg.Mat2x4 = $newType(32, $kindArray, "mgl32.Mat2x4", "Mat2x4", "github.com/go-gl/mathgl/mgl32", null);
	Mat3x2 = $pkg.Mat3x2 = $newType(24, $kindArray, "mgl32.Mat3x2", "Mat3x2", "github.com/go-gl/mathgl/mgl32", null);
	Mat3 = $pkg.Mat3 = $newType(36, $kindArray, "mgl32.Mat3", "Mat3", "github.com/go-gl/mathgl/mgl32", null);
	Mat3x4 = $pkg.Mat3x4 = $newType(48, $kindArray, "mgl32.Mat3x4", "Mat3x4", "github.com/go-gl/mathgl/mgl32", null);
	Mat4x2 = $pkg.Mat4x2 = $newType(32, $kindArray, "mgl32.Mat4x2", "Mat4x2", "github.com/go-gl/mathgl/mgl32", null);
	Mat4x3 = $pkg.Mat4x3 = $newType(48, $kindArray, "mgl32.Mat4x3", "Mat4x3", "github.com/go-gl/mathgl/mgl32", null);
	Mat4 = $pkg.Mat4 = $newType(64, $kindArray, "mgl32.Mat4", "Mat4", "github.com/go-gl/mathgl/mgl32", null);
	Vec2 = $pkg.Vec2 = $newType(8, $kindArray, "mgl32.Vec2", "Vec2", "github.com/go-gl/mathgl/mgl32", null);
	Vec3 = $pkg.Vec3 = $newType(12, $kindArray, "mgl32.Vec3", "Vec3", "github.com/go-gl/mathgl/mgl32", null);
	Vec4 = $pkg.Vec4 = $newType(16, $kindArray, "mgl32.Vec4", "Vec4", "github.com/go-gl/mathgl/mgl32", null);
	arrayType = $arrayType($Float32, 4);
	arrayType$1 = $arrayType($Float32, 2);
	sliceType$2 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 4);
	arrayType$3 = $arrayType($Uint8, 64);
	sliceType$3 = $sliceType($emptyInterface);
	arrayType$4 = $arrayType($Float32, 3);
	arrayType$5 = $arrayType($Float32, 9);
	arrayType$6 = $arrayType($Float32, 16);
	funcType = $funcType([$Float32, $Float32], [$Bool], false);
	ptrType$3 = $ptrType(Mat2);
	ptrType$4 = $ptrType(Mat2x3);
	ptrType$5 = $ptrType(Mat2x4);
	ptrType$6 = $ptrType(Mat3x2);
	ptrType$7 = $ptrType(Mat3);
	ptrType$8 = $ptrType(Mat3x4);
	ptrType$9 = $ptrType(Mat4x2);
	ptrType$10 = $ptrType(Mat4x3);
	ptrType$11 = $ptrType(Mat4);
	Mat2.prototype.Mat3 = function() {
		var $ptr, _tuple, col0, col1, m;
		m = $clone(this.$val, Mat2);
		_tuple = new Mat2(m).Cols();
		col0 = $clone(_tuple[0], Vec2);
		col1 = $clone(_tuple[1], Vec2);
		return Mat3FromCols(new Vec2(col0).Vec3(0), new Vec2(col1).Vec3(0), $toNativeArray($kindFloat32, [0, 0, 1]));
	};
	$ptrType(Mat2).prototype.Mat3 = function() { return new Mat2(this.$get()).Mat3(); };
	Mat2.prototype.Mat4 = function() {
		var $ptr, _tuple, col0, col1, m;
		m = $clone(this.$val, Mat2);
		_tuple = new Mat2(m).Cols();
		col0 = $clone(_tuple[0], Vec2);
		col1 = $clone(_tuple[1], Vec2);
		return Mat4FromCols(new Vec2(col0).Vec4(0, 0), new Vec2(col1).Vec4(0, 0), $toNativeArray($kindFloat32, [0, 0, 1, 0]), $toNativeArray($kindFloat32, [0, 0, 0, 1]));
	};
	$ptrType(Mat2).prototype.Mat4 = function() { return new Mat2(this.$get()).Mat4(); };
	Mat3.prototype.Mat2 = function() {
		var $ptr, _tuple, col0, col1, m;
		m = $clone(this.$val, Mat3);
		_tuple = new Mat3(m).Cols();
		col0 = $clone(_tuple[0], Vec3);
		col1 = $clone(_tuple[1], Vec3);
		return Mat2FromCols(new Vec3(col0).Vec2(), new Vec3(col1).Vec2());
	};
	$ptrType(Mat3).prototype.Mat2 = function() { return new Mat3(this.$get()).Mat2(); };
	Mat3.prototype.Mat4 = function() {
		var $ptr, _tuple, col0, col1, col2, m;
		m = $clone(this.$val, Mat3);
		_tuple = new Mat3(m).Cols();
		col0 = $clone(_tuple[0], Vec3);
		col1 = $clone(_tuple[1], Vec3);
		col2 = $clone(_tuple[2], Vec3);
		return Mat4FromCols(new Vec3(col0).Vec4(0), new Vec3(col1).Vec4(0), new Vec3(col2).Vec4(0), $toNativeArray($kindFloat32, [0, 0, 0, 1]));
	};
	$ptrType(Mat3).prototype.Mat4 = function() { return new Mat3(this.$get()).Mat4(); };
	Mat4.prototype.Mat2 = function() {
		var $ptr, _tuple, col0, col1, m;
		m = $clone(this.$val, Mat4);
		_tuple = new Mat4(m).Cols();
		col0 = $clone(_tuple[0], Vec4);
		col1 = $clone(_tuple[1], Vec4);
		return Mat2FromCols(new Vec4(col0).Vec2(), new Vec4(col1).Vec2());
	};
	$ptrType(Mat4).prototype.Mat2 = function() { return new Mat4(this.$get()).Mat2(); };
	Mat4.prototype.Mat3 = function() {
		var $ptr, _tuple, col0, col1, col2, m;
		m = $clone(this.$val, Mat4);
		_tuple = new Mat4(m).Cols();
		col0 = $clone(_tuple[0], Vec4);
		col1 = $clone(_tuple[1], Vec4);
		col2 = $clone(_tuple[2], Vec4);
		return Mat3FromCols(new Vec4(col0).Vec3(), new Vec4(col1).Vec3(), new Vec4(col2).Vec3());
	};
	$ptrType(Mat4).prototype.Mat3 = function() { return new Mat4(this.$get()).Mat3(); };
	Mat2.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, col, m, v, x, x$1;
		v = $clone(v, Vec2);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		(x = ($imul(col, 2)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 2)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
	};
	$ptrType(Mat2).prototype.SetCol = function(col, v) { return (new Mat2(this.$get())).SetCol(col, v); };
	Mat2.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, m, row, v, x, x$1;
		v = $clone(v, Vec2);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 2 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
	};
	$ptrType(Mat2).prototype.SetRow = function(row, v) { return (new Mat2(this.$get())).SetRow(row, v); };
	Mat2.prototype.Diag = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat32, [m[0], m[3]]);
	};
	$ptrType(Mat2).prototype.Diag = function() { return new Mat2(this.$get()).Diag(); };
	Mat2FromCols = function(col0, col1) {
		var $ptr, col0, col1;
		col1 = $clone(col1, Vec2);
		col0 = $clone(col0, Vec2);
		return $toNativeArray($kindFloat32, [col0[0], col0[1], col1[0], col1[1]]);
	};
	$pkg.Mat2FromCols = Mat2FromCols;
	Mat2.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat32, [$fround(m1[0] + m2[0]), $fround(m1[1] + m2[1]), $fround(m1[2] + m2[2]), $fround(m1[3] + m2[3])]);
	};
	$ptrType(Mat2).prototype.Add = function(m2) { return new Mat2(this.$get()).Add(m2); };
	Mat2.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat32, [$fround(m1[0] - m2[0]), $fround(m1[1] - m2[1]), $fround(m1[2] - m2[2]), $fround(m1[3] - m2[3])]);
	};
	$ptrType(Mat2).prototype.Sub = function(m2) { return new Mat2(this.$get()).Sub(m2); };
	Mat2.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat32, [$fround(m1[0] * c), $fround(m1[1] * c), $fround(m1[2] * c), $fround(m1[3] * c)]);
	};
	$ptrType(Mat2).prototype.Mul = function(c) { return new Mat2(this.$get()).Mul(c); };
	Mat2.prototype.Mul2x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec2);
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat32, [$fround($fround(m1[0] * m2[0]) + $fround(m1[2] * m2[1])), $fround($fround(m1[1] * m2[0]) + $fround(m1[3] * m2[1]))]);
	};
	$ptrType(Mat2).prototype.Mul2x1 = function(m2) { return new Mat2(this.$get()).Mul2x1(m2); };
	Mat2.prototype.Mul2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat32, [$fround($fround(m1[0] * m2[0]) + $fround(m1[2] * m2[1])), $fround($fround(m1[1] * m2[0]) + $fround(m1[3] * m2[1])), $fround($fround(m1[0] * m2[2]) + $fround(m1[2] * m2[3])), $fround($fround(m1[1] * m2[2]) + $fround(m1[3] * m2[3]))]);
	};
	$ptrType(Mat2).prototype.Mul2 = function(m2) { return new Mat2(this.$get()).Mul2(m2); };
	Mat2.prototype.Mul2x3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat32, [$fround($fround(m1[0] * m2[0]) + $fround(m1[2] * m2[1])), $fround($fround(m1[1] * m2[0]) + $fround(m1[3] * m2[1])), $fround($fround(m1[0] * m2[2]) + $fround(m1[2] * m2[3])), $fround($fround(m1[1] * m2[2]) + $fround(m1[3] * m2[3])), $fround($fround(m1[0] * m2[4]) + $fround(m1[2] * m2[5])), $fround($fround(m1[1] * m2[4]) + $fround(m1[3] * m2[5]))]);
	};
	$ptrType(Mat2).prototype.Mul2x3 = function(m2) { return new Mat2(this.$get()).Mul2x3(m2); };
	Mat2.prototype.Mul2x4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat32, [$fround($fround(m1[0] * m2[0]) + $fround(m1[2] * m2[1])), $fround($fround(m1[1] * m2[0]) + $fround(m1[3] * m2[1])), $fround($fround(m1[0] * m2[2]) + $fround(m1[2] * m2[3])), $fround($fround(m1[1] * m2[2]) + $fround(m1[3] * m2[3])), $fround($fround(m1[0] * m2[4]) + $fround(m1[2] * m2[5])), $fround($fround(m1[1] * m2[4]) + $fround(m1[3] * m2[5])), $fround($fround(m1[0] * m2[6]) + $fround(m1[2] * m2[7])), $fround($fround(m1[1] * m2[6]) + $fround(m1[3] * m2[7]))]);
	};
	$ptrType(Mat2).prototype.Mul2x4 = function(m2) { return new Mat2(this.$get()).Mul2x4(m2); };
	Mat2.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat32, [m1[0], m1[2], m1[1], m1[3]]);
	};
	$ptrType(Mat2).prototype.Transpose = function() { return new Mat2(this.$get()).Transpose(); };
	Mat2.prototype.Det = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat2);
		return $fround($fround(m[0] * m[2]) - $fround(m[1] * m[3]));
	};
	$ptrType(Mat2).prototype.Det = function() { return new Mat2(this.$get()).Det(); };
	Mat2.prototype.Inv = function() {
		var $ptr, det, m, retMat;
		m = $clone(this.$val, Mat2);
		det = new Mat2(m).Det();
		if (FloatEqual(det, 0)) {
			return arrayType.zero();
		}
		retMat = $toNativeArray($kindFloat32, [m[3], -m[1], -m[2], m[0]]);
		return new Mat2(retMat).Mul($fround(1 / det));
	};
	$ptrType(Mat2).prototype.Inv = function() { return new Mat2(this.$get()).Inv(); };
	Mat2.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat2);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat2).prototype.ApproxEqual = function(m2) { return new Mat2(this.$get()).ApproxEqual(m2); };
	Mat2.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat2);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat2).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat2(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat2.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat2);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 4)) { break; } */ if(!(_i < 4)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat2.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat2).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat2(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat2.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat2);
		return (x = ($imul(col, 2)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat2).prototype.At = function(row, col) { return new Mat2(this.$get()).At(row, col); };
	Mat2.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 2)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat2).prototype.Set = function(row, col, value) { return (new Mat2(this.$get())).Set(row, col, value); };
	Mat2.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat2);
		return ($imul(col, 2)) + row >> 0;
	};
	$ptrType(Mat2).prototype.Index = function(row, col) { return new Mat2(this.$get()).Index(row, col); };
	Mat2.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1;
		m = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat32, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 2 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1]))]);
	};
	$ptrType(Mat2).prototype.Row = function(row) { return new Mat2(this.$get()).Row(row); };
	Mat2.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, m, row0, row1;
		row0 = arrayType$1.zero();
		row1 = arrayType$1.zero();
		m = $clone(this.$val, Mat2);
		_tmp = $clone(new Mat2(m).Row(0), Vec2);
		_tmp$1 = $clone(new Mat2(m).Row(1), Vec2);
		Vec2.copy(row0, _tmp);
		Vec2.copy(row1, _tmp$1);
		return [row0, row1];
	};
	$ptrType(Mat2).prototype.Rows = function() { return new Mat2(this.$get()).Rows(); };
	Mat2.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1;
		m = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat32, [(x = ($imul(col, 2)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 2)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1]))]);
	};
	$ptrType(Mat2).prototype.Col = function(col) { return new Mat2(this.$get()).Col(col); };
	Mat2.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, col0, col1, m;
		col0 = arrayType$1.zero();
		col1 = arrayType$1.zero();
		m = $clone(this.$val, Mat2);
		_tmp = $clone(new Mat2(m).Col(0), Vec2);
		_tmp$1 = $clone(new Mat2(m).Col(1), Vec2);
		Vec2.copy(col0, _tmp);
		Vec2.copy(col1, _tmp$1);
		return [col0, col1];
	};
	$ptrType(Mat2).prototype.Cols = function() { return new Mat2(this.$get()).Cols(); };
	Mat2.prototype.Trace = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat2);
		return $fround(m[0] + m[3]);
	};
	$ptrType(Mat2).prototype.Trace = function() { return new Mat2(this.$get()).Trace(); };
	Mat2.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat32, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3])]);
	};
	$ptrType(Mat2).prototype.Abs = function() { return new Mat2(this.$get()).Abs(); };
	Mat2.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat2);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 2)) { break; } */ if(!(i < 2)) { $s = 2; continue; }
			_ref = new Mat2(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 2)) { break; } */ if(!(_i < 2)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float32(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat2.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat2).prototype.String = function() { return new Mat2(this.$get()).String(); };
	Mat2x3.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, col, m, v, x, x$1;
		v = $clone(v, Vec2);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		(x = ($imul(col, 2)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 2)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
	};
	$ptrType(Mat2x3).prototype.SetCol = function(col, v) { return (new Mat2x3(this.$get())).SetCol(col, v); };
	Mat2x3.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, m, row, v, x, x$1, x$2;
		v = $clone(v, Vec3);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 2 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = row + 4 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
	};
	$ptrType(Mat2x3).prototype.SetRow = function(row, v) { return (new Mat2x3(this.$get())).SetRow(row, v); };
	Mat2x3.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat32, [$fround(m1[0] + m2[0]), $fround(m1[1] + m2[1]), $fround(m1[2] + m2[2]), $fround(m1[3] + m2[3]), $fround(m1[4] + m2[4]), $fround(m1[5] + m2[5])]);
	};
	$ptrType(Mat2x3).prototype.Add = function(m2) { return new Mat2x3(this.$get()).Add(m2); };
	Mat2x3.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat32, [$fround(m1[0] - m2[0]), $fround(m1[1] - m2[1]), $fround(m1[2] - m2[2]), $fround(m1[3] - m2[3]), $fround(m1[4] - m2[4]), $fround(m1[5] - m2[5])]);
	};
	$ptrType(Mat2x3).prototype.Sub = function(m2) { return new Mat2x3(this.$get()).Sub(m2); };
	Mat2x3.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat32, [$fround(m1[0] * c), $fround(m1[1] * c), $fround(m1[2] * c), $fround(m1[3] * c), $fround(m1[4] * c), $fround(m1[5] * c)]);
	};
	$ptrType(Mat2x3).prototype.Mul = function(c) { return new Mat2x3(this.$get()).Mul(c); };
	Mat2x3.prototype.Mul3x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec3);
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat32, [$fround($fround($fround(m1[0] * m2[0]) + $fround(m1[2] * m2[1])) + $fround(m1[4] * m2[2])), $fround($fround($fround(m1[1] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[5] * m2[2]))]);
	};
	$ptrType(Mat2x3).prototype.Mul3x1 = function(m2) { return new Mat2x3(this.$get()).Mul3x1(m2); };
	Mat2x3.prototype.Mul3x2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat32, [$fround($fround($fround(m1[0] * m2[0]) + $fround(m1[2] * m2[1])) + $fround(m1[4] * m2[2])), $fround($fround($fround(m1[1] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[5] * m2[2])), $fround($fround($fround(m1[0] * m2[3]) + $fround(m1[2] * m2[4])) + $fround(m1[4] * m2[5])), $fround($fround($fround(m1[1] * m2[3]) + $fround(m1[3] * m2[4])) + $fround(m1[5] * m2[5]))]);
	};
	$ptrType(Mat2x3).prototype.Mul3x2 = function(m2) { return new Mat2x3(this.$get()).Mul3x2(m2); };
	Mat2x3.prototype.Mul3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat32, [$fround($fround($fround(m1[0] * m2[0]) + $fround(m1[2] * m2[1])) + $fround(m1[4] * m2[2])), $fround($fround($fround(m1[1] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[5] * m2[2])), $fround($fround($fround(m1[0] * m2[3]) + $fround(m1[2] * m2[4])) + $fround(m1[4] * m2[5])), $fround($fround($fround(m1[1] * m2[3]) + $fround(m1[3] * m2[4])) + $fround(m1[5] * m2[5])), $fround($fround($fround(m1[0] * m2[6]) + $fround(m1[2] * m2[7])) + $fround(m1[4] * m2[8])), $fround($fround($fround(m1[1] * m2[6]) + $fround(m1[3] * m2[7])) + $fround(m1[5] * m2[8]))]);
	};
	$ptrType(Mat2x3).prototype.Mul3 = function(m2) { return new Mat2x3(this.$get()).Mul3(m2); };
	Mat2x3.prototype.Mul3x4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat32, [$fround($fround($fround(m1[0] * m2[0]) + $fround(m1[2] * m2[1])) + $fround(m1[4] * m2[2])), $fround($fround($fround(m1[1] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[5] * m2[2])), $fround($fround($fround(m1[0] * m2[3]) + $fround(m1[2] * m2[4])) + $fround(m1[4] * m2[5])), $fround($fround($fround(m1[1] * m2[3]) + $fround(m1[3] * m2[4])) + $fround(m1[5] * m2[5])), $fround($fround($fround(m1[0] * m2[6]) + $fround(m1[2] * m2[7])) + $fround(m1[4] * m2[8])), $fround($fround($fround(m1[1] * m2[6]) + $fround(m1[3] * m2[7])) + $fround(m1[5] * m2[8])), $fround($fround($fround(m1[0] * m2[9]) + $fround(m1[2] * m2[10])) + $fround(m1[4] * m2[11])), $fround($fround($fround(m1[1] * m2[9]) + $fround(m1[3] * m2[10])) + $fround(m1[5] * m2[11]))]);
	};
	$ptrType(Mat2x3).prototype.Mul3x4 = function(m2) { return new Mat2x3(this.$get()).Mul3x4(m2); };
	Mat2x3.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat32, [m1[0], m1[2], m1[4], m1[1], m1[3], m1[5]]);
	};
	$ptrType(Mat2x3).prototype.Transpose = function() { return new Mat2x3(this.$get()).Transpose(); };
	Mat2x3.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat2x3);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 6)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat2x3).prototype.ApproxEqual = function(m2) { return new Mat2x3(this.$get()).ApproxEqual(m2); };
	Mat2x3.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat2x3);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 6)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat2x3).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat2x3(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat2x3.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat2x3);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 6)) { break; } */ if(!(_i < 6)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat2x3.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat2x3).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat2x3(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat2x3.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat2x3);
		return (x = ($imul(col, 2)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat2x3).prototype.At = function(row, col) { return new Mat2x3(this.$get()).At(row, col); };
	Mat2x3.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 2)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat2x3).prototype.Set = function(row, col, value) { return (new Mat2x3(this.$get())).Set(row, col, value); };
	Mat2x3.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat2x3);
		return ($imul(col, 2)) + row >> 0;
	};
	$ptrType(Mat2x3).prototype.Index = function(row, col) { return new Mat2x3(this.$get()).Index(row, col); };
	Mat2x3.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1, x$2;
		m = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat32, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 2 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = row + 4 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2]))]);
	};
	$ptrType(Mat2x3).prototype.Row = function(row) { return new Mat2x3(this.$get()).Row(row); };
	Mat2x3.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, m, row0, row1;
		row0 = arrayType$4.zero();
		row1 = arrayType$4.zero();
		m = $clone(this.$val, Mat2x3);
		_tmp = $clone(new Mat2x3(m).Row(0), Vec3);
		_tmp$1 = $clone(new Mat2x3(m).Row(1), Vec3);
		Vec3.copy(row0, _tmp);
		Vec3.copy(row1, _tmp$1);
		return [row0, row1];
	};
	$ptrType(Mat2x3).prototype.Rows = function() { return new Mat2x3(this.$get()).Rows(); };
	Mat2x3.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1;
		m = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat32, [(x = ($imul(col, 2)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 2)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1]))]);
	};
	$ptrType(Mat2x3).prototype.Col = function(col) { return new Mat2x3(this.$get()).Col(col); };
	Mat2x3.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, col0, col1, col2, m;
		col0 = arrayType$1.zero();
		col1 = arrayType$1.zero();
		col2 = arrayType$1.zero();
		m = $clone(this.$val, Mat2x3);
		_tmp = $clone(new Mat2x3(m).Col(0), Vec2);
		_tmp$1 = $clone(new Mat2x3(m).Col(1), Vec2);
		_tmp$2 = $clone(new Mat2x3(m).Col(2), Vec2);
		Vec2.copy(col0, _tmp);
		Vec2.copy(col1, _tmp$1);
		Vec2.copy(col2, _tmp$2);
		return [col0, col1, col2];
	};
	$ptrType(Mat2x3).prototype.Cols = function() { return new Mat2x3(this.$get()).Cols(); };
	Mat2x3.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat32, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5])]);
	};
	$ptrType(Mat2x3).prototype.Abs = function() { return new Mat2x3(this.$get()).Abs(); };
	Mat2x3.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat2x3);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 2)) { break; } */ if(!(i < 2)) { $s = 2; continue; }
			_ref = new Mat2x3(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 3)) { break; } */ if(!(_i < 3)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float32(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat2x3.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat2x3).prototype.String = function() { return new Mat2x3(this.$get()).String(); };
	Mat2x4.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, col, m, v, x, x$1;
		v = $clone(v, Vec2);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		(x = ($imul(col, 2)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 2)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
	};
	$ptrType(Mat2x4).prototype.SetCol = function(col, v) { return (new Mat2x4(this.$get())).SetCol(col, v); };
	Mat2x4.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, m, row, v, x, x$1, x$2, x$3;
		v = $clone(v, Vec4);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 2 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = row + 4 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
		(x$3 = row + 6 >> 0, m.nilCheck, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3] = _tmp$3));
	};
	$ptrType(Mat2x4).prototype.SetRow = function(row, v) { return (new Mat2x4(this.$get())).SetRow(row, v); };
	Mat2x4.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat32, [$fround(m1[0] + m2[0]), $fround(m1[1] + m2[1]), $fround(m1[2] + m2[2]), $fround(m1[3] + m2[3]), $fround(m1[4] + m2[4]), $fround(m1[5] + m2[5]), $fround(m1[6] + m2[6]), $fround(m1[7] + m2[7])]);
	};
	$ptrType(Mat2x4).prototype.Add = function(m2) { return new Mat2x4(this.$get()).Add(m2); };
	Mat2x4.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat32, [$fround(m1[0] - m2[0]), $fround(m1[1] - m2[1]), $fround(m1[2] - m2[2]), $fround(m1[3] - m2[3]), $fround(m1[4] - m2[4]), $fround(m1[5] - m2[5]), $fround(m1[6] - m2[6]), $fround(m1[7] - m2[7])]);
	};
	$ptrType(Mat2x4).prototype.Sub = function(m2) { return new Mat2x4(this.$get()).Sub(m2); };
	Mat2x4.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat32, [$fround(m1[0] * c), $fround(m1[1] * c), $fround(m1[2] * c), $fround(m1[3] * c), $fround(m1[4] * c), $fround(m1[5] * c), $fround(m1[6] * c), $fround(m1[7] * c)]);
	};
	$ptrType(Mat2x4).prototype.Mul = function(c) { return new Mat2x4(this.$get()).Mul(c); };
	Mat2x4.prototype.Mul4x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec4);
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat32, [$fround($fround($fround($fround(m1[0] * m2[0]) + $fround(m1[2] * m2[1])) + $fround(m1[4] * m2[2])) + $fround(m1[6] * m2[3])), $fround($fround($fround($fround(m1[1] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[5] * m2[2])) + $fround(m1[7] * m2[3]))]);
	};
	$ptrType(Mat2x4).prototype.Mul4x1 = function(m2) { return new Mat2x4(this.$get()).Mul4x1(m2); };
	Mat2x4.prototype.Mul4x2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat32, [$fround($fround($fround($fround(m1[0] * m2[0]) + $fround(m1[2] * m2[1])) + $fround(m1[4] * m2[2])) + $fround(m1[6] * m2[3])), $fround($fround($fround($fround(m1[1] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[5] * m2[2])) + $fround(m1[7] * m2[3])), $fround($fround($fround($fround(m1[0] * m2[4]) + $fround(m1[2] * m2[5])) + $fround(m1[4] * m2[6])) + $fround(m1[6] * m2[7])), $fround($fround($fround($fround(m1[1] * m2[4]) + $fround(m1[3] * m2[5])) + $fround(m1[5] * m2[6])) + $fround(m1[7] * m2[7]))]);
	};
	$ptrType(Mat2x4).prototype.Mul4x2 = function(m2) { return new Mat2x4(this.$get()).Mul4x2(m2); };
	Mat2x4.prototype.Mul4x3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat32, [$fround($fround($fround($fround(m1[0] * m2[0]) + $fround(m1[2] * m2[1])) + $fround(m1[4] * m2[2])) + $fround(m1[6] * m2[3])), $fround($fround($fround($fround(m1[1] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[5] * m2[2])) + $fround(m1[7] * m2[3])), $fround($fround($fround($fround(m1[0] * m2[4]) + $fround(m1[2] * m2[5])) + $fround(m1[4] * m2[6])) + $fround(m1[6] * m2[7])), $fround($fround($fround($fround(m1[1] * m2[4]) + $fround(m1[3] * m2[5])) + $fround(m1[5] * m2[6])) + $fround(m1[7] * m2[7])), $fround($fround($fround($fround(m1[0] * m2[8]) + $fround(m1[2] * m2[9])) + $fround(m1[4] * m2[10])) + $fround(m1[6] * m2[11])), $fround($fround($fround($fround(m1[1] * m2[8]) + $fround(m1[3] * m2[9])) + $fround(m1[5] * m2[10])) + $fround(m1[7] * m2[11]))]);
	};
	$ptrType(Mat2x4).prototype.Mul4x3 = function(m2) { return new Mat2x4(this.$get()).Mul4x3(m2); };
	Mat2x4.prototype.Mul4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat32, [$fround($fround($fround($fround(m1[0] * m2[0]) + $fround(m1[2] * m2[1])) + $fround(m1[4] * m2[2])) + $fround(m1[6] * m2[3])), $fround($fround($fround($fround(m1[1] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[5] * m2[2])) + $fround(m1[7] * m2[3])), $fround($fround($fround($fround(m1[0] * m2[4]) + $fround(m1[2] * m2[5])) + $fround(m1[4] * m2[6])) + $fround(m1[6] * m2[7])), $fround($fround($fround($fround(m1[1] * m2[4]) + $fround(m1[3] * m2[5])) + $fround(m1[5] * m2[6])) + $fround(m1[7] * m2[7])), $fround($fround($fround($fround(m1[0] * m2[8]) + $fround(m1[2] * m2[9])) + $fround(m1[4] * m2[10])) + $fround(m1[6] * m2[11])), $fround($fround($fround($fround(m1[1] * m2[8]) + $fround(m1[3] * m2[9])) + $fround(m1[5] * m2[10])) + $fround(m1[7] * m2[11])), $fround($fround($fround($fround(m1[0] * m2[12]) + $fround(m1[2] * m2[13])) + $fround(m1[4] * m2[14])) + $fround(m1[6] * m2[15])), $fround($fround($fround($fround(m1[1] * m2[12]) + $fround(m1[3] * m2[13])) + $fround(m1[5] * m2[14])) + $fround(m1[7] * m2[15]))]);
	};
	$ptrType(Mat2x4).prototype.Mul4 = function(m2) { return new Mat2x4(this.$get()).Mul4(m2); };
	Mat2x4.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat32, [m1[0], m1[2], m1[4], m1[6], m1[1], m1[3], m1[5], m1[7]]);
	};
	$ptrType(Mat2x4).prototype.Transpose = function() { return new Mat2x4(this.$get()).Transpose(); };
	Mat2x4.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat2x4);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 8)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat2x4).prototype.ApproxEqual = function(m2) { return new Mat2x4(this.$get()).ApproxEqual(m2); };
	Mat2x4.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat2x4);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 8)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat2x4).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat2x4(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat2x4.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat2x4);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 8)) { break; } */ if(!(_i < 8)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat2x4.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat2x4).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat2x4(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat2x4.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat2x4);
		return (x = ($imul(col, 2)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat2x4).prototype.At = function(row, col) { return new Mat2x4(this.$get()).At(row, col); };
	Mat2x4.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 2)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat2x4).prototype.Set = function(row, col, value) { return (new Mat2x4(this.$get())).Set(row, col, value); };
	Mat2x4.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat2x4);
		return ($imul(col, 2)) + row >> 0;
	};
	$ptrType(Mat2x4).prototype.Index = function(row, col) { return new Mat2x4(this.$get()).Index(row, col); };
	Mat2x4.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1, x$2, x$3;
		m = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat32, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 2 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = row + 4 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2])), (x$3 = row + 6 >> 0, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3]))]);
	};
	$ptrType(Mat2x4).prototype.Row = function(row) { return new Mat2x4(this.$get()).Row(row); };
	Mat2x4.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, m, row0, row1;
		row0 = arrayType.zero();
		row1 = arrayType.zero();
		m = $clone(this.$val, Mat2x4);
		_tmp = $clone(new Mat2x4(m).Row(0), Vec4);
		_tmp$1 = $clone(new Mat2x4(m).Row(1), Vec4);
		Vec4.copy(row0, _tmp);
		Vec4.copy(row1, _tmp$1);
		return [row0, row1];
	};
	$ptrType(Mat2x4).prototype.Rows = function() { return new Mat2x4(this.$get()).Rows(); };
	Mat2x4.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1;
		m = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat32, [(x = ($imul(col, 2)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 2)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1]))]);
	};
	$ptrType(Mat2x4).prototype.Col = function(col) { return new Mat2x4(this.$get()).Col(col); };
	Mat2x4.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, col0, col1, col2, col3, m;
		col0 = arrayType$1.zero();
		col1 = arrayType$1.zero();
		col2 = arrayType$1.zero();
		col3 = arrayType$1.zero();
		m = $clone(this.$val, Mat2x4);
		_tmp = $clone(new Mat2x4(m).Col(0), Vec2);
		_tmp$1 = $clone(new Mat2x4(m).Col(1), Vec2);
		_tmp$2 = $clone(new Mat2x4(m).Col(2), Vec2);
		_tmp$3 = $clone(new Mat2x4(m).Col(3), Vec2);
		Vec2.copy(col0, _tmp);
		Vec2.copy(col1, _tmp$1);
		Vec2.copy(col2, _tmp$2);
		Vec2.copy(col3, _tmp$3);
		return [col0, col1, col2, col3];
	};
	$ptrType(Mat2x4).prototype.Cols = function() { return new Mat2x4(this.$get()).Cols(); };
	Mat2x4.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat32, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5]), Abs(m[6]), Abs(m[7])]);
	};
	$ptrType(Mat2x4).prototype.Abs = function() { return new Mat2x4(this.$get()).Abs(); };
	Mat2x4.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat2x4);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 2)) { break; } */ if(!(i < 2)) { $s = 2; continue; }
			_ref = new Mat2x4(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 4)) { break; } */ if(!(_i < 4)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float32(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat2x4.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat2x4).prototype.String = function() { return new Mat2x4(this.$get()).String(); };
	Mat3x2.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, col, m, v, x, x$1, x$2;
		v = $clone(v, Vec3);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		(x = ($imul(col, 3)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 3)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = ($imul(col, 3)) + 2 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
	};
	$ptrType(Mat3x2).prototype.SetCol = function(col, v) { return (new Mat3x2(this.$get())).SetCol(col, v); };
	Mat3x2.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, m, row, v, x, x$1;
		v = $clone(v, Vec2);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 3 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
	};
	$ptrType(Mat3x2).prototype.SetRow = function(row, v) { return (new Mat3x2(this.$get())).SetRow(row, v); };
	Mat3x2.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat32, [$fround(m1[0] + m2[0]), $fround(m1[1] + m2[1]), $fround(m1[2] + m2[2]), $fround(m1[3] + m2[3]), $fround(m1[4] + m2[4]), $fround(m1[5] + m2[5])]);
	};
	$ptrType(Mat3x2).prototype.Add = function(m2) { return new Mat3x2(this.$get()).Add(m2); };
	Mat3x2.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat32, [$fround(m1[0] - m2[0]), $fround(m1[1] - m2[1]), $fround(m1[2] - m2[2]), $fround(m1[3] - m2[3]), $fround(m1[4] - m2[4]), $fround(m1[5] - m2[5])]);
	};
	$ptrType(Mat3x2).prototype.Sub = function(m2) { return new Mat3x2(this.$get()).Sub(m2); };
	Mat3x2.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat32, [$fround(m1[0] * c), $fround(m1[1] * c), $fround(m1[2] * c), $fround(m1[3] * c), $fround(m1[4] * c), $fround(m1[5] * c)]);
	};
	$ptrType(Mat3x2).prototype.Mul = function(c) { return new Mat3x2(this.$get()).Mul(c); };
	Mat3x2.prototype.Mul2x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec2);
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat32, [$fround($fround(m1[0] * m2[0]) + $fround(m1[3] * m2[1])), $fround($fround(m1[1] * m2[0]) + $fround(m1[4] * m2[1])), $fround($fround(m1[2] * m2[0]) + $fround(m1[5] * m2[1]))]);
	};
	$ptrType(Mat3x2).prototype.Mul2x1 = function(m2) { return new Mat3x2(this.$get()).Mul2x1(m2); };
	Mat3x2.prototype.Mul2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat32, [$fround($fround(m1[0] * m2[0]) + $fround(m1[3] * m2[1])), $fround($fround(m1[1] * m2[0]) + $fround(m1[4] * m2[1])), $fround($fround(m1[2] * m2[0]) + $fround(m1[5] * m2[1])), $fround($fround(m1[0] * m2[2]) + $fround(m1[3] * m2[3])), $fround($fround(m1[1] * m2[2]) + $fround(m1[4] * m2[3])), $fround($fround(m1[2] * m2[2]) + $fround(m1[5] * m2[3]))]);
	};
	$ptrType(Mat3x2).prototype.Mul2 = function(m2) { return new Mat3x2(this.$get()).Mul2(m2); };
	Mat3x2.prototype.Mul2x3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat32, [$fround($fround(m1[0] * m2[0]) + $fround(m1[3] * m2[1])), $fround($fround(m1[1] * m2[0]) + $fround(m1[4] * m2[1])), $fround($fround(m1[2] * m2[0]) + $fround(m1[5] * m2[1])), $fround($fround(m1[0] * m2[2]) + $fround(m1[3] * m2[3])), $fround($fround(m1[1] * m2[2]) + $fround(m1[4] * m2[3])), $fround($fround(m1[2] * m2[2]) + $fround(m1[5] * m2[3])), $fround($fround(m1[0] * m2[4]) + $fround(m1[3] * m2[5])), $fround($fround(m1[1] * m2[4]) + $fround(m1[4] * m2[5])), $fround($fround(m1[2] * m2[4]) + $fround(m1[5] * m2[5]))]);
	};
	$ptrType(Mat3x2).prototype.Mul2x3 = function(m2) { return new Mat3x2(this.$get()).Mul2x3(m2); };
	Mat3x2.prototype.Mul2x4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat32, [$fround($fround(m1[0] * m2[0]) + $fround(m1[3] * m2[1])), $fround($fround(m1[1] * m2[0]) + $fround(m1[4] * m2[1])), $fround($fround(m1[2] * m2[0]) + $fround(m1[5] * m2[1])), $fround($fround(m1[0] * m2[2]) + $fround(m1[3] * m2[3])), $fround($fround(m1[1] * m2[2]) + $fround(m1[4] * m2[3])), $fround($fround(m1[2] * m2[2]) + $fround(m1[5] * m2[3])), $fround($fround(m1[0] * m2[4]) + $fround(m1[3] * m2[5])), $fround($fround(m1[1] * m2[4]) + $fround(m1[4] * m2[5])), $fround($fround(m1[2] * m2[4]) + $fround(m1[5] * m2[5])), $fround($fround(m1[0] * m2[6]) + $fround(m1[3] * m2[7])), $fround($fround(m1[1] * m2[6]) + $fround(m1[4] * m2[7])), $fround($fround(m1[2] * m2[6]) + $fround(m1[5] * m2[7]))]);
	};
	$ptrType(Mat3x2).prototype.Mul2x4 = function(m2) { return new Mat3x2(this.$get()).Mul2x4(m2); };
	Mat3x2.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat32, [m1[0], m1[3], m1[1], m1[4], m1[2], m1[5]]);
	};
	$ptrType(Mat3x2).prototype.Transpose = function() { return new Mat3x2(this.$get()).Transpose(); };
	Mat3x2.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat3x2);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 6)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat3x2).prototype.ApproxEqual = function(m2) { return new Mat3x2(this.$get()).ApproxEqual(m2); };
	Mat3x2.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat3x2);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 6)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat3x2).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat3x2(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat3x2.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat3x2);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 6)) { break; } */ if(!(_i < 6)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat3x2.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat3x2).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat3x2(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat3x2.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat3x2);
		return (x = ($imul(col, 3)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat3x2).prototype.At = function(row, col) { return new Mat3x2(this.$get()).At(row, col); };
	Mat3x2.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 3)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat3x2).prototype.Set = function(row, col, value) { return (new Mat3x2(this.$get())).Set(row, col, value); };
	Mat3x2.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat3x2);
		return ($imul(col, 3)) + row >> 0;
	};
	$ptrType(Mat3x2).prototype.Index = function(row, col) { return new Mat3x2(this.$get()).Index(row, col); };
	Mat3x2.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1;
		m = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat32, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 3 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1]))]);
	};
	$ptrType(Mat3x2).prototype.Row = function(row) { return new Mat3x2(this.$get()).Row(row); };
	Mat3x2.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, m, row0, row1, row2;
		row0 = arrayType$1.zero();
		row1 = arrayType$1.zero();
		row2 = arrayType$1.zero();
		m = $clone(this.$val, Mat3x2);
		_tmp = $clone(new Mat3x2(m).Row(0), Vec2);
		_tmp$1 = $clone(new Mat3x2(m).Row(1), Vec2);
		_tmp$2 = $clone(new Mat3x2(m).Row(2), Vec2);
		Vec2.copy(row0, _tmp);
		Vec2.copy(row1, _tmp$1);
		Vec2.copy(row2, _tmp$2);
		return [row0, row1, row2];
	};
	$ptrType(Mat3x2).prototype.Rows = function() { return new Mat3x2(this.$get()).Rows(); };
	Mat3x2.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1, x$2;
		m = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat32, [(x = ($imul(col, 3)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 3)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = ($imul(col, 3)) + 2 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2]))]);
	};
	$ptrType(Mat3x2).prototype.Col = function(col) { return new Mat3x2(this.$get()).Col(col); };
	Mat3x2.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, col0, col1, m;
		col0 = arrayType$4.zero();
		col1 = arrayType$4.zero();
		m = $clone(this.$val, Mat3x2);
		_tmp = $clone(new Mat3x2(m).Col(0), Vec3);
		_tmp$1 = $clone(new Mat3x2(m).Col(1), Vec3);
		Vec3.copy(col0, _tmp);
		Vec3.copy(col1, _tmp$1);
		return [col0, col1];
	};
	$ptrType(Mat3x2).prototype.Cols = function() { return new Mat3x2(this.$get()).Cols(); };
	Mat3x2.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat32, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5])]);
	};
	$ptrType(Mat3x2).prototype.Abs = function() { return new Mat3x2(this.$get()).Abs(); };
	Mat3x2.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat3x2);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 3)) { break; } */ if(!(i < 3)) { $s = 2; continue; }
			_ref = new Mat3x2(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 2)) { break; } */ if(!(_i < 2)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float32(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat3x2.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat3x2).prototype.String = function() { return new Mat3x2(this.$get()).String(); };
	Mat3.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, col, m, v, x, x$1, x$2;
		v = $clone(v, Vec3);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		(x = ($imul(col, 3)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 3)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = ($imul(col, 3)) + 2 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
	};
	$ptrType(Mat3).prototype.SetCol = function(col, v) { return (new Mat3(this.$get())).SetCol(col, v); };
	Mat3.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, m, row, v, x, x$1, x$2;
		v = $clone(v, Vec3);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 3 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = row + 6 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
	};
	$ptrType(Mat3).prototype.SetRow = function(row, v) { return (new Mat3(this.$get())).SetRow(row, v); };
	Mat3.prototype.Diag = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat32, [m[0], m[4], m[8]]);
	};
	$ptrType(Mat3).prototype.Diag = function() { return new Mat3(this.$get()).Diag(); };
	Mat3FromCols = function(col0, col1, col2) {
		var $ptr, col0, col1, col2;
		col2 = $clone(col2, Vec3);
		col1 = $clone(col1, Vec3);
		col0 = $clone(col0, Vec3);
		return $toNativeArray($kindFloat32, [col0[0], col0[1], col0[2], col1[0], col1[1], col1[2], col2[0], col2[1], col2[2]]);
	};
	$pkg.Mat3FromCols = Mat3FromCols;
	Mat3.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat32, [$fround(m1[0] + m2[0]), $fround(m1[1] + m2[1]), $fround(m1[2] + m2[2]), $fround(m1[3] + m2[3]), $fround(m1[4] + m2[4]), $fround(m1[5] + m2[5]), $fround(m1[6] + m2[6]), $fround(m1[7] + m2[7]), $fround(m1[8] + m2[8])]);
	};
	$ptrType(Mat3).prototype.Add = function(m2) { return new Mat3(this.$get()).Add(m2); };
	Mat3.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat32, [$fround(m1[0] - m2[0]), $fround(m1[1] - m2[1]), $fround(m1[2] - m2[2]), $fround(m1[3] - m2[3]), $fround(m1[4] - m2[4]), $fround(m1[5] - m2[5]), $fround(m1[6] - m2[6]), $fround(m1[7] - m2[7]), $fround(m1[8] - m2[8])]);
	};
	$ptrType(Mat3).prototype.Sub = function(m2) { return new Mat3(this.$get()).Sub(m2); };
	Mat3.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat32, [$fround(m1[0] * c), $fround(m1[1] * c), $fround(m1[2] * c), $fround(m1[3] * c), $fround(m1[4] * c), $fround(m1[5] * c), $fround(m1[6] * c), $fround(m1[7] * c), $fround(m1[8] * c)]);
	};
	$ptrType(Mat3).prototype.Mul = function(c) { return new Mat3(this.$get()).Mul(c); };
	Mat3.prototype.Mul3x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec3);
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat32, [$fround($fround($fround(m1[0] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[6] * m2[2])), $fround($fround($fround(m1[1] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[7] * m2[2])), $fround($fround($fround(m1[2] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[8] * m2[2]))]);
	};
	$ptrType(Mat3).prototype.Mul3x1 = function(m2) { return new Mat3(this.$get()).Mul3x1(m2); };
	Mat3.prototype.Mul3x2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat32, [$fround($fround($fround(m1[0] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[6] * m2[2])), $fround($fround($fround(m1[1] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[7] * m2[2])), $fround($fround($fround(m1[2] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[8] * m2[2])), $fround($fround($fround(m1[0] * m2[3]) + $fround(m1[3] * m2[4])) + $fround(m1[6] * m2[5])), $fround($fround($fround(m1[1] * m2[3]) + $fround(m1[4] * m2[4])) + $fround(m1[7] * m2[5])), $fround($fround($fround(m1[2] * m2[3]) + $fround(m1[5] * m2[4])) + $fround(m1[8] * m2[5]))]);
	};
	$ptrType(Mat3).prototype.Mul3x2 = function(m2) { return new Mat3(this.$get()).Mul3x2(m2); };
	Mat3.prototype.Mul3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat32, [$fround($fround($fround(m1[0] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[6] * m2[2])), $fround($fround($fround(m1[1] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[7] * m2[2])), $fround($fround($fround(m1[2] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[8] * m2[2])), $fround($fround($fround(m1[0] * m2[3]) + $fround(m1[3] * m2[4])) + $fround(m1[6] * m2[5])), $fround($fround($fround(m1[1] * m2[3]) + $fround(m1[4] * m2[4])) + $fround(m1[7] * m2[5])), $fround($fround($fround(m1[2] * m2[3]) + $fround(m1[5] * m2[4])) + $fround(m1[8] * m2[5])), $fround($fround($fround(m1[0] * m2[6]) + $fround(m1[3] * m2[7])) + $fround(m1[6] * m2[8])), $fround($fround($fround(m1[1] * m2[6]) + $fround(m1[4] * m2[7])) + $fround(m1[7] * m2[8])), $fround($fround($fround(m1[2] * m2[6]) + $fround(m1[5] * m2[7])) + $fround(m1[8] * m2[8]))]);
	};
	$ptrType(Mat3).prototype.Mul3 = function(m2) { return new Mat3(this.$get()).Mul3(m2); };
	Mat3.prototype.Mul3x4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat32, [$fround($fround($fround(m1[0] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[6] * m2[2])), $fround($fround($fround(m1[1] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[7] * m2[2])), $fround($fround($fround(m1[2] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[8] * m2[2])), $fround($fround($fround(m1[0] * m2[3]) + $fround(m1[3] * m2[4])) + $fround(m1[6] * m2[5])), $fround($fround($fround(m1[1] * m2[3]) + $fround(m1[4] * m2[4])) + $fround(m1[7] * m2[5])), $fround($fround($fround(m1[2] * m2[3]) + $fround(m1[5] * m2[4])) + $fround(m1[8] * m2[5])), $fround($fround($fround(m1[0] * m2[6]) + $fround(m1[3] * m2[7])) + $fround(m1[6] * m2[8])), $fround($fround($fround(m1[1] * m2[6]) + $fround(m1[4] * m2[7])) + $fround(m1[7] * m2[8])), $fround($fround($fround(m1[2] * m2[6]) + $fround(m1[5] * m2[7])) + $fround(m1[8] * m2[8])), $fround($fround($fround(m1[0] * m2[9]) + $fround(m1[3] * m2[10])) + $fround(m1[6] * m2[11])), $fround($fround($fround(m1[1] * m2[9]) + $fround(m1[4] * m2[10])) + $fround(m1[7] * m2[11])), $fround($fround($fround(m1[2] * m2[9]) + $fround(m1[5] * m2[10])) + $fround(m1[8] * m2[11]))]);
	};
	$ptrType(Mat3).prototype.Mul3x4 = function(m2) { return new Mat3(this.$get()).Mul3x4(m2); };
	Mat3.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat32, [m1[0], m1[3], m1[6], m1[1], m1[4], m1[7], m1[2], m1[5], m1[8]]);
	};
	$ptrType(Mat3).prototype.Transpose = function() { return new Mat3(this.$get()).Transpose(); };
	Mat3.prototype.Det = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat3);
		return $fround($fround($fround($fround($fround($fround($fround(m[0] * m[4]) * m[8]) + $fround($fround(m[3] * m[7]) * m[2])) + $fround($fround(m[6] * m[1]) * m[5])) - $fround($fround(m[6] * m[4]) * m[2])) - $fround($fround(m[3] * m[1]) * m[8])) - $fround($fround(m[0] * m[7]) * m[5]));
	};
	$ptrType(Mat3).prototype.Det = function() { return new Mat3(this.$get()).Det(); };
	Mat3.prototype.Inv = function() {
		var $ptr, det, m, retMat;
		m = $clone(this.$val, Mat3);
		det = new Mat3(m).Det();
		if (FloatEqual(det, 0)) {
			return arrayType$5.zero();
		}
		retMat = $toNativeArray($kindFloat32, [$fround($fround(m[4] * m[8]) - $fround(m[5] * m[7])), $fround($fround(m[2] * m[7]) - $fround(m[1] * m[8])), $fround($fround(m[1] * m[5]) - $fround(m[2] * m[4])), $fround($fround(m[5] * m[6]) - $fround(m[3] * m[8])), $fround($fround(m[0] * m[8]) - $fround(m[2] * m[6])), $fround($fround(m[2] * m[3]) - $fround(m[0] * m[5])), $fround($fround(m[3] * m[7]) - $fround(m[4] * m[6])), $fround($fround(m[1] * m[6]) - $fround(m[0] * m[7])), $fround($fround(m[0] * m[4]) - $fround(m[1] * m[3]))]);
		return new Mat3(retMat).Mul($fround(1 / det));
	};
	$ptrType(Mat3).prototype.Inv = function() { return new Mat3(this.$get()).Inv(); };
	Mat3.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat3);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 9)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat3).prototype.ApproxEqual = function(m2) { return new Mat3(this.$get()).ApproxEqual(m2); };
	Mat3.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat3);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 9)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat3).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat3(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat3.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat3);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 9)) { break; } */ if(!(_i < 9)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat3.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat3).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat3(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat3.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat3);
		return (x = ($imul(col, 3)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat3).prototype.At = function(row, col) { return new Mat3(this.$get()).At(row, col); };
	Mat3.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 3)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat3).prototype.Set = function(row, col, value) { return (new Mat3(this.$get())).Set(row, col, value); };
	Mat3.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat3);
		return ($imul(col, 3)) + row >> 0;
	};
	$ptrType(Mat3).prototype.Index = function(row, col) { return new Mat3(this.$get()).Index(row, col); };
	Mat3.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1, x$2;
		m = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat32, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 3 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = row + 6 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2]))]);
	};
	$ptrType(Mat3).prototype.Row = function(row) { return new Mat3(this.$get()).Row(row); };
	Mat3.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, m, row0, row1, row2;
		row0 = arrayType$4.zero();
		row1 = arrayType$4.zero();
		row2 = arrayType$4.zero();
		m = $clone(this.$val, Mat3);
		_tmp = $clone(new Mat3(m).Row(0), Vec3);
		_tmp$1 = $clone(new Mat3(m).Row(1), Vec3);
		_tmp$2 = $clone(new Mat3(m).Row(2), Vec3);
		Vec3.copy(row0, _tmp);
		Vec3.copy(row1, _tmp$1);
		Vec3.copy(row2, _tmp$2);
		return [row0, row1, row2];
	};
	$ptrType(Mat3).prototype.Rows = function() { return new Mat3(this.$get()).Rows(); };
	Mat3.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1, x$2;
		m = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat32, [(x = ($imul(col, 3)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 3)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = ($imul(col, 3)) + 2 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2]))]);
	};
	$ptrType(Mat3).prototype.Col = function(col) { return new Mat3(this.$get()).Col(col); };
	Mat3.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, col0, col1, col2, m;
		col0 = arrayType$4.zero();
		col1 = arrayType$4.zero();
		col2 = arrayType$4.zero();
		m = $clone(this.$val, Mat3);
		_tmp = $clone(new Mat3(m).Col(0), Vec3);
		_tmp$1 = $clone(new Mat3(m).Col(1), Vec3);
		_tmp$2 = $clone(new Mat3(m).Col(2), Vec3);
		Vec3.copy(col0, _tmp);
		Vec3.copy(col1, _tmp$1);
		Vec3.copy(col2, _tmp$2);
		return [col0, col1, col2];
	};
	$ptrType(Mat3).prototype.Cols = function() { return new Mat3(this.$get()).Cols(); };
	Mat3.prototype.Trace = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat3);
		return $fround($fround(m[0] + m[4]) + m[8]);
	};
	$ptrType(Mat3).prototype.Trace = function() { return new Mat3(this.$get()).Trace(); };
	Mat3.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat32, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5]), Abs(m[6]), Abs(m[7]), Abs(m[8])]);
	};
	$ptrType(Mat3).prototype.Abs = function() { return new Mat3(this.$get()).Abs(); };
	Mat3.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat3);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 3)) { break; } */ if(!(i < 3)) { $s = 2; continue; }
			_ref = new Mat3(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 3)) { break; } */ if(!(_i < 3)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float32(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat3.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat3).prototype.String = function() { return new Mat3(this.$get()).String(); };
	Mat3x4.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, col, m, v, x, x$1, x$2;
		v = $clone(v, Vec3);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		(x = ($imul(col, 3)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 3)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = ($imul(col, 3)) + 2 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
	};
	$ptrType(Mat3x4).prototype.SetCol = function(col, v) { return (new Mat3x4(this.$get())).SetCol(col, v); };
	Mat3x4.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, m, row, v, x, x$1, x$2, x$3;
		v = $clone(v, Vec4);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 3 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = row + 6 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
		(x$3 = row + 9 >> 0, m.nilCheck, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3] = _tmp$3));
	};
	$ptrType(Mat3x4).prototype.SetRow = function(row, v) { return (new Mat3x4(this.$get())).SetRow(row, v); };
	Mat3x4.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat32, [$fround(m1[0] + m2[0]), $fround(m1[1] + m2[1]), $fround(m1[2] + m2[2]), $fround(m1[3] + m2[3]), $fround(m1[4] + m2[4]), $fround(m1[5] + m2[5]), $fround(m1[6] + m2[6]), $fround(m1[7] + m2[7]), $fround(m1[8] + m2[8]), $fround(m1[9] + m2[9]), $fround(m1[10] + m2[10]), $fround(m1[11] + m2[11])]);
	};
	$ptrType(Mat3x4).prototype.Add = function(m2) { return new Mat3x4(this.$get()).Add(m2); };
	Mat3x4.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat32, [$fround(m1[0] - m2[0]), $fround(m1[1] - m2[1]), $fround(m1[2] - m2[2]), $fround(m1[3] - m2[3]), $fround(m1[4] - m2[4]), $fround(m1[5] - m2[5]), $fround(m1[6] - m2[6]), $fround(m1[7] - m2[7]), $fround(m1[8] - m2[8]), $fround(m1[9] - m2[9]), $fround(m1[10] - m2[10]), $fround(m1[11] - m2[11])]);
	};
	$ptrType(Mat3x4).prototype.Sub = function(m2) { return new Mat3x4(this.$get()).Sub(m2); };
	Mat3x4.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat32, [$fround(m1[0] * c), $fround(m1[1] * c), $fround(m1[2] * c), $fround(m1[3] * c), $fround(m1[4] * c), $fround(m1[5] * c), $fround(m1[6] * c), $fround(m1[7] * c), $fround(m1[8] * c), $fround(m1[9] * c), $fround(m1[10] * c), $fround(m1[11] * c)]);
	};
	$ptrType(Mat3x4).prototype.Mul = function(c) { return new Mat3x4(this.$get()).Mul(c); };
	Mat3x4.prototype.Mul4x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec4);
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat32, [$fround($fround($fround($fround(m1[0] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[6] * m2[2])) + $fround(m1[9] * m2[3])), $fround($fround($fround($fround(m1[1] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[7] * m2[2])) + $fround(m1[10] * m2[3])), $fround($fround($fround($fround(m1[2] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[8] * m2[2])) + $fround(m1[11] * m2[3]))]);
	};
	$ptrType(Mat3x4).prototype.Mul4x1 = function(m2) { return new Mat3x4(this.$get()).Mul4x1(m2); };
	Mat3x4.prototype.Mul4x2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat32, [$fround($fround($fround($fround(m1[0] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[6] * m2[2])) + $fround(m1[9] * m2[3])), $fround($fround($fround($fround(m1[1] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[7] * m2[2])) + $fround(m1[10] * m2[3])), $fround($fround($fround($fround(m1[2] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[8] * m2[2])) + $fround(m1[11] * m2[3])), $fround($fround($fround($fround(m1[0] * m2[4]) + $fround(m1[3] * m2[5])) + $fround(m1[6] * m2[6])) + $fround(m1[9] * m2[7])), $fround($fround($fround($fround(m1[1] * m2[4]) + $fround(m1[4] * m2[5])) + $fround(m1[7] * m2[6])) + $fround(m1[10] * m2[7])), $fround($fround($fround($fround(m1[2] * m2[4]) + $fround(m1[5] * m2[5])) + $fround(m1[8] * m2[6])) + $fround(m1[11] * m2[7]))]);
	};
	$ptrType(Mat3x4).prototype.Mul4x2 = function(m2) { return new Mat3x4(this.$get()).Mul4x2(m2); };
	Mat3x4.prototype.Mul4x3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat32, [$fround($fround($fround($fround(m1[0] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[6] * m2[2])) + $fround(m1[9] * m2[3])), $fround($fround($fround($fround(m1[1] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[7] * m2[2])) + $fround(m1[10] * m2[3])), $fround($fround($fround($fround(m1[2] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[8] * m2[2])) + $fround(m1[11] * m2[3])), $fround($fround($fround($fround(m1[0] * m2[4]) + $fround(m1[3] * m2[5])) + $fround(m1[6] * m2[6])) + $fround(m1[9] * m2[7])), $fround($fround($fround($fround(m1[1] * m2[4]) + $fround(m1[4] * m2[5])) + $fround(m1[7] * m2[6])) + $fround(m1[10] * m2[7])), $fround($fround($fround($fround(m1[2] * m2[4]) + $fround(m1[5] * m2[5])) + $fround(m1[8] * m2[6])) + $fround(m1[11] * m2[7])), $fround($fround($fround($fround(m1[0] * m2[8]) + $fround(m1[3] * m2[9])) + $fround(m1[6] * m2[10])) + $fround(m1[9] * m2[11])), $fround($fround($fround($fround(m1[1] * m2[8]) + $fround(m1[4] * m2[9])) + $fround(m1[7] * m2[10])) + $fround(m1[10] * m2[11])), $fround($fround($fround($fround(m1[2] * m2[8]) + $fround(m1[5] * m2[9])) + $fround(m1[8] * m2[10])) + $fround(m1[11] * m2[11]))]);
	};
	$ptrType(Mat3x4).prototype.Mul4x3 = function(m2) { return new Mat3x4(this.$get()).Mul4x3(m2); };
	Mat3x4.prototype.Mul4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat32, [$fround($fround($fround($fround(m1[0] * m2[0]) + $fround(m1[3] * m2[1])) + $fround(m1[6] * m2[2])) + $fround(m1[9] * m2[3])), $fround($fround($fround($fround(m1[1] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[7] * m2[2])) + $fround(m1[10] * m2[3])), $fround($fround($fround($fround(m1[2] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[8] * m2[2])) + $fround(m1[11] * m2[3])), $fround($fround($fround($fround(m1[0] * m2[4]) + $fround(m1[3] * m2[5])) + $fround(m1[6] * m2[6])) + $fround(m1[9] * m2[7])), $fround($fround($fround($fround(m1[1] * m2[4]) + $fround(m1[4] * m2[5])) + $fround(m1[7] * m2[6])) + $fround(m1[10] * m2[7])), $fround($fround($fround($fround(m1[2] * m2[4]) + $fround(m1[5] * m2[5])) + $fround(m1[8] * m2[6])) + $fround(m1[11] * m2[7])), $fround($fround($fround($fround(m1[0] * m2[8]) + $fround(m1[3] * m2[9])) + $fround(m1[6] * m2[10])) + $fround(m1[9] * m2[11])), $fround($fround($fround($fround(m1[1] * m2[8]) + $fround(m1[4] * m2[9])) + $fround(m1[7] * m2[10])) + $fround(m1[10] * m2[11])), $fround($fround($fround($fround(m1[2] * m2[8]) + $fround(m1[5] * m2[9])) + $fround(m1[8] * m2[10])) + $fround(m1[11] * m2[11])), $fround($fround($fround($fround(m1[0] * m2[12]) + $fround(m1[3] * m2[13])) + $fround(m1[6] * m2[14])) + $fround(m1[9] * m2[15])), $fround($fround($fround($fround(m1[1] * m2[12]) + $fround(m1[4] * m2[13])) + $fround(m1[7] * m2[14])) + $fround(m1[10] * m2[15])), $fround($fround($fround($fround(m1[2] * m2[12]) + $fround(m1[5] * m2[13])) + $fround(m1[8] * m2[14])) + $fround(m1[11] * m2[15]))]);
	};
	$ptrType(Mat3x4).prototype.Mul4 = function(m2) { return new Mat3x4(this.$get()).Mul4(m2); };
	Mat3x4.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat32, [m1[0], m1[3], m1[6], m1[9], m1[1], m1[4], m1[7], m1[10], m1[2], m1[5], m1[8], m1[11]]);
	};
	$ptrType(Mat3x4).prototype.Transpose = function() { return new Mat3x4(this.$get()).Transpose(); };
	Mat3x4.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat3x4);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 12)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat3x4).prototype.ApproxEqual = function(m2) { return new Mat3x4(this.$get()).ApproxEqual(m2); };
	Mat3x4.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat3x4);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 12)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat3x4).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat3x4(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat3x4.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat3x4);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 12)) { break; } */ if(!(_i < 12)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat3x4.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat3x4).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat3x4(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat3x4.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat3x4);
		return (x = ($imul(col, 3)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat3x4).prototype.At = function(row, col) { return new Mat3x4(this.$get()).At(row, col); };
	Mat3x4.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 3)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat3x4).prototype.Set = function(row, col, value) { return (new Mat3x4(this.$get())).Set(row, col, value); };
	Mat3x4.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat3x4);
		return ($imul(col, 3)) + row >> 0;
	};
	$ptrType(Mat3x4).prototype.Index = function(row, col) { return new Mat3x4(this.$get()).Index(row, col); };
	Mat3x4.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1, x$2, x$3;
		m = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat32, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 3 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = row + 6 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2])), (x$3 = row + 9 >> 0, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3]))]);
	};
	$ptrType(Mat3x4).prototype.Row = function(row) { return new Mat3x4(this.$get()).Row(row); };
	Mat3x4.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, m, row0, row1, row2;
		row0 = arrayType.zero();
		row1 = arrayType.zero();
		row2 = arrayType.zero();
		m = $clone(this.$val, Mat3x4);
		_tmp = $clone(new Mat3x4(m).Row(0), Vec4);
		_tmp$1 = $clone(new Mat3x4(m).Row(1), Vec4);
		_tmp$2 = $clone(new Mat3x4(m).Row(2), Vec4);
		Vec4.copy(row0, _tmp);
		Vec4.copy(row1, _tmp$1);
		Vec4.copy(row2, _tmp$2);
		return [row0, row1, row2];
	};
	$ptrType(Mat3x4).prototype.Rows = function() { return new Mat3x4(this.$get()).Rows(); };
	Mat3x4.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1, x$2;
		m = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat32, [(x = ($imul(col, 3)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 3)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = ($imul(col, 3)) + 2 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2]))]);
	};
	$ptrType(Mat3x4).prototype.Col = function(col) { return new Mat3x4(this.$get()).Col(col); };
	Mat3x4.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, col0, col1, col2, col3, m;
		col0 = arrayType$4.zero();
		col1 = arrayType$4.zero();
		col2 = arrayType$4.zero();
		col3 = arrayType$4.zero();
		m = $clone(this.$val, Mat3x4);
		_tmp = $clone(new Mat3x4(m).Col(0), Vec3);
		_tmp$1 = $clone(new Mat3x4(m).Col(1), Vec3);
		_tmp$2 = $clone(new Mat3x4(m).Col(2), Vec3);
		_tmp$3 = $clone(new Mat3x4(m).Col(3), Vec3);
		Vec3.copy(col0, _tmp);
		Vec3.copy(col1, _tmp$1);
		Vec3.copy(col2, _tmp$2);
		Vec3.copy(col3, _tmp$3);
		return [col0, col1, col2, col3];
	};
	$ptrType(Mat3x4).prototype.Cols = function() { return new Mat3x4(this.$get()).Cols(); };
	Mat3x4.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat32, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5]), Abs(m[6]), Abs(m[7]), Abs(m[8]), Abs(m[9]), Abs(m[10]), Abs(m[11])]);
	};
	$ptrType(Mat3x4).prototype.Abs = function() { return new Mat3x4(this.$get()).Abs(); };
	Mat3x4.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat3x4);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 3)) { break; } */ if(!(i < 3)) { $s = 2; continue; }
			_ref = new Mat3x4(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 4)) { break; } */ if(!(_i < 4)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float32(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat3x4.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat3x4).prototype.String = function() { return new Mat3x4(this.$get()).String(); };
	Mat4x2.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, col, m, v, x, x$1, x$2, x$3;
		v = $clone(v, Vec4);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		(x = ($imul(col, 4)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 4)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = ($imul(col, 4)) + 2 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
		(x$3 = ($imul(col, 4)) + 3 >> 0, m.nilCheck, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3] = _tmp$3));
	};
	$ptrType(Mat4x2).prototype.SetCol = function(col, v) { return (new Mat4x2(this.$get())).SetCol(col, v); };
	Mat4x2.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, m, row, v, x, x$1;
		v = $clone(v, Vec2);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 4 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
	};
	$ptrType(Mat4x2).prototype.SetRow = function(row, v) { return (new Mat4x2(this.$get())).SetRow(row, v); };
	Mat4x2.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat32, [$fround(m1[0] + m2[0]), $fround(m1[1] + m2[1]), $fround(m1[2] + m2[2]), $fround(m1[3] + m2[3]), $fround(m1[4] + m2[4]), $fround(m1[5] + m2[5]), $fround(m1[6] + m2[6]), $fround(m1[7] + m2[7])]);
	};
	$ptrType(Mat4x2).prototype.Add = function(m2) { return new Mat4x2(this.$get()).Add(m2); };
	Mat4x2.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat32, [$fround(m1[0] - m2[0]), $fround(m1[1] - m2[1]), $fround(m1[2] - m2[2]), $fround(m1[3] - m2[3]), $fround(m1[4] - m2[4]), $fround(m1[5] - m2[5]), $fround(m1[6] - m2[6]), $fround(m1[7] - m2[7])]);
	};
	$ptrType(Mat4x2).prototype.Sub = function(m2) { return new Mat4x2(this.$get()).Sub(m2); };
	Mat4x2.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat32, [$fround(m1[0] * c), $fround(m1[1] * c), $fround(m1[2] * c), $fround(m1[3] * c), $fround(m1[4] * c), $fround(m1[5] * c), $fround(m1[6] * c), $fround(m1[7] * c)]);
	};
	$ptrType(Mat4x2).prototype.Mul = function(c) { return new Mat4x2(this.$get()).Mul(c); };
	Mat4x2.prototype.Mul2x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec2);
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat32, [$fround($fround(m1[0] * m2[0]) + $fround(m1[4] * m2[1])), $fround($fround(m1[1] * m2[0]) + $fround(m1[5] * m2[1])), $fround($fround(m1[2] * m2[0]) + $fround(m1[6] * m2[1])), $fround($fround(m1[3] * m2[0]) + $fround(m1[7] * m2[1]))]);
	};
	$ptrType(Mat4x2).prototype.Mul2x1 = function(m2) { return new Mat4x2(this.$get()).Mul2x1(m2); };
	Mat4x2.prototype.Mul2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat32, [$fround($fround(m1[0] * m2[0]) + $fround(m1[4] * m2[1])), $fround($fround(m1[1] * m2[0]) + $fround(m1[5] * m2[1])), $fround($fround(m1[2] * m2[0]) + $fround(m1[6] * m2[1])), $fround($fround(m1[3] * m2[0]) + $fround(m1[7] * m2[1])), $fround($fround(m1[0] * m2[2]) + $fround(m1[4] * m2[3])), $fround($fround(m1[1] * m2[2]) + $fround(m1[5] * m2[3])), $fround($fround(m1[2] * m2[2]) + $fround(m1[6] * m2[3])), $fround($fround(m1[3] * m2[2]) + $fround(m1[7] * m2[3]))]);
	};
	$ptrType(Mat4x2).prototype.Mul2 = function(m2) { return new Mat4x2(this.$get()).Mul2(m2); };
	Mat4x2.prototype.Mul2x3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat32, [$fround($fround(m1[0] * m2[0]) + $fround(m1[4] * m2[1])), $fround($fround(m1[1] * m2[0]) + $fround(m1[5] * m2[1])), $fround($fround(m1[2] * m2[0]) + $fround(m1[6] * m2[1])), $fround($fround(m1[3] * m2[0]) + $fround(m1[7] * m2[1])), $fround($fround(m1[0] * m2[2]) + $fround(m1[4] * m2[3])), $fround($fround(m1[1] * m2[2]) + $fround(m1[5] * m2[3])), $fround($fround(m1[2] * m2[2]) + $fround(m1[6] * m2[3])), $fround($fround(m1[3] * m2[2]) + $fround(m1[7] * m2[3])), $fround($fround(m1[0] * m2[4]) + $fround(m1[4] * m2[5])), $fround($fround(m1[1] * m2[4]) + $fround(m1[5] * m2[5])), $fround($fround(m1[2] * m2[4]) + $fround(m1[6] * m2[5])), $fround($fround(m1[3] * m2[4]) + $fround(m1[7] * m2[5]))]);
	};
	$ptrType(Mat4x2).prototype.Mul2x3 = function(m2) { return new Mat4x2(this.$get()).Mul2x3(m2); };
	Mat4x2.prototype.Mul2x4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat32, [$fround($fround(m1[0] * m2[0]) + $fround(m1[4] * m2[1])), $fround($fround(m1[1] * m2[0]) + $fround(m1[5] * m2[1])), $fround($fround(m1[2] * m2[0]) + $fround(m1[6] * m2[1])), $fround($fround(m1[3] * m2[0]) + $fround(m1[7] * m2[1])), $fround($fround(m1[0] * m2[2]) + $fround(m1[4] * m2[3])), $fround($fround(m1[1] * m2[2]) + $fround(m1[5] * m2[3])), $fround($fround(m1[2] * m2[2]) + $fround(m1[6] * m2[3])), $fround($fround(m1[3] * m2[2]) + $fround(m1[7] * m2[3])), $fround($fround(m1[0] * m2[4]) + $fround(m1[4] * m2[5])), $fround($fround(m1[1] * m2[4]) + $fround(m1[5] * m2[5])), $fround($fround(m1[2] * m2[4]) + $fround(m1[6] * m2[5])), $fround($fround(m1[3] * m2[4]) + $fround(m1[7] * m2[5])), $fround($fround(m1[0] * m2[6]) + $fround(m1[4] * m2[7])), $fround($fround(m1[1] * m2[6]) + $fround(m1[5] * m2[7])), $fround($fround(m1[2] * m2[6]) + $fround(m1[6] * m2[7])), $fround($fround(m1[3] * m2[6]) + $fround(m1[7] * m2[7]))]);
	};
	$ptrType(Mat4x2).prototype.Mul2x4 = function(m2) { return new Mat4x2(this.$get()).Mul2x4(m2); };
	Mat4x2.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat32, [m1[0], m1[4], m1[1], m1[5], m1[2], m1[6], m1[3], m1[7]]);
	};
	$ptrType(Mat4x2).prototype.Transpose = function() { return new Mat4x2(this.$get()).Transpose(); };
	Mat4x2.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat4x2);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 8)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat4x2).prototype.ApproxEqual = function(m2) { return new Mat4x2(this.$get()).ApproxEqual(m2); };
	Mat4x2.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat4x2);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 8)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat4x2).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat4x2(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat4x2.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat4x2);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 8)) { break; } */ if(!(_i < 8)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat4x2.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat4x2).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat4x2(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat4x2.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat4x2);
		return (x = ($imul(col, 4)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat4x2).prototype.At = function(row, col) { return new Mat4x2(this.$get()).At(row, col); };
	Mat4x2.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 4)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat4x2).prototype.Set = function(row, col, value) { return (new Mat4x2(this.$get())).Set(row, col, value); };
	Mat4x2.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat4x2);
		return ($imul(col, 4)) + row >> 0;
	};
	$ptrType(Mat4x2).prototype.Index = function(row, col) { return new Mat4x2(this.$get()).Index(row, col); };
	Mat4x2.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1;
		m = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat32, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 4 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1]))]);
	};
	$ptrType(Mat4x2).prototype.Row = function(row) { return new Mat4x2(this.$get()).Row(row); };
	Mat4x2.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, m, row0, row1, row2, row3;
		row0 = arrayType$1.zero();
		row1 = arrayType$1.zero();
		row2 = arrayType$1.zero();
		row3 = arrayType$1.zero();
		m = $clone(this.$val, Mat4x2);
		_tmp = $clone(new Mat4x2(m).Row(0), Vec2);
		_tmp$1 = $clone(new Mat4x2(m).Row(1), Vec2);
		_tmp$2 = $clone(new Mat4x2(m).Row(2), Vec2);
		_tmp$3 = $clone(new Mat4x2(m).Row(3), Vec2);
		Vec2.copy(row0, _tmp);
		Vec2.copy(row1, _tmp$1);
		Vec2.copy(row2, _tmp$2);
		Vec2.copy(row3, _tmp$3);
		return [row0, row1, row2, row3];
	};
	$ptrType(Mat4x2).prototype.Rows = function() { return new Mat4x2(this.$get()).Rows(); };
	Mat4x2.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1, x$2, x$3;
		m = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat32, [(x = ($imul(col, 4)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 4)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = ($imul(col, 4)) + 2 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2])), (x$3 = ($imul(col, 4)) + 3 >> 0, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3]))]);
	};
	$ptrType(Mat4x2).prototype.Col = function(col) { return new Mat4x2(this.$get()).Col(col); };
	Mat4x2.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, col0, col1, m;
		col0 = arrayType.zero();
		col1 = arrayType.zero();
		m = $clone(this.$val, Mat4x2);
		_tmp = $clone(new Mat4x2(m).Col(0), Vec4);
		_tmp$1 = $clone(new Mat4x2(m).Col(1), Vec4);
		Vec4.copy(col0, _tmp);
		Vec4.copy(col1, _tmp$1);
		return [col0, col1];
	};
	$ptrType(Mat4x2).prototype.Cols = function() { return new Mat4x2(this.$get()).Cols(); };
	Mat4x2.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat32, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5]), Abs(m[6]), Abs(m[7])]);
	};
	$ptrType(Mat4x2).prototype.Abs = function() { return new Mat4x2(this.$get()).Abs(); };
	Mat4x2.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat4x2);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 4)) { break; } */ if(!(i < 4)) { $s = 2; continue; }
			_ref = new Mat4x2(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 2)) { break; } */ if(!(_i < 2)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float32(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat4x2.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat4x2).prototype.String = function() { return new Mat4x2(this.$get()).String(); };
	Mat4x3.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, col, m, v, x, x$1, x$2, x$3;
		v = $clone(v, Vec4);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		(x = ($imul(col, 4)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 4)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = ($imul(col, 4)) + 2 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
		(x$3 = ($imul(col, 4)) + 3 >> 0, m.nilCheck, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3] = _tmp$3));
	};
	$ptrType(Mat4x3).prototype.SetCol = function(col, v) { return (new Mat4x3(this.$get())).SetCol(col, v); };
	Mat4x3.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, m, row, v, x, x$1, x$2;
		v = $clone(v, Vec3);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 4 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = row + 8 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
	};
	$ptrType(Mat4x3).prototype.SetRow = function(row, v) { return (new Mat4x3(this.$get())).SetRow(row, v); };
	Mat4x3.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat32, [$fround(m1[0] + m2[0]), $fround(m1[1] + m2[1]), $fround(m1[2] + m2[2]), $fround(m1[3] + m2[3]), $fround(m1[4] + m2[4]), $fround(m1[5] + m2[5]), $fround(m1[6] + m2[6]), $fround(m1[7] + m2[7]), $fround(m1[8] + m2[8]), $fround(m1[9] + m2[9]), $fround(m1[10] + m2[10]), $fround(m1[11] + m2[11])]);
	};
	$ptrType(Mat4x3).prototype.Add = function(m2) { return new Mat4x3(this.$get()).Add(m2); };
	Mat4x3.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat32, [$fround(m1[0] - m2[0]), $fround(m1[1] - m2[1]), $fround(m1[2] - m2[2]), $fround(m1[3] - m2[3]), $fround(m1[4] - m2[4]), $fround(m1[5] - m2[5]), $fround(m1[6] - m2[6]), $fround(m1[7] - m2[7]), $fround(m1[8] - m2[8]), $fround(m1[9] - m2[9]), $fround(m1[10] - m2[10]), $fround(m1[11] - m2[11])]);
	};
	$ptrType(Mat4x3).prototype.Sub = function(m2) { return new Mat4x3(this.$get()).Sub(m2); };
	Mat4x3.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat32, [$fround(m1[0] * c), $fround(m1[1] * c), $fround(m1[2] * c), $fround(m1[3] * c), $fround(m1[4] * c), $fround(m1[5] * c), $fround(m1[6] * c), $fround(m1[7] * c), $fround(m1[8] * c), $fround(m1[9] * c), $fround(m1[10] * c), $fround(m1[11] * c)]);
	};
	$ptrType(Mat4x3).prototype.Mul = function(c) { return new Mat4x3(this.$get()).Mul(c); };
	Mat4x3.prototype.Mul3x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec3);
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat32, [$fround($fround($fround(m1[0] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[8] * m2[2])), $fround($fround($fround(m1[1] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[9] * m2[2])), $fround($fround($fround(m1[2] * m2[0]) + $fround(m1[6] * m2[1])) + $fround(m1[10] * m2[2])), $fround($fround($fround(m1[3] * m2[0]) + $fround(m1[7] * m2[1])) + $fround(m1[11] * m2[2]))]);
	};
	$ptrType(Mat4x3).prototype.Mul3x1 = function(m2) { return new Mat4x3(this.$get()).Mul3x1(m2); };
	Mat4x3.prototype.Mul3x2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat32, [$fround($fround($fround(m1[0] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[8] * m2[2])), $fround($fround($fround(m1[1] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[9] * m2[2])), $fround($fround($fround(m1[2] * m2[0]) + $fround(m1[6] * m2[1])) + $fround(m1[10] * m2[2])), $fround($fround($fround(m1[3] * m2[0]) + $fround(m1[7] * m2[1])) + $fround(m1[11] * m2[2])), $fround($fround($fround(m1[0] * m2[3]) + $fround(m1[4] * m2[4])) + $fround(m1[8] * m2[5])), $fround($fround($fround(m1[1] * m2[3]) + $fround(m1[5] * m2[4])) + $fround(m1[9] * m2[5])), $fround($fround($fround(m1[2] * m2[3]) + $fround(m1[6] * m2[4])) + $fround(m1[10] * m2[5])), $fround($fround($fround(m1[3] * m2[3]) + $fround(m1[7] * m2[4])) + $fround(m1[11] * m2[5]))]);
	};
	$ptrType(Mat4x3).prototype.Mul3x2 = function(m2) { return new Mat4x3(this.$get()).Mul3x2(m2); };
	Mat4x3.prototype.Mul3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat32, [$fround($fround($fround(m1[0] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[8] * m2[2])), $fround($fround($fround(m1[1] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[9] * m2[2])), $fround($fround($fround(m1[2] * m2[0]) + $fround(m1[6] * m2[1])) + $fround(m1[10] * m2[2])), $fround($fround($fround(m1[3] * m2[0]) + $fround(m1[7] * m2[1])) + $fround(m1[11] * m2[2])), $fround($fround($fround(m1[0] * m2[3]) + $fround(m1[4] * m2[4])) + $fround(m1[8] * m2[5])), $fround($fround($fround(m1[1] * m2[3]) + $fround(m1[5] * m2[4])) + $fround(m1[9] * m2[5])), $fround($fround($fround(m1[2] * m2[3]) + $fround(m1[6] * m2[4])) + $fround(m1[10] * m2[5])), $fround($fround($fround(m1[3] * m2[3]) + $fround(m1[7] * m2[4])) + $fround(m1[11] * m2[5])), $fround($fround($fround(m1[0] * m2[6]) + $fround(m1[4] * m2[7])) + $fround(m1[8] * m2[8])), $fround($fround($fround(m1[1] * m2[6]) + $fround(m1[5] * m2[7])) + $fround(m1[9] * m2[8])), $fround($fround($fround(m1[2] * m2[6]) + $fround(m1[6] * m2[7])) + $fround(m1[10] * m2[8])), $fround($fround($fround(m1[3] * m2[6]) + $fround(m1[7] * m2[7])) + $fround(m1[11] * m2[8]))]);
	};
	$ptrType(Mat4x3).prototype.Mul3 = function(m2) { return new Mat4x3(this.$get()).Mul3(m2); };
	Mat4x3.prototype.Mul3x4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat32, [$fround($fround($fround(m1[0] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[8] * m2[2])), $fround($fround($fround(m1[1] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[9] * m2[2])), $fround($fround($fround(m1[2] * m2[0]) + $fround(m1[6] * m2[1])) + $fround(m1[10] * m2[2])), $fround($fround($fround(m1[3] * m2[0]) + $fround(m1[7] * m2[1])) + $fround(m1[11] * m2[2])), $fround($fround($fround(m1[0] * m2[3]) + $fround(m1[4] * m2[4])) + $fround(m1[8] * m2[5])), $fround($fround($fround(m1[1] * m2[3]) + $fround(m1[5] * m2[4])) + $fround(m1[9] * m2[5])), $fround($fround($fround(m1[2] * m2[3]) + $fround(m1[6] * m2[4])) + $fround(m1[10] * m2[5])), $fround($fround($fround(m1[3] * m2[3]) + $fround(m1[7] * m2[4])) + $fround(m1[11] * m2[5])), $fround($fround($fround(m1[0] * m2[6]) + $fround(m1[4] * m2[7])) + $fround(m1[8] * m2[8])), $fround($fround($fround(m1[1] * m2[6]) + $fround(m1[5] * m2[7])) + $fround(m1[9] * m2[8])), $fround($fround($fround(m1[2] * m2[6]) + $fround(m1[6] * m2[7])) + $fround(m1[10] * m2[8])), $fround($fround($fround(m1[3] * m2[6]) + $fround(m1[7] * m2[7])) + $fround(m1[11] * m2[8])), $fround($fround($fround(m1[0] * m2[9]) + $fround(m1[4] * m2[10])) + $fround(m1[8] * m2[11])), $fround($fround($fround(m1[1] * m2[9]) + $fround(m1[5] * m2[10])) + $fround(m1[9] * m2[11])), $fround($fround($fround(m1[2] * m2[9]) + $fround(m1[6] * m2[10])) + $fround(m1[10] * m2[11])), $fround($fround($fround(m1[3] * m2[9]) + $fround(m1[7] * m2[10])) + $fround(m1[11] * m2[11]))]);
	};
	$ptrType(Mat4x3).prototype.Mul3x4 = function(m2) { return new Mat4x3(this.$get()).Mul3x4(m2); };
	Mat4x3.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat32, [m1[0], m1[4], m1[8], m1[1], m1[5], m1[9], m1[2], m1[6], m1[10], m1[3], m1[7], m1[11]]);
	};
	$ptrType(Mat4x3).prototype.Transpose = function() { return new Mat4x3(this.$get()).Transpose(); };
	Mat4x3.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat4x3);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 12)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat4x3).prototype.ApproxEqual = function(m2) { return new Mat4x3(this.$get()).ApproxEqual(m2); };
	Mat4x3.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat4x3);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 12)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat4x3).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat4x3(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat4x3.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat4x3);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 12)) { break; } */ if(!(_i < 12)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat4x3.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat4x3).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat4x3(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat4x3.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat4x3);
		return (x = ($imul(col, 4)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat4x3).prototype.At = function(row, col) { return new Mat4x3(this.$get()).At(row, col); };
	Mat4x3.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 4)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat4x3).prototype.Set = function(row, col, value) { return (new Mat4x3(this.$get())).Set(row, col, value); };
	Mat4x3.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat4x3);
		return ($imul(col, 4)) + row >> 0;
	};
	$ptrType(Mat4x3).prototype.Index = function(row, col) { return new Mat4x3(this.$get()).Index(row, col); };
	Mat4x3.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1, x$2;
		m = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat32, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 4 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = row + 8 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2]))]);
	};
	$ptrType(Mat4x3).prototype.Row = function(row) { return new Mat4x3(this.$get()).Row(row); };
	Mat4x3.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, m, row0, row1, row2, row3;
		row0 = arrayType$4.zero();
		row1 = arrayType$4.zero();
		row2 = arrayType$4.zero();
		row3 = arrayType$4.zero();
		m = $clone(this.$val, Mat4x3);
		_tmp = $clone(new Mat4x3(m).Row(0), Vec3);
		_tmp$1 = $clone(new Mat4x3(m).Row(1), Vec3);
		_tmp$2 = $clone(new Mat4x3(m).Row(2), Vec3);
		_tmp$3 = $clone(new Mat4x3(m).Row(3), Vec3);
		Vec3.copy(row0, _tmp);
		Vec3.copy(row1, _tmp$1);
		Vec3.copy(row2, _tmp$2);
		Vec3.copy(row3, _tmp$3);
		return [row0, row1, row2, row3];
	};
	$ptrType(Mat4x3).prototype.Rows = function() { return new Mat4x3(this.$get()).Rows(); };
	Mat4x3.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1, x$2, x$3;
		m = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat32, [(x = ($imul(col, 4)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 4)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = ($imul(col, 4)) + 2 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2])), (x$3 = ($imul(col, 4)) + 3 >> 0, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3]))]);
	};
	$ptrType(Mat4x3).prototype.Col = function(col) { return new Mat4x3(this.$get()).Col(col); };
	Mat4x3.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, col0, col1, col2, m;
		col0 = arrayType.zero();
		col1 = arrayType.zero();
		col2 = arrayType.zero();
		m = $clone(this.$val, Mat4x3);
		_tmp = $clone(new Mat4x3(m).Col(0), Vec4);
		_tmp$1 = $clone(new Mat4x3(m).Col(1), Vec4);
		_tmp$2 = $clone(new Mat4x3(m).Col(2), Vec4);
		Vec4.copy(col0, _tmp);
		Vec4.copy(col1, _tmp$1);
		Vec4.copy(col2, _tmp$2);
		return [col0, col1, col2];
	};
	$ptrType(Mat4x3).prototype.Cols = function() { return new Mat4x3(this.$get()).Cols(); };
	Mat4x3.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat32, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5]), Abs(m[6]), Abs(m[7]), Abs(m[8]), Abs(m[9]), Abs(m[10]), Abs(m[11])]);
	};
	$ptrType(Mat4x3).prototype.Abs = function() { return new Mat4x3(this.$get()).Abs(); };
	Mat4x3.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat4x3);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 4)) { break; } */ if(!(i < 4)) { $s = 2; continue; }
			_ref = new Mat4x3(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 3)) { break; } */ if(!(_i < 3)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float32(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat4x3.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat4x3).prototype.String = function() { return new Mat4x3(this.$get()).String(); };
	Mat4.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, col, m, v, x, x$1, x$2, x$3;
		v = $clone(v, Vec4);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		(x = ($imul(col, 4)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 4)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = ($imul(col, 4)) + 2 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
		(x$3 = ($imul(col, 4)) + 3 >> 0, m.nilCheck, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3] = _tmp$3));
	};
	$ptrType(Mat4).prototype.SetCol = function(col, v) { return (new Mat4(this.$get())).SetCol(col, v); };
	Mat4.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, m, row, v, x, x$1, x$2, x$3;
		v = $clone(v, Vec4);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 4 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = row + 8 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
		(x$3 = row + 12 >> 0, m.nilCheck, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3] = _tmp$3));
	};
	$ptrType(Mat4).prototype.SetRow = function(row, v) { return (new Mat4(this.$get())).SetRow(row, v); };
	Mat4.prototype.Diag = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat32, [m[0], m[5], m[10], m[15]]);
	};
	$ptrType(Mat4).prototype.Diag = function() { return new Mat4(this.$get()).Diag(); };
	Ident4 = function() {
		var $ptr;
		return $toNativeArray($kindFloat32, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
	};
	$pkg.Ident4 = Ident4;
	Mat4FromCols = function(col0, col1, col2, col3) {
		var $ptr, col0, col1, col2, col3;
		col3 = $clone(col3, Vec4);
		col2 = $clone(col2, Vec4);
		col1 = $clone(col1, Vec4);
		col0 = $clone(col0, Vec4);
		return $toNativeArray($kindFloat32, [col0[0], col0[1], col0[2], col0[3], col1[0], col1[1], col1[2], col1[3], col2[0], col2[1], col2[2], col2[3], col3[0], col3[1], col3[2], col3[3]]);
	};
	$pkg.Mat4FromCols = Mat4FromCols;
	Mat4.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat32, [$fround(m1[0] + m2[0]), $fround(m1[1] + m2[1]), $fround(m1[2] + m2[2]), $fround(m1[3] + m2[3]), $fround(m1[4] + m2[4]), $fround(m1[5] + m2[5]), $fround(m1[6] + m2[6]), $fround(m1[7] + m2[7]), $fround(m1[8] + m2[8]), $fround(m1[9] + m2[9]), $fround(m1[10] + m2[10]), $fround(m1[11] + m2[11]), $fround(m1[12] + m2[12]), $fround(m1[13] + m2[13]), $fround(m1[14] + m2[14]), $fround(m1[15] + m2[15])]);
	};
	$ptrType(Mat4).prototype.Add = function(m2) { return new Mat4(this.$get()).Add(m2); };
	Mat4.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat32, [$fround(m1[0] - m2[0]), $fround(m1[1] - m2[1]), $fround(m1[2] - m2[2]), $fround(m1[3] - m2[3]), $fround(m1[4] - m2[4]), $fround(m1[5] - m2[5]), $fround(m1[6] - m2[6]), $fround(m1[7] - m2[7]), $fround(m1[8] - m2[8]), $fround(m1[9] - m2[9]), $fround(m1[10] - m2[10]), $fround(m1[11] - m2[11]), $fround(m1[12] - m2[12]), $fround(m1[13] - m2[13]), $fround(m1[14] - m2[14]), $fround(m1[15] - m2[15])]);
	};
	$ptrType(Mat4).prototype.Sub = function(m2) { return new Mat4(this.$get()).Sub(m2); };
	Mat4.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat32, [$fround(m1[0] * c), $fround(m1[1] * c), $fround(m1[2] * c), $fround(m1[3] * c), $fround(m1[4] * c), $fround(m1[5] * c), $fround(m1[6] * c), $fround(m1[7] * c), $fround(m1[8] * c), $fround(m1[9] * c), $fround(m1[10] * c), $fround(m1[11] * c), $fround(m1[12] * c), $fround(m1[13] * c), $fround(m1[14] * c), $fround(m1[15] * c)]);
	};
	$ptrType(Mat4).prototype.Mul = function(c) { return new Mat4(this.$get()).Mul(c); };
	Mat4.prototype.Mul4x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec4);
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat32, [$fround($fround($fround($fround(m1[0] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[8] * m2[2])) + $fround(m1[12] * m2[3])), $fround($fround($fround($fround(m1[1] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[9] * m2[2])) + $fround(m1[13] * m2[3])), $fround($fround($fround($fround(m1[2] * m2[0]) + $fround(m1[6] * m2[1])) + $fround(m1[10] * m2[2])) + $fround(m1[14] * m2[3])), $fround($fround($fround($fround(m1[3] * m2[0]) + $fround(m1[7] * m2[1])) + $fround(m1[11] * m2[2])) + $fround(m1[15] * m2[3]))]);
	};
	$ptrType(Mat4).prototype.Mul4x1 = function(m2) { return new Mat4(this.$get()).Mul4x1(m2); };
	Mat4.prototype.Mul4x2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat32, [$fround($fround($fround($fround(m1[0] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[8] * m2[2])) + $fround(m1[12] * m2[3])), $fround($fround($fround($fround(m1[1] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[9] * m2[2])) + $fround(m1[13] * m2[3])), $fround($fround($fround($fround(m1[2] * m2[0]) + $fround(m1[6] * m2[1])) + $fround(m1[10] * m2[2])) + $fround(m1[14] * m2[3])), $fround($fround($fround($fround(m1[3] * m2[0]) + $fround(m1[7] * m2[1])) + $fround(m1[11] * m2[2])) + $fround(m1[15] * m2[3])), $fround($fround($fround($fround(m1[0] * m2[4]) + $fround(m1[4] * m2[5])) + $fround(m1[8] * m2[6])) + $fround(m1[12] * m2[7])), $fround($fround($fround($fround(m1[1] * m2[4]) + $fround(m1[5] * m2[5])) + $fround(m1[9] * m2[6])) + $fround(m1[13] * m2[7])), $fround($fround($fround($fround(m1[2] * m2[4]) + $fround(m1[6] * m2[5])) + $fround(m1[10] * m2[6])) + $fround(m1[14] * m2[7])), $fround($fround($fround($fround(m1[3] * m2[4]) + $fround(m1[7] * m2[5])) + $fround(m1[11] * m2[6])) + $fround(m1[15] * m2[7]))]);
	};
	$ptrType(Mat4).prototype.Mul4x2 = function(m2) { return new Mat4(this.$get()).Mul4x2(m2); };
	Mat4.prototype.Mul4x3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat32, [$fround($fround($fround($fround(m1[0] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[8] * m2[2])) + $fround(m1[12] * m2[3])), $fround($fround($fround($fround(m1[1] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[9] * m2[2])) + $fround(m1[13] * m2[3])), $fround($fround($fround($fround(m1[2] * m2[0]) + $fround(m1[6] * m2[1])) + $fround(m1[10] * m2[2])) + $fround(m1[14] * m2[3])), $fround($fround($fround($fround(m1[3] * m2[0]) + $fround(m1[7] * m2[1])) + $fround(m1[11] * m2[2])) + $fround(m1[15] * m2[3])), $fround($fround($fround($fround(m1[0] * m2[4]) + $fround(m1[4] * m2[5])) + $fround(m1[8] * m2[6])) + $fround(m1[12] * m2[7])), $fround($fround($fround($fround(m1[1] * m2[4]) + $fround(m1[5] * m2[5])) + $fround(m1[9] * m2[6])) + $fround(m1[13] * m2[7])), $fround($fround($fround($fround(m1[2] * m2[4]) + $fround(m1[6] * m2[5])) + $fround(m1[10] * m2[6])) + $fround(m1[14] * m2[7])), $fround($fround($fround($fround(m1[3] * m2[4]) + $fround(m1[7] * m2[5])) + $fround(m1[11] * m2[6])) + $fround(m1[15] * m2[7])), $fround($fround($fround($fround(m1[0] * m2[8]) + $fround(m1[4] * m2[9])) + $fround(m1[8] * m2[10])) + $fround(m1[12] * m2[11])), $fround($fround($fround($fround(m1[1] * m2[8]) + $fround(m1[5] * m2[9])) + $fround(m1[9] * m2[10])) + $fround(m1[13] * m2[11])), $fround($fround($fround($fround(m1[2] * m2[8]) + $fround(m1[6] * m2[9])) + $fround(m1[10] * m2[10])) + $fround(m1[14] * m2[11])), $fround($fround($fround($fround(m1[3] * m2[8]) + $fround(m1[7] * m2[9])) + $fround(m1[11] * m2[10])) + $fround(m1[15] * m2[11]))]);
	};
	$ptrType(Mat4).prototype.Mul4x3 = function(m2) { return new Mat4(this.$get()).Mul4x3(m2); };
	Mat4.prototype.Mul4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat32, [$fround($fround($fround($fround(m1[0] * m2[0]) + $fround(m1[4] * m2[1])) + $fround(m1[8] * m2[2])) + $fround(m1[12] * m2[3])), $fround($fround($fround($fround(m1[1] * m2[0]) + $fround(m1[5] * m2[1])) + $fround(m1[9] * m2[2])) + $fround(m1[13] * m2[3])), $fround($fround($fround($fround(m1[2] * m2[0]) + $fround(m1[6] * m2[1])) + $fround(m1[10] * m2[2])) + $fround(m1[14] * m2[3])), $fround($fround($fround($fround(m1[3] * m2[0]) + $fround(m1[7] * m2[1])) + $fround(m1[11] * m2[2])) + $fround(m1[15] * m2[3])), $fround($fround($fround($fround(m1[0] * m2[4]) + $fround(m1[4] * m2[5])) + $fround(m1[8] * m2[6])) + $fround(m1[12] * m2[7])), $fround($fround($fround($fround(m1[1] * m2[4]) + $fround(m1[5] * m2[5])) + $fround(m1[9] * m2[6])) + $fround(m1[13] * m2[7])), $fround($fround($fround($fround(m1[2] * m2[4]) + $fround(m1[6] * m2[5])) + $fround(m1[10] * m2[6])) + $fround(m1[14] * m2[7])), $fround($fround($fround($fround(m1[3] * m2[4]) + $fround(m1[7] * m2[5])) + $fround(m1[11] * m2[6])) + $fround(m1[15] * m2[7])), $fround($fround($fround($fround(m1[0] * m2[8]) + $fround(m1[4] * m2[9])) + $fround(m1[8] * m2[10])) + $fround(m1[12] * m2[11])), $fround($fround($fround($fround(m1[1] * m2[8]) + $fround(m1[5] * m2[9])) + $fround(m1[9] * m2[10])) + $fround(m1[13] * m2[11])), $fround($fround($fround($fround(m1[2] * m2[8]) + $fround(m1[6] * m2[9])) + $fround(m1[10] * m2[10])) + $fround(m1[14] * m2[11])), $fround($fround($fround($fround(m1[3] * m2[8]) + $fround(m1[7] * m2[9])) + $fround(m1[11] * m2[10])) + $fround(m1[15] * m2[11])), $fround($fround($fround($fround(m1[0] * m2[12]) + $fround(m1[4] * m2[13])) + $fround(m1[8] * m2[14])) + $fround(m1[12] * m2[15])), $fround($fround($fround($fround(m1[1] * m2[12]) + $fround(m1[5] * m2[13])) + $fround(m1[9] * m2[14])) + $fround(m1[13] * m2[15])), $fround($fround($fround($fround(m1[2] * m2[12]) + $fround(m1[6] * m2[13])) + $fround(m1[10] * m2[14])) + $fround(m1[14] * m2[15])), $fround($fround($fround($fround(m1[3] * m2[12]) + $fround(m1[7] * m2[13])) + $fround(m1[11] * m2[14])) + $fround(m1[15] * m2[15]))]);
	};
	$ptrType(Mat4).prototype.Mul4 = function(m2) { return new Mat4(this.$get()).Mul4(m2); };
	Mat4.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat32, [m1[0], m1[4], m1[8], m1[12], m1[1], m1[5], m1[9], m1[13], m1[2], m1[6], m1[10], m1[14], m1[3], m1[7], m1[11], m1[15]]);
	};
	$ptrType(Mat4).prototype.Transpose = function() { return new Mat4(this.$get()).Transpose(); };
	Mat4.prototype.Det = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat4);
		return $fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround($fround(m[0] * m[5]) * m[10]) * m[15]) - $fround($fround($fround(m[0] * m[5]) * m[11]) * m[14])) - $fround($fround($fround(m[0] * m[6]) * m[9]) * m[15])) + $fround($fround($fround(m[0] * m[6]) * m[11]) * m[13])) + $fround($fround($fround(m[0] * m[7]) * m[9]) * m[14])) - $fround($fround($fround(m[0] * m[7]) * m[10]) * m[13])) - $fround($fround($fround(m[1] * m[4]) * m[10]) * m[15])) + $fround($fround($fround(m[1] * m[4]) * m[11]) * m[14])) + $fround($fround($fround(m[1] * m[6]) * m[8]) * m[15])) - $fround($fround($fround(m[1] * m[6]) * m[11]) * m[12])) - $fround($fround($fround(m[1] * m[7]) * m[8]) * m[14])) + $fround($fround($fround(m[1] * m[7]) * m[10]) * m[12])) + $fround($fround($fround(m[2] * m[4]) * m[9]) * m[15])) - $fround($fround($fround(m[2] * m[4]) * m[11]) * m[13])) - $fround($fround($fround(m[2] * m[5]) * m[8]) * m[15])) + $fround($fround($fround(m[2] * m[5]) * m[11]) * m[12])) + $fround($fround($fround(m[2] * m[7]) * m[8]) * m[13])) - $fround($fround($fround(m[2] * m[7]) * m[9]) * m[12])) - $fround($fround($fround(m[3] * m[4]) * m[9]) * m[14])) + $fround($fround($fround(m[3] * m[4]) * m[10]) * m[13])) + $fround($fround($fround(m[3] * m[5]) * m[8]) * m[14])) - $fround($fround($fround(m[3] * m[5]) * m[10]) * m[12])) - $fround($fround($fround(m[3] * m[6]) * m[8]) * m[13])) + $fround($fround($fround(m[3] * m[6]) * m[9]) * m[12]));
	};
	$ptrType(Mat4).prototype.Det = function() { return new Mat4(this.$get()).Det(); };
	Mat4.prototype.Inv = function() {
		var $ptr, det, m, retMat;
		m = $clone(this.$val, Mat4);
		det = new Mat4(m).Det();
		if (FloatEqual(det, 0)) {
			return arrayType$6.zero();
		}
		retMat = $toNativeArray($kindFloat32, [$fround($fround($fround($fround($fround($fround($fround(-m[7] * m[10]) * m[13]) + $fround($fround(m[6] * m[11]) * m[13])) + $fround($fround(m[7] * m[9]) * m[14])) - $fround($fround(m[5] * m[11]) * m[14])) - $fround($fround(m[6] * m[9]) * m[15])) + $fround($fround(m[5] * m[10]) * m[15])), $fround($fround($fround($fround($fround($fround($fround(m[3] * m[10]) * m[13]) - $fround($fround(m[2] * m[11]) * m[13])) - $fround($fround(m[3] * m[9]) * m[14])) + $fround($fround(m[1] * m[11]) * m[14])) + $fround($fround(m[2] * m[9]) * m[15])) - $fround($fround(m[1] * m[10]) * m[15])), $fround($fround($fround($fround($fround($fround($fround(-m[3] * m[6]) * m[13]) + $fround($fround(m[2] * m[7]) * m[13])) + $fround($fround(m[3] * m[5]) * m[14])) - $fround($fround(m[1] * m[7]) * m[14])) - $fround($fround(m[2] * m[5]) * m[15])) + $fround($fround(m[1] * m[6]) * m[15])), $fround($fround($fround($fround($fround($fround($fround(m[3] * m[6]) * m[9]) - $fround($fround(m[2] * m[7]) * m[9])) - $fround($fround(m[3] * m[5]) * m[10])) + $fround($fround(m[1] * m[7]) * m[10])) + $fround($fround(m[2] * m[5]) * m[11])) - $fround($fround(m[1] * m[6]) * m[11])), $fround($fround($fround($fround($fround($fround($fround(m[7] * m[10]) * m[12]) - $fround($fround(m[6] * m[11]) * m[12])) - $fround($fround(m[7] * m[8]) * m[14])) + $fround($fround(m[4] * m[11]) * m[14])) + $fround($fround(m[6] * m[8]) * m[15])) - $fround($fround(m[4] * m[10]) * m[15])), $fround($fround($fround($fround($fround($fround($fround(-m[3] * m[10]) * m[12]) + $fround($fround(m[2] * m[11]) * m[12])) + $fround($fround(m[3] * m[8]) * m[14])) - $fround($fround(m[0] * m[11]) * m[14])) - $fround($fround(m[2] * m[8]) * m[15])) + $fround($fround(m[0] * m[10]) * m[15])), $fround($fround($fround($fround($fround($fround($fround(m[3] * m[6]) * m[12]) - $fround($fround(m[2] * m[7]) * m[12])) - $fround($fround(m[3] * m[4]) * m[14])) + $fround($fround(m[0] * m[7]) * m[14])) + $fround($fround(m[2] * m[4]) * m[15])) - $fround($fround(m[0] * m[6]) * m[15])), $fround($fround($fround($fround($fround($fround($fround(-m[3] * m[6]) * m[8]) + $fround($fround(m[2] * m[7]) * m[8])) + $fround($fround(m[3] * m[4]) * m[10])) - $fround($fround(m[0] * m[7]) * m[10])) - $fround($fround(m[2] * m[4]) * m[11])) + $fround($fround(m[0] * m[6]) * m[11])), $fround($fround($fround($fround($fround($fround($fround(-m[7] * m[9]) * m[12]) + $fround($fround(m[5] * m[11]) * m[12])) + $fround($fround(m[7] * m[8]) * m[13])) - $fround($fround(m[4] * m[11]) * m[13])) - $fround($fround(m[5] * m[8]) * m[15])) + $fround($fround(m[4] * m[9]) * m[15])), $fround($fround($fround($fround($fround($fround($fround(m[3] * m[9]) * m[12]) - $fround($fround(m[1] * m[11]) * m[12])) - $fround($fround(m[3] * m[8]) * m[13])) + $fround($fround(m[0] * m[11]) * m[13])) + $fround($fround(m[1] * m[8]) * m[15])) - $fround($fround(m[0] * m[9]) * m[15])), $fround($fround($fround($fround($fround($fround($fround(-m[3] * m[5]) * m[12]) + $fround($fround(m[1] * m[7]) * m[12])) + $fround($fround(m[3] * m[4]) * m[13])) - $fround($fround(m[0] * m[7]) * m[13])) - $fround($fround(m[1] * m[4]) * m[15])) + $fround($fround(m[0] * m[5]) * m[15])), $fround($fround($fround($fround($fround($fround($fround(m[3] * m[5]) * m[8]) - $fround($fround(m[1] * m[7]) * m[8])) - $fround($fround(m[3] * m[4]) * m[9])) + $fround($fround(m[0] * m[7]) * m[9])) + $fround($fround(m[1] * m[4]) * m[11])) - $fround($fround(m[0] * m[5]) * m[11])), $fround($fround($fround($fround($fround($fround($fround(m[6] * m[9]) * m[12]) - $fround($fround(m[5] * m[10]) * m[12])) - $fround($fround(m[6] * m[8]) * m[13])) + $fround($fround(m[4] * m[10]) * m[13])) + $fround($fround(m[5] * m[8]) * m[14])) - $fround($fround(m[4] * m[9]) * m[14])), $fround($fround($fround($fround($fround($fround($fround(-m[2] * m[9]) * m[12]) + $fround($fround(m[1] * m[10]) * m[12])) + $fround($fround(m[2] * m[8]) * m[13])) - $fround($fround(m[0] * m[10]) * m[13])) - $fround($fround(m[1] * m[8]) * m[14])) + $fround($fround(m[0] * m[9]) * m[14])), $fround($fround($fround($fround($fround($fround($fround(m[2] * m[5]) * m[12]) - $fround($fround(m[1] * m[6]) * m[12])) - $fround($fround(m[2] * m[4]) * m[13])) + $fround($fround(m[0] * m[6]) * m[13])) + $fround($fround(m[1] * m[4]) * m[14])) - $fround($fround(m[0] * m[5]) * m[14])), $fround($fround($fround($fround($fround($fround($fround(-m[2] * m[5]) * m[8]) + $fround($fround(m[1] * m[6]) * m[8])) + $fround($fround(m[2] * m[4]) * m[9])) - $fround($fround(m[0] * m[6]) * m[9])) - $fround($fround(m[1] * m[4]) * m[10])) + $fround($fround(m[0] * m[5]) * m[10]))]);
		return new Mat4(retMat).Mul($fround(1 / det));
	};
	$ptrType(Mat4).prototype.Inv = function() { return new Mat4(this.$get()).Inv(); };
	Mat4.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat4);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 16)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat4).prototype.ApproxEqual = function(m2) { return new Mat4(this.$get()).ApproxEqual(m2); };
	Mat4.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat4);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 16)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat4).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat4(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat4.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat4);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 16)) { break; } */ if(!(_i < 16)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat4.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat4).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat4(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat4.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat4);
		return (x = ($imul(col, 4)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat4).prototype.At = function(row, col) { return new Mat4(this.$get()).At(row, col); };
	Mat4.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 4)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat4).prototype.Set = function(row, col, value) { return (new Mat4(this.$get())).Set(row, col, value); };
	Mat4.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat4);
		return ($imul(col, 4)) + row >> 0;
	};
	$ptrType(Mat4).prototype.Index = function(row, col) { return new Mat4(this.$get()).Index(row, col); };
	Mat4.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1, x$2, x$3;
		m = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat32, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 4 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = row + 8 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2])), (x$3 = row + 12 >> 0, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3]))]);
	};
	$ptrType(Mat4).prototype.Row = function(row) { return new Mat4(this.$get()).Row(row); };
	Mat4.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, m, row0, row1, row2, row3;
		row0 = arrayType.zero();
		row1 = arrayType.zero();
		row2 = arrayType.zero();
		row3 = arrayType.zero();
		m = $clone(this.$val, Mat4);
		_tmp = $clone(new Mat4(m).Row(0), Vec4);
		_tmp$1 = $clone(new Mat4(m).Row(1), Vec4);
		_tmp$2 = $clone(new Mat4(m).Row(2), Vec4);
		_tmp$3 = $clone(new Mat4(m).Row(3), Vec4);
		Vec4.copy(row0, _tmp);
		Vec4.copy(row1, _tmp$1);
		Vec4.copy(row2, _tmp$2);
		Vec4.copy(row3, _tmp$3);
		return [row0, row1, row2, row3];
	};
	$ptrType(Mat4).prototype.Rows = function() { return new Mat4(this.$get()).Rows(); };
	Mat4.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1, x$2, x$3;
		m = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat32, [(x = ($imul(col, 4)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 4)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = ($imul(col, 4)) + 2 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2])), (x$3 = ($imul(col, 4)) + 3 >> 0, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3]))]);
	};
	$ptrType(Mat4).prototype.Col = function(col) { return new Mat4(this.$get()).Col(col); };
	Mat4.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, col0, col1, col2, col3, m;
		col0 = arrayType.zero();
		col1 = arrayType.zero();
		col2 = arrayType.zero();
		col3 = arrayType.zero();
		m = $clone(this.$val, Mat4);
		_tmp = $clone(new Mat4(m).Col(0), Vec4);
		_tmp$1 = $clone(new Mat4(m).Col(1), Vec4);
		_tmp$2 = $clone(new Mat4(m).Col(2), Vec4);
		_tmp$3 = $clone(new Mat4(m).Col(3), Vec4);
		Vec4.copy(col0, _tmp);
		Vec4.copy(col1, _tmp$1);
		Vec4.copy(col2, _tmp$2);
		Vec4.copy(col3, _tmp$3);
		return [col0, col1, col2, col3];
	};
	$ptrType(Mat4).prototype.Cols = function() { return new Mat4(this.$get()).Cols(); };
	Mat4.prototype.Trace = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat4);
		return $fround($fround($fround(m[0] + m[5]) + m[10]) + m[15]);
	};
	$ptrType(Mat4).prototype.Trace = function() { return new Mat4(this.$get()).Trace(); };
	Mat4.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat32, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5]), Abs(m[6]), Abs(m[7]), Abs(m[8]), Abs(m[9]), Abs(m[10]), Abs(m[11]), Abs(m[12]), Abs(m[13]), Abs(m[14]), Abs(m[15])]);
	};
	$ptrType(Mat4).prototype.Abs = function() { return new Mat4(this.$get()).Abs(); };
	Mat4.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat4);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 4)) { break; } */ if(!(i < 4)) { $s = 2; continue; }
			_ref = new Mat4(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 4)) { break; } */ if(!(_i < 4)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float32(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat4.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat4).prototype.String = function() { return new Mat4(this.$get()).String(); };
	Ortho = function(left, right, bottom, top, near, far) {
		var $ptr, _tmp, _tmp$1, _tmp$2, bottom, far, fmn, left, near, right, rml, tmb, top;
		_tmp = $fround(right - left);
		_tmp$1 = $fround(top - bottom);
		_tmp$2 = $fround(far - near);
		rml = _tmp;
		tmb = _tmp$1;
		fmn = _tmp$2;
		return $toNativeArray($kindFloat32, [$fround(2 / rml), 0, 0, 0, 0, $fround(2 / tmb), 0, 0, 0, 0, $fround(-2 / fmn), 0, $fround(-($fround(right + left)) / rml), $fround(-($fround(top + bottom)) / tmb), $fround(-($fround(far + near)) / fmn), 1]);
	};
	$pkg.Ortho = Ortho;
	Ortho2D = function(left, right, bottom, top) {
		var $ptr, bottom, left, right, top;
		return Ortho(left, right, bottom, top, -1, 1);
	};
	$pkg.Ortho2D = Ortho2D;
	Translate3D = function(Tx, Ty, Tz) {
		var $ptr, Tx, Ty, Tz;
		return $toNativeArray($kindFloat32, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, Tx, Ty, Tz, 1]);
	};
	$pkg.Translate3D = Translate3D;
	HomogRotate3DZ = function(angle) {
		var $ptr, _tmp, _tmp$1, angle, cos, sin;
		_tmp = $fround(math.Sin(angle));
		_tmp$1 = $fround(math.Cos(angle));
		sin = _tmp;
		cos = _tmp$1;
		return $toNativeArray($kindFloat32, [cos, sin, 0, 0, -sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
	};
	$pkg.HomogRotate3DZ = HomogRotate3DZ;
	Scale3D = function(scaleX, scaleY, scaleZ) {
		var $ptr, scaleX, scaleY, scaleZ;
		return $toNativeArray($kindFloat32, [scaleX, 0, 0, 0, 0, scaleY, 0, 0, 0, 0, scaleZ, 0, 0, 0, 0, 1]);
	};
	$pkg.Scale3D = Scale3D;
	Abs = function(a) {
		var $ptr, a;
		if (a < 0) {
			return -a;
		} else if (a === 0) {
			return 0;
		}
		return a;
	};
	$pkg.Abs = Abs;
	FloatEqual = function(a, b) {
		var $ptr, a, b;
		return FloatEqualThreshold(a, b, $pkg.Epsilon);
	};
	$pkg.FloatEqual = FloatEqual;
	FloatEqualThreshold = function(a, b, epsilon) {
		var $ptr, a, b, diff, epsilon;
		if (a === b) {
			return true;
		}
		diff = Abs($fround(a - b));
		if (($fround(a * b) === 0) || diff < $pkg.MinNormal) {
			return diff < $fround(epsilon * epsilon);
		}
		return $fround(diff / ($fround(Abs(a) + Abs(b)))) < epsilon;
	};
	$pkg.FloatEqualThreshold = FloatEqualThreshold;
	Vec2.prototype.Vec3 = function(z) {
		var $ptr, v, z;
		v = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat32, [v[0], v[1], z]);
	};
	$ptrType(Vec2).prototype.Vec3 = function(z) { return new Vec2(this.$get()).Vec3(z); };
	Vec2.prototype.Vec4 = function(z, w) {
		var $ptr, v, w, z;
		v = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat32, [v[0], v[1], z, w]);
	};
	$ptrType(Vec2).prototype.Vec4 = function(z, w) { return new Vec2(this.$get()).Vec4(z, w); };
	Vec3.prototype.Vec2 = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat32, [v[0], v[1]]);
	};
	$ptrType(Vec3).prototype.Vec2 = function() { return new Vec3(this.$get()).Vec2(); };
	Vec3.prototype.Vec4 = function(w) {
		var $ptr, v, w;
		v = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat32, [v[0], v[1], v[2], w]);
	};
	$ptrType(Vec3).prototype.Vec4 = function(w) { return new Vec3(this.$get()).Vec4(w); };
	Vec4.prototype.Vec2 = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat32, [v[0], v[1]]);
	};
	$ptrType(Vec4).prototype.Vec2 = function() { return new Vec4(this.$get()).Vec2(); };
	Vec4.prototype.Vec3 = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat32, [v[0], v[1], v[2]]);
	};
	$ptrType(Vec4).prototype.Vec3 = function() { return new Vec4(this.$get()).Vec3(); };
	Vec2.prototype.Elem = function() {
		var $ptr, _tmp, _tmp$1, v, x, y;
		x = 0;
		y = 0;
		v = $clone(this.$val, Vec2);
		_tmp = v[0];
		_tmp$1 = v[1];
		x = _tmp;
		y = _tmp$1;
		return [x, y];
	};
	$ptrType(Vec2).prototype.Elem = function() { return new Vec2(this.$get()).Elem(); };
	Vec3.prototype.Elem = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, v, x, y, z;
		x = 0;
		y = 0;
		z = 0;
		v = $clone(this.$val, Vec3);
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		x = _tmp;
		y = _tmp$1;
		z = _tmp$2;
		return [x, y, z];
	};
	$ptrType(Vec3).prototype.Elem = function() { return new Vec3(this.$get()).Elem(); };
	Vec4.prototype.Elem = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, v, w, x, y, z;
		x = 0;
		y = 0;
		z = 0;
		w = 0;
		v = $clone(this.$val, Vec4);
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		x = _tmp;
		y = _tmp$1;
		z = _tmp$2;
		w = _tmp$3;
		return [x, y, z, w];
	};
	$ptrType(Vec4).prototype.Elem = function() { return new Vec4(this.$get()).Elem(); };
	Vec3.prototype.Cross = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat32, [$fround($fround(v1[1] * v2[2]) - $fround(v1[2] * v2[1])), $fround($fround(v1[2] * v2[0]) - $fround(v1[0] * v2[2])), $fround($fround(v1[0] * v2[1]) - $fround(v1[1] * v2[0]))]);
	};
	$ptrType(Vec3).prototype.Cross = function(v2) { return new Vec3(this.$get()).Cross(v2); };
	Vec2.prototype.Add = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat32, [$fround(v1[0] + v2[0]), $fround(v1[1] + v2[1])]);
	};
	$ptrType(Vec2).prototype.Add = function(v2) { return new Vec2(this.$get()).Add(v2); };
	Vec2.prototype.Sub = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat32, [$fround(v1[0] - v2[0]), $fround(v1[1] - v2[1])]);
	};
	$ptrType(Vec2).prototype.Sub = function(v2) { return new Vec2(this.$get()).Sub(v2); };
	Vec2.prototype.Mul = function(c) {
		var $ptr, c, v1;
		v1 = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat32, [$fround(v1[0] * c), $fround(v1[1] * c)]);
	};
	$ptrType(Vec2).prototype.Mul = function(c) { return new Vec2(this.$get()).Mul(c); };
	Vec2.prototype.Dot = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		return $fround($fround(v1[0] * v2[0]) + $fround(v1[1] * v2[1]));
	};
	$ptrType(Vec2).prototype.Dot = function(v2) { return new Vec2(this.$get()).Dot(v2); };
	Vec2.prototype.Len = function() {
		var $ptr, v1;
		v1 = $clone(this.$val, Vec2);
		return $fround(math.Hypot(v1[0], v1[1]));
	};
	$ptrType(Vec2).prototype.Len = function() { return new Vec2(this.$get()).Len(); };
	Vec2.prototype.Normalize = function() {
		var $ptr, l, v1;
		v1 = $clone(this.$val, Vec2);
		l = $fround(1 / new Vec2(v1).Len());
		return $toNativeArray($kindFloat32, [$fround(v1[0] * l), $fround(v1[1] * l)]);
	};
	$ptrType(Vec2).prototype.Normalize = function() { return new Vec2(this.$get()).Normalize(); };
	Vec2.prototype.ApproxEqual = function(v2) {
		var $ptr, _i, _ref, i, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		_ref = v1;
		_i = 0;
		while (true) {
			if (!(_i < 2)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Vec2).prototype.ApproxEqual = function(v2) { return new Vec2(this.$get()).ApproxEqual(v2); };
	Vec2.prototype.ApproxEqualThreshold = function(v2, threshold) {
		var $ptr, _i, _ref, i, threshold, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		_ref = v1;
		_i = 0;
		while (true) {
			if (!(_i < 2)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Vec2).prototype.ApproxEqualThreshold = function(v2, threshold) { return new Vec2(this.$get()).ApproxEqualThreshold(v2, threshold); };
	Vec2.prototype.ApproxFuncEqual = function(v2, eq) {
		var $ptr, _i, _r, _ref, eq, i, v1, v2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; v1 = $f.v1; v2 = $f.v2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		_ref = v1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 2)) { break; } */ if(!(_i < 2)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Vec2.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.v1 = v1; $f.v2 = v2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Vec2).prototype.ApproxFuncEqual = function(v2, eq) { return new Vec2(this.$get()).ApproxFuncEqual(v2, eq); };
	Vec2.prototype.X = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec2);
		return v[0];
	};
	$ptrType(Vec2).prototype.X = function() { return new Vec2(this.$get()).X(); };
	Vec2.prototype.Y = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec2);
		return v[1];
	};
	$ptrType(Vec2).prototype.Y = function() { return new Vec2(this.$get()).Y(); };
	Vec2.prototype.OuterProd2 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat32, [$fround(v1[0] * v2[0]), $fround(v1[1] * v2[0]), $fround(v1[0] * v2[1]), $fround(v1[1] * v2[1])]);
	};
	$ptrType(Vec2).prototype.OuterProd2 = function(v2) { return new Vec2(this.$get()).OuterProd2(v2); };
	Vec2.prototype.OuterProd3 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat32, [$fround(v1[0] * v2[0]), $fround(v1[1] * v2[0]), $fround(v1[0] * v2[1]), $fround(v1[1] * v2[1]), $fround(v1[0] * v2[2]), $fround(v1[1] * v2[2])]);
	};
	$ptrType(Vec2).prototype.OuterProd3 = function(v2) { return new Vec2(this.$get()).OuterProd3(v2); };
	Vec2.prototype.OuterProd4 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat32, [$fround(v1[0] * v2[0]), $fround(v1[1] * v2[0]), $fround(v1[0] * v2[1]), $fround(v1[1] * v2[1]), $fround(v1[0] * v2[2]), $fround(v1[1] * v2[2]), $fround(v1[0] * v2[3]), $fround(v1[1] * v2[3])]);
	};
	$ptrType(Vec2).prototype.OuterProd4 = function(v2) { return new Vec2(this.$get()).OuterProd4(v2); };
	Vec3.prototype.Add = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat32, [$fround(v1[0] + v2[0]), $fround(v1[1] + v2[1]), $fround(v1[2] + v2[2])]);
	};
	$ptrType(Vec3).prototype.Add = function(v2) { return new Vec3(this.$get()).Add(v2); };
	Vec3.prototype.Sub = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat32, [$fround(v1[0] - v2[0]), $fround(v1[1] - v2[1]), $fround(v1[2] - v2[2])]);
	};
	$ptrType(Vec3).prototype.Sub = function(v2) { return new Vec3(this.$get()).Sub(v2); };
	Vec3.prototype.Mul = function(c) {
		var $ptr, c, v1;
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat32, [$fround(v1[0] * c), $fround(v1[1] * c), $fround(v1[2] * c)]);
	};
	$ptrType(Vec3).prototype.Mul = function(c) { return new Vec3(this.$get()).Mul(c); };
	Vec3.prototype.Dot = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		return $fround($fround($fround(v1[0] * v2[0]) + $fround(v1[1] * v2[1])) + $fround(v1[2] * v2[2]));
	};
	$ptrType(Vec3).prototype.Dot = function(v2) { return new Vec3(this.$get()).Dot(v2); };
	Vec3.prototype.Len = function() {
		var $ptr, v1;
		v1 = $clone(this.$val, Vec3);
		return $fround(math.Sqrt($fround($fround($fround(v1[0] * v1[0]) + $fround(v1[1] * v1[1])) + $fround(v1[2] * v1[2]))));
	};
	$ptrType(Vec3).prototype.Len = function() { return new Vec3(this.$get()).Len(); };
	Vec3.prototype.Normalize = function() {
		var $ptr, l, v1;
		v1 = $clone(this.$val, Vec3);
		l = $fround(1 / new Vec3(v1).Len());
		return $toNativeArray($kindFloat32, [$fround(v1[0] * l), $fround(v1[1] * l), $fround(v1[2] * l)]);
	};
	$ptrType(Vec3).prototype.Normalize = function() { return new Vec3(this.$get()).Normalize(); };
	Vec3.prototype.ApproxEqual = function(v2) {
		var $ptr, _i, _ref, i, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		_ref = v1;
		_i = 0;
		while (true) {
			if (!(_i < 3)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Vec3).prototype.ApproxEqual = function(v2) { return new Vec3(this.$get()).ApproxEqual(v2); };
	Vec3.prototype.ApproxEqualThreshold = function(v2, threshold) {
		var $ptr, _i, _ref, i, threshold, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		_ref = v1;
		_i = 0;
		while (true) {
			if (!(_i < 3)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Vec3).prototype.ApproxEqualThreshold = function(v2, threshold) { return new Vec3(this.$get()).ApproxEqualThreshold(v2, threshold); };
	Vec3.prototype.ApproxFuncEqual = function(v2, eq) {
		var $ptr, _i, _r, _ref, eq, i, v1, v2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; v1 = $f.v1; v2 = $f.v2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		_ref = v1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 3)) { break; } */ if(!(_i < 3)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Vec3.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.v1 = v1; $f.v2 = v2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Vec3).prototype.ApproxFuncEqual = function(v2, eq) { return new Vec3(this.$get()).ApproxFuncEqual(v2, eq); };
	Vec3.prototype.X = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec3);
		return v[0];
	};
	$ptrType(Vec3).prototype.X = function() { return new Vec3(this.$get()).X(); };
	Vec3.prototype.Y = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec3);
		return v[1];
	};
	$ptrType(Vec3).prototype.Y = function() { return new Vec3(this.$get()).Y(); };
	Vec3.prototype.Z = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec3);
		return v[2];
	};
	$ptrType(Vec3).prototype.Z = function() { return new Vec3(this.$get()).Z(); };
	Vec3.prototype.OuterProd2 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat32, [$fround(v1[0] * v2[0]), $fround(v1[1] * v2[0]), $fround(v1[2] * v2[0]), $fround(v1[0] * v2[1]), $fround(v1[1] * v2[1]), $fround(v1[2] * v2[1])]);
	};
	$ptrType(Vec3).prototype.OuterProd2 = function(v2) { return new Vec3(this.$get()).OuterProd2(v2); };
	Vec3.prototype.OuterProd3 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat32, [$fround(v1[0] * v2[0]), $fround(v1[1] * v2[0]), $fround(v1[2] * v2[0]), $fround(v1[0] * v2[1]), $fround(v1[1] * v2[1]), $fround(v1[2] * v2[1]), $fround(v1[0] * v2[2]), $fround(v1[1] * v2[2]), $fround(v1[2] * v2[2])]);
	};
	$ptrType(Vec3).prototype.OuterProd3 = function(v2) { return new Vec3(this.$get()).OuterProd3(v2); };
	Vec3.prototype.OuterProd4 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat32, [$fround(v1[0] * v2[0]), $fround(v1[1] * v2[0]), $fround(v1[2] * v2[0]), $fround(v1[0] * v2[1]), $fround(v1[1] * v2[1]), $fround(v1[2] * v2[1]), $fround(v1[0] * v2[2]), $fround(v1[1] * v2[2]), $fround(v1[2] * v2[2]), $fround(v1[0] * v2[3]), $fround(v1[1] * v2[3]), $fround(v1[2] * v2[3])]);
	};
	$ptrType(Vec3).prototype.OuterProd4 = function(v2) { return new Vec3(this.$get()).OuterProd4(v2); };
	Vec4.prototype.Add = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat32, [$fround(v1[0] + v2[0]), $fround(v1[1] + v2[1]), $fround(v1[2] + v2[2]), $fround(v1[3] + v2[3])]);
	};
	$ptrType(Vec4).prototype.Add = function(v2) { return new Vec4(this.$get()).Add(v2); };
	Vec4.prototype.Sub = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat32, [$fround(v1[0] - v2[0]), $fround(v1[1] - v2[1]), $fround(v1[2] - v2[2]), $fround(v1[3] - v2[3])]);
	};
	$ptrType(Vec4).prototype.Sub = function(v2) { return new Vec4(this.$get()).Sub(v2); };
	Vec4.prototype.Mul = function(c) {
		var $ptr, c, v1;
		v1 = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat32, [$fround(v1[0] * c), $fround(v1[1] * c), $fround(v1[2] * c), $fround(v1[3] * c)]);
	};
	$ptrType(Vec4).prototype.Mul = function(c) { return new Vec4(this.$get()).Mul(c); };
	Vec4.prototype.Dot = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		return $fround($fround($fround($fround(v1[0] * v2[0]) + $fround(v1[1] * v2[1])) + $fround(v1[2] * v2[2])) + $fround(v1[3] * v2[3]));
	};
	$ptrType(Vec4).prototype.Dot = function(v2) { return new Vec4(this.$get()).Dot(v2); };
	Vec4.prototype.Len = function() {
		var $ptr, v1;
		v1 = $clone(this.$val, Vec4);
		return $fround(math.Sqrt($fround($fround($fround($fround(v1[0] * v1[0]) + $fround(v1[1] * v1[1])) + $fround(v1[2] * v1[2])) + $fround(v1[3] * v1[3]))));
	};
	$ptrType(Vec4).prototype.Len = function() { return new Vec4(this.$get()).Len(); };
	Vec4.prototype.Normalize = function() {
		var $ptr, l, v1;
		v1 = $clone(this.$val, Vec4);
		l = $fround(1 / new Vec4(v1).Len());
		return $toNativeArray($kindFloat32, [$fround(v1[0] * l), $fround(v1[1] * l), $fround(v1[2] * l), $fround(v1[3] * l)]);
	};
	$ptrType(Vec4).prototype.Normalize = function() { return new Vec4(this.$get()).Normalize(); };
	Vec4.prototype.ApproxEqual = function(v2) {
		var $ptr, _i, _ref, i, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		_ref = v1;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Vec4).prototype.ApproxEqual = function(v2) { return new Vec4(this.$get()).ApproxEqual(v2); };
	Vec4.prototype.ApproxEqualThreshold = function(v2, threshold) {
		var $ptr, _i, _ref, i, threshold, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		_ref = v1;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Vec4).prototype.ApproxEqualThreshold = function(v2, threshold) { return new Vec4(this.$get()).ApproxEqualThreshold(v2, threshold); };
	Vec4.prototype.ApproxFuncEqual = function(v2, eq) {
		var $ptr, _i, _r, _ref, eq, i, v1, v2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; v1 = $f.v1; v2 = $f.v2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		_ref = v1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 4)) { break; } */ if(!(_i < 4)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Vec4.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.v1 = v1; $f.v2 = v2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Vec4).prototype.ApproxFuncEqual = function(v2, eq) { return new Vec4(this.$get()).ApproxFuncEqual(v2, eq); };
	Vec4.prototype.X = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec4);
		return v[0];
	};
	$ptrType(Vec4).prototype.X = function() { return new Vec4(this.$get()).X(); };
	Vec4.prototype.Y = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec4);
		return v[1];
	};
	$ptrType(Vec4).prototype.Y = function() { return new Vec4(this.$get()).Y(); };
	Vec4.prototype.Z = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec4);
		return v[2];
	};
	$ptrType(Vec4).prototype.Z = function() { return new Vec4(this.$get()).Z(); };
	Vec4.prototype.W = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec4);
		return v[3];
	};
	$ptrType(Vec4).prototype.W = function() { return new Vec4(this.$get()).W(); };
	Vec4.prototype.OuterProd2 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat32, [$fround(v1[0] * v2[0]), $fround(v1[1] * v2[0]), $fround(v1[2] * v2[0]), $fround(v1[3] * v2[0]), $fround(v1[0] * v2[1]), $fround(v1[1] * v2[1]), $fround(v1[2] * v2[1]), $fround(v1[3] * v2[1])]);
	};
	$ptrType(Vec4).prototype.OuterProd2 = function(v2) { return new Vec4(this.$get()).OuterProd2(v2); };
	Vec4.prototype.OuterProd3 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat32, [$fround(v1[0] * v2[0]), $fround(v1[1] * v2[0]), $fround(v1[2] * v2[0]), $fround(v1[3] * v2[0]), $fround(v1[0] * v2[1]), $fround(v1[1] * v2[1]), $fround(v1[2] * v2[1]), $fround(v1[3] * v2[1]), $fround(v1[0] * v2[2]), $fround(v1[1] * v2[2]), $fround(v1[2] * v2[2]), $fround(v1[3] * v2[2])]);
	};
	$ptrType(Vec4).prototype.OuterProd3 = function(v2) { return new Vec4(this.$get()).OuterProd3(v2); };
	Vec4.prototype.OuterProd4 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat32, [$fround(v1[0] * v2[0]), $fround(v1[1] * v2[0]), $fround(v1[2] * v2[0]), $fround(v1[3] * v2[0]), $fround(v1[0] * v2[1]), $fround(v1[1] * v2[1]), $fround(v1[2] * v2[1]), $fround(v1[3] * v2[1]), $fround(v1[0] * v2[2]), $fround(v1[1] * v2[2]), $fround(v1[2] * v2[2]), $fround(v1[3] * v2[2]), $fround(v1[0] * v2[3]), $fround(v1[1] * v2[3]), $fround(v1[2] * v2[3]), $fround(v1[3] * v2[3])]);
	};
	$ptrType(Vec4).prototype.OuterProd4 = function(v2) { return new Vec4(this.$get()).OuterProd4(v2); };
	Mat2.methods = [{prop: "Mat3", name: "Mat3", pkg: "", typ: $funcType([], [Mat3], false)}, {prop: "Mat4", name: "Mat4", pkg: "", typ: $funcType([], [Mat4], false)}, {prop: "Diag", name: "Diag", pkg: "", typ: $funcType([], [Vec2], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat2], [Mat2], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat2], [Mat2], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float32], [Mat2], false)}, {prop: "Mul2x1", name: "Mul2x1", pkg: "", typ: $funcType([Vec2], [Vec2], false)}, {prop: "Mul2", name: "Mul2", pkg: "", typ: $funcType([Mat2], [Mat2], false)}, {prop: "Mul2x3", name: "Mul2x3", pkg: "", typ: $funcType([Mat2x3], [Mat2x3], false)}, {prop: "Mul2x4", name: "Mul2x4", pkg: "", typ: $funcType([Mat2x4], [Mat2x4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat2], false)}, {prop: "Det", name: "Det", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Inv", name: "Inv", pkg: "", typ: $funcType([], [Mat2], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat2], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat2, $Float32], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat2, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float32], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec2], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec2, Vec2], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec2], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec2, Vec2], false)}, {prop: "Trace", name: "Trace", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec2], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec2], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float32], [], false)}];
	Mat2x3.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat2x3], [Mat2x3], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat2x3], [Mat2x3], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float32], [Mat2x3], false)}, {prop: "Mul3x1", name: "Mul3x1", pkg: "", typ: $funcType([Vec3], [Vec2], false)}, {prop: "Mul3x2", name: "Mul3x2", pkg: "", typ: $funcType([Mat3x2], [Mat2], false)}, {prop: "Mul3", name: "Mul3", pkg: "", typ: $funcType([Mat3], [Mat2x3], false)}, {prop: "Mul3x4", name: "Mul3x4", pkg: "", typ: $funcType([Mat3x4], [Mat2x4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat3x2], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat2x3], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat2x3, $Float32], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat2x3, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float32], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec3], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec3, Vec3], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec2], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec2, Vec2, Vec2], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat2x3], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec2], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec3], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float32], [], false)}];
	Mat2x4.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat2x4], [Mat2x4], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat2x4], [Mat2x4], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float32], [Mat2x4], false)}, {prop: "Mul4x1", name: "Mul4x1", pkg: "", typ: $funcType([Vec4], [Vec2], false)}, {prop: "Mul4x2", name: "Mul4x2", pkg: "", typ: $funcType([Mat4x2], [Mat2], false)}, {prop: "Mul4x3", name: "Mul4x3", pkg: "", typ: $funcType([Mat4x3], [Mat2x3], false)}, {prop: "Mul4", name: "Mul4", pkg: "", typ: $funcType([Mat4], [Mat2x4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat4x2], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat2x4], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat2x4, $Float32], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat2x4, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float32], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec4], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec4, Vec4], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec2], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec2, Vec2, Vec2, Vec2], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat2x4], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec2], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec4], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float32], [], false)}];
	Mat3x2.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat3x2], [Mat3x2], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat3x2], [Mat3x2], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float32], [Mat3x2], false)}, {prop: "Mul2x1", name: "Mul2x1", pkg: "", typ: $funcType([Vec2], [Vec3], false)}, {prop: "Mul2", name: "Mul2", pkg: "", typ: $funcType([Mat2], [Mat3x2], false)}, {prop: "Mul2x3", name: "Mul2x3", pkg: "", typ: $funcType([Mat2x3], [Mat3], false)}, {prop: "Mul2x4", name: "Mul2x4", pkg: "", typ: $funcType([Mat2x4], [Mat3x4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat2x3], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat3x2], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat3x2, $Float32], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat3x2, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float32], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec2], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec2, Vec2, Vec2], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec3], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec3, Vec3], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat3x2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec3], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec2], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float32], [], false)}];
	Mat3.methods = [{prop: "Mat2", name: "Mat2", pkg: "", typ: $funcType([], [Mat2], false)}, {prop: "Mat4", name: "Mat4", pkg: "", typ: $funcType([], [Mat4], false)}, {prop: "Diag", name: "Diag", pkg: "", typ: $funcType([], [Vec3], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat3], [Mat3], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat3], [Mat3], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float32], [Mat3], false)}, {prop: "Mul3x1", name: "Mul3x1", pkg: "", typ: $funcType([Vec3], [Vec3], false)}, {prop: "Mul3x2", name: "Mul3x2", pkg: "", typ: $funcType([Mat3x2], [Mat3x2], false)}, {prop: "Mul3", name: "Mul3", pkg: "", typ: $funcType([Mat3], [Mat3], false)}, {prop: "Mul3x4", name: "Mul3x4", pkg: "", typ: $funcType([Mat3x4], [Mat3x4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat3], false)}, {prop: "Det", name: "Det", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Inv", name: "Inv", pkg: "", typ: $funcType([], [Mat3], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat3], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat3, $Float32], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat3, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float32], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec3], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec3, Vec3, Vec3], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec3], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec3, Vec3, Vec3], false)}, {prop: "Trace", name: "Trace", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat3], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec3], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec3], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float32], [], false)}];
	Mat3x4.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat3x4], [Mat3x4], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat3x4], [Mat3x4], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float32], [Mat3x4], false)}, {prop: "Mul4x1", name: "Mul4x1", pkg: "", typ: $funcType([Vec4], [Vec3], false)}, {prop: "Mul4x2", name: "Mul4x2", pkg: "", typ: $funcType([Mat4x2], [Mat3x2], false)}, {prop: "Mul4x3", name: "Mul4x3", pkg: "", typ: $funcType([Mat4x3], [Mat3], false)}, {prop: "Mul4", name: "Mul4", pkg: "", typ: $funcType([Mat4], [Mat3x4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat4x3], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat3x4], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat3x4, $Float32], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat3x4, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float32], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec4], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec4, Vec4, Vec4], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec3], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec3, Vec3, Vec3, Vec3], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat3x4], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec3], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec4], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float32], [], false)}];
	Mat4x2.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat4x2], [Mat4x2], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat4x2], [Mat4x2], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float32], [Mat4x2], false)}, {prop: "Mul2x1", name: "Mul2x1", pkg: "", typ: $funcType([Vec2], [Vec4], false)}, {prop: "Mul2", name: "Mul2", pkg: "", typ: $funcType([Mat2], [Mat4x2], false)}, {prop: "Mul2x3", name: "Mul2x3", pkg: "", typ: $funcType([Mat2x3], [Mat4x3], false)}, {prop: "Mul2x4", name: "Mul2x4", pkg: "", typ: $funcType([Mat2x4], [Mat4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat2x4], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat4x2], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat4x2, $Float32], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat4x2, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float32], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec2], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec2, Vec2, Vec2, Vec2], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec4], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec4, Vec4], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat4x2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$9.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec4], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec2], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float32], [], false)}];
	Mat4x3.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat4x3], [Mat4x3], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat4x3], [Mat4x3], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float32], [Mat4x3], false)}, {prop: "Mul3x1", name: "Mul3x1", pkg: "", typ: $funcType([Vec3], [Vec4], false)}, {prop: "Mul3x2", name: "Mul3x2", pkg: "", typ: $funcType([Mat3x2], [Mat4x2], false)}, {prop: "Mul3", name: "Mul3", pkg: "", typ: $funcType([Mat3], [Mat4x3], false)}, {prop: "Mul3x4", name: "Mul3x4", pkg: "", typ: $funcType([Mat3x4], [Mat4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat3x4], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat4x3], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat4x3, $Float32], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat4x3, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float32], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec3], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec3, Vec3, Vec3, Vec3], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec4], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec4, Vec4, Vec4], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat4x3], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$10.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec4], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec3], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float32], [], false)}];
	Mat4.methods = [{prop: "Mat2", name: "Mat2", pkg: "", typ: $funcType([], [Mat2], false)}, {prop: "Mat3", name: "Mat3", pkg: "", typ: $funcType([], [Mat3], false)}, {prop: "Diag", name: "Diag", pkg: "", typ: $funcType([], [Vec4], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat4], [Mat4], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat4], [Mat4], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float32], [Mat4], false)}, {prop: "Mul4x1", name: "Mul4x1", pkg: "", typ: $funcType([Vec4], [Vec4], false)}, {prop: "Mul4x2", name: "Mul4x2", pkg: "", typ: $funcType([Mat4x2], [Mat4x2], false)}, {prop: "Mul4x3", name: "Mul4x3", pkg: "", typ: $funcType([Mat4x3], [Mat4x3], false)}, {prop: "Mul4", name: "Mul4", pkg: "", typ: $funcType([Mat4], [Mat4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat4], false)}, {prop: "Det", name: "Det", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Inv", name: "Inv", pkg: "", typ: $funcType([], [Mat4], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat4], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat4, $Float32], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat4, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float32], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec4], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec4, Vec4, Vec4, Vec4], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec4], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec4, Vec4, Vec4, Vec4], false)}, {prop: "Trace", name: "Trace", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat4], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec4], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec4], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float32], [], false)}];
	Vec2.methods = [{prop: "Vec3", name: "Vec3", pkg: "", typ: $funcType([$Float32], [Vec3], false)}, {prop: "Vec4", name: "Vec4", pkg: "", typ: $funcType([$Float32, $Float32], [Vec4], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [$Float32, $Float32], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Vec2], [Vec2], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Vec2], [Vec2], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float32], [Vec2], false)}, {prop: "Dot", name: "Dot", pkg: "", typ: $funcType([Vec2], [$Float32], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [Vec2], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Vec2], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Vec2, $Float32], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Vec2, funcType], [$Bool], false)}, {prop: "X", name: "X", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Y", name: "Y", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "OuterProd2", name: "OuterProd2", pkg: "", typ: $funcType([Vec2], [Mat2], false)}, {prop: "OuterProd3", name: "OuterProd3", pkg: "", typ: $funcType([Vec3], [Mat2x3], false)}, {prop: "OuterProd4", name: "OuterProd4", pkg: "", typ: $funcType([Vec4], [Mat2x4], false)}];
	Vec3.methods = [{prop: "Vec2", name: "Vec2", pkg: "", typ: $funcType([], [Vec2], false)}, {prop: "Vec4", name: "Vec4", pkg: "", typ: $funcType([$Float32], [Vec4], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [$Float32, $Float32, $Float32], false)}, {prop: "Cross", name: "Cross", pkg: "", typ: $funcType([Vec3], [Vec3], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Vec3], [Vec3], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Vec3], [Vec3], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float32], [Vec3], false)}, {prop: "Dot", name: "Dot", pkg: "", typ: $funcType([Vec3], [$Float32], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [Vec3], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Vec3], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Vec3, $Float32], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Vec3, funcType], [$Bool], false)}, {prop: "X", name: "X", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Y", name: "Y", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Z", name: "Z", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "OuterProd2", name: "OuterProd2", pkg: "", typ: $funcType([Vec2], [Mat3x2], false)}, {prop: "OuterProd3", name: "OuterProd3", pkg: "", typ: $funcType([Vec3], [Mat3], false)}, {prop: "OuterProd4", name: "OuterProd4", pkg: "", typ: $funcType([Vec4], [Mat3x4], false)}];
	Vec4.methods = [{prop: "Vec2", name: "Vec2", pkg: "", typ: $funcType([], [Vec2], false)}, {prop: "Vec3", name: "Vec3", pkg: "", typ: $funcType([], [Vec3], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [$Float32, $Float32, $Float32, $Float32], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Vec4], [Vec4], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Vec4], [Vec4], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float32], [Vec4], false)}, {prop: "Dot", name: "Dot", pkg: "", typ: $funcType([Vec4], [$Float32], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [Vec4], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Vec4], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Vec4, $Float32], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Vec4, funcType], [$Bool], false)}, {prop: "X", name: "X", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Y", name: "Y", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Z", name: "Z", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "W", name: "W", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "OuterProd2", name: "OuterProd2", pkg: "", typ: $funcType([Vec2], [Mat4x2], false)}, {prop: "OuterProd3", name: "OuterProd3", pkg: "", typ: $funcType([Vec3], [Mat4x3], false)}, {prop: "OuterProd4", name: "OuterProd4", pkg: "", typ: $funcType([Vec4], [Mat4], false)}];
	Mat2.init($Float32, 4);
	Mat2x3.init($Float32, 6);
	Mat2x4.init($Float32, 8);
	Mat3x2.init($Float32, 6);
	Mat3.init($Float32, 9);
	Mat3x4.init($Float32, 12);
	Mat4x2.init($Float32, 8);
	Mat4x3.init($Float32, 12);
	Mat4.init($Float32, 16);
	Vec2.init($Float32, 2);
	Vec3.init($Float32, 3);
	Vec4.init($Float32, 4);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = f32.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = tabwriter.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Epsilon = 1.000000013351432e-10;
		$pkg.MinNormal = 1.1754943508222875e-38;
		$pkg.InfPos = $fround(math.Inf(1));
		$pkg.InfNeg = $fround(math.Inf(-1));
		$pkg.NaN = $fround(math.NaN());
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/inkyblackness/shocked-client/editor/camera"] = (function() {
	var $pkg = {}, $init, mgl32, math, LimitedCamera, arrayType, ptrType, NewLimited;
	mgl32 = $packages["github.com/go-gl/mathgl/mgl32"];
	math = $packages["math"];
	LimitedCamera = $pkg.LimitedCamera = $newType(0, $kindStruct, "camera.LimitedCamera", "LimitedCamera", "github.com/inkyblackness/shocked-client/editor/camera", function(minZoom_, maxZoom_, minPos_, maxPos_, requestedZoomLevel_, viewOffsetX_, viewOffsetY_, viewMatrix_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.minZoom = 0;
			this.maxZoom = 0;
			this.minPos = 0;
			this.maxPos = 0;
			this.requestedZoomLevel = 0;
			this.viewOffsetX = 0;
			this.viewOffsetY = 0;
			this.viewMatrix = arrayType.zero();
			return;
		}
		this.minZoom = minZoom_;
		this.maxZoom = maxZoom_;
		this.minPos = minPos_;
		this.maxPos = maxPos_;
		this.requestedZoomLevel = requestedZoomLevel_;
		this.viewOffsetX = viewOffsetX_;
		this.viewOffsetY = viewOffsetY_;
		this.viewMatrix = viewMatrix_;
	});
	arrayType = $arrayType($Float32, 16);
	ptrType = $ptrType(LimitedCamera);
	NewLimited = function(minZoom, maxZoom, minPos, maxPos) {
		var $ptr, cam, maxPos, maxZoom, minPos, minZoom;
		cam = new LimitedCamera.ptr(minZoom, maxZoom, minPos, maxPos, 0, 0, 0, $clone(mgl32.Ident4(), mgl32.Mat4));
		return cam;
	};
	$pkg.NewLimited = NewLimited;
	LimitedCamera.ptr.prototype.ViewMatrix = function() {
		var $ptr, cam;
		cam = this;
		return cam.viewMatrix;
	};
	LimitedCamera.prototype.ViewMatrix = function() { return this.$val.ViewMatrix(); };
	LimitedCamera.ptr.prototype.MoveBy = function(dx, dy) {
		var $ptr, cam, dx, dy;
		cam = this;
		cam.MoveTo($fround(cam.viewOffsetX + dx), $fround(cam.viewOffsetY + dy));
	};
	LimitedCamera.prototype.MoveBy = function(dx, dy) { return this.$val.MoveBy(dx, dy); };
	LimitedCamera.ptr.prototype.MoveTo = function(worldX, worldY) {
		var $ptr, cam, worldX, worldY;
		cam = this;
		cam.viewOffsetX = cam.limitValue(worldX, -cam.maxPos, cam.minPos);
		cam.viewOffsetY = cam.limitValue(worldY, -cam.maxPos, cam.minPos);
		cam.updateViewMatrix();
	};
	LimitedCamera.prototype.MoveTo = function(worldX, worldY) { return this.$val.MoveTo(worldX, worldY); };
	LimitedCamera.ptr.prototype.ZoomAt = function(levelDelta, x, y) {
		var $ptr, cam, focusPoint, levelDelta, newPixel, oldPixel, scaleFactor, x, y;
		cam = this;
		cam.requestedZoomLevel = cam.limitValue($fround(cam.requestedZoomLevel + levelDelta), cam.minZoom, cam.maxZoom);
		focusPoint = $toNativeArray($kindFloat32, [x, y, 0, 1]);
		oldPixel = $clone(new mgl32.Mat4(cam.viewMatrix).Mul4x1(focusPoint), mgl32.Vec4);
		cam.updateViewMatrix();
		newPixel = $clone(new mgl32.Mat4(cam.viewMatrix).Mul4x1(focusPoint), mgl32.Vec4);
		scaleFactor = cam.scaleFactor();
		cam.MoveBy($fround(-($fround(newPixel[0] - oldPixel[0])) / scaleFactor), $fround(-($fround(newPixel[1] - oldPixel[1])) / scaleFactor));
	};
	LimitedCamera.prototype.ZoomAt = function(levelDelta, x, y) { return this.$val.ZoomAt(levelDelta, x, y); };
	LimitedCamera.ptr.prototype.limitValue = function(value, min, max) {
		var $ptr, cam, max, min, result, value;
		cam = this;
		result = value;
		if (result < min) {
			result = min;
		}
		if (result > max) {
			result = max;
		}
		return result;
	};
	LimitedCamera.prototype.limitValue = function(value, min, max) { return this.$val.limitValue(value, min, max); };
	LimitedCamera.ptr.prototype.scaleFactor = function() {
		var $ptr, cam;
		cam = this;
		return $fround(math.Pow(2, cam.requestedZoomLevel));
	};
	LimitedCamera.prototype.scaleFactor = function() { return this.$val.scaleFactor(); };
	LimitedCamera.ptr.prototype.updateViewMatrix = function() {
		var $ptr, cam, scaleFactor;
		cam = this;
		scaleFactor = cam.scaleFactor();
		mgl32.Mat4.copy(cam.viewMatrix, new mgl32.Mat4(new mgl32.Mat4(mgl32.Ident4()).Mul4(mgl32.Scale3D(scaleFactor, scaleFactor, 1))).Mul4(mgl32.Translate3D(cam.viewOffsetX, cam.viewOffsetY, 0)));
	};
	LimitedCamera.prototype.updateViewMatrix = function() { return this.$val.updateViewMatrix(); };
	ptrType.methods = [{prop: "ViewMatrix", name: "ViewMatrix", pkg: "", typ: $funcType([], [mgl32.Mat4], false)}, {prop: "MoveBy", name: "MoveBy", pkg: "", typ: $funcType([$Float32, $Float32], [], false)}, {prop: "MoveTo", name: "MoveTo", pkg: "", typ: $funcType([$Float32, $Float32], [], false)}, {prop: "ZoomAt", name: "ZoomAt", pkg: "", typ: $funcType([$Float32, $Float32, $Float32], [], false)}, {prop: "limitValue", name: "limitValue", pkg: "github.com/inkyblackness/shocked-client/editor/camera", typ: $funcType([$Float32, $Float32, $Float32], [$Float32], false)}, {prop: "scaleFactor", name: "scaleFactor", pkg: "github.com/inkyblackness/shocked-client/editor/camera", typ: $funcType([], [$Float32], false)}, {prop: "updateViewMatrix", name: "updateViewMatrix", pkg: "github.com/inkyblackness/shocked-client/editor/camera", typ: $funcType([], [], false)}];
	LimitedCamera.init([{prop: "minZoom", name: "minZoom", pkg: "github.com/inkyblackness/shocked-client/editor/camera", typ: $Float32, tag: ""}, {prop: "maxZoom", name: "maxZoom", pkg: "github.com/inkyblackness/shocked-client/editor/camera", typ: $Float32, tag: ""}, {prop: "minPos", name: "minPos", pkg: "github.com/inkyblackness/shocked-client/editor/camera", typ: $Float32, tag: ""}, {prop: "maxPos", name: "maxPos", pkg: "github.com/inkyblackness/shocked-client/editor/camera", typ: $Float32, tag: ""}, {prop: "requestedZoomLevel", name: "requestedZoomLevel", pkg: "github.com/inkyblackness/shocked-client/editor/camera", typ: $Float32, tag: ""}, {prop: "viewOffsetX", name: "viewOffsetX", pkg: "github.com/inkyblackness/shocked-client/editor/camera", typ: $Float32, tag: ""}, {prop: "viewOffsetY", name: "viewOffsetY", pkg: "github.com/inkyblackness/shocked-client/editor/camera", typ: $Float32, tag: ""}, {prop: "viewMatrix", name: "viewMatrix", pkg: "github.com/inkyblackness/shocked-client/editor/camera", typ: mgl32.Mat4, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = mgl32.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/image/math/f64"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/go-gl/mathgl/mgl64"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, f64, math, sync, tabwriter, Mat2, Mat2x3, Mat2x4, Mat3x2, Mat3, Mat3x4, Mat4x2, Mat4x3, Mat4, Vec2, Vec3, Vec4, arrayType, arrayType$1, sliceType$2, arrayType$2, arrayType$3, sliceType$3, arrayType$4, arrayType$5, arrayType$6, funcType, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, Mat2FromCols, Mat3FromCols, Mat4FromCols, Translate3D, Scale3D, Abs, FloatEqual, FloatEqualThreshold;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	f64 = $packages["golang.org/x/image/math/f64"];
	math = $packages["math"];
	sync = $packages["sync"];
	tabwriter = $packages["text/tabwriter"];
	Mat2 = $pkg.Mat2 = $newType(32, $kindArray, "mgl64.Mat2", "Mat2", "github.com/go-gl/mathgl/mgl64", null);
	Mat2x3 = $pkg.Mat2x3 = $newType(48, $kindArray, "mgl64.Mat2x3", "Mat2x3", "github.com/go-gl/mathgl/mgl64", null);
	Mat2x4 = $pkg.Mat2x4 = $newType(64, $kindArray, "mgl64.Mat2x4", "Mat2x4", "github.com/go-gl/mathgl/mgl64", null);
	Mat3x2 = $pkg.Mat3x2 = $newType(48, $kindArray, "mgl64.Mat3x2", "Mat3x2", "github.com/go-gl/mathgl/mgl64", null);
	Mat3 = $pkg.Mat3 = $newType(72, $kindArray, "mgl64.Mat3", "Mat3", "github.com/go-gl/mathgl/mgl64", null);
	Mat3x4 = $pkg.Mat3x4 = $newType(96, $kindArray, "mgl64.Mat3x4", "Mat3x4", "github.com/go-gl/mathgl/mgl64", null);
	Mat4x2 = $pkg.Mat4x2 = $newType(64, $kindArray, "mgl64.Mat4x2", "Mat4x2", "github.com/go-gl/mathgl/mgl64", null);
	Mat4x3 = $pkg.Mat4x3 = $newType(96, $kindArray, "mgl64.Mat4x3", "Mat4x3", "github.com/go-gl/mathgl/mgl64", null);
	Mat4 = $pkg.Mat4 = $newType(128, $kindArray, "mgl64.Mat4", "Mat4", "github.com/go-gl/mathgl/mgl64", null);
	Vec2 = $pkg.Vec2 = $newType(16, $kindArray, "mgl64.Vec2", "Vec2", "github.com/go-gl/mathgl/mgl64", null);
	Vec3 = $pkg.Vec3 = $newType(24, $kindArray, "mgl64.Vec3", "Vec3", "github.com/go-gl/mathgl/mgl64", null);
	Vec4 = $pkg.Vec4 = $newType(32, $kindArray, "mgl64.Vec4", "Vec4", "github.com/go-gl/mathgl/mgl64", null);
	arrayType = $arrayType($Float64, 4);
	arrayType$1 = $arrayType($Float64, 2);
	sliceType$2 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 4);
	arrayType$3 = $arrayType($Uint8, 64);
	sliceType$3 = $sliceType($emptyInterface);
	arrayType$4 = $arrayType($Float64, 3);
	arrayType$5 = $arrayType($Float64, 9);
	arrayType$6 = $arrayType($Float64, 16);
	funcType = $funcType([$Float64, $Float64], [$Bool], false);
	ptrType$3 = $ptrType(Mat2);
	ptrType$4 = $ptrType(Mat2x3);
	ptrType$5 = $ptrType(Mat2x4);
	ptrType$6 = $ptrType(Mat3x2);
	ptrType$7 = $ptrType(Mat3);
	ptrType$8 = $ptrType(Mat3x4);
	ptrType$9 = $ptrType(Mat4x2);
	ptrType$10 = $ptrType(Mat4x3);
	ptrType$11 = $ptrType(Mat4);
	Mat2.prototype.Mat3 = function() {
		var $ptr, _tuple, col0, col1, m;
		m = $clone(this.$val, Mat2);
		_tuple = new Mat2(m).Cols();
		col0 = $clone(_tuple[0], Vec2);
		col1 = $clone(_tuple[1], Vec2);
		return Mat3FromCols(new Vec2(col0).Vec3(0), new Vec2(col1).Vec3(0), $toNativeArray($kindFloat64, [0, 0, 1]));
	};
	$ptrType(Mat2).prototype.Mat3 = function() { return new Mat2(this.$get()).Mat3(); };
	Mat2.prototype.Mat4 = function() {
		var $ptr, _tuple, col0, col1, m;
		m = $clone(this.$val, Mat2);
		_tuple = new Mat2(m).Cols();
		col0 = $clone(_tuple[0], Vec2);
		col1 = $clone(_tuple[1], Vec2);
		return Mat4FromCols(new Vec2(col0).Vec4(0, 0), new Vec2(col1).Vec4(0, 0), $toNativeArray($kindFloat64, [0, 0, 1, 0]), $toNativeArray($kindFloat64, [0, 0, 0, 1]));
	};
	$ptrType(Mat2).prototype.Mat4 = function() { return new Mat2(this.$get()).Mat4(); };
	Mat3.prototype.Mat2 = function() {
		var $ptr, _tuple, col0, col1, m;
		m = $clone(this.$val, Mat3);
		_tuple = new Mat3(m).Cols();
		col0 = $clone(_tuple[0], Vec3);
		col1 = $clone(_tuple[1], Vec3);
		return Mat2FromCols(new Vec3(col0).Vec2(), new Vec3(col1).Vec2());
	};
	$ptrType(Mat3).prototype.Mat2 = function() { return new Mat3(this.$get()).Mat2(); };
	Mat3.prototype.Mat4 = function() {
		var $ptr, _tuple, col0, col1, col2, m;
		m = $clone(this.$val, Mat3);
		_tuple = new Mat3(m).Cols();
		col0 = $clone(_tuple[0], Vec3);
		col1 = $clone(_tuple[1], Vec3);
		col2 = $clone(_tuple[2], Vec3);
		return Mat4FromCols(new Vec3(col0).Vec4(0), new Vec3(col1).Vec4(0), new Vec3(col2).Vec4(0), $toNativeArray($kindFloat64, [0, 0, 0, 1]));
	};
	$ptrType(Mat3).prototype.Mat4 = function() { return new Mat3(this.$get()).Mat4(); };
	Mat4.prototype.Mat2 = function() {
		var $ptr, _tuple, col0, col1, m;
		m = $clone(this.$val, Mat4);
		_tuple = new Mat4(m).Cols();
		col0 = $clone(_tuple[0], Vec4);
		col1 = $clone(_tuple[1], Vec4);
		return Mat2FromCols(new Vec4(col0).Vec2(), new Vec4(col1).Vec2());
	};
	$ptrType(Mat4).prototype.Mat2 = function() { return new Mat4(this.$get()).Mat2(); };
	Mat4.prototype.Mat3 = function() {
		var $ptr, _tuple, col0, col1, col2, m;
		m = $clone(this.$val, Mat4);
		_tuple = new Mat4(m).Cols();
		col0 = $clone(_tuple[0], Vec4);
		col1 = $clone(_tuple[1], Vec4);
		col2 = $clone(_tuple[2], Vec4);
		return Mat3FromCols(new Vec4(col0).Vec3(), new Vec4(col1).Vec3(), new Vec4(col2).Vec3());
	};
	$ptrType(Mat4).prototype.Mat3 = function() { return new Mat4(this.$get()).Mat3(); };
	Mat2.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, col, m, v, x, x$1;
		v = $clone(v, Vec2);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		(x = ($imul(col, 2)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 2)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
	};
	$ptrType(Mat2).prototype.SetCol = function(col, v) { return (new Mat2(this.$get())).SetCol(col, v); };
	Mat2.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, m, row, v, x, x$1;
		v = $clone(v, Vec2);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 2 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
	};
	$ptrType(Mat2).prototype.SetRow = function(row, v) { return (new Mat2(this.$get())).SetRow(row, v); };
	Mat2.prototype.Diag = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat64, [m[0], m[3]]);
	};
	$ptrType(Mat2).prototype.Diag = function() { return new Mat2(this.$get()).Diag(); };
	Mat2FromCols = function(col0, col1) {
		var $ptr, col0, col1;
		col1 = $clone(col1, Vec2);
		col0 = $clone(col0, Vec2);
		return $toNativeArray($kindFloat64, [col0[0], col0[1], col1[0], col1[1]]);
	};
	$pkg.Mat2FromCols = Mat2FromCols;
	Mat2.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat64, [m1[0] + m2[0], m1[1] + m2[1], m1[2] + m2[2], m1[3] + m2[3]]);
	};
	$ptrType(Mat2).prototype.Add = function(m2) { return new Mat2(this.$get()).Add(m2); };
	Mat2.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat64, [m1[0] - m2[0], m1[1] - m2[1], m1[2] - m2[2], m1[3] - m2[3]]);
	};
	$ptrType(Mat2).prototype.Sub = function(m2) { return new Mat2(this.$get()).Sub(m2); };
	Mat2.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat64, [m1[0] * c, m1[1] * c, m1[2] * c, m1[3] * c]);
	};
	$ptrType(Mat2).prototype.Mul = function(c) { return new Mat2(this.$get()).Mul(c); };
	Mat2.prototype.Mul2x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec2);
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1]]);
	};
	$ptrType(Mat2).prototype.Mul2x1 = function(m2) { return new Mat2(this.$get()).Mul2x1(m2); };
	Mat2.prototype.Mul2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3]]);
	};
	$ptrType(Mat2).prototype.Mul2 = function(m2) { return new Mat2(this.$get()).Mul2(m2); };
	Mat2.prototype.Mul2x3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5], m1[1] * m2[4] + m1[3] * m2[5]]);
	};
	$ptrType(Mat2).prototype.Mul2x3 = function(m2) { return new Mat2(this.$get()).Mul2x3(m2); };
	Mat2.prototype.Mul2x4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5], m1[1] * m2[4] + m1[3] * m2[5], m1[0] * m2[6] + m1[2] * m2[7], m1[1] * m2[6] + m1[3] * m2[7]]);
	};
	$ptrType(Mat2).prototype.Mul2x4 = function(m2) { return new Mat2(this.$get()).Mul2x4(m2); };
	Mat2.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat64, [m1[0], m1[2], m1[1], m1[3]]);
	};
	$ptrType(Mat2).prototype.Transpose = function() { return new Mat2(this.$get()).Transpose(); };
	Mat2.prototype.Det = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat2);
		return m[0] * m[2] - m[1] * m[3];
	};
	$ptrType(Mat2).prototype.Det = function() { return new Mat2(this.$get()).Det(); };
	Mat2.prototype.Inv = function() {
		var $ptr, det, m, retMat;
		m = $clone(this.$val, Mat2);
		det = new Mat2(m).Det();
		if (FloatEqual(det, 0)) {
			return arrayType.zero();
		}
		retMat = $toNativeArray($kindFloat64, [m[3], -m[1], -m[2], m[0]]);
		return new Mat2(retMat).Mul(1 / det);
	};
	$ptrType(Mat2).prototype.Inv = function() { return new Mat2(this.$get()).Inv(); };
	Mat2.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat2);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat2).prototype.ApproxEqual = function(m2) { return new Mat2(this.$get()).ApproxEqual(m2); };
	Mat2.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat2);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat2).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat2(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat2.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat2);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 4)) { break; } */ if(!(_i < 4)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat2.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat2).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat2(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat2.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat2);
		return (x = ($imul(col, 2)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat2).prototype.At = function(row, col) { return new Mat2(this.$get()).At(row, col); };
	Mat2.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 2)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat2).prototype.Set = function(row, col, value) { return (new Mat2(this.$get())).Set(row, col, value); };
	Mat2.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat2);
		return ($imul(col, 2)) + row >> 0;
	};
	$ptrType(Mat2).prototype.Index = function(row, col) { return new Mat2(this.$get()).Index(row, col); };
	Mat2.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1;
		m = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat64, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 2 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1]))]);
	};
	$ptrType(Mat2).prototype.Row = function(row) { return new Mat2(this.$get()).Row(row); };
	Mat2.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, m, row0, row1;
		row0 = arrayType$1.zero();
		row1 = arrayType$1.zero();
		m = $clone(this.$val, Mat2);
		_tmp = $clone(new Mat2(m).Row(0), Vec2);
		_tmp$1 = $clone(new Mat2(m).Row(1), Vec2);
		Vec2.copy(row0, _tmp);
		Vec2.copy(row1, _tmp$1);
		return [row0, row1];
	};
	$ptrType(Mat2).prototype.Rows = function() { return new Mat2(this.$get()).Rows(); };
	Mat2.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1;
		m = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat64, [(x = ($imul(col, 2)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 2)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1]))]);
	};
	$ptrType(Mat2).prototype.Col = function(col) { return new Mat2(this.$get()).Col(col); };
	Mat2.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, col0, col1, m;
		col0 = arrayType$1.zero();
		col1 = arrayType$1.zero();
		m = $clone(this.$val, Mat2);
		_tmp = $clone(new Mat2(m).Col(0), Vec2);
		_tmp$1 = $clone(new Mat2(m).Col(1), Vec2);
		Vec2.copy(col0, _tmp);
		Vec2.copy(col1, _tmp$1);
		return [col0, col1];
	};
	$ptrType(Mat2).prototype.Cols = function() { return new Mat2(this.$get()).Cols(); };
	Mat2.prototype.Trace = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat2);
		return m[0] + m[3];
	};
	$ptrType(Mat2).prototype.Trace = function() { return new Mat2(this.$get()).Trace(); };
	Mat2.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat2);
		return $toNativeArray($kindFloat64, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3])]);
	};
	$ptrType(Mat2).prototype.Abs = function() { return new Mat2(this.$get()).Abs(); };
	Mat2.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat2);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 2)) { break; } */ if(!(i < 2)) { $s = 2; continue; }
			_ref = new Mat2(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 2)) { break; } */ if(!(_i < 2)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float64(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat2.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat2).prototype.String = function() { return new Mat2(this.$get()).String(); };
	Mat2x3.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, col, m, v, x, x$1;
		v = $clone(v, Vec2);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		(x = ($imul(col, 2)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 2)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
	};
	$ptrType(Mat2x3).prototype.SetCol = function(col, v) { return (new Mat2x3(this.$get())).SetCol(col, v); };
	Mat2x3.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, m, row, v, x, x$1, x$2;
		v = $clone(v, Vec3);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 2 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = row + 4 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
	};
	$ptrType(Mat2x3).prototype.SetRow = function(row, v) { return (new Mat2x3(this.$get())).SetRow(row, v); };
	Mat2x3.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat64, [m1[0] + m2[0], m1[1] + m2[1], m1[2] + m2[2], m1[3] + m2[3], m1[4] + m2[4], m1[5] + m2[5]]);
	};
	$ptrType(Mat2x3).prototype.Add = function(m2) { return new Mat2x3(this.$get()).Add(m2); };
	Mat2x3.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat64, [m1[0] - m2[0], m1[1] - m2[1], m1[2] - m2[2], m1[3] - m2[3], m1[4] - m2[4], m1[5] - m2[5]]);
	};
	$ptrType(Mat2x3).prototype.Sub = function(m2) { return new Mat2x3(this.$get()).Sub(m2); };
	Mat2x3.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat64, [m1[0] * c, m1[1] * c, m1[2] * c, m1[3] * c, m1[4] * c, m1[5] * c]);
	};
	$ptrType(Mat2x3).prototype.Mul = function(c) { return new Mat2x3(this.$get()).Mul(c); };
	Mat2x3.prototype.Mul3x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec3);
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[2] * m2[1] + m1[4] * m2[2], m1[1] * m2[0] + m1[3] * m2[1] + m1[5] * m2[2]]);
	};
	$ptrType(Mat2x3).prototype.Mul3x1 = function(m2) { return new Mat2x3(this.$get()).Mul3x1(m2); };
	Mat2x3.prototype.Mul3x2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[2] * m2[1] + m1[4] * m2[2], m1[1] * m2[0] + m1[3] * m2[1] + m1[5] * m2[2], m1[0] * m2[3] + m1[2] * m2[4] + m1[4] * m2[5], m1[1] * m2[3] + m1[3] * m2[4] + m1[5] * m2[5]]);
	};
	$ptrType(Mat2x3).prototype.Mul3x2 = function(m2) { return new Mat2x3(this.$get()).Mul3x2(m2); };
	Mat2x3.prototype.Mul3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[2] * m2[1] + m1[4] * m2[2], m1[1] * m2[0] + m1[3] * m2[1] + m1[5] * m2[2], m1[0] * m2[3] + m1[2] * m2[4] + m1[4] * m2[5], m1[1] * m2[3] + m1[3] * m2[4] + m1[5] * m2[5], m1[0] * m2[6] + m1[2] * m2[7] + m1[4] * m2[8], m1[1] * m2[6] + m1[3] * m2[7] + m1[5] * m2[8]]);
	};
	$ptrType(Mat2x3).prototype.Mul3 = function(m2) { return new Mat2x3(this.$get()).Mul3(m2); };
	Mat2x3.prototype.Mul3x4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[2] * m2[1] + m1[4] * m2[2], m1[1] * m2[0] + m1[3] * m2[1] + m1[5] * m2[2], m1[0] * m2[3] + m1[2] * m2[4] + m1[4] * m2[5], m1[1] * m2[3] + m1[3] * m2[4] + m1[5] * m2[5], m1[0] * m2[6] + m1[2] * m2[7] + m1[4] * m2[8], m1[1] * m2[6] + m1[3] * m2[7] + m1[5] * m2[8], m1[0] * m2[9] + m1[2] * m2[10] + m1[4] * m2[11], m1[1] * m2[9] + m1[3] * m2[10] + m1[5] * m2[11]]);
	};
	$ptrType(Mat2x3).prototype.Mul3x4 = function(m2) { return new Mat2x3(this.$get()).Mul3x4(m2); };
	Mat2x3.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat64, [m1[0], m1[2], m1[4], m1[1], m1[3], m1[5]]);
	};
	$ptrType(Mat2x3).prototype.Transpose = function() { return new Mat2x3(this.$get()).Transpose(); };
	Mat2x3.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat2x3);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 6)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat2x3).prototype.ApproxEqual = function(m2) { return new Mat2x3(this.$get()).ApproxEqual(m2); };
	Mat2x3.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat2x3);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 6)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat2x3).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat2x3(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat2x3.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat2x3);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 6)) { break; } */ if(!(_i < 6)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat2x3.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat2x3).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat2x3(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat2x3.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat2x3);
		return (x = ($imul(col, 2)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat2x3).prototype.At = function(row, col) { return new Mat2x3(this.$get()).At(row, col); };
	Mat2x3.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 2)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat2x3).prototype.Set = function(row, col, value) { return (new Mat2x3(this.$get())).Set(row, col, value); };
	Mat2x3.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat2x3);
		return ($imul(col, 2)) + row >> 0;
	};
	$ptrType(Mat2x3).prototype.Index = function(row, col) { return new Mat2x3(this.$get()).Index(row, col); };
	Mat2x3.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1, x$2;
		m = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat64, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 2 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = row + 4 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2]))]);
	};
	$ptrType(Mat2x3).prototype.Row = function(row) { return new Mat2x3(this.$get()).Row(row); };
	Mat2x3.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, m, row0, row1;
		row0 = arrayType$4.zero();
		row1 = arrayType$4.zero();
		m = $clone(this.$val, Mat2x3);
		_tmp = $clone(new Mat2x3(m).Row(0), Vec3);
		_tmp$1 = $clone(new Mat2x3(m).Row(1), Vec3);
		Vec3.copy(row0, _tmp);
		Vec3.copy(row1, _tmp$1);
		return [row0, row1];
	};
	$ptrType(Mat2x3).prototype.Rows = function() { return new Mat2x3(this.$get()).Rows(); };
	Mat2x3.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1;
		m = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat64, [(x = ($imul(col, 2)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 2)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1]))]);
	};
	$ptrType(Mat2x3).prototype.Col = function(col) { return new Mat2x3(this.$get()).Col(col); };
	Mat2x3.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, col0, col1, col2, m;
		col0 = arrayType$1.zero();
		col1 = arrayType$1.zero();
		col2 = arrayType$1.zero();
		m = $clone(this.$val, Mat2x3);
		_tmp = $clone(new Mat2x3(m).Col(0), Vec2);
		_tmp$1 = $clone(new Mat2x3(m).Col(1), Vec2);
		_tmp$2 = $clone(new Mat2x3(m).Col(2), Vec2);
		Vec2.copy(col0, _tmp);
		Vec2.copy(col1, _tmp$1);
		Vec2.copy(col2, _tmp$2);
		return [col0, col1, col2];
	};
	$ptrType(Mat2x3).prototype.Cols = function() { return new Mat2x3(this.$get()).Cols(); };
	Mat2x3.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat2x3);
		return $toNativeArray($kindFloat64, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5])]);
	};
	$ptrType(Mat2x3).prototype.Abs = function() { return new Mat2x3(this.$get()).Abs(); };
	Mat2x3.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat2x3);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 2)) { break; } */ if(!(i < 2)) { $s = 2; continue; }
			_ref = new Mat2x3(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 3)) { break; } */ if(!(_i < 3)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float64(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat2x3.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat2x3).prototype.String = function() { return new Mat2x3(this.$get()).String(); };
	Mat2x4.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, col, m, v, x, x$1;
		v = $clone(v, Vec2);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		(x = ($imul(col, 2)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 2)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
	};
	$ptrType(Mat2x4).prototype.SetCol = function(col, v) { return (new Mat2x4(this.$get())).SetCol(col, v); };
	Mat2x4.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, m, row, v, x, x$1, x$2, x$3;
		v = $clone(v, Vec4);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 2 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = row + 4 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
		(x$3 = row + 6 >> 0, m.nilCheck, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3] = _tmp$3));
	};
	$ptrType(Mat2x4).prototype.SetRow = function(row, v) { return (new Mat2x4(this.$get())).SetRow(row, v); };
	Mat2x4.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat64, [m1[0] + m2[0], m1[1] + m2[1], m1[2] + m2[2], m1[3] + m2[3], m1[4] + m2[4], m1[5] + m2[5], m1[6] + m2[6], m1[7] + m2[7]]);
	};
	$ptrType(Mat2x4).prototype.Add = function(m2) { return new Mat2x4(this.$get()).Add(m2); };
	Mat2x4.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat64, [m1[0] - m2[0], m1[1] - m2[1], m1[2] - m2[2], m1[3] - m2[3], m1[4] - m2[4], m1[5] - m2[5], m1[6] - m2[6], m1[7] - m2[7]]);
	};
	$ptrType(Mat2x4).prototype.Sub = function(m2) { return new Mat2x4(this.$get()).Sub(m2); };
	Mat2x4.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat64, [m1[0] * c, m1[1] * c, m1[2] * c, m1[3] * c, m1[4] * c, m1[5] * c, m1[6] * c, m1[7] * c]);
	};
	$ptrType(Mat2x4).prototype.Mul = function(c) { return new Mat2x4(this.$get()).Mul(c); };
	Mat2x4.prototype.Mul4x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec4);
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[2] * m2[1] + m1[4] * m2[2] + m1[6] * m2[3], m1[1] * m2[0] + m1[3] * m2[1] + m1[5] * m2[2] + m1[7] * m2[3]]);
	};
	$ptrType(Mat2x4).prototype.Mul4x1 = function(m2) { return new Mat2x4(this.$get()).Mul4x1(m2); };
	Mat2x4.prototype.Mul4x2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[2] * m2[1] + m1[4] * m2[2] + m1[6] * m2[3], m1[1] * m2[0] + m1[3] * m2[1] + m1[5] * m2[2] + m1[7] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4] * m2[6] + m1[6] * m2[7], m1[1] * m2[4] + m1[3] * m2[5] + m1[5] * m2[6] + m1[7] * m2[7]]);
	};
	$ptrType(Mat2x4).prototype.Mul4x2 = function(m2) { return new Mat2x4(this.$get()).Mul4x2(m2); };
	Mat2x4.prototype.Mul4x3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[2] * m2[1] + m1[4] * m2[2] + m1[6] * m2[3], m1[1] * m2[0] + m1[3] * m2[1] + m1[5] * m2[2] + m1[7] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4] * m2[6] + m1[6] * m2[7], m1[1] * m2[4] + m1[3] * m2[5] + m1[5] * m2[6] + m1[7] * m2[7], m1[0] * m2[8] + m1[2] * m2[9] + m1[4] * m2[10] + m1[6] * m2[11], m1[1] * m2[8] + m1[3] * m2[9] + m1[5] * m2[10] + m1[7] * m2[11]]);
	};
	$ptrType(Mat2x4).prototype.Mul4x3 = function(m2) { return new Mat2x4(this.$get()).Mul4x3(m2); };
	Mat2x4.prototype.Mul4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[2] * m2[1] + m1[4] * m2[2] + m1[6] * m2[3], m1[1] * m2[0] + m1[3] * m2[1] + m1[5] * m2[2] + m1[7] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4] * m2[6] + m1[6] * m2[7], m1[1] * m2[4] + m1[3] * m2[5] + m1[5] * m2[6] + m1[7] * m2[7], m1[0] * m2[8] + m1[2] * m2[9] + m1[4] * m2[10] + m1[6] * m2[11], m1[1] * m2[8] + m1[3] * m2[9] + m1[5] * m2[10] + m1[7] * m2[11], m1[0] * m2[12] + m1[2] * m2[13] + m1[4] * m2[14] + m1[6] * m2[15], m1[1] * m2[12] + m1[3] * m2[13] + m1[5] * m2[14] + m1[7] * m2[15]]);
	};
	$ptrType(Mat2x4).prototype.Mul4 = function(m2) { return new Mat2x4(this.$get()).Mul4(m2); };
	Mat2x4.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat64, [m1[0], m1[2], m1[4], m1[6], m1[1], m1[3], m1[5], m1[7]]);
	};
	$ptrType(Mat2x4).prototype.Transpose = function() { return new Mat2x4(this.$get()).Transpose(); };
	Mat2x4.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat2x4);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 8)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat2x4).prototype.ApproxEqual = function(m2) { return new Mat2x4(this.$get()).ApproxEqual(m2); };
	Mat2x4.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat2x4);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 8)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat2x4).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat2x4(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat2x4.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat2x4);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 8)) { break; } */ if(!(_i < 8)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat2x4.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat2x4).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat2x4(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat2x4.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat2x4);
		return (x = ($imul(col, 2)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat2x4).prototype.At = function(row, col) { return new Mat2x4(this.$get()).At(row, col); };
	Mat2x4.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 2)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat2x4).prototype.Set = function(row, col, value) { return (new Mat2x4(this.$get())).Set(row, col, value); };
	Mat2x4.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat2x4);
		return ($imul(col, 2)) + row >> 0;
	};
	$ptrType(Mat2x4).prototype.Index = function(row, col) { return new Mat2x4(this.$get()).Index(row, col); };
	Mat2x4.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1, x$2, x$3;
		m = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat64, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 2 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = row + 4 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2])), (x$3 = row + 6 >> 0, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3]))]);
	};
	$ptrType(Mat2x4).prototype.Row = function(row) { return new Mat2x4(this.$get()).Row(row); };
	Mat2x4.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, m, row0, row1;
		row0 = arrayType.zero();
		row1 = arrayType.zero();
		m = $clone(this.$val, Mat2x4);
		_tmp = $clone(new Mat2x4(m).Row(0), Vec4);
		_tmp$1 = $clone(new Mat2x4(m).Row(1), Vec4);
		Vec4.copy(row0, _tmp);
		Vec4.copy(row1, _tmp$1);
		return [row0, row1];
	};
	$ptrType(Mat2x4).prototype.Rows = function() { return new Mat2x4(this.$get()).Rows(); };
	Mat2x4.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1;
		m = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat64, [(x = ($imul(col, 2)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 2)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1]))]);
	};
	$ptrType(Mat2x4).prototype.Col = function(col) { return new Mat2x4(this.$get()).Col(col); };
	Mat2x4.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, col0, col1, col2, col3, m;
		col0 = arrayType$1.zero();
		col1 = arrayType$1.zero();
		col2 = arrayType$1.zero();
		col3 = arrayType$1.zero();
		m = $clone(this.$val, Mat2x4);
		_tmp = $clone(new Mat2x4(m).Col(0), Vec2);
		_tmp$1 = $clone(new Mat2x4(m).Col(1), Vec2);
		_tmp$2 = $clone(new Mat2x4(m).Col(2), Vec2);
		_tmp$3 = $clone(new Mat2x4(m).Col(3), Vec2);
		Vec2.copy(col0, _tmp);
		Vec2.copy(col1, _tmp$1);
		Vec2.copy(col2, _tmp$2);
		Vec2.copy(col3, _tmp$3);
		return [col0, col1, col2, col3];
	};
	$ptrType(Mat2x4).prototype.Cols = function() { return new Mat2x4(this.$get()).Cols(); };
	Mat2x4.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat2x4);
		return $toNativeArray($kindFloat64, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5]), Abs(m[6]), Abs(m[7])]);
	};
	$ptrType(Mat2x4).prototype.Abs = function() { return new Mat2x4(this.$get()).Abs(); };
	Mat2x4.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat2x4);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 2)) { break; } */ if(!(i < 2)) { $s = 2; continue; }
			_ref = new Mat2x4(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 4)) { break; } */ if(!(_i < 4)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float64(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat2x4.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat2x4).prototype.String = function() { return new Mat2x4(this.$get()).String(); };
	Mat3x2.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, col, m, v, x, x$1, x$2;
		v = $clone(v, Vec3);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		(x = ($imul(col, 3)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 3)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = ($imul(col, 3)) + 2 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
	};
	$ptrType(Mat3x2).prototype.SetCol = function(col, v) { return (new Mat3x2(this.$get())).SetCol(col, v); };
	Mat3x2.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, m, row, v, x, x$1;
		v = $clone(v, Vec2);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 3 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
	};
	$ptrType(Mat3x2).prototype.SetRow = function(row, v) { return (new Mat3x2(this.$get())).SetRow(row, v); };
	Mat3x2.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat64, [m1[0] + m2[0], m1[1] + m2[1], m1[2] + m2[2], m1[3] + m2[3], m1[4] + m2[4], m1[5] + m2[5]]);
	};
	$ptrType(Mat3x2).prototype.Add = function(m2) { return new Mat3x2(this.$get()).Add(m2); };
	Mat3x2.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat64, [m1[0] - m2[0], m1[1] - m2[1], m1[2] - m2[2], m1[3] - m2[3], m1[4] - m2[4], m1[5] - m2[5]]);
	};
	$ptrType(Mat3x2).prototype.Sub = function(m2) { return new Mat3x2(this.$get()).Sub(m2); };
	Mat3x2.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat64, [m1[0] * c, m1[1] * c, m1[2] * c, m1[3] * c, m1[4] * c, m1[5] * c]);
	};
	$ptrType(Mat3x2).prototype.Mul = function(c) { return new Mat3x2(this.$get()).Mul(c); };
	Mat3x2.prototype.Mul2x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec2);
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[3] * m2[1], m1[1] * m2[0] + m1[4] * m2[1], m1[2] * m2[0] + m1[5] * m2[1]]);
	};
	$ptrType(Mat3x2).prototype.Mul2x1 = function(m2) { return new Mat3x2(this.$get()).Mul2x1(m2); };
	Mat3x2.prototype.Mul2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[3] * m2[1], m1[1] * m2[0] + m1[4] * m2[1], m1[2] * m2[0] + m1[5] * m2[1], m1[0] * m2[2] + m1[3] * m2[3], m1[1] * m2[2] + m1[4] * m2[3], m1[2] * m2[2] + m1[5] * m2[3]]);
	};
	$ptrType(Mat3x2).prototype.Mul2 = function(m2) { return new Mat3x2(this.$get()).Mul2(m2); };
	Mat3x2.prototype.Mul2x3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[3] * m2[1], m1[1] * m2[0] + m1[4] * m2[1], m1[2] * m2[0] + m1[5] * m2[1], m1[0] * m2[2] + m1[3] * m2[3], m1[1] * m2[2] + m1[4] * m2[3], m1[2] * m2[2] + m1[5] * m2[3], m1[0] * m2[4] + m1[3] * m2[5], m1[1] * m2[4] + m1[4] * m2[5], m1[2] * m2[4] + m1[5] * m2[5]]);
	};
	$ptrType(Mat3x2).prototype.Mul2x3 = function(m2) { return new Mat3x2(this.$get()).Mul2x3(m2); };
	Mat3x2.prototype.Mul2x4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[3] * m2[1], m1[1] * m2[0] + m1[4] * m2[1], m1[2] * m2[0] + m1[5] * m2[1], m1[0] * m2[2] + m1[3] * m2[3], m1[1] * m2[2] + m1[4] * m2[3], m1[2] * m2[2] + m1[5] * m2[3], m1[0] * m2[4] + m1[3] * m2[5], m1[1] * m2[4] + m1[4] * m2[5], m1[2] * m2[4] + m1[5] * m2[5], m1[0] * m2[6] + m1[3] * m2[7], m1[1] * m2[6] + m1[4] * m2[7], m1[2] * m2[6] + m1[5] * m2[7]]);
	};
	$ptrType(Mat3x2).prototype.Mul2x4 = function(m2) { return new Mat3x2(this.$get()).Mul2x4(m2); };
	Mat3x2.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat64, [m1[0], m1[3], m1[1], m1[4], m1[2], m1[5]]);
	};
	$ptrType(Mat3x2).prototype.Transpose = function() { return new Mat3x2(this.$get()).Transpose(); };
	Mat3x2.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat3x2);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 6)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat3x2).prototype.ApproxEqual = function(m2) { return new Mat3x2(this.$get()).ApproxEqual(m2); };
	Mat3x2.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat3x2);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 6)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat3x2).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat3x2(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat3x2.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat3x2);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 6)) { break; } */ if(!(_i < 6)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat3x2.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat3x2).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat3x2(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat3x2.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat3x2);
		return (x = ($imul(col, 3)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat3x2).prototype.At = function(row, col) { return new Mat3x2(this.$get()).At(row, col); };
	Mat3x2.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 3)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat3x2).prototype.Set = function(row, col, value) { return (new Mat3x2(this.$get())).Set(row, col, value); };
	Mat3x2.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat3x2);
		return ($imul(col, 3)) + row >> 0;
	};
	$ptrType(Mat3x2).prototype.Index = function(row, col) { return new Mat3x2(this.$get()).Index(row, col); };
	Mat3x2.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1;
		m = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat64, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 3 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1]))]);
	};
	$ptrType(Mat3x2).prototype.Row = function(row) { return new Mat3x2(this.$get()).Row(row); };
	Mat3x2.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, m, row0, row1, row2;
		row0 = arrayType$1.zero();
		row1 = arrayType$1.zero();
		row2 = arrayType$1.zero();
		m = $clone(this.$val, Mat3x2);
		_tmp = $clone(new Mat3x2(m).Row(0), Vec2);
		_tmp$1 = $clone(new Mat3x2(m).Row(1), Vec2);
		_tmp$2 = $clone(new Mat3x2(m).Row(2), Vec2);
		Vec2.copy(row0, _tmp);
		Vec2.copy(row1, _tmp$1);
		Vec2.copy(row2, _tmp$2);
		return [row0, row1, row2];
	};
	$ptrType(Mat3x2).prototype.Rows = function() { return new Mat3x2(this.$get()).Rows(); };
	Mat3x2.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1, x$2;
		m = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat64, [(x = ($imul(col, 3)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 3)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = ($imul(col, 3)) + 2 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2]))]);
	};
	$ptrType(Mat3x2).prototype.Col = function(col) { return new Mat3x2(this.$get()).Col(col); };
	Mat3x2.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, col0, col1, m;
		col0 = arrayType$4.zero();
		col1 = arrayType$4.zero();
		m = $clone(this.$val, Mat3x2);
		_tmp = $clone(new Mat3x2(m).Col(0), Vec3);
		_tmp$1 = $clone(new Mat3x2(m).Col(1), Vec3);
		Vec3.copy(col0, _tmp);
		Vec3.copy(col1, _tmp$1);
		return [col0, col1];
	};
	$ptrType(Mat3x2).prototype.Cols = function() { return new Mat3x2(this.$get()).Cols(); };
	Mat3x2.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat3x2);
		return $toNativeArray($kindFloat64, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5])]);
	};
	$ptrType(Mat3x2).prototype.Abs = function() { return new Mat3x2(this.$get()).Abs(); };
	Mat3x2.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat3x2);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 3)) { break; } */ if(!(i < 3)) { $s = 2; continue; }
			_ref = new Mat3x2(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 2)) { break; } */ if(!(_i < 2)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float64(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat3x2.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat3x2).prototype.String = function() { return new Mat3x2(this.$get()).String(); };
	Mat3.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, col, m, v, x, x$1, x$2;
		v = $clone(v, Vec3);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		(x = ($imul(col, 3)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 3)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = ($imul(col, 3)) + 2 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
	};
	$ptrType(Mat3).prototype.SetCol = function(col, v) { return (new Mat3(this.$get())).SetCol(col, v); };
	Mat3.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, m, row, v, x, x$1, x$2;
		v = $clone(v, Vec3);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 3 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = row + 6 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
	};
	$ptrType(Mat3).prototype.SetRow = function(row, v) { return (new Mat3(this.$get())).SetRow(row, v); };
	Mat3.prototype.Diag = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat64, [m[0], m[4], m[8]]);
	};
	$ptrType(Mat3).prototype.Diag = function() { return new Mat3(this.$get()).Diag(); };
	Mat3FromCols = function(col0, col1, col2) {
		var $ptr, col0, col1, col2;
		col2 = $clone(col2, Vec3);
		col1 = $clone(col1, Vec3);
		col0 = $clone(col0, Vec3);
		return $toNativeArray($kindFloat64, [col0[0], col0[1], col0[2], col1[0], col1[1], col1[2], col2[0], col2[1], col2[2]]);
	};
	$pkg.Mat3FromCols = Mat3FromCols;
	Mat3.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat64, [m1[0] + m2[0], m1[1] + m2[1], m1[2] + m2[2], m1[3] + m2[3], m1[4] + m2[4], m1[5] + m2[5], m1[6] + m2[6], m1[7] + m2[7], m1[8] + m2[8]]);
	};
	$ptrType(Mat3).prototype.Add = function(m2) { return new Mat3(this.$get()).Add(m2); };
	Mat3.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat64, [m1[0] - m2[0], m1[1] - m2[1], m1[2] - m2[2], m1[3] - m2[3], m1[4] - m2[4], m1[5] - m2[5], m1[6] - m2[6], m1[7] - m2[7], m1[8] - m2[8]]);
	};
	$ptrType(Mat3).prototype.Sub = function(m2) { return new Mat3(this.$get()).Sub(m2); };
	Mat3.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat64, [m1[0] * c, m1[1] * c, m1[2] * c, m1[3] * c, m1[4] * c, m1[5] * c, m1[6] * c, m1[7] * c, m1[8] * c]);
	};
	$ptrType(Mat3).prototype.Mul = function(c) { return new Mat3(this.$get()).Mul(c); };
	Mat3.prototype.Mul3x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec3);
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[3] * m2[1] + m1[6] * m2[2], m1[1] * m2[0] + m1[4] * m2[1] + m1[7] * m2[2], m1[2] * m2[0] + m1[5] * m2[1] + m1[8] * m2[2]]);
	};
	$ptrType(Mat3).prototype.Mul3x1 = function(m2) { return new Mat3(this.$get()).Mul3x1(m2); };
	Mat3.prototype.Mul3x2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[3] * m2[1] + m1[6] * m2[2], m1[1] * m2[0] + m1[4] * m2[1] + m1[7] * m2[2], m1[2] * m2[0] + m1[5] * m2[1] + m1[8] * m2[2], m1[0] * m2[3] + m1[3] * m2[4] + m1[6] * m2[5], m1[1] * m2[3] + m1[4] * m2[4] + m1[7] * m2[5], m1[2] * m2[3] + m1[5] * m2[4] + m1[8] * m2[5]]);
	};
	$ptrType(Mat3).prototype.Mul3x2 = function(m2) { return new Mat3(this.$get()).Mul3x2(m2); };
	Mat3.prototype.Mul3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[3] * m2[1] + m1[6] * m2[2], m1[1] * m2[0] + m1[4] * m2[1] + m1[7] * m2[2], m1[2] * m2[0] + m1[5] * m2[1] + m1[8] * m2[2], m1[0] * m2[3] + m1[3] * m2[4] + m1[6] * m2[5], m1[1] * m2[3] + m1[4] * m2[4] + m1[7] * m2[5], m1[2] * m2[3] + m1[5] * m2[4] + m1[8] * m2[5], m1[0] * m2[6] + m1[3] * m2[7] + m1[6] * m2[8], m1[1] * m2[6] + m1[4] * m2[7] + m1[7] * m2[8], m1[2] * m2[6] + m1[5] * m2[7] + m1[8] * m2[8]]);
	};
	$ptrType(Mat3).prototype.Mul3 = function(m2) { return new Mat3(this.$get()).Mul3(m2); };
	Mat3.prototype.Mul3x4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[3] * m2[1] + m1[6] * m2[2], m1[1] * m2[0] + m1[4] * m2[1] + m1[7] * m2[2], m1[2] * m2[0] + m1[5] * m2[1] + m1[8] * m2[2], m1[0] * m2[3] + m1[3] * m2[4] + m1[6] * m2[5], m1[1] * m2[3] + m1[4] * m2[4] + m1[7] * m2[5], m1[2] * m2[3] + m1[5] * m2[4] + m1[8] * m2[5], m1[0] * m2[6] + m1[3] * m2[7] + m1[6] * m2[8], m1[1] * m2[6] + m1[4] * m2[7] + m1[7] * m2[8], m1[2] * m2[6] + m1[5] * m2[7] + m1[8] * m2[8], m1[0] * m2[9] + m1[3] * m2[10] + m1[6] * m2[11], m1[1] * m2[9] + m1[4] * m2[10] + m1[7] * m2[11], m1[2] * m2[9] + m1[5] * m2[10] + m1[8] * m2[11]]);
	};
	$ptrType(Mat3).prototype.Mul3x4 = function(m2) { return new Mat3(this.$get()).Mul3x4(m2); };
	Mat3.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat64, [m1[0], m1[3], m1[6], m1[1], m1[4], m1[7], m1[2], m1[5], m1[8]]);
	};
	$ptrType(Mat3).prototype.Transpose = function() { return new Mat3(this.$get()).Transpose(); };
	Mat3.prototype.Det = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat3);
		return m[0] * m[4] * m[8] + m[3] * m[7] * m[2] + m[6] * m[1] * m[5] - m[6] * m[4] * m[2] - m[3] * m[1] * m[8] - m[0] * m[7] * m[5];
	};
	$ptrType(Mat3).prototype.Det = function() { return new Mat3(this.$get()).Det(); };
	Mat3.prototype.Inv = function() {
		var $ptr, det, m, retMat;
		m = $clone(this.$val, Mat3);
		det = new Mat3(m).Det();
		if (FloatEqual(det, 0)) {
			return arrayType$5.zero();
		}
		retMat = $toNativeArray($kindFloat64, [m[4] * m[8] - m[5] * m[7], m[2] * m[7] - m[1] * m[8], m[1] * m[5] - m[2] * m[4], m[5] * m[6] - m[3] * m[8], m[0] * m[8] - m[2] * m[6], m[2] * m[3] - m[0] * m[5], m[3] * m[7] - m[4] * m[6], m[1] * m[6] - m[0] * m[7], m[0] * m[4] - m[1] * m[3]]);
		return new Mat3(retMat).Mul(1 / det);
	};
	$ptrType(Mat3).prototype.Inv = function() { return new Mat3(this.$get()).Inv(); };
	Mat3.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat3);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 9)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat3).prototype.ApproxEqual = function(m2) { return new Mat3(this.$get()).ApproxEqual(m2); };
	Mat3.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat3);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 9)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat3).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat3(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat3.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat3);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 9)) { break; } */ if(!(_i < 9)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat3.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat3).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat3(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat3.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat3);
		return (x = ($imul(col, 3)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat3).prototype.At = function(row, col) { return new Mat3(this.$get()).At(row, col); };
	Mat3.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 3)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat3).prototype.Set = function(row, col, value) { return (new Mat3(this.$get())).Set(row, col, value); };
	Mat3.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat3);
		return ($imul(col, 3)) + row >> 0;
	};
	$ptrType(Mat3).prototype.Index = function(row, col) { return new Mat3(this.$get()).Index(row, col); };
	Mat3.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1, x$2;
		m = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat64, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 3 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = row + 6 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2]))]);
	};
	$ptrType(Mat3).prototype.Row = function(row) { return new Mat3(this.$get()).Row(row); };
	Mat3.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, m, row0, row1, row2;
		row0 = arrayType$4.zero();
		row1 = arrayType$4.zero();
		row2 = arrayType$4.zero();
		m = $clone(this.$val, Mat3);
		_tmp = $clone(new Mat3(m).Row(0), Vec3);
		_tmp$1 = $clone(new Mat3(m).Row(1), Vec3);
		_tmp$2 = $clone(new Mat3(m).Row(2), Vec3);
		Vec3.copy(row0, _tmp);
		Vec3.copy(row1, _tmp$1);
		Vec3.copy(row2, _tmp$2);
		return [row0, row1, row2];
	};
	$ptrType(Mat3).prototype.Rows = function() { return new Mat3(this.$get()).Rows(); };
	Mat3.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1, x$2;
		m = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat64, [(x = ($imul(col, 3)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 3)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = ($imul(col, 3)) + 2 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2]))]);
	};
	$ptrType(Mat3).prototype.Col = function(col) { return new Mat3(this.$get()).Col(col); };
	Mat3.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, col0, col1, col2, m;
		col0 = arrayType$4.zero();
		col1 = arrayType$4.zero();
		col2 = arrayType$4.zero();
		m = $clone(this.$val, Mat3);
		_tmp = $clone(new Mat3(m).Col(0), Vec3);
		_tmp$1 = $clone(new Mat3(m).Col(1), Vec3);
		_tmp$2 = $clone(new Mat3(m).Col(2), Vec3);
		Vec3.copy(col0, _tmp);
		Vec3.copy(col1, _tmp$1);
		Vec3.copy(col2, _tmp$2);
		return [col0, col1, col2];
	};
	$ptrType(Mat3).prototype.Cols = function() { return new Mat3(this.$get()).Cols(); };
	Mat3.prototype.Trace = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat3);
		return m[0] + m[4] + m[8];
	};
	$ptrType(Mat3).prototype.Trace = function() { return new Mat3(this.$get()).Trace(); };
	Mat3.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat3);
		return $toNativeArray($kindFloat64, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5]), Abs(m[6]), Abs(m[7]), Abs(m[8])]);
	};
	$ptrType(Mat3).prototype.Abs = function() { return new Mat3(this.$get()).Abs(); };
	Mat3.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat3);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 3)) { break; } */ if(!(i < 3)) { $s = 2; continue; }
			_ref = new Mat3(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 3)) { break; } */ if(!(_i < 3)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float64(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat3.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat3).prototype.String = function() { return new Mat3(this.$get()).String(); };
	Mat3x4.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, col, m, v, x, x$1, x$2;
		v = $clone(v, Vec3);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		(x = ($imul(col, 3)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 3)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = ($imul(col, 3)) + 2 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
	};
	$ptrType(Mat3x4).prototype.SetCol = function(col, v) { return (new Mat3x4(this.$get())).SetCol(col, v); };
	Mat3x4.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, m, row, v, x, x$1, x$2, x$3;
		v = $clone(v, Vec4);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 3 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = row + 6 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
		(x$3 = row + 9 >> 0, m.nilCheck, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3] = _tmp$3));
	};
	$ptrType(Mat3x4).prototype.SetRow = function(row, v) { return (new Mat3x4(this.$get())).SetRow(row, v); };
	Mat3x4.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat64, [m1[0] + m2[0], m1[1] + m2[1], m1[2] + m2[2], m1[3] + m2[3], m1[4] + m2[4], m1[5] + m2[5], m1[6] + m2[6], m1[7] + m2[7], m1[8] + m2[8], m1[9] + m2[9], m1[10] + m2[10], m1[11] + m2[11]]);
	};
	$ptrType(Mat3x4).prototype.Add = function(m2) { return new Mat3x4(this.$get()).Add(m2); };
	Mat3x4.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat64, [m1[0] - m2[0], m1[1] - m2[1], m1[2] - m2[2], m1[3] - m2[3], m1[4] - m2[4], m1[5] - m2[5], m1[6] - m2[6], m1[7] - m2[7], m1[8] - m2[8], m1[9] - m2[9], m1[10] - m2[10], m1[11] - m2[11]]);
	};
	$ptrType(Mat3x4).prototype.Sub = function(m2) { return new Mat3x4(this.$get()).Sub(m2); };
	Mat3x4.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat64, [m1[0] * c, m1[1] * c, m1[2] * c, m1[3] * c, m1[4] * c, m1[5] * c, m1[6] * c, m1[7] * c, m1[8] * c, m1[9] * c, m1[10] * c, m1[11] * c]);
	};
	$ptrType(Mat3x4).prototype.Mul = function(c) { return new Mat3x4(this.$get()).Mul(c); };
	Mat3x4.prototype.Mul4x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec4);
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[3] * m2[1] + m1[6] * m2[2] + m1[9] * m2[3], m1[1] * m2[0] + m1[4] * m2[1] + m1[7] * m2[2] + m1[10] * m2[3], m1[2] * m2[0] + m1[5] * m2[1] + m1[8] * m2[2] + m1[11] * m2[3]]);
	};
	$ptrType(Mat3x4).prototype.Mul4x1 = function(m2) { return new Mat3x4(this.$get()).Mul4x1(m2); };
	Mat3x4.prototype.Mul4x2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[3] * m2[1] + m1[6] * m2[2] + m1[9] * m2[3], m1[1] * m2[0] + m1[4] * m2[1] + m1[7] * m2[2] + m1[10] * m2[3], m1[2] * m2[0] + m1[5] * m2[1] + m1[8] * m2[2] + m1[11] * m2[3], m1[0] * m2[4] + m1[3] * m2[5] + m1[6] * m2[6] + m1[9] * m2[7], m1[1] * m2[4] + m1[4] * m2[5] + m1[7] * m2[6] + m1[10] * m2[7], m1[2] * m2[4] + m1[5] * m2[5] + m1[8] * m2[6] + m1[11] * m2[7]]);
	};
	$ptrType(Mat3x4).prototype.Mul4x2 = function(m2) { return new Mat3x4(this.$get()).Mul4x2(m2); };
	Mat3x4.prototype.Mul4x3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[3] * m2[1] + m1[6] * m2[2] + m1[9] * m2[3], m1[1] * m2[0] + m1[4] * m2[1] + m1[7] * m2[2] + m1[10] * m2[3], m1[2] * m2[0] + m1[5] * m2[1] + m1[8] * m2[2] + m1[11] * m2[3], m1[0] * m2[4] + m1[3] * m2[5] + m1[6] * m2[6] + m1[9] * m2[7], m1[1] * m2[4] + m1[4] * m2[5] + m1[7] * m2[6] + m1[10] * m2[7], m1[2] * m2[4] + m1[5] * m2[5] + m1[8] * m2[6] + m1[11] * m2[7], m1[0] * m2[8] + m1[3] * m2[9] + m1[6] * m2[10] + m1[9] * m2[11], m1[1] * m2[8] + m1[4] * m2[9] + m1[7] * m2[10] + m1[10] * m2[11], m1[2] * m2[8] + m1[5] * m2[9] + m1[8] * m2[10] + m1[11] * m2[11]]);
	};
	$ptrType(Mat3x4).prototype.Mul4x3 = function(m2) { return new Mat3x4(this.$get()).Mul4x3(m2); };
	Mat3x4.prototype.Mul4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[3] * m2[1] + m1[6] * m2[2] + m1[9] * m2[3], m1[1] * m2[0] + m1[4] * m2[1] + m1[7] * m2[2] + m1[10] * m2[3], m1[2] * m2[0] + m1[5] * m2[1] + m1[8] * m2[2] + m1[11] * m2[3], m1[0] * m2[4] + m1[3] * m2[5] + m1[6] * m2[6] + m1[9] * m2[7], m1[1] * m2[4] + m1[4] * m2[5] + m1[7] * m2[6] + m1[10] * m2[7], m1[2] * m2[4] + m1[5] * m2[5] + m1[8] * m2[6] + m1[11] * m2[7], m1[0] * m2[8] + m1[3] * m2[9] + m1[6] * m2[10] + m1[9] * m2[11], m1[1] * m2[8] + m1[4] * m2[9] + m1[7] * m2[10] + m1[10] * m2[11], m1[2] * m2[8] + m1[5] * m2[9] + m1[8] * m2[10] + m1[11] * m2[11], m1[0] * m2[12] + m1[3] * m2[13] + m1[6] * m2[14] + m1[9] * m2[15], m1[1] * m2[12] + m1[4] * m2[13] + m1[7] * m2[14] + m1[10] * m2[15], m1[2] * m2[12] + m1[5] * m2[13] + m1[8] * m2[14] + m1[11] * m2[15]]);
	};
	$ptrType(Mat3x4).prototype.Mul4 = function(m2) { return new Mat3x4(this.$get()).Mul4(m2); };
	Mat3x4.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat64, [m1[0], m1[3], m1[6], m1[9], m1[1], m1[4], m1[7], m1[10], m1[2], m1[5], m1[8], m1[11]]);
	};
	$ptrType(Mat3x4).prototype.Transpose = function() { return new Mat3x4(this.$get()).Transpose(); };
	Mat3x4.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat3x4);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 12)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat3x4).prototype.ApproxEqual = function(m2) { return new Mat3x4(this.$get()).ApproxEqual(m2); };
	Mat3x4.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat3x4);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 12)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat3x4).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat3x4(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat3x4.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat3x4);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 12)) { break; } */ if(!(_i < 12)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat3x4.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat3x4).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat3x4(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat3x4.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat3x4);
		return (x = ($imul(col, 3)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat3x4).prototype.At = function(row, col) { return new Mat3x4(this.$get()).At(row, col); };
	Mat3x4.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 3)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat3x4).prototype.Set = function(row, col, value) { return (new Mat3x4(this.$get())).Set(row, col, value); };
	Mat3x4.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat3x4);
		return ($imul(col, 3)) + row >> 0;
	};
	$ptrType(Mat3x4).prototype.Index = function(row, col) { return new Mat3x4(this.$get()).Index(row, col); };
	Mat3x4.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1, x$2, x$3;
		m = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat64, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 3 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = row + 6 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2])), (x$3 = row + 9 >> 0, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3]))]);
	};
	$ptrType(Mat3x4).prototype.Row = function(row) { return new Mat3x4(this.$get()).Row(row); };
	Mat3x4.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, m, row0, row1, row2;
		row0 = arrayType.zero();
		row1 = arrayType.zero();
		row2 = arrayType.zero();
		m = $clone(this.$val, Mat3x4);
		_tmp = $clone(new Mat3x4(m).Row(0), Vec4);
		_tmp$1 = $clone(new Mat3x4(m).Row(1), Vec4);
		_tmp$2 = $clone(new Mat3x4(m).Row(2), Vec4);
		Vec4.copy(row0, _tmp);
		Vec4.copy(row1, _tmp$1);
		Vec4.copy(row2, _tmp$2);
		return [row0, row1, row2];
	};
	$ptrType(Mat3x4).prototype.Rows = function() { return new Mat3x4(this.$get()).Rows(); };
	Mat3x4.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1, x$2;
		m = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat64, [(x = ($imul(col, 3)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 3)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = ($imul(col, 3)) + 2 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2]))]);
	};
	$ptrType(Mat3x4).prototype.Col = function(col) { return new Mat3x4(this.$get()).Col(col); };
	Mat3x4.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, col0, col1, col2, col3, m;
		col0 = arrayType$4.zero();
		col1 = arrayType$4.zero();
		col2 = arrayType$4.zero();
		col3 = arrayType$4.zero();
		m = $clone(this.$val, Mat3x4);
		_tmp = $clone(new Mat3x4(m).Col(0), Vec3);
		_tmp$1 = $clone(new Mat3x4(m).Col(1), Vec3);
		_tmp$2 = $clone(new Mat3x4(m).Col(2), Vec3);
		_tmp$3 = $clone(new Mat3x4(m).Col(3), Vec3);
		Vec3.copy(col0, _tmp);
		Vec3.copy(col1, _tmp$1);
		Vec3.copy(col2, _tmp$2);
		Vec3.copy(col3, _tmp$3);
		return [col0, col1, col2, col3];
	};
	$ptrType(Mat3x4).prototype.Cols = function() { return new Mat3x4(this.$get()).Cols(); };
	Mat3x4.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat3x4);
		return $toNativeArray($kindFloat64, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5]), Abs(m[6]), Abs(m[7]), Abs(m[8]), Abs(m[9]), Abs(m[10]), Abs(m[11])]);
	};
	$ptrType(Mat3x4).prototype.Abs = function() { return new Mat3x4(this.$get()).Abs(); };
	Mat3x4.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat3x4);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 3)) { break; } */ if(!(i < 3)) { $s = 2; continue; }
			_ref = new Mat3x4(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 4)) { break; } */ if(!(_i < 4)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float64(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat3x4.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat3x4).prototype.String = function() { return new Mat3x4(this.$get()).String(); };
	Mat4x2.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, col, m, v, x, x$1, x$2, x$3;
		v = $clone(v, Vec4);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		(x = ($imul(col, 4)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 4)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = ($imul(col, 4)) + 2 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
		(x$3 = ($imul(col, 4)) + 3 >> 0, m.nilCheck, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3] = _tmp$3));
	};
	$ptrType(Mat4x2).prototype.SetCol = function(col, v) { return (new Mat4x2(this.$get())).SetCol(col, v); };
	Mat4x2.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, m, row, v, x, x$1;
		v = $clone(v, Vec2);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 4 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
	};
	$ptrType(Mat4x2).prototype.SetRow = function(row, v) { return (new Mat4x2(this.$get())).SetRow(row, v); };
	Mat4x2.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat64, [m1[0] + m2[0], m1[1] + m2[1], m1[2] + m2[2], m1[3] + m2[3], m1[4] + m2[4], m1[5] + m2[5], m1[6] + m2[6], m1[7] + m2[7]]);
	};
	$ptrType(Mat4x2).prototype.Add = function(m2) { return new Mat4x2(this.$get()).Add(m2); };
	Mat4x2.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat64, [m1[0] - m2[0], m1[1] - m2[1], m1[2] - m2[2], m1[3] - m2[3], m1[4] - m2[4], m1[5] - m2[5], m1[6] - m2[6], m1[7] - m2[7]]);
	};
	$ptrType(Mat4x2).prototype.Sub = function(m2) { return new Mat4x2(this.$get()).Sub(m2); };
	Mat4x2.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat64, [m1[0] * c, m1[1] * c, m1[2] * c, m1[3] * c, m1[4] * c, m1[5] * c, m1[6] * c, m1[7] * c]);
	};
	$ptrType(Mat4x2).prototype.Mul = function(c) { return new Mat4x2(this.$get()).Mul(c); };
	Mat4x2.prototype.Mul2x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec2);
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[4] * m2[1], m1[1] * m2[0] + m1[5] * m2[1], m1[2] * m2[0] + m1[6] * m2[1], m1[3] * m2[0] + m1[7] * m2[1]]);
	};
	$ptrType(Mat4x2).prototype.Mul2x1 = function(m2) { return new Mat4x2(this.$get()).Mul2x1(m2); };
	Mat4x2.prototype.Mul2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2);
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[4] * m2[1], m1[1] * m2[0] + m1[5] * m2[1], m1[2] * m2[0] + m1[6] * m2[1], m1[3] * m2[0] + m1[7] * m2[1], m1[0] * m2[2] + m1[4] * m2[3], m1[1] * m2[2] + m1[5] * m2[3], m1[2] * m2[2] + m1[6] * m2[3], m1[3] * m2[2] + m1[7] * m2[3]]);
	};
	$ptrType(Mat4x2).prototype.Mul2 = function(m2) { return new Mat4x2(this.$get()).Mul2(m2); };
	Mat4x2.prototype.Mul2x3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x3);
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[4] * m2[1], m1[1] * m2[0] + m1[5] * m2[1], m1[2] * m2[0] + m1[6] * m2[1], m1[3] * m2[0] + m1[7] * m2[1], m1[0] * m2[2] + m1[4] * m2[3], m1[1] * m2[2] + m1[5] * m2[3], m1[2] * m2[2] + m1[6] * m2[3], m1[3] * m2[2] + m1[7] * m2[3], m1[0] * m2[4] + m1[4] * m2[5], m1[1] * m2[4] + m1[5] * m2[5], m1[2] * m2[4] + m1[6] * m2[5], m1[3] * m2[4] + m1[7] * m2[5]]);
	};
	$ptrType(Mat4x2).prototype.Mul2x3 = function(m2) { return new Mat4x2(this.$get()).Mul2x3(m2); };
	Mat4x2.prototype.Mul2x4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat2x4);
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[4] * m2[1], m1[1] * m2[0] + m1[5] * m2[1], m1[2] * m2[0] + m1[6] * m2[1], m1[3] * m2[0] + m1[7] * m2[1], m1[0] * m2[2] + m1[4] * m2[3], m1[1] * m2[2] + m1[5] * m2[3], m1[2] * m2[2] + m1[6] * m2[3], m1[3] * m2[2] + m1[7] * m2[3], m1[0] * m2[4] + m1[4] * m2[5], m1[1] * m2[4] + m1[5] * m2[5], m1[2] * m2[4] + m1[6] * m2[5], m1[3] * m2[4] + m1[7] * m2[5], m1[0] * m2[6] + m1[4] * m2[7], m1[1] * m2[6] + m1[5] * m2[7], m1[2] * m2[6] + m1[6] * m2[7], m1[3] * m2[6] + m1[7] * m2[7]]);
	};
	$ptrType(Mat4x2).prototype.Mul2x4 = function(m2) { return new Mat4x2(this.$get()).Mul2x4(m2); };
	Mat4x2.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat64, [m1[0], m1[4], m1[1], m1[5], m1[2], m1[6], m1[3], m1[7]]);
	};
	$ptrType(Mat4x2).prototype.Transpose = function() { return new Mat4x2(this.$get()).Transpose(); };
	Mat4x2.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat4x2);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 8)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat4x2).prototype.ApproxEqual = function(m2) { return new Mat4x2(this.$get()).ApproxEqual(m2); };
	Mat4x2.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat4x2);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 8)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat4x2).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat4x2(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat4x2.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat4x2);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 8)) { break; } */ if(!(_i < 8)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat4x2.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat4x2).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat4x2(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat4x2.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat4x2);
		return (x = ($imul(col, 4)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat4x2).prototype.At = function(row, col) { return new Mat4x2(this.$get()).At(row, col); };
	Mat4x2.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 4)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat4x2).prototype.Set = function(row, col, value) { return (new Mat4x2(this.$get())).Set(row, col, value); };
	Mat4x2.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat4x2);
		return ($imul(col, 4)) + row >> 0;
	};
	$ptrType(Mat4x2).prototype.Index = function(row, col) { return new Mat4x2(this.$get()).Index(row, col); };
	Mat4x2.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1;
		m = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat64, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 4 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1]))]);
	};
	$ptrType(Mat4x2).prototype.Row = function(row) { return new Mat4x2(this.$get()).Row(row); };
	Mat4x2.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, m, row0, row1, row2, row3;
		row0 = arrayType$1.zero();
		row1 = arrayType$1.zero();
		row2 = arrayType$1.zero();
		row3 = arrayType$1.zero();
		m = $clone(this.$val, Mat4x2);
		_tmp = $clone(new Mat4x2(m).Row(0), Vec2);
		_tmp$1 = $clone(new Mat4x2(m).Row(1), Vec2);
		_tmp$2 = $clone(new Mat4x2(m).Row(2), Vec2);
		_tmp$3 = $clone(new Mat4x2(m).Row(3), Vec2);
		Vec2.copy(row0, _tmp);
		Vec2.copy(row1, _tmp$1);
		Vec2.copy(row2, _tmp$2);
		Vec2.copy(row3, _tmp$3);
		return [row0, row1, row2, row3];
	};
	$ptrType(Mat4x2).prototype.Rows = function() { return new Mat4x2(this.$get()).Rows(); };
	Mat4x2.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1, x$2, x$3;
		m = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat64, [(x = ($imul(col, 4)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 4)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = ($imul(col, 4)) + 2 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2])), (x$3 = ($imul(col, 4)) + 3 >> 0, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3]))]);
	};
	$ptrType(Mat4x2).prototype.Col = function(col) { return new Mat4x2(this.$get()).Col(col); };
	Mat4x2.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, col0, col1, m;
		col0 = arrayType.zero();
		col1 = arrayType.zero();
		m = $clone(this.$val, Mat4x2);
		_tmp = $clone(new Mat4x2(m).Col(0), Vec4);
		_tmp$1 = $clone(new Mat4x2(m).Col(1), Vec4);
		Vec4.copy(col0, _tmp);
		Vec4.copy(col1, _tmp$1);
		return [col0, col1];
	};
	$ptrType(Mat4x2).prototype.Cols = function() { return new Mat4x2(this.$get()).Cols(); };
	Mat4x2.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat4x2);
		return $toNativeArray($kindFloat64, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5]), Abs(m[6]), Abs(m[7])]);
	};
	$ptrType(Mat4x2).prototype.Abs = function() { return new Mat4x2(this.$get()).Abs(); };
	Mat4x2.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat4x2);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 4)) { break; } */ if(!(i < 4)) { $s = 2; continue; }
			_ref = new Mat4x2(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 2)) { break; } */ if(!(_i < 2)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float64(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat4x2.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat4x2).prototype.String = function() { return new Mat4x2(this.$get()).String(); };
	Mat4x3.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, col, m, v, x, x$1, x$2, x$3;
		v = $clone(v, Vec4);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		(x = ($imul(col, 4)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 4)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = ($imul(col, 4)) + 2 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
		(x$3 = ($imul(col, 4)) + 3 >> 0, m.nilCheck, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3] = _tmp$3));
	};
	$ptrType(Mat4x3).prototype.SetCol = function(col, v) { return (new Mat4x3(this.$get())).SetCol(col, v); };
	Mat4x3.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, m, row, v, x, x$1, x$2;
		v = $clone(v, Vec3);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 4 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = row + 8 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
	};
	$ptrType(Mat4x3).prototype.SetRow = function(row, v) { return (new Mat4x3(this.$get())).SetRow(row, v); };
	Mat4x3.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat64, [m1[0] + m2[0], m1[1] + m2[1], m1[2] + m2[2], m1[3] + m2[3], m1[4] + m2[4], m1[5] + m2[5], m1[6] + m2[6], m1[7] + m2[7], m1[8] + m2[8], m1[9] + m2[9], m1[10] + m2[10], m1[11] + m2[11]]);
	};
	$ptrType(Mat4x3).prototype.Add = function(m2) { return new Mat4x3(this.$get()).Add(m2); };
	Mat4x3.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat64, [m1[0] - m2[0], m1[1] - m2[1], m1[2] - m2[2], m1[3] - m2[3], m1[4] - m2[4], m1[5] - m2[5], m1[6] - m2[6], m1[7] - m2[7], m1[8] - m2[8], m1[9] - m2[9], m1[10] - m2[10], m1[11] - m2[11]]);
	};
	$ptrType(Mat4x3).prototype.Sub = function(m2) { return new Mat4x3(this.$get()).Sub(m2); };
	Mat4x3.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat64, [m1[0] * c, m1[1] * c, m1[2] * c, m1[3] * c, m1[4] * c, m1[5] * c, m1[6] * c, m1[7] * c, m1[8] * c, m1[9] * c, m1[10] * c, m1[11] * c]);
	};
	$ptrType(Mat4x3).prototype.Mul = function(c) { return new Mat4x3(this.$get()).Mul(c); };
	Mat4x3.prototype.Mul3x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec3);
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[4] * m2[1] + m1[8] * m2[2], m1[1] * m2[0] + m1[5] * m2[1] + m1[9] * m2[2], m1[2] * m2[0] + m1[6] * m2[1] + m1[10] * m2[2], m1[3] * m2[0] + m1[7] * m2[1] + m1[11] * m2[2]]);
	};
	$ptrType(Mat4x3).prototype.Mul3x1 = function(m2) { return new Mat4x3(this.$get()).Mul3x1(m2); };
	Mat4x3.prototype.Mul3x2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x2);
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[4] * m2[1] + m1[8] * m2[2], m1[1] * m2[0] + m1[5] * m2[1] + m1[9] * m2[2], m1[2] * m2[0] + m1[6] * m2[1] + m1[10] * m2[2], m1[3] * m2[0] + m1[7] * m2[1] + m1[11] * m2[2], m1[0] * m2[3] + m1[4] * m2[4] + m1[8] * m2[5], m1[1] * m2[3] + m1[5] * m2[4] + m1[9] * m2[5], m1[2] * m2[3] + m1[6] * m2[4] + m1[10] * m2[5], m1[3] * m2[3] + m1[7] * m2[4] + m1[11] * m2[5]]);
	};
	$ptrType(Mat4x3).prototype.Mul3x2 = function(m2) { return new Mat4x3(this.$get()).Mul3x2(m2); };
	Mat4x3.prototype.Mul3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3);
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[4] * m2[1] + m1[8] * m2[2], m1[1] * m2[0] + m1[5] * m2[1] + m1[9] * m2[2], m1[2] * m2[0] + m1[6] * m2[1] + m1[10] * m2[2], m1[3] * m2[0] + m1[7] * m2[1] + m1[11] * m2[2], m1[0] * m2[3] + m1[4] * m2[4] + m1[8] * m2[5], m1[1] * m2[3] + m1[5] * m2[4] + m1[9] * m2[5], m1[2] * m2[3] + m1[6] * m2[4] + m1[10] * m2[5], m1[3] * m2[3] + m1[7] * m2[4] + m1[11] * m2[5], m1[0] * m2[6] + m1[4] * m2[7] + m1[8] * m2[8], m1[1] * m2[6] + m1[5] * m2[7] + m1[9] * m2[8], m1[2] * m2[6] + m1[6] * m2[7] + m1[10] * m2[8], m1[3] * m2[6] + m1[7] * m2[7] + m1[11] * m2[8]]);
	};
	$ptrType(Mat4x3).prototype.Mul3 = function(m2) { return new Mat4x3(this.$get()).Mul3(m2); };
	Mat4x3.prototype.Mul3x4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat3x4);
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[4] * m2[1] + m1[8] * m2[2], m1[1] * m2[0] + m1[5] * m2[1] + m1[9] * m2[2], m1[2] * m2[0] + m1[6] * m2[1] + m1[10] * m2[2], m1[3] * m2[0] + m1[7] * m2[1] + m1[11] * m2[2], m1[0] * m2[3] + m1[4] * m2[4] + m1[8] * m2[5], m1[1] * m2[3] + m1[5] * m2[4] + m1[9] * m2[5], m1[2] * m2[3] + m1[6] * m2[4] + m1[10] * m2[5], m1[3] * m2[3] + m1[7] * m2[4] + m1[11] * m2[5], m1[0] * m2[6] + m1[4] * m2[7] + m1[8] * m2[8], m1[1] * m2[6] + m1[5] * m2[7] + m1[9] * m2[8], m1[2] * m2[6] + m1[6] * m2[7] + m1[10] * m2[8], m1[3] * m2[6] + m1[7] * m2[7] + m1[11] * m2[8], m1[0] * m2[9] + m1[4] * m2[10] + m1[8] * m2[11], m1[1] * m2[9] + m1[5] * m2[10] + m1[9] * m2[11], m1[2] * m2[9] + m1[6] * m2[10] + m1[10] * m2[11], m1[3] * m2[9] + m1[7] * m2[10] + m1[11] * m2[11]]);
	};
	$ptrType(Mat4x3).prototype.Mul3x4 = function(m2) { return new Mat4x3(this.$get()).Mul3x4(m2); };
	Mat4x3.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat64, [m1[0], m1[4], m1[8], m1[1], m1[5], m1[9], m1[2], m1[6], m1[10], m1[3], m1[7], m1[11]]);
	};
	$ptrType(Mat4x3).prototype.Transpose = function() { return new Mat4x3(this.$get()).Transpose(); };
	Mat4x3.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat4x3);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 12)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat4x3).prototype.ApproxEqual = function(m2) { return new Mat4x3(this.$get()).ApproxEqual(m2); };
	Mat4x3.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat4x3);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 12)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat4x3).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat4x3(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat4x3.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat4x3);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 12)) { break; } */ if(!(_i < 12)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat4x3.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat4x3).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat4x3(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat4x3.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat4x3);
		return (x = ($imul(col, 4)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat4x3).prototype.At = function(row, col) { return new Mat4x3(this.$get()).At(row, col); };
	Mat4x3.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 4)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat4x3).prototype.Set = function(row, col, value) { return (new Mat4x3(this.$get())).Set(row, col, value); };
	Mat4x3.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat4x3);
		return ($imul(col, 4)) + row >> 0;
	};
	$ptrType(Mat4x3).prototype.Index = function(row, col) { return new Mat4x3(this.$get()).Index(row, col); };
	Mat4x3.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1, x$2;
		m = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat64, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 4 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = row + 8 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2]))]);
	};
	$ptrType(Mat4x3).prototype.Row = function(row) { return new Mat4x3(this.$get()).Row(row); };
	Mat4x3.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, m, row0, row1, row2, row3;
		row0 = arrayType$4.zero();
		row1 = arrayType$4.zero();
		row2 = arrayType$4.zero();
		row3 = arrayType$4.zero();
		m = $clone(this.$val, Mat4x3);
		_tmp = $clone(new Mat4x3(m).Row(0), Vec3);
		_tmp$1 = $clone(new Mat4x3(m).Row(1), Vec3);
		_tmp$2 = $clone(new Mat4x3(m).Row(2), Vec3);
		_tmp$3 = $clone(new Mat4x3(m).Row(3), Vec3);
		Vec3.copy(row0, _tmp);
		Vec3.copy(row1, _tmp$1);
		Vec3.copy(row2, _tmp$2);
		Vec3.copy(row3, _tmp$3);
		return [row0, row1, row2, row3];
	};
	$ptrType(Mat4x3).prototype.Rows = function() { return new Mat4x3(this.$get()).Rows(); };
	Mat4x3.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1, x$2, x$3;
		m = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat64, [(x = ($imul(col, 4)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 4)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = ($imul(col, 4)) + 2 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2])), (x$3 = ($imul(col, 4)) + 3 >> 0, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3]))]);
	};
	$ptrType(Mat4x3).prototype.Col = function(col) { return new Mat4x3(this.$get()).Col(col); };
	Mat4x3.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, col0, col1, col2, m;
		col0 = arrayType.zero();
		col1 = arrayType.zero();
		col2 = arrayType.zero();
		m = $clone(this.$val, Mat4x3);
		_tmp = $clone(new Mat4x3(m).Col(0), Vec4);
		_tmp$1 = $clone(new Mat4x3(m).Col(1), Vec4);
		_tmp$2 = $clone(new Mat4x3(m).Col(2), Vec4);
		Vec4.copy(col0, _tmp);
		Vec4.copy(col1, _tmp$1);
		Vec4.copy(col2, _tmp$2);
		return [col0, col1, col2];
	};
	$ptrType(Mat4x3).prototype.Cols = function() { return new Mat4x3(this.$get()).Cols(); };
	Mat4x3.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat4x3);
		return $toNativeArray($kindFloat64, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5]), Abs(m[6]), Abs(m[7]), Abs(m[8]), Abs(m[9]), Abs(m[10]), Abs(m[11])]);
	};
	$ptrType(Mat4x3).prototype.Abs = function() { return new Mat4x3(this.$get()).Abs(); };
	Mat4x3.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat4x3);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 4)) { break; } */ if(!(i < 4)) { $s = 2; continue; }
			_ref = new Mat4x3(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 3)) { break; } */ if(!(_i < 3)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float64(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat4x3.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat4x3).prototype.String = function() { return new Mat4x3(this.$get()).String(); };
	Mat4.prototype.SetCol = function(col, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, col, m, v, x, x$1, x$2, x$3;
		v = $clone(v, Vec4);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		(x = ($imul(col, 4)) + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = ($imul(col, 4)) + 1 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = ($imul(col, 4)) + 2 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
		(x$3 = ($imul(col, 4)) + 3 >> 0, m.nilCheck, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3] = _tmp$3));
	};
	$ptrType(Mat4).prototype.SetCol = function(col, v) { return (new Mat4(this.$get())).SetCol(col, v); };
	Mat4.prototype.SetRow = function(row, v) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, m, row, v, x, x$1, x$2, x$3;
		v = $clone(v, Vec4);
		m = this.$val;
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		(x = row + 0 >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = _tmp));
		(x$1 = row + 4 >> 0, m.nilCheck, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1] = _tmp$1));
		(x$2 = row + 8 >> 0, m.nilCheck, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2] = _tmp$2));
		(x$3 = row + 12 >> 0, m.nilCheck, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3] = _tmp$3));
	};
	$ptrType(Mat4).prototype.SetRow = function(row, v) { return (new Mat4(this.$get())).SetRow(row, v); };
	Mat4.prototype.Diag = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat64, [m[0], m[5], m[10], m[15]]);
	};
	$ptrType(Mat4).prototype.Diag = function() { return new Mat4(this.$get()).Diag(); };
	Mat4FromCols = function(col0, col1, col2, col3) {
		var $ptr, col0, col1, col2, col3;
		col3 = $clone(col3, Vec4);
		col2 = $clone(col2, Vec4);
		col1 = $clone(col1, Vec4);
		col0 = $clone(col0, Vec4);
		return $toNativeArray($kindFloat64, [col0[0], col0[1], col0[2], col0[3], col1[0], col1[1], col1[2], col1[3], col2[0], col2[1], col2[2], col2[3], col3[0], col3[1], col3[2], col3[3]]);
	};
	$pkg.Mat4FromCols = Mat4FromCols;
	Mat4.prototype.Add = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat64, [m1[0] + m2[0], m1[1] + m2[1], m1[2] + m2[2], m1[3] + m2[3], m1[4] + m2[4], m1[5] + m2[5], m1[6] + m2[6], m1[7] + m2[7], m1[8] + m2[8], m1[9] + m2[9], m1[10] + m2[10], m1[11] + m2[11], m1[12] + m2[12], m1[13] + m2[13], m1[14] + m2[14], m1[15] + m2[15]]);
	};
	$ptrType(Mat4).prototype.Add = function(m2) { return new Mat4(this.$get()).Add(m2); };
	Mat4.prototype.Sub = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat64, [m1[0] - m2[0], m1[1] - m2[1], m1[2] - m2[2], m1[3] - m2[3], m1[4] - m2[4], m1[5] - m2[5], m1[6] - m2[6], m1[7] - m2[7], m1[8] - m2[8], m1[9] - m2[9], m1[10] - m2[10], m1[11] - m2[11], m1[12] - m2[12], m1[13] - m2[13], m1[14] - m2[14], m1[15] - m2[15]]);
	};
	$ptrType(Mat4).prototype.Sub = function(m2) { return new Mat4(this.$get()).Sub(m2); };
	Mat4.prototype.Mul = function(c) {
		var $ptr, c, m1;
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat64, [m1[0] * c, m1[1] * c, m1[2] * c, m1[3] * c, m1[4] * c, m1[5] * c, m1[6] * c, m1[7] * c, m1[8] * c, m1[9] * c, m1[10] * c, m1[11] * c, m1[12] * c, m1[13] * c, m1[14] * c, m1[15] * c]);
	};
	$ptrType(Mat4).prototype.Mul = function(c) { return new Mat4(this.$get()).Mul(c); };
	Mat4.prototype.Mul4x1 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Vec4);
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[4] * m2[1] + m1[8] * m2[2] + m1[12] * m2[3], m1[1] * m2[0] + m1[5] * m2[1] + m1[9] * m2[2] + m1[13] * m2[3], m1[2] * m2[0] + m1[6] * m2[1] + m1[10] * m2[2] + m1[14] * m2[3], m1[3] * m2[0] + m1[7] * m2[1] + m1[11] * m2[2] + m1[15] * m2[3]]);
	};
	$ptrType(Mat4).prototype.Mul4x1 = function(m2) { return new Mat4(this.$get()).Mul4x1(m2); };
	Mat4.prototype.Mul4x2 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x2);
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[4] * m2[1] + m1[8] * m2[2] + m1[12] * m2[3], m1[1] * m2[0] + m1[5] * m2[1] + m1[9] * m2[2] + m1[13] * m2[3], m1[2] * m2[0] + m1[6] * m2[1] + m1[10] * m2[2] + m1[14] * m2[3], m1[3] * m2[0] + m1[7] * m2[1] + m1[11] * m2[2] + m1[15] * m2[3], m1[0] * m2[4] + m1[4] * m2[5] + m1[8] * m2[6] + m1[12] * m2[7], m1[1] * m2[4] + m1[5] * m2[5] + m1[9] * m2[6] + m1[13] * m2[7], m1[2] * m2[4] + m1[6] * m2[5] + m1[10] * m2[6] + m1[14] * m2[7], m1[3] * m2[4] + m1[7] * m2[5] + m1[11] * m2[6] + m1[15] * m2[7]]);
	};
	$ptrType(Mat4).prototype.Mul4x2 = function(m2) { return new Mat4(this.$get()).Mul4x2(m2); };
	Mat4.prototype.Mul4x3 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4x3);
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[4] * m2[1] + m1[8] * m2[2] + m1[12] * m2[3], m1[1] * m2[0] + m1[5] * m2[1] + m1[9] * m2[2] + m1[13] * m2[3], m1[2] * m2[0] + m1[6] * m2[1] + m1[10] * m2[2] + m1[14] * m2[3], m1[3] * m2[0] + m1[7] * m2[1] + m1[11] * m2[2] + m1[15] * m2[3], m1[0] * m2[4] + m1[4] * m2[5] + m1[8] * m2[6] + m1[12] * m2[7], m1[1] * m2[4] + m1[5] * m2[5] + m1[9] * m2[6] + m1[13] * m2[7], m1[2] * m2[4] + m1[6] * m2[5] + m1[10] * m2[6] + m1[14] * m2[7], m1[3] * m2[4] + m1[7] * m2[5] + m1[11] * m2[6] + m1[15] * m2[7], m1[0] * m2[8] + m1[4] * m2[9] + m1[8] * m2[10] + m1[12] * m2[11], m1[1] * m2[8] + m1[5] * m2[9] + m1[9] * m2[10] + m1[13] * m2[11], m1[2] * m2[8] + m1[6] * m2[9] + m1[10] * m2[10] + m1[14] * m2[11], m1[3] * m2[8] + m1[7] * m2[9] + m1[11] * m2[10] + m1[15] * m2[11]]);
	};
	$ptrType(Mat4).prototype.Mul4x3 = function(m2) { return new Mat4(this.$get()).Mul4x3(m2); };
	Mat4.prototype.Mul4 = function(m2) {
		var $ptr, m1, m2;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat64, [m1[0] * m2[0] + m1[4] * m2[1] + m1[8] * m2[2] + m1[12] * m2[3], m1[1] * m2[0] + m1[5] * m2[1] + m1[9] * m2[2] + m1[13] * m2[3], m1[2] * m2[0] + m1[6] * m2[1] + m1[10] * m2[2] + m1[14] * m2[3], m1[3] * m2[0] + m1[7] * m2[1] + m1[11] * m2[2] + m1[15] * m2[3], m1[0] * m2[4] + m1[4] * m2[5] + m1[8] * m2[6] + m1[12] * m2[7], m1[1] * m2[4] + m1[5] * m2[5] + m1[9] * m2[6] + m1[13] * m2[7], m1[2] * m2[4] + m1[6] * m2[5] + m1[10] * m2[6] + m1[14] * m2[7], m1[3] * m2[4] + m1[7] * m2[5] + m1[11] * m2[6] + m1[15] * m2[7], m1[0] * m2[8] + m1[4] * m2[9] + m1[8] * m2[10] + m1[12] * m2[11], m1[1] * m2[8] + m1[5] * m2[9] + m1[9] * m2[10] + m1[13] * m2[11], m1[2] * m2[8] + m1[6] * m2[9] + m1[10] * m2[10] + m1[14] * m2[11], m1[3] * m2[8] + m1[7] * m2[9] + m1[11] * m2[10] + m1[15] * m2[11], m1[0] * m2[12] + m1[4] * m2[13] + m1[8] * m2[14] + m1[12] * m2[15], m1[1] * m2[12] + m1[5] * m2[13] + m1[9] * m2[14] + m1[13] * m2[15], m1[2] * m2[12] + m1[6] * m2[13] + m1[10] * m2[14] + m1[14] * m2[15], m1[3] * m2[12] + m1[7] * m2[13] + m1[11] * m2[14] + m1[15] * m2[15]]);
	};
	$ptrType(Mat4).prototype.Mul4 = function(m2) { return new Mat4(this.$get()).Mul4(m2); };
	Mat4.prototype.Transpose = function() {
		var $ptr, m1;
		m1 = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat64, [m1[0], m1[4], m1[8], m1[12], m1[1], m1[5], m1[9], m1[13], m1[2], m1[6], m1[10], m1[14], m1[3], m1[7], m1[11], m1[15]]);
	};
	$ptrType(Mat4).prototype.Transpose = function() { return new Mat4(this.$get()).Transpose(); };
	Mat4.prototype.Det = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat4);
		return m[0] * m[5] * m[10] * m[15] - m[0] * m[5] * m[11] * m[14] - m[0] * m[6] * m[9] * m[15] + m[0] * m[6] * m[11] * m[13] + m[0] * m[7] * m[9] * m[14] - m[0] * m[7] * m[10] * m[13] - m[1] * m[4] * m[10] * m[15] + m[1] * m[4] * m[11] * m[14] + m[1] * m[6] * m[8] * m[15] - m[1] * m[6] * m[11] * m[12] - m[1] * m[7] * m[8] * m[14] + m[1] * m[7] * m[10] * m[12] + m[2] * m[4] * m[9] * m[15] - m[2] * m[4] * m[11] * m[13] - m[2] * m[5] * m[8] * m[15] + m[2] * m[5] * m[11] * m[12] + m[2] * m[7] * m[8] * m[13] - m[2] * m[7] * m[9] * m[12] - m[3] * m[4] * m[9] * m[14] + m[3] * m[4] * m[10] * m[13] + m[3] * m[5] * m[8] * m[14] - m[3] * m[5] * m[10] * m[12] - m[3] * m[6] * m[8] * m[13] + m[3] * m[6] * m[9] * m[12];
	};
	$ptrType(Mat4).prototype.Det = function() { return new Mat4(this.$get()).Det(); };
	Mat4.prototype.Inv = function() {
		var $ptr, det, m, retMat;
		m = $clone(this.$val, Mat4);
		det = new Mat4(m).Det();
		if (FloatEqual(det, 0)) {
			return arrayType$6.zero();
		}
		retMat = $toNativeArray($kindFloat64, [-m[7] * m[10] * m[13] + m[6] * m[11] * m[13] + m[7] * m[9] * m[14] - m[5] * m[11] * m[14] - m[6] * m[9] * m[15] + m[5] * m[10] * m[15], m[3] * m[10] * m[13] - m[2] * m[11] * m[13] - m[3] * m[9] * m[14] + m[1] * m[11] * m[14] + m[2] * m[9] * m[15] - m[1] * m[10] * m[15], -m[3] * m[6] * m[13] + m[2] * m[7] * m[13] + m[3] * m[5] * m[14] - m[1] * m[7] * m[14] - m[2] * m[5] * m[15] + m[1] * m[6] * m[15], m[3] * m[6] * m[9] - m[2] * m[7] * m[9] - m[3] * m[5] * m[10] + m[1] * m[7] * m[10] + m[2] * m[5] * m[11] - m[1] * m[6] * m[11], m[7] * m[10] * m[12] - m[6] * m[11] * m[12] - m[7] * m[8] * m[14] + m[4] * m[11] * m[14] + m[6] * m[8] * m[15] - m[4] * m[10] * m[15], -m[3] * m[10] * m[12] + m[2] * m[11] * m[12] + m[3] * m[8] * m[14] - m[0] * m[11] * m[14] - m[2] * m[8] * m[15] + m[0] * m[10] * m[15], m[3] * m[6] * m[12] - m[2] * m[7] * m[12] - m[3] * m[4] * m[14] + m[0] * m[7] * m[14] + m[2] * m[4] * m[15] - m[0] * m[6] * m[15], -m[3] * m[6] * m[8] + m[2] * m[7] * m[8] + m[3] * m[4] * m[10] - m[0] * m[7] * m[10] - m[2] * m[4] * m[11] + m[0] * m[6] * m[11], -m[7] * m[9] * m[12] + m[5] * m[11] * m[12] + m[7] * m[8] * m[13] - m[4] * m[11] * m[13] - m[5] * m[8] * m[15] + m[4] * m[9] * m[15], m[3] * m[9] * m[12] - m[1] * m[11] * m[12] - m[3] * m[8] * m[13] + m[0] * m[11] * m[13] + m[1] * m[8] * m[15] - m[0] * m[9] * m[15], -m[3] * m[5] * m[12] + m[1] * m[7] * m[12] + m[3] * m[4] * m[13] - m[0] * m[7] * m[13] - m[1] * m[4] * m[15] + m[0] * m[5] * m[15], m[3] * m[5] * m[8] - m[1] * m[7] * m[8] - m[3] * m[4] * m[9] + m[0] * m[7] * m[9] + m[1] * m[4] * m[11] - m[0] * m[5] * m[11], m[6] * m[9] * m[12] - m[5] * m[10] * m[12] - m[6] * m[8] * m[13] + m[4] * m[10] * m[13] + m[5] * m[8] * m[14] - m[4] * m[9] * m[14], -m[2] * m[9] * m[12] + m[1] * m[10] * m[12] + m[2] * m[8] * m[13] - m[0] * m[10] * m[13] - m[1] * m[8] * m[14] + m[0] * m[9] * m[14], m[2] * m[5] * m[12] - m[1] * m[6] * m[12] - m[2] * m[4] * m[13] + m[0] * m[6] * m[13] + m[1] * m[4] * m[14] - m[0] * m[5] * m[14], -m[2] * m[5] * m[8] + m[1] * m[6] * m[8] + m[2] * m[4] * m[9] - m[0] * m[6] * m[9] - m[1] * m[4] * m[10] + m[0] * m[5] * m[10]]);
		return new Mat4(retMat).Mul(1 / det);
	};
	$ptrType(Mat4).prototype.Inv = function() { return new Mat4(this.$get()).Inv(); };
	Mat4.prototype.ApproxEqual = function(m2) {
		var $ptr, _i, _ref, i, m1, m2;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat4);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 16)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat4).prototype.ApproxEqual = function(m2) { return new Mat4(this.$get()).ApproxEqual(m2); };
	Mat4.prototype.ApproxEqualThreshold = function(m2, threshold) {
		var $ptr, _i, _ref, i, m1, m2, threshold;
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat4);
		_ref = m1;
		_i = 0;
		while (true) {
			if (!(_i < 16)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Mat4).prototype.ApproxEqualThreshold = function(m2, threshold) { return new Mat4(this.$get()).ApproxEqualThreshold(m2, threshold); };
	Mat4.prototype.ApproxFuncEqual = function(m2, eq) {
		var $ptr, _i, _r, _ref, eq, i, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = $clone(m2, Mat4);
		m1 = $clone(this.$val, Mat4);
		_ref = m1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 16)) { break; } */ if(!(_i < 16)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= m1.length) ? $throwRuntimeError("index out of range") : m1[i]), ((i < 0 || i >= m2.length) ? $throwRuntimeError("index out of range") : m2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat4.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat4).prototype.ApproxFuncEqual = function(m2, eq) { return new Mat4(this.$get()).ApproxFuncEqual(m2, eq); };
	Mat4.prototype.At = function(row, col) {
		var $ptr, col, m, row, x;
		m = $clone(this.$val, Mat4);
		return (x = ($imul(col, 4)) + row >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x]));
	};
	$ptrType(Mat4).prototype.At = function(row, col) { return new Mat4(this.$get()).At(row, col); };
	Mat4.prototype.Set = function(row, col, value) {
		var $ptr, col, m, row, value, x;
		m = this.$val;
		(x = ($imul(col, 4)) + row >> 0, m.nilCheck, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x] = value));
	};
	$ptrType(Mat4).prototype.Set = function(row, col, value) { return (new Mat4(this.$get())).Set(row, col, value); };
	Mat4.prototype.Index = function(row, col) {
		var $ptr, col, m, row;
		m = $clone(this.$val, Mat4);
		return ($imul(col, 4)) + row >> 0;
	};
	$ptrType(Mat4).prototype.Index = function(row, col) { return new Mat4(this.$get()).Index(row, col); };
	Mat4.prototype.Row = function(row) {
		var $ptr, m, row, x, x$1, x$2, x$3;
		m = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat64, [(x = row + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = row + 4 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = row + 8 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2])), (x$3 = row + 12 >> 0, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3]))]);
	};
	$ptrType(Mat4).prototype.Row = function(row) { return new Mat4(this.$get()).Row(row); };
	Mat4.prototype.Rows = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, m, row0, row1, row2, row3;
		row0 = arrayType.zero();
		row1 = arrayType.zero();
		row2 = arrayType.zero();
		row3 = arrayType.zero();
		m = $clone(this.$val, Mat4);
		_tmp = $clone(new Mat4(m).Row(0), Vec4);
		_tmp$1 = $clone(new Mat4(m).Row(1), Vec4);
		_tmp$2 = $clone(new Mat4(m).Row(2), Vec4);
		_tmp$3 = $clone(new Mat4(m).Row(3), Vec4);
		Vec4.copy(row0, _tmp);
		Vec4.copy(row1, _tmp$1);
		Vec4.copy(row2, _tmp$2);
		Vec4.copy(row3, _tmp$3);
		return [row0, row1, row2, row3];
	};
	$ptrType(Mat4).prototype.Rows = function() { return new Mat4(this.$get()).Rows(); };
	Mat4.prototype.Col = function(col) {
		var $ptr, col, m, x, x$1, x$2, x$3;
		m = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat64, [(x = ($imul(col, 4)) + 0 >> 0, ((x < 0 || x >= m.length) ? $throwRuntimeError("index out of range") : m[x])), (x$1 = ($imul(col, 4)) + 1 >> 0, ((x$1 < 0 || x$1 >= m.length) ? $throwRuntimeError("index out of range") : m[x$1])), (x$2 = ($imul(col, 4)) + 2 >> 0, ((x$2 < 0 || x$2 >= m.length) ? $throwRuntimeError("index out of range") : m[x$2])), (x$3 = ($imul(col, 4)) + 3 >> 0, ((x$3 < 0 || x$3 >= m.length) ? $throwRuntimeError("index out of range") : m[x$3]))]);
	};
	$ptrType(Mat4).prototype.Col = function(col) { return new Mat4(this.$get()).Col(col); };
	Mat4.prototype.Cols = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, col0, col1, col2, col3, m;
		col0 = arrayType.zero();
		col1 = arrayType.zero();
		col2 = arrayType.zero();
		col3 = arrayType.zero();
		m = $clone(this.$val, Mat4);
		_tmp = $clone(new Mat4(m).Col(0), Vec4);
		_tmp$1 = $clone(new Mat4(m).Col(1), Vec4);
		_tmp$2 = $clone(new Mat4(m).Col(2), Vec4);
		_tmp$3 = $clone(new Mat4(m).Col(3), Vec4);
		Vec4.copy(col0, _tmp);
		Vec4.copy(col1, _tmp$1);
		Vec4.copy(col2, _tmp$2);
		Vec4.copy(col3, _tmp$3);
		return [col0, col1, col2, col3];
	};
	$ptrType(Mat4).prototype.Cols = function() { return new Mat4(this.$get()).Cols(); };
	Mat4.prototype.Trace = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat4);
		return m[0] + m[5] + m[10] + m[15];
	};
	$ptrType(Mat4).prototype.Trace = function() { return new Mat4(this.$get()).Trace(); };
	Mat4.prototype.Abs = function() {
		var $ptr, m;
		m = $clone(this.$val, Mat4);
		return $toNativeArray($kindFloat64, [Abs(m[0]), Abs(m[1]), Abs(m[2]), Abs(m[3]), Abs(m[4]), Abs(m[5]), Abs(m[6]), Abs(m[7]), Abs(m[8]), Abs(m[9]), Abs(m[10]), Abs(m[11]), Abs(m[12]), Abs(m[13]), Abs(m[14]), Abs(m[15])]);
	};
	$ptrType(Mat4).prototype.Abs = function() { return new Mat4(this.$get()).Abs(); };
	Mat4.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buf, col, i, m, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; col = $f.col; i = $f.i; m = $f.m; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = $clone(this.$val, Mat4);
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType$2.zero(), arrayType$3.zero(), 0);
		w = tabwriter.NewWriter(buf, 4, 4, 1, 32, 4);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 4)) { break; } */ if(!(i < 4)) { $s = 2; continue; }
			_ref = new Mat4(m).Row(i);
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < 4)) { break; } */ if(!(_i < 4)) { $s = 4; continue; }
				col = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
				_r = fmt.Fprintf(w, "%f\t", new sliceType$3([new $Float64(col)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$1 = fmt.Fprintln(w, new sliceType$3([new $String("")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = w.Flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mat4.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.col = col; $f.i = i; $f.m = m; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Mat4).prototype.String = function() { return new Mat4(this.$get()).String(); };
	Translate3D = function(Tx, Ty, Tz) {
		var $ptr, Tx, Ty, Tz;
		return $toNativeArray($kindFloat64, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, Tx, Ty, Tz, 1]);
	};
	$pkg.Translate3D = Translate3D;
	Scale3D = function(scaleX, scaleY, scaleZ) {
		var $ptr, scaleX, scaleY, scaleZ;
		return $toNativeArray($kindFloat64, [scaleX, 0, 0, 0, 0, scaleY, 0, 0, 0, 0, scaleZ, 0, 0, 0, 0, 1]);
	};
	$pkg.Scale3D = Scale3D;
	Abs = function(a) {
		var $ptr, a;
		if (a < 0) {
			return -a;
		} else if (a === 0) {
			return 0;
		}
		return a;
	};
	$pkg.Abs = Abs;
	FloatEqual = function(a, b) {
		var $ptr, a, b;
		return FloatEqualThreshold(a, b, $pkg.Epsilon);
	};
	$pkg.FloatEqual = FloatEqual;
	FloatEqualThreshold = function(a, b, epsilon) {
		var $ptr, a, b, diff, epsilon;
		if (a === b) {
			return true;
		}
		diff = Abs(a - b);
		if ((a * b === 0) || diff < $pkg.MinNormal) {
			return diff < epsilon * epsilon;
		}
		return diff / (Abs(a) + Abs(b)) < epsilon;
	};
	$pkg.FloatEqualThreshold = FloatEqualThreshold;
	Vec2.prototype.Vec3 = function(z) {
		var $ptr, v, z;
		v = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat64, [v[0], v[1], z]);
	};
	$ptrType(Vec2).prototype.Vec3 = function(z) { return new Vec2(this.$get()).Vec3(z); };
	Vec2.prototype.Vec4 = function(z, w) {
		var $ptr, v, w, z;
		v = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat64, [v[0], v[1], z, w]);
	};
	$ptrType(Vec2).prototype.Vec4 = function(z, w) { return new Vec2(this.$get()).Vec4(z, w); };
	Vec3.prototype.Vec2 = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat64, [v[0], v[1]]);
	};
	$ptrType(Vec3).prototype.Vec2 = function() { return new Vec3(this.$get()).Vec2(); };
	Vec3.prototype.Vec4 = function(w) {
		var $ptr, v, w;
		v = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat64, [v[0], v[1], v[2], w]);
	};
	$ptrType(Vec3).prototype.Vec4 = function(w) { return new Vec3(this.$get()).Vec4(w); };
	Vec4.prototype.Vec2 = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat64, [v[0], v[1]]);
	};
	$ptrType(Vec4).prototype.Vec2 = function() { return new Vec4(this.$get()).Vec2(); };
	Vec4.prototype.Vec3 = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat64, [v[0], v[1], v[2]]);
	};
	$ptrType(Vec4).prototype.Vec3 = function() { return new Vec4(this.$get()).Vec3(); };
	Vec2.prototype.Elem = function() {
		var $ptr, _tmp, _tmp$1, v, x, y;
		x = 0;
		y = 0;
		v = $clone(this.$val, Vec2);
		_tmp = v[0];
		_tmp$1 = v[1];
		x = _tmp;
		y = _tmp$1;
		return [x, y];
	};
	$ptrType(Vec2).prototype.Elem = function() { return new Vec2(this.$get()).Elem(); };
	Vec3.prototype.Elem = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, v, x, y, z;
		x = 0;
		y = 0;
		z = 0;
		v = $clone(this.$val, Vec3);
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		x = _tmp;
		y = _tmp$1;
		z = _tmp$2;
		return [x, y, z];
	};
	$ptrType(Vec3).prototype.Elem = function() { return new Vec3(this.$get()).Elem(); };
	Vec4.prototype.Elem = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, v, w, x, y, z;
		x = 0;
		y = 0;
		z = 0;
		w = 0;
		v = $clone(this.$val, Vec4);
		_tmp = v[0];
		_tmp$1 = v[1];
		_tmp$2 = v[2];
		_tmp$3 = v[3];
		x = _tmp;
		y = _tmp$1;
		z = _tmp$2;
		w = _tmp$3;
		return [x, y, z, w];
	};
	$ptrType(Vec4).prototype.Elem = function() { return new Vec4(this.$get()).Elem(); };
	Vec3.prototype.Cross = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat64, [v1[1] * v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1] * v2[0]]);
	};
	$ptrType(Vec3).prototype.Cross = function(v2) { return new Vec3(this.$get()).Cross(v2); };
	Vec2.prototype.Add = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat64, [v1[0] + v2[0], v1[1] + v2[1]]);
	};
	$ptrType(Vec2).prototype.Add = function(v2) { return new Vec2(this.$get()).Add(v2); };
	Vec2.prototype.Sub = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat64, [v1[0] - v2[0], v1[1] - v2[1]]);
	};
	$ptrType(Vec2).prototype.Sub = function(v2) { return new Vec2(this.$get()).Sub(v2); };
	Vec2.prototype.Mul = function(c) {
		var $ptr, c, v1;
		v1 = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat64, [v1[0] * c, v1[1] * c]);
	};
	$ptrType(Vec2).prototype.Mul = function(c) { return new Vec2(this.$get()).Mul(c); };
	Vec2.prototype.Dot = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		return v1[0] * v2[0] + v1[1] * v2[1];
	};
	$ptrType(Vec2).prototype.Dot = function(v2) { return new Vec2(this.$get()).Dot(v2); };
	Vec2.prototype.Len = function() {
		var $ptr, v1;
		v1 = $clone(this.$val, Vec2);
		return math.Hypot(v1[0], v1[1]);
	};
	$ptrType(Vec2).prototype.Len = function() { return new Vec2(this.$get()).Len(); };
	Vec2.prototype.Normalize = function() {
		var $ptr, l, v1;
		v1 = $clone(this.$val, Vec2);
		l = 1 / new Vec2(v1).Len();
		return $toNativeArray($kindFloat64, [v1[0] * l, v1[1] * l]);
	};
	$ptrType(Vec2).prototype.Normalize = function() { return new Vec2(this.$get()).Normalize(); };
	Vec2.prototype.ApproxEqual = function(v2) {
		var $ptr, _i, _ref, i, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		_ref = v1;
		_i = 0;
		while (true) {
			if (!(_i < 2)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Vec2).prototype.ApproxEqual = function(v2) { return new Vec2(this.$get()).ApproxEqual(v2); };
	Vec2.prototype.ApproxEqualThreshold = function(v2, threshold) {
		var $ptr, _i, _ref, i, threshold, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		_ref = v1;
		_i = 0;
		while (true) {
			if (!(_i < 2)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Vec2).prototype.ApproxEqualThreshold = function(v2, threshold) { return new Vec2(this.$get()).ApproxEqualThreshold(v2, threshold); };
	Vec2.prototype.ApproxFuncEqual = function(v2, eq) {
		var $ptr, _i, _r, _ref, eq, i, v1, v2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; v1 = $f.v1; v2 = $f.v2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		_ref = v1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 2)) { break; } */ if(!(_i < 2)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Vec2.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.v1 = v1; $f.v2 = v2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Vec2).prototype.ApproxFuncEqual = function(v2, eq) { return new Vec2(this.$get()).ApproxFuncEqual(v2, eq); };
	Vec2.prototype.X = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec2);
		return v[0];
	};
	$ptrType(Vec2).prototype.X = function() { return new Vec2(this.$get()).X(); };
	Vec2.prototype.Y = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec2);
		return v[1];
	};
	$ptrType(Vec2).prototype.Y = function() { return new Vec2(this.$get()).Y(); };
	Vec2.prototype.OuterProd2 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat64, [v1[0] * v2[0], v1[1] * v2[0], v1[0] * v2[1], v1[1] * v2[1]]);
	};
	$ptrType(Vec2).prototype.OuterProd2 = function(v2) { return new Vec2(this.$get()).OuterProd2(v2); };
	Vec2.prototype.OuterProd3 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat64, [v1[0] * v2[0], v1[1] * v2[0], v1[0] * v2[1], v1[1] * v2[1], v1[0] * v2[2], v1[1] * v2[2]]);
	};
	$ptrType(Vec2).prototype.OuterProd3 = function(v2) { return new Vec2(this.$get()).OuterProd3(v2); };
	Vec2.prototype.OuterProd4 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec2);
		return $toNativeArray($kindFloat64, [v1[0] * v2[0], v1[1] * v2[0], v1[0] * v2[1], v1[1] * v2[1], v1[0] * v2[2], v1[1] * v2[2], v1[0] * v2[3], v1[1] * v2[3]]);
	};
	$ptrType(Vec2).prototype.OuterProd4 = function(v2) { return new Vec2(this.$get()).OuterProd4(v2); };
	Vec3.prototype.Add = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat64, [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2]]);
	};
	$ptrType(Vec3).prototype.Add = function(v2) { return new Vec3(this.$get()).Add(v2); };
	Vec3.prototype.Sub = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat64, [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]]);
	};
	$ptrType(Vec3).prototype.Sub = function(v2) { return new Vec3(this.$get()).Sub(v2); };
	Vec3.prototype.Mul = function(c) {
		var $ptr, c, v1;
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat64, [v1[0] * c, v1[1] * c, v1[2] * c]);
	};
	$ptrType(Vec3).prototype.Mul = function(c) { return new Vec3(this.$get()).Mul(c); };
	Vec3.prototype.Dot = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];
	};
	$ptrType(Vec3).prototype.Dot = function(v2) { return new Vec3(this.$get()).Dot(v2); };
	Vec3.prototype.Len = function() {
		var $ptr, v1;
		v1 = $clone(this.$val, Vec3);
		return math.Sqrt(v1[0] * v1[0] + v1[1] * v1[1] + v1[2] * v1[2]);
	};
	$ptrType(Vec3).prototype.Len = function() { return new Vec3(this.$get()).Len(); };
	Vec3.prototype.Normalize = function() {
		var $ptr, l, v1;
		v1 = $clone(this.$val, Vec3);
		l = 1 / new Vec3(v1).Len();
		return $toNativeArray($kindFloat64, [v1[0] * l, v1[1] * l, v1[2] * l]);
	};
	$ptrType(Vec3).prototype.Normalize = function() { return new Vec3(this.$get()).Normalize(); };
	Vec3.prototype.ApproxEqual = function(v2) {
		var $ptr, _i, _ref, i, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		_ref = v1;
		_i = 0;
		while (true) {
			if (!(_i < 3)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Vec3).prototype.ApproxEqual = function(v2) { return new Vec3(this.$get()).ApproxEqual(v2); };
	Vec3.prototype.ApproxEqualThreshold = function(v2, threshold) {
		var $ptr, _i, _ref, i, threshold, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		_ref = v1;
		_i = 0;
		while (true) {
			if (!(_i < 3)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Vec3).prototype.ApproxEqualThreshold = function(v2, threshold) { return new Vec3(this.$get()).ApproxEqualThreshold(v2, threshold); };
	Vec3.prototype.ApproxFuncEqual = function(v2, eq) {
		var $ptr, _i, _r, _ref, eq, i, v1, v2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; v1 = $f.v1; v2 = $f.v2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		_ref = v1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 3)) { break; } */ if(!(_i < 3)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Vec3.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.v1 = v1; $f.v2 = v2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Vec3).prototype.ApproxFuncEqual = function(v2, eq) { return new Vec3(this.$get()).ApproxFuncEqual(v2, eq); };
	Vec3.prototype.X = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec3);
		return v[0];
	};
	$ptrType(Vec3).prototype.X = function() { return new Vec3(this.$get()).X(); };
	Vec3.prototype.Y = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec3);
		return v[1];
	};
	$ptrType(Vec3).prototype.Y = function() { return new Vec3(this.$get()).Y(); };
	Vec3.prototype.Z = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec3);
		return v[2];
	};
	$ptrType(Vec3).prototype.Z = function() { return new Vec3(this.$get()).Z(); };
	Vec3.prototype.OuterProd2 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat64, [v1[0] * v2[0], v1[1] * v2[0], v1[2] * v2[0], v1[0] * v2[1], v1[1] * v2[1], v1[2] * v2[1]]);
	};
	$ptrType(Vec3).prototype.OuterProd2 = function(v2) { return new Vec3(this.$get()).OuterProd2(v2); };
	Vec3.prototype.OuterProd3 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat64, [v1[0] * v2[0], v1[1] * v2[0], v1[2] * v2[0], v1[0] * v2[1], v1[1] * v2[1], v1[2] * v2[1], v1[0] * v2[2], v1[1] * v2[2], v1[2] * v2[2]]);
	};
	$ptrType(Vec3).prototype.OuterProd3 = function(v2) { return new Vec3(this.$get()).OuterProd3(v2); };
	Vec3.prototype.OuterProd4 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec3);
		return $toNativeArray($kindFloat64, [v1[0] * v2[0], v1[1] * v2[0], v1[2] * v2[0], v1[0] * v2[1], v1[1] * v2[1], v1[2] * v2[1], v1[0] * v2[2], v1[1] * v2[2], v1[2] * v2[2], v1[0] * v2[3], v1[1] * v2[3], v1[2] * v2[3]]);
	};
	$ptrType(Vec3).prototype.OuterProd4 = function(v2) { return new Vec3(this.$get()).OuterProd4(v2); };
	Vec4.prototype.Add = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat64, [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2], v1[3] + v2[3]]);
	};
	$ptrType(Vec4).prototype.Add = function(v2) { return new Vec4(this.$get()).Add(v2); };
	Vec4.prototype.Sub = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat64, [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2], v1[3] - v2[3]]);
	};
	$ptrType(Vec4).prototype.Sub = function(v2) { return new Vec4(this.$get()).Sub(v2); };
	Vec4.prototype.Mul = function(c) {
		var $ptr, c, v1;
		v1 = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat64, [v1[0] * c, v1[1] * c, v1[2] * c, v1[3] * c]);
	};
	$ptrType(Vec4).prototype.Mul = function(c) { return new Vec4(this.$get()).Mul(c); };
	Vec4.prototype.Dot = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2] + v1[3] * v2[3];
	};
	$ptrType(Vec4).prototype.Dot = function(v2) { return new Vec4(this.$get()).Dot(v2); };
	Vec4.prototype.Len = function() {
		var $ptr, v1;
		v1 = $clone(this.$val, Vec4);
		return math.Sqrt(v1[0] * v1[0] + v1[1] * v1[1] + v1[2] * v1[2] + v1[3] * v1[3]);
	};
	$ptrType(Vec4).prototype.Len = function() { return new Vec4(this.$get()).Len(); };
	Vec4.prototype.Normalize = function() {
		var $ptr, l, v1;
		v1 = $clone(this.$val, Vec4);
		l = 1 / new Vec4(v1).Len();
		return $toNativeArray($kindFloat64, [v1[0] * l, v1[1] * l, v1[2] * l, v1[3] * l]);
	};
	$ptrType(Vec4).prototype.Normalize = function() { return new Vec4(this.$get()).Normalize(); };
	Vec4.prototype.ApproxEqual = function(v2) {
		var $ptr, _i, _ref, i, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		_ref = v1;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			i = _i;
			if (!FloatEqual(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Vec4).prototype.ApproxEqual = function(v2) { return new Vec4(this.$get()).ApproxEqual(v2); };
	Vec4.prototype.ApproxEqualThreshold = function(v2, threshold) {
		var $ptr, _i, _ref, i, threshold, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		_ref = v1;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			i = _i;
			if (!FloatEqualThreshold(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i]), threshold)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$ptrType(Vec4).prototype.ApproxEqualThreshold = function(v2, threshold) { return new Vec4(this.$get()).ApproxEqualThreshold(v2, threshold); };
	Vec4.prototype.ApproxFuncEqual = function(v2, eq) {
		var $ptr, _i, _r, _ref, eq, i, v1, v2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; eq = $f.eq; i = $f.i; v1 = $f.v1; v2 = $f.v2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		_ref = v1;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 4)) { break; } */ if(!(_i < 4)) { $s = 2; continue; }
			i = _i;
			_r = eq(((i < 0 || i >= v1.length) ? $throwRuntimeError("index out of range") : v1[i]), ((i < 0 || i >= v2.length) ? $throwRuntimeError("index out of range") : v2[i])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				return false;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Vec4.prototype.ApproxFuncEqual }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.eq = eq; $f.i = i; $f.v1 = v1; $f.v2 = v2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Vec4).prototype.ApproxFuncEqual = function(v2, eq) { return new Vec4(this.$get()).ApproxFuncEqual(v2, eq); };
	Vec4.prototype.X = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec4);
		return v[0];
	};
	$ptrType(Vec4).prototype.X = function() { return new Vec4(this.$get()).X(); };
	Vec4.prototype.Y = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec4);
		return v[1];
	};
	$ptrType(Vec4).prototype.Y = function() { return new Vec4(this.$get()).Y(); };
	Vec4.prototype.Z = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec4);
		return v[2];
	};
	$ptrType(Vec4).prototype.Z = function() { return new Vec4(this.$get()).Z(); };
	Vec4.prototype.W = function() {
		var $ptr, v;
		v = $clone(this.$val, Vec4);
		return v[3];
	};
	$ptrType(Vec4).prototype.W = function() { return new Vec4(this.$get()).W(); };
	Vec4.prototype.OuterProd2 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec2);
		v1 = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat64, [v1[0] * v2[0], v1[1] * v2[0], v1[2] * v2[0], v1[3] * v2[0], v1[0] * v2[1], v1[1] * v2[1], v1[2] * v2[1], v1[3] * v2[1]]);
	};
	$ptrType(Vec4).prototype.OuterProd2 = function(v2) { return new Vec4(this.$get()).OuterProd2(v2); };
	Vec4.prototype.OuterProd3 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec3);
		v1 = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat64, [v1[0] * v2[0], v1[1] * v2[0], v1[2] * v2[0], v1[3] * v2[0], v1[0] * v2[1], v1[1] * v2[1], v1[2] * v2[1], v1[3] * v2[1], v1[0] * v2[2], v1[1] * v2[2], v1[2] * v2[2], v1[3] * v2[2]]);
	};
	$ptrType(Vec4).prototype.OuterProd3 = function(v2) { return new Vec4(this.$get()).OuterProd3(v2); };
	Vec4.prototype.OuterProd4 = function(v2) {
		var $ptr, v1, v2;
		v2 = $clone(v2, Vec4);
		v1 = $clone(this.$val, Vec4);
		return $toNativeArray($kindFloat64, [v1[0] * v2[0], v1[1] * v2[0], v1[2] * v2[0], v1[3] * v2[0], v1[0] * v2[1], v1[1] * v2[1], v1[2] * v2[1], v1[3] * v2[1], v1[0] * v2[2], v1[1] * v2[2], v1[2] * v2[2], v1[3] * v2[2], v1[0] * v2[3], v1[1] * v2[3], v1[2] * v2[3], v1[3] * v2[3]]);
	};
	$ptrType(Vec4).prototype.OuterProd4 = function(v2) { return new Vec4(this.$get()).OuterProd4(v2); };
	Mat2.methods = [{prop: "Mat3", name: "Mat3", pkg: "", typ: $funcType([], [Mat3], false)}, {prop: "Mat4", name: "Mat4", pkg: "", typ: $funcType([], [Mat4], false)}, {prop: "Diag", name: "Diag", pkg: "", typ: $funcType([], [Vec2], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat2], [Mat2], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat2], [Mat2], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float64], [Mat2], false)}, {prop: "Mul2x1", name: "Mul2x1", pkg: "", typ: $funcType([Vec2], [Vec2], false)}, {prop: "Mul2", name: "Mul2", pkg: "", typ: $funcType([Mat2], [Mat2], false)}, {prop: "Mul2x3", name: "Mul2x3", pkg: "", typ: $funcType([Mat2x3], [Mat2x3], false)}, {prop: "Mul2x4", name: "Mul2x4", pkg: "", typ: $funcType([Mat2x4], [Mat2x4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat2], false)}, {prop: "Det", name: "Det", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Inv", name: "Inv", pkg: "", typ: $funcType([], [Mat2], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat2], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat2, $Float64], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat2, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec2], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec2, Vec2], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec2], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec2, Vec2], false)}, {prop: "Trace", name: "Trace", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec2], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec2], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	Mat2x3.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat2x3], [Mat2x3], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat2x3], [Mat2x3], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float64], [Mat2x3], false)}, {prop: "Mul3x1", name: "Mul3x1", pkg: "", typ: $funcType([Vec3], [Vec2], false)}, {prop: "Mul3x2", name: "Mul3x2", pkg: "", typ: $funcType([Mat3x2], [Mat2], false)}, {prop: "Mul3", name: "Mul3", pkg: "", typ: $funcType([Mat3], [Mat2x3], false)}, {prop: "Mul3x4", name: "Mul3x4", pkg: "", typ: $funcType([Mat3x4], [Mat2x4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat3x2], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat2x3], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat2x3, $Float64], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat2x3, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec3], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec3, Vec3], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec2], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec2, Vec2, Vec2], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat2x3], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec2], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec3], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	Mat2x4.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat2x4], [Mat2x4], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat2x4], [Mat2x4], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float64], [Mat2x4], false)}, {prop: "Mul4x1", name: "Mul4x1", pkg: "", typ: $funcType([Vec4], [Vec2], false)}, {prop: "Mul4x2", name: "Mul4x2", pkg: "", typ: $funcType([Mat4x2], [Mat2], false)}, {prop: "Mul4x3", name: "Mul4x3", pkg: "", typ: $funcType([Mat4x3], [Mat2x3], false)}, {prop: "Mul4", name: "Mul4", pkg: "", typ: $funcType([Mat4], [Mat2x4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat4x2], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat2x4], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat2x4, $Float64], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat2x4, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec4], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec4, Vec4], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec2], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec2, Vec2, Vec2, Vec2], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat2x4], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec2], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec4], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	Mat3x2.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat3x2], [Mat3x2], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat3x2], [Mat3x2], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float64], [Mat3x2], false)}, {prop: "Mul2x1", name: "Mul2x1", pkg: "", typ: $funcType([Vec2], [Vec3], false)}, {prop: "Mul2", name: "Mul2", pkg: "", typ: $funcType([Mat2], [Mat3x2], false)}, {prop: "Mul2x3", name: "Mul2x3", pkg: "", typ: $funcType([Mat2x3], [Mat3], false)}, {prop: "Mul2x4", name: "Mul2x4", pkg: "", typ: $funcType([Mat2x4], [Mat3x4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat2x3], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat3x2], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat3x2, $Float64], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat3x2, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec2], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec2, Vec2, Vec2], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec3], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec3, Vec3], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat3x2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec3], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec2], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	Mat3.methods = [{prop: "Mat2", name: "Mat2", pkg: "", typ: $funcType([], [Mat2], false)}, {prop: "Mat4", name: "Mat4", pkg: "", typ: $funcType([], [Mat4], false)}, {prop: "Diag", name: "Diag", pkg: "", typ: $funcType([], [Vec3], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat3], [Mat3], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat3], [Mat3], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float64], [Mat3], false)}, {prop: "Mul3x1", name: "Mul3x1", pkg: "", typ: $funcType([Vec3], [Vec3], false)}, {prop: "Mul3x2", name: "Mul3x2", pkg: "", typ: $funcType([Mat3x2], [Mat3x2], false)}, {prop: "Mul3", name: "Mul3", pkg: "", typ: $funcType([Mat3], [Mat3], false)}, {prop: "Mul3x4", name: "Mul3x4", pkg: "", typ: $funcType([Mat3x4], [Mat3x4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat3], false)}, {prop: "Det", name: "Det", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Inv", name: "Inv", pkg: "", typ: $funcType([], [Mat3], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat3], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat3, $Float64], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat3, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec3], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec3, Vec3, Vec3], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec3], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec3, Vec3, Vec3], false)}, {prop: "Trace", name: "Trace", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat3], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec3], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec3], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	Mat3x4.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat3x4], [Mat3x4], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat3x4], [Mat3x4], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float64], [Mat3x4], false)}, {prop: "Mul4x1", name: "Mul4x1", pkg: "", typ: $funcType([Vec4], [Vec3], false)}, {prop: "Mul4x2", name: "Mul4x2", pkg: "", typ: $funcType([Mat4x2], [Mat3x2], false)}, {prop: "Mul4x3", name: "Mul4x3", pkg: "", typ: $funcType([Mat4x3], [Mat3], false)}, {prop: "Mul4", name: "Mul4", pkg: "", typ: $funcType([Mat4], [Mat3x4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat4x3], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat3x4], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat3x4, $Float64], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat3x4, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec4], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec4, Vec4, Vec4], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec3], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec3, Vec3, Vec3, Vec3], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat3x4], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec3], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec4], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	Mat4x2.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat4x2], [Mat4x2], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat4x2], [Mat4x2], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float64], [Mat4x2], false)}, {prop: "Mul2x1", name: "Mul2x1", pkg: "", typ: $funcType([Vec2], [Vec4], false)}, {prop: "Mul2", name: "Mul2", pkg: "", typ: $funcType([Mat2], [Mat4x2], false)}, {prop: "Mul2x3", name: "Mul2x3", pkg: "", typ: $funcType([Mat2x3], [Mat4x3], false)}, {prop: "Mul2x4", name: "Mul2x4", pkg: "", typ: $funcType([Mat2x4], [Mat4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat2x4], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat4x2], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat4x2, $Float64], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat4x2, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec2], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec2, Vec2, Vec2, Vec2], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec4], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec4, Vec4], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat4x2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$9.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec4], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec2], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	Mat4x3.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat4x3], [Mat4x3], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat4x3], [Mat4x3], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float64], [Mat4x3], false)}, {prop: "Mul3x1", name: "Mul3x1", pkg: "", typ: $funcType([Vec3], [Vec4], false)}, {prop: "Mul3x2", name: "Mul3x2", pkg: "", typ: $funcType([Mat3x2], [Mat4x2], false)}, {prop: "Mul3", name: "Mul3", pkg: "", typ: $funcType([Mat3], [Mat4x3], false)}, {prop: "Mul3x4", name: "Mul3x4", pkg: "", typ: $funcType([Mat3x4], [Mat4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat3x4], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat4x3], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat4x3, $Float64], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat4x3, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec3], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec3, Vec3, Vec3, Vec3], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec4], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec4, Vec4, Vec4], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat4x3], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$10.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec4], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec3], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	Mat4.methods = [{prop: "Mat2", name: "Mat2", pkg: "", typ: $funcType([], [Mat2], false)}, {prop: "Mat3", name: "Mat3", pkg: "", typ: $funcType([], [Mat3], false)}, {prop: "Diag", name: "Diag", pkg: "", typ: $funcType([], [Vec4], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Mat4], [Mat4], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Mat4], [Mat4], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float64], [Mat4], false)}, {prop: "Mul4x1", name: "Mul4x1", pkg: "", typ: $funcType([Vec4], [Vec4], false)}, {prop: "Mul4x2", name: "Mul4x2", pkg: "", typ: $funcType([Mat4x2], [Mat4x2], false)}, {prop: "Mul4x3", name: "Mul4x3", pkg: "", typ: $funcType([Mat4x3], [Mat4x3], false)}, {prop: "Mul4", name: "Mul4", pkg: "", typ: $funcType([Mat4], [Mat4], false)}, {prop: "Transpose", name: "Transpose", pkg: "", typ: $funcType([], [Mat4], false)}, {prop: "Det", name: "Det", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Inv", name: "Inv", pkg: "", typ: $funcType([], [Mat4], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Mat4], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Mat4, $Float64], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Mat4, funcType], [$Bool], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [$Float64], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Row", name: "Row", pkg: "", typ: $funcType([$Int], [Vec4], false)}, {prop: "Rows", name: "Rows", pkg: "", typ: $funcType([], [Vec4, Vec4, Vec4, Vec4], false)}, {prop: "Col", name: "Col", pkg: "", typ: $funcType([$Int], [Vec4], false)}, {prop: "Cols", name: "Cols", pkg: "", typ: $funcType([], [Vec4, Vec4, Vec4, Vec4], false)}, {prop: "Trace", name: "Trace", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Mat4], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "SetCol", name: "SetCol", pkg: "", typ: $funcType([$Int, Vec4], [], false)}, {prop: "SetRow", name: "SetRow", pkg: "", typ: $funcType([$Int, Vec4], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, $Float64], [], false)}];
	Vec2.methods = [{prop: "Vec3", name: "Vec3", pkg: "", typ: $funcType([$Float64], [Vec3], false)}, {prop: "Vec4", name: "Vec4", pkg: "", typ: $funcType([$Float64, $Float64], [Vec4], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [$Float64, $Float64], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Vec2], [Vec2], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Vec2], [Vec2], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float64], [Vec2], false)}, {prop: "Dot", name: "Dot", pkg: "", typ: $funcType([Vec2], [$Float64], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [Vec2], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Vec2], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Vec2, $Float64], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Vec2, funcType], [$Bool], false)}, {prop: "X", name: "X", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Y", name: "Y", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "OuterProd2", name: "OuterProd2", pkg: "", typ: $funcType([Vec2], [Mat2], false)}, {prop: "OuterProd3", name: "OuterProd3", pkg: "", typ: $funcType([Vec3], [Mat2x3], false)}, {prop: "OuterProd4", name: "OuterProd4", pkg: "", typ: $funcType([Vec4], [Mat2x4], false)}];
	Vec3.methods = [{prop: "Vec2", name: "Vec2", pkg: "", typ: $funcType([], [Vec2], false)}, {prop: "Vec4", name: "Vec4", pkg: "", typ: $funcType([$Float64], [Vec4], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [$Float64, $Float64, $Float64], false)}, {prop: "Cross", name: "Cross", pkg: "", typ: $funcType([Vec3], [Vec3], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Vec3], [Vec3], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Vec3], [Vec3], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float64], [Vec3], false)}, {prop: "Dot", name: "Dot", pkg: "", typ: $funcType([Vec3], [$Float64], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [Vec3], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Vec3], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Vec3, $Float64], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Vec3, funcType], [$Bool], false)}, {prop: "X", name: "X", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Y", name: "Y", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Z", name: "Z", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "OuterProd2", name: "OuterProd2", pkg: "", typ: $funcType([Vec2], [Mat3x2], false)}, {prop: "OuterProd3", name: "OuterProd3", pkg: "", typ: $funcType([Vec3], [Mat3], false)}, {prop: "OuterProd4", name: "OuterProd4", pkg: "", typ: $funcType([Vec4], [Mat3x4], false)}];
	Vec4.methods = [{prop: "Vec2", name: "Vec2", pkg: "", typ: $funcType([], [Vec2], false)}, {prop: "Vec3", name: "Vec3", pkg: "", typ: $funcType([], [Vec3], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [$Float64, $Float64, $Float64, $Float64], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Vec4], [Vec4], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Vec4], [Vec4], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Float64], [Vec4], false)}, {prop: "Dot", name: "Dot", pkg: "", typ: $funcType([Vec4], [$Float64], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [Vec4], false)}, {prop: "ApproxEqual", name: "ApproxEqual", pkg: "", typ: $funcType([Vec4], [$Bool], false)}, {prop: "ApproxEqualThreshold", name: "ApproxEqualThreshold", pkg: "", typ: $funcType([Vec4, $Float64], [$Bool], false)}, {prop: "ApproxFuncEqual", name: "ApproxFuncEqual", pkg: "", typ: $funcType([Vec4, funcType], [$Bool], false)}, {prop: "X", name: "X", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Y", name: "Y", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Z", name: "Z", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "W", name: "W", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "OuterProd2", name: "OuterProd2", pkg: "", typ: $funcType([Vec2], [Mat4x2], false)}, {prop: "OuterProd3", name: "OuterProd3", pkg: "", typ: $funcType([Vec3], [Mat4x3], false)}, {prop: "OuterProd4", name: "OuterProd4", pkg: "", typ: $funcType([Vec4], [Mat4], false)}];
	Mat2.init($Float64, 4);
	Mat2x3.init($Float64, 6);
	Mat2x4.init($Float64, 8);
	Mat3x2.init($Float64, 6);
	Mat3.init($Float64, 9);
	Mat3x4.init($Float64, 12);
	Mat4x2.init($Float64, 8);
	Mat4x3.init($Float64, 12);
	Mat4.init($Float64, 16);
	Vec2.init($Float64, 2);
	Vec3.init($Float64, 3);
	Vec4.init($Float64, 4);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = f64.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = tabwriter.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Epsilon = 1e-10;
		$pkg.MinNormal = 1.1754943508222875e-38;
		$pkg.InfPos = math.Inf(1);
		$pkg.InfNeg = math.Inf(-1);
		$pkg.NaN = math.NaN();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/inkyblackness/shocked-client/opengl"] = (function() {
	var $pkg = {}, $init, fmt, DebuggingEntryFunc, DebuggingExitFunc, DebuggingErrorFunc, DebugBuilder, debuggingOpenGl, OpenGl, sliceType, sliceType$1, arrayType, ptrType, ptrType$1, ptrType$2, errorStrings, CompileNewShader, NewDebugBuilder, ErrorString, LinkNewProgram;
	fmt = $packages["fmt"];
	DebuggingEntryFunc = $pkg.DebuggingEntryFunc = $newType(4, $kindFunc, "opengl.DebuggingEntryFunc", "DebuggingEntryFunc", "github.com/inkyblackness/shocked-client/opengl", null);
	DebuggingExitFunc = $pkg.DebuggingExitFunc = $newType(4, $kindFunc, "opengl.DebuggingExitFunc", "DebuggingExitFunc", "github.com/inkyblackness/shocked-client/opengl", null);
	DebuggingErrorFunc = $pkg.DebuggingErrorFunc = $newType(4, $kindFunc, "opengl.DebuggingErrorFunc", "DebuggingErrorFunc", "github.com/inkyblackness/shocked-client/opengl", null);
	DebugBuilder = $pkg.DebugBuilder = $newType(0, $kindStruct, "opengl.DebugBuilder", "DebugBuilder", "github.com/inkyblackness/shocked-client/opengl", function(wrapped_, onEntry_, onExit_, onError_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wrapped = $ifaceNil;
			this.onEntry = $throwNilPointerError;
			this.onExit = $throwNilPointerError;
			this.onError = $throwNilPointerError;
			return;
		}
		this.wrapped = wrapped_;
		this.onEntry = onEntry_;
		this.onExit = onExit_;
		this.onError = onError_;
	});
	debuggingOpenGl = $pkg.debuggingOpenGl = $newType(0, $kindStruct, "opengl.debuggingOpenGl", "debuggingOpenGl", "github.com/inkyblackness/shocked-client/opengl", function(gl_, onEntry_, onExit_, onError_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.gl = $ifaceNil;
			this.onEntry = $throwNilPointerError;
			this.onExit = $throwNilPointerError;
			this.onError = $throwNilPointerError;
			return;
		}
		this.gl = gl_;
		this.onEntry = onEntry_;
		this.onExit = onExit_;
		this.onError = onError_;
	});
	OpenGl = $pkg.OpenGl = $newType(8, $kindInterface, "opengl.OpenGl", "OpenGl", "github.com/inkyblackness/shocked-client/opengl", null);
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint32);
	arrayType = $arrayType($Float32, 16);
	ptrType = $ptrType(arrayType);
	ptrType$1 = $ptrType(DebugBuilder);
	ptrType$2 = $ptrType(debuggingOpenGl);
	CompileNewShader = function(gl, shaderType, source) {
		var $ptr, _arg, _r, _r$1, _r$2, _r$3, compileStatus, err, gl, shader, shaderType, source, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; compileStatus = $f.compileStatus; err = $f.err; gl = $f.gl; shader = $f.shader; shaderType = $f.shaderType; source = $f.source; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		shader = 0;
		err = $ifaceNil;
		_r = gl.CreateShader(shaderType); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		shader = _r;
		$r = gl.ShaderSource(shader, source); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.CompileShader(shader); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = gl.GetShaderParameter(shader, 35713); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		compileStatus = _r$1;
		/* */ if (compileStatus === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (compileStatus === 0) { */ case 5:
			_r$2 = gl.GetShaderInfoLog(shader); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg = new $String(_r$2);
			_r$3 = fmt.Errorf("%s", new sliceType([_arg])); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err = _r$3;
			$r = gl.DeleteShader(shader); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			shader = 0;
		/* } */ case 6:
		return [shader, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: CompileNewShader }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.compileStatus = compileStatus; $f.err = err; $f.gl = gl; $f.shader = shader; $f.shaderType = shaderType; $f.source = source; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.CompileNewShader = CompileNewShader;
	NewDebugBuilder = function(wrapped) {
		var $ptr, builder, wrapped;
		builder = new DebugBuilder.ptr(wrapped, (function(param, param$1) {
			var $ptr, param, param$1;
		}), (function(param, param$1) {
			var $ptr, param, param$1;
		}), (function(param, param$1) {
			var $ptr, param, param$1;
		}));
		return builder;
	};
	$pkg.NewDebugBuilder = NewDebugBuilder;
	DebugBuilder.ptr.prototype.Build = function() {
		var $ptr, builder, opengl;
		builder = this;
		opengl = new debuggingOpenGl.ptr(builder.wrapped, builder.onEntry, builder.onExit, builder.onError);
		return opengl;
	};
	DebugBuilder.prototype.Build = function() { return this.$val.Build(); };
	DebugBuilder.ptr.prototype.OnEntry = function(callback) {
		var $ptr, builder, callback;
		builder = this;
		builder.onEntry = callback;
		return builder;
	};
	DebugBuilder.prototype.OnEntry = function(callback) { return this.$val.OnEntry(callback); };
	DebugBuilder.ptr.prototype.OnExit = function(callback) {
		var $ptr, builder, callback;
		builder = this;
		builder.onExit = callback;
		return builder;
	};
	DebugBuilder.prototype.OnExit = function(callback) { return this.$val.OnExit(callback); };
	DebugBuilder.ptr.prototype.OnError = function(callback) {
		var $ptr, builder, callback;
		builder = this;
		builder.onError = callback;
		return builder;
	};
	DebugBuilder.prototype.OnError = function(callback) { return this.$val.OnError(callback); };
	debuggingOpenGl.ptr.prototype.recordEntry = function(name, param) {
		var $ptr, debugging, name, param, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; name = $f.name; param = $f.param; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.onEntry(name, param); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.recordEntry }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.name = name; $f.param = param; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.recordEntry = function(name, param) { return this.$val.recordEntry(name, param); };
	debuggingOpenGl.ptr.prototype.recordExit = function(name, result) {
		var $ptr, _r, _r$1, debugging, errorCode, errorCodes, name, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; debugging = $f.debugging; errorCode = $f.errorCode; errorCodes = $f.errorCodes; name = $f.name; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		errorCodes = sliceType$1.nil;
		_r = debugging.gl.GetError(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errorCode = _r;
		/* while (true) { */ case 2:
			/* if (!(!((errorCode === 0)))) { break; } */ if(!(!((errorCode === 0)))) { $s = 3; continue; }
			errorCodes = $append(errorCodes, errorCode);
			_r$1 = debugging.gl.GetError(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			errorCode = _r$1;
		/* } */ $s = 2; continue; case 3:
		$r = debugging.onExit(name, result); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (errorCodes.$length > 0) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (errorCodes.$length > 0) { */ case 6:
			$r = debugging.onError(name, errorCodes); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.recordExit }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.debugging = debugging; $f.errorCode = errorCode; $f.errorCodes = errorCodes; $f.name = name; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.recordExit = function(name, result) { return this.$val.recordExit(name, result); };
	debuggingOpenGl.ptr.prototype.ActiveTexture = function(texture) {
		var $ptr, debugging, texture, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; texture = $f.texture; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("ActiveTexture", new sliceType([new $Uint32(texture)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.ActiveTexture(texture); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("ActiveTexture", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.ActiveTexture }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.texture = texture; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.ActiveTexture = function(texture) { return this.$val.ActiveTexture(texture); };
	debuggingOpenGl.ptr.prototype.AttachShader = function(program, shader) {
		var $ptr, debugging, program, shader, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; program = $f.program; shader = $f.shader; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("AttachShader", new sliceType([new $Uint32(program), new $Uint32(shader)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.AttachShader(program, shader); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("AttachShader", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.AttachShader }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.program = program; $f.shader = shader; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.AttachShader = function(program, shader) { return this.$val.AttachShader(program, shader); };
	debuggingOpenGl.ptr.prototype.BindAttribLocation = function(program, index, name) {
		var $ptr, debugging, index, name, program, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; index = $f.index; name = $f.name; program = $f.program; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("BindAttribLocation", new sliceType([new $Uint32(program), new $Uint32(index), new $String(name)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.BindAttribLocation(program, index, name); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("BindAttribLocation", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.BindAttribLocation }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.index = index; $f.name = name; $f.program = program; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.BindAttribLocation = function(program, index, name) { return this.$val.BindAttribLocation(program, index, name); };
	debuggingOpenGl.ptr.prototype.BindBuffer = function(target, buffer) {
		var $ptr, buffer, debugging, target, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; buffer = $f.buffer; debugging = $f.debugging; target = $f.target; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("BindBuffer", new sliceType([new $Uint32(target), new $Uint32(buffer)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.BindBuffer(target, buffer); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("BindBuffer", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.BindBuffer }; } $f.$ptr = $ptr; $f.buffer = buffer; $f.debugging = debugging; $f.target = target; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.BindBuffer = function(target, buffer) { return this.$val.BindBuffer(target, buffer); };
	debuggingOpenGl.ptr.prototype.BindTexture = function(target, texture) {
		var $ptr, debugging, target, texture, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; target = $f.target; texture = $f.texture; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("BindTexture", new sliceType([new $Uint32(target), new $Uint32(texture)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.BindTexture(target, texture); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("BindTexture", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.BindTexture }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.target = target; $f.texture = texture; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.BindTexture = function(target, texture) { return this.$val.BindTexture(target, texture); };
	debuggingOpenGl.ptr.prototype.BindVertexArray = function(array) {
		var $ptr, array, debugging, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; array = $f.array; debugging = $f.debugging; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("BindVertexArray", new sliceType([new $Uint32(array)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.BindVertexArray(array); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("BindVertexArray", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.BindVertexArray }; } $f.$ptr = $ptr; $f.array = array; $f.debugging = debugging; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.BindVertexArray = function(array) { return this.$val.BindVertexArray(array); };
	debuggingOpenGl.ptr.prototype.BlendFunc = function(sfactor, dfactor) {
		var $ptr, debugging, dfactor, sfactor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; dfactor = $f.dfactor; sfactor = $f.sfactor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("BlendFunc", new sliceType([new $Uint32(sfactor), new $Uint32(dfactor)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.BlendFunc(sfactor, dfactor); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("BlendFunc", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.BlendFunc }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.dfactor = dfactor; $f.sfactor = sfactor; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.BlendFunc = function(sfactor, dfactor) { return this.$val.BlendFunc(sfactor, dfactor); };
	debuggingOpenGl.ptr.prototype.BufferData = function(target, size, data, usage) {
		var $ptr, data, debugging, size, target, usage, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; data = $f.data; debugging = $f.debugging; size = $f.size; target = $f.target; usage = $f.usage; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("BufferData", new sliceType([new $Uint32(target), new $Int(size), data, new $Uint32(usage)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.BufferData(target, size, data, usage); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("BufferData", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.BufferData }; } $f.$ptr = $ptr; $f.data = data; $f.debugging = debugging; $f.size = size; $f.target = target; $f.usage = usage; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.BufferData = function(target, size, data, usage) { return this.$val.BufferData(target, size, data, usage); };
	debuggingOpenGl.ptr.prototype.Clear = function(mask) {
		var $ptr, debugging, mask, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; mask = $f.mask; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("Clear", new sliceType([new $Uint32(mask)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.Clear(mask); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("Clear", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.Clear }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.mask = mask; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.Clear = function(mask) { return this.$val.Clear(mask); };
	debuggingOpenGl.ptr.prototype.ClearColor = function(red, green, blue, alpha) {
		var $ptr, alpha, blue, debugging, green, red, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; alpha = $f.alpha; blue = $f.blue; debugging = $f.debugging; green = $f.green; red = $f.red; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("ClearColor", new sliceType([new $Float32(red), new $Float32(green), new $Float32(blue), new $Float32(alpha)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.ClearColor(red, green, blue, alpha); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("ClearColor", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.ClearColor }; } $f.$ptr = $ptr; $f.alpha = alpha; $f.blue = blue; $f.debugging = debugging; $f.green = green; $f.red = red; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.ClearColor = function(red, green, blue, alpha) { return this.$val.ClearColor(red, green, blue, alpha); };
	debuggingOpenGl.ptr.prototype.CompileShader = function(shader) {
		var $ptr, debugging, shader, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; shader = $f.shader; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("CompileShader", new sliceType([new $Uint32(shader)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.CompileShader(shader); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("CompileShader", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.CompileShader }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.shader = shader; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.CompileShader = function(shader) { return this.$val.CompileShader(shader); };
	debuggingOpenGl.ptr.prototype.CreateProgram = function() {
		var $ptr, _r, debugging, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; debugging = $f.debugging; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("CreateProgram", new sliceType([])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = debugging.gl.CreateProgram(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result = _r;
		$r = debugging.recordExit("CreateProgram", new sliceType([new $Uint32(result)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.CreateProgram }; } $f.$ptr = $ptr; $f._r = _r; $f.debugging = debugging; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.CreateProgram = function() { return this.$val.CreateProgram(); };
	debuggingOpenGl.ptr.prototype.CreateShader = function(shaderType) {
		var $ptr, _r, debugging, result, shaderType, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; debugging = $f.debugging; result = $f.result; shaderType = $f.shaderType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("CreateShader", new sliceType([new $Uint32(shaderType)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = debugging.gl.CreateShader(shaderType); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result = _r;
		$r = debugging.recordExit("CreateShader", new sliceType([new $Uint32(result)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.CreateShader }; } $f.$ptr = $ptr; $f._r = _r; $f.debugging = debugging; $f.result = result; $f.shaderType = shaderType; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.CreateShader = function(shaderType) { return this.$val.CreateShader(shaderType); };
	debuggingOpenGl.ptr.prototype.DeleteBuffers = function(buffers) {
		var $ptr, buffers, debugging, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; buffers = $f.buffers; debugging = $f.debugging; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("DeleteBuffers", new sliceType([buffers])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.DeleteBuffers(buffers); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("DeleteBuffers", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.DeleteBuffers }; } $f.$ptr = $ptr; $f.buffers = buffers; $f.debugging = debugging; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.DeleteBuffers = function(buffers) { return this.$val.DeleteBuffers(buffers); };
	debuggingOpenGl.ptr.prototype.DeleteProgram = function(program) {
		var $ptr, debugging, program, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; program = $f.program; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("DeleteProgram", new sliceType([new $Uint32(program)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.DeleteProgram(program); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("DeleteProgram", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.DeleteProgram }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.program = program; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.DeleteProgram = function(program) { return this.$val.DeleteProgram(program); };
	debuggingOpenGl.ptr.prototype.DeleteShader = function(shader) {
		var $ptr, debugging, shader, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; shader = $f.shader; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("DeleteShader", new sliceType([new $Uint32(shader)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.DeleteShader(shader); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("DeleteShader", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.DeleteShader }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.shader = shader; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.DeleteShader = function(shader) { return this.$val.DeleteShader(shader); };
	debuggingOpenGl.ptr.prototype.DeleteTextures = function(textures) {
		var $ptr, debugging, textures, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; textures = $f.textures; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("DeleteTextures", new sliceType([textures])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.DeleteTextures(textures); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("DeleteTextures", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.DeleteTextures }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.textures = textures; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.DeleteTextures = function(textures) { return this.$val.DeleteTextures(textures); };
	debuggingOpenGl.ptr.prototype.DeleteVertexArrays = function(arrays) {
		var $ptr, arrays, debugging, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; arrays = $f.arrays; debugging = $f.debugging; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("DeleteVertexArrays", new sliceType([arrays])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.DeleteVertexArrays(arrays); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("DeleteVertexArrays", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.DeleteVertexArrays }; } $f.$ptr = $ptr; $f.arrays = arrays; $f.debugging = debugging; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.DeleteVertexArrays = function(arrays) { return this.$val.DeleteVertexArrays(arrays); };
	debuggingOpenGl.ptr.prototype.DrawArrays = function(mode, first, count) {
		var $ptr, count, debugging, first, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; count = $f.count; debugging = $f.debugging; first = $f.first; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("DrawArrays", new sliceType([new $Int32(first), new $Int32(count)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.DrawArrays(mode, first, count); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("DrawArrays", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.DrawArrays }; } $f.$ptr = $ptr; $f.count = count; $f.debugging = debugging; $f.first = first; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.DrawArrays = function(mode, first, count) { return this.$val.DrawArrays(mode, first, count); };
	debuggingOpenGl.ptr.prototype.Enable = function(cap) {
		var $ptr, cap, debugging, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; cap = $f.cap; debugging = $f.debugging; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("Enable", new sliceType([new $Uint32(cap)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.Enable(cap); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("Enable", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.Enable }; } $f.$ptr = $ptr; $f.cap = cap; $f.debugging = debugging; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.Enable = function(cap) { return this.$val.Enable(cap); };
	debuggingOpenGl.ptr.prototype.EnableVertexAttribArray = function(index) {
		var $ptr, debugging, index, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; index = $f.index; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("EnableVertexAttribArray", new sliceType([new $Uint32(index)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.EnableVertexAttribArray(index); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("EnableVertexAttribArray", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.EnableVertexAttribArray }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.index = index; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.EnableVertexAttribArray = function(index) { return this.$val.EnableVertexAttribArray(index); };
	debuggingOpenGl.ptr.prototype.GenerateMipmap = function(target) {
		var $ptr, debugging, target, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; target = $f.target; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("GenerateMipmap", new sliceType([new $Uint32(target)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.GenerateMipmap(target); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("GenerateMipmap", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.GenerateMipmap }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.target = target; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.GenerateMipmap = function(target) { return this.$val.GenerateMipmap(target); };
	debuggingOpenGl.ptr.prototype.GenBuffers = function(n) {
		var $ptr, _r, debugging, n, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; debugging = $f.debugging; n = $f.n; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("GenBuffers", new sliceType([new $Int32(n)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = debugging.gl.GenBuffers(n); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result = _r;
		$r = debugging.recordExit("GenBuffers", new sliceType([result])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.GenBuffers }; } $f.$ptr = $ptr; $f._r = _r; $f.debugging = debugging; $f.n = n; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.GenBuffers = function(n) { return this.$val.GenBuffers(n); };
	debuggingOpenGl.ptr.prototype.GenTextures = function(n) {
		var $ptr, _r, debugging, n, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; debugging = $f.debugging; n = $f.n; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("GenTextures", new sliceType([new $Int32(n)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = debugging.gl.GenTextures(n); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result = _r;
		$r = debugging.recordExit("GenTextures", new sliceType([result])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.GenTextures }; } $f.$ptr = $ptr; $f._r = _r; $f.debugging = debugging; $f.n = n; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.GenTextures = function(n) { return this.$val.GenTextures(n); };
	debuggingOpenGl.ptr.prototype.GenVertexArrays = function(n) {
		var $ptr, _r, debugging, n, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; debugging = $f.debugging; n = $f.n; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("GenVertexArrays", new sliceType([new $Int32(n)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = debugging.gl.GenVertexArrays(n); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result = _r;
		$r = debugging.recordExit("GenVertexArrays", new sliceType([result])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.GenVertexArrays }; } $f.$ptr = $ptr; $f._r = _r; $f.debugging = debugging; $f.n = n; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.GenVertexArrays = function(n) { return this.$val.GenVertexArrays(n); };
	debuggingOpenGl.ptr.prototype.GetAttribLocation = function(program, name) {
		var $ptr, _r, debugging, name, program, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; debugging = $f.debugging; name = $f.name; program = $f.program; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("GetAttribLocation", new sliceType([new $Uint32(program), new $String(name)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = debugging.gl.GetAttribLocation(program, name); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result = _r;
		$r = debugging.recordExit("GetAttribLocation", new sliceType([new $Int32(result)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.GetAttribLocation }; } $f.$ptr = $ptr; $f._r = _r; $f.debugging = debugging; $f.name = name; $f.program = program; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.GetAttribLocation = function(program, name) { return this.$val.GetAttribLocation(program, name); };
	debuggingOpenGl.ptr.prototype.GetError = function() {
		var $ptr, _r, debugging, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; debugging = $f.debugging; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("GetError", new sliceType([])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = debugging.gl.GetError(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result = _r;
		$r = debugging.recordExit("GetError", new sliceType([new $Uint32(result)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.GetError }; } $f.$ptr = $ptr; $f._r = _r; $f.debugging = debugging; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.GetError = function() { return this.$val.GetError(); };
	debuggingOpenGl.ptr.prototype.GetProgramInfoLog = function(program) {
		var $ptr, _r, debugging, program, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; debugging = $f.debugging; program = $f.program; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("GetProgramInfoLog", new sliceType([new $Uint32(program)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = debugging.gl.GetProgramInfoLog(program); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result = _r;
		$r = debugging.recordExit("GetProgramInfoLog", new sliceType([new $String(result)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.GetProgramInfoLog }; } $f.$ptr = $ptr; $f._r = _r; $f.debugging = debugging; $f.program = program; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.GetProgramInfoLog = function(program) { return this.$val.GetProgramInfoLog(program); };
	debuggingOpenGl.ptr.prototype.GetProgramParameter = function(program, param) {
		var $ptr, _r, debugging, param, program, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; debugging = $f.debugging; param = $f.param; program = $f.program; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("GetProgramParameter", new sliceType([new $Uint32(program), new $Uint32(param)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = debugging.gl.GetProgramParameter(program, param); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result = _r;
		$r = debugging.recordExit("GetProgramParameter", new sliceType([new $Int32(result)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.GetProgramParameter }; } $f.$ptr = $ptr; $f._r = _r; $f.debugging = debugging; $f.param = param; $f.program = program; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.GetProgramParameter = function(program, param) { return this.$val.GetProgramParameter(program, param); };
	debuggingOpenGl.ptr.prototype.GetShaderInfoLog = function(shader) {
		var $ptr, _r, debugging, result, shader, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; debugging = $f.debugging; result = $f.result; shader = $f.shader; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("GetShaderInfoLog", new sliceType([new $Uint32(shader)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = debugging.gl.GetShaderInfoLog(shader); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result = _r;
		$r = debugging.recordExit("GetShaderInfoLog", new sliceType([new $String(result)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.GetShaderInfoLog }; } $f.$ptr = $ptr; $f._r = _r; $f.debugging = debugging; $f.result = result; $f.shader = shader; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.GetShaderInfoLog = function(shader) { return this.$val.GetShaderInfoLog(shader); };
	debuggingOpenGl.ptr.prototype.GetShaderParameter = function(shader, param) {
		var $ptr, _r, debugging, param, result, shader, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; debugging = $f.debugging; param = $f.param; result = $f.result; shader = $f.shader; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("GetShaderParameter", new sliceType([new $Uint32(shader), new $Uint32(param)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = debugging.gl.GetShaderParameter(shader, param); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result = _r;
		$r = debugging.recordExit("GetShaderParameter", new sliceType([new $Int32(result)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.GetShaderParameter }; } $f.$ptr = $ptr; $f._r = _r; $f.debugging = debugging; $f.param = param; $f.result = result; $f.shader = shader; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.GetShaderParameter = function(shader, param) { return this.$val.GetShaderParameter(shader, param); };
	debuggingOpenGl.ptr.prototype.GetUniformLocation = function(program, name) {
		var $ptr, _r, debugging, name, program, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; debugging = $f.debugging; name = $f.name; program = $f.program; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("GetUniformLocation", new sliceType([new $Uint32(program), new $String(name)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = debugging.gl.GetUniformLocation(program, name); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result = _r;
		$r = debugging.recordExit("GetUniformLocation", new sliceType([new $Int32(result)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.GetUniformLocation }; } $f.$ptr = $ptr; $f._r = _r; $f.debugging = debugging; $f.name = name; $f.program = program; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.GetUniformLocation = function(program, name) { return this.$val.GetUniformLocation(program, name); };
	debuggingOpenGl.ptr.prototype.LinkProgram = function(program) {
		var $ptr, debugging, program, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; program = $f.program; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("LinkProgram", new sliceType([new $Uint32(program)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.LinkProgram(program); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("LinkProgram", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.LinkProgram }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.program = program; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.LinkProgram = function(program) { return this.$val.LinkProgram(program); };
	debuggingOpenGl.ptr.prototype.ReadPixels = function(x, y, width, height, format, pixelType, pixels) {
		var $ptr, debugging, format, height, pixelType, pixels, width, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; format = $f.format; height = $f.height; pixelType = $f.pixelType; pixels = $f.pixels; width = $f.width; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("ReadPixels", new sliceType([new $Int32(x), new $Int32(y), new $Int32(width), new $Int32(height), new $Uint32(format), new $Uint32(pixelType), pixels])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.ReadPixels(x, y, width, height, format, pixelType, pixels); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("ReadPixels", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.ReadPixels }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.format = format; $f.height = height; $f.pixelType = pixelType; $f.pixels = pixels; $f.width = width; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.ReadPixels = function(x, y, width, height, format, pixelType, pixels) { return this.$val.ReadPixels(x, y, width, height, format, pixelType, pixels); };
	debuggingOpenGl.ptr.prototype.ShaderSource = function(shader, source) {
		var $ptr, debugging, shader, source, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; shader = $f.shader; source = $f.source; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("ShaderSource", new sliceType([new $Uint32(shader), new $String(source)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.ShaderSource(shader, source); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("ShaderSource", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.ShaderSource }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.shader = shader; $f.source = source; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.ShaderSource = function(shader, source) { return this.$val.ShaderSource(shader, source); };
	debuggingOpenGl.ptr.prototype.TexImage2D = function(target, level, internalFormat, width, height, border, format, xtype, pixels) {
		var $ptr, border, debugging, format, height, internalFormat, level, pixels, target, width, xtype, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; border = $f.border; debugging = $f.debugging; format = $f.format; height = $f.height; internalFormat = $f.internalFormat; level = $f.level; pixels = $f.pixels; target = $f.target; width = $f.width; xtype = $f.xtype; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("TexImage2D", new sliceType([new $Uint32(target), new $Int32(level), new $Uint32(internalFormat), new $Int32(width), new $Int32(height), new $Int32(border), new $Uint32(format), new $Uint32(xtype), pixels])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.TexImage2D(target, level, internalFormat, width, height, border, format, xtype, pixels); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("TexImage2D", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.TexImage2D }; } $f.$ptr = $ptr; $f.border = border; $f.debugging = debugging; $f.format = format; $f.height = height; $f.internalFormat = internalFormat; $f.level = level; $f.pixels = pixels; $f.target = target; $f.width = width; $f.xtype = xtype; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.TexImage2D = function(target, level, internalFormat, width, height, border, format, xtype, pixels) { return this.$val.TexImage2D(target, level, internalFormat, width, height, border, format, xtype, pixels); };
	debuggingOpenGl.ptr.prototype.TexParameteri = function(target, pname, param) {
		var $ptr, debugging, param, pname, target, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; param = $f.param; pname = $f.pname; target = $f.target; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("TexParameteri", new sliceType([new $Uint32(target), new $Uint32(pname), new $Int32(param)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.TexParameteri(target, pname, param); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("TexParameteri", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.TexParameteri }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.param = param; $f.pname = pname; $f.target = target; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.TexParameteri = function(target, pname, param) { return this.$val.TexParameteri(target, pname, param); };
	debuggingOpenGl.ptr.prototype.Uniform1i = function(location, value) {
		var $ptr, debugging, location, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; location = $f.location; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("Uniform1i", new sliceType([new $Int32(location), new $Int32(value)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.Uniform1i(location, value); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("Uniform1i", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.Uniform1i }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.location = location; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.Uniform1i = function(location, value) { return this.$val.Uniform1i(location, value); };
	debuggingOpenGl.ptr.prototype.UniformMatrix4fv = function(location, transpose, value) {
		var $ptr, debugging, location, transpose, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; location = $f.location; transpose = $f.transpose; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("UniformMatrix4fv", new sliceType([new $Int32(location), new $Bool(transpose), new ptrType(value)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.UniformMatrix4fv(location, transpose, value); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("UniformMatrix4fv", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.UniformMatrix4fv }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.location = location; $f.transpose = transpose; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.UniformMatrix4fv = function(location, transpose, value) { return this.$val.UniformMatrix4fv(location, transpose, value); };
	debuggingOpenGl.ptr.prototype.UseProgram = function(program) {
		var $ptr, debugging, program, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; program = $f.program; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("UseProgram", new sliceType([new $Uint32(program)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.UseProgram(program); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("UseProgram", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.UseProgram }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.program = program; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.UseProgram = function(program) { return this.$val.UseProgram(program); };
	debuggingOpenGl.ptr.prototype.VertexAttribOffset = function(index, size, attribType, normalized, stride, offset) {
		var $ptr, attribType, debugging, index, normalized, offset, size, stride, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; attribType = $f.attribType; debugging = $f.debugging; index = $f.index; normalized = $f.normalized; offset = $f.offset; size = $f.size; stride = $f.stride; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("VertexAttribOffset", new sliceType([new $Uint32(index), new $Int32(size), new $Uint32(attribType), new $Bool(normalized), new $Int32(stride), new $Int(offset)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.VertexAttribOffset(index, size, attribType, normalized, stride, offset); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("VertexAttribOffset", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.VertexAttribOffset }; } $f.$ptr = $ptr; $f.attribType = attribType; $f.debugging = debugging; $f.index = index; $f.normalized = normalized; $f.offset = offset; $f.size = size; $f.stride = stride; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.VertexAttribOffset = function(index, size, attribType, normalized, stride, offset) { return this.$val.VertexAttribOffset(index, size, attribType, normalized, stride, offset); };
	debuggingOpenGl.ptr.prototype.Viewport = function(x, y, width, height) {
		var $ptr, debugging, height, width, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; debugging = $f.debugging; height = $f.height; width = $f.width; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		debugging = this;
		$r = debugging.recordEntry("Viewport", new sliceType([new $Int32(x), new $Int32(y), new $Int32(width), new $Int32(height)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.gl.Viewport(x, y, width, height); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = debugging.recordExit("Viewport", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: debuggingOpenGl.ptr.prototype.Viewport }; } $f.$ptr = $ptr; $f.debugging = debugging; $f.height = height; $f.width = width; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	debuggingOpenGl.prototype.Viewport = function(x, y, width, height) { return this.$val.Viewport(x, y, width, height); };
	ErrorString = function(errorCode) {
		var $ptr, _entry, _r, _tuple, errorCode, exists, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _tuple = $f._tuple; errorCode = $f.errorCode; exists = $f.exists; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = (_entry = errorStrings[$Uint32.keyFor(errorCode)], _entry !== undefined ? [_entry.v, true] : ["", false]);
		value = _tuple[0];
		exists = _tuple[1];
		/* */ if (!exists) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!exists) { */ case 1:
			_r = fmt.Sprintf("0x%04X", new sliceType([new $Uint32(errorCode)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			value = _r;
		/* } */ case 2:
		return value;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ErrorString }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._tuple = _tuple; $f.errorCode = errorCode; $f.exists = exists; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ErrorString = ErrorString;
	LinkNewProgram = function(gl, shaders) {
		var $ptr, _arg, _i, _r, _r$1, _r$2, _r$3, _ref, err, gl, program, shader, shaders, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; err = $f.err; gl = $f.gl; program = $f.program; shader = $f.shader; shaders = $f.shaders; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		program = 0;
		err = $ifaceNil;
		_r = gl.CreateProgram(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		program = _r;
		_ref = shaders;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			shader = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = gl.AttachShader(program, shader); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		$r = gl.LinkProgram(program); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = gl.GetProgramParameter(program, 35714); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1 === 0) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_r$1 === 0) { */ case 6:
			_r$2 = gl.GetProgramInfoLog(program); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg = new $String(_r$2);
			_r$3 = fmt.Errorf("%v", new sliceType([_arg])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err = _r$3;
			$r = gl.DeleteProgram(program); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			program = 0;
		/* } */ case 7:
		return [program, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkNewProgram }; } $f.$ptr = $ptr; $f._arg = _arg; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.err = err; $f.gl = gl; $f.program = program; $f.shader = shader; $f.shaders = shaders; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.LinkNewProgram = LinkNewProgram;
	ptrType$1.methods = [{prop: "Build", name: "Build", pkg: "", typ: $funcType([], [OpenGl], false)}, {prop: "OnEntry", name: "OnEntry", pkg: "", typ: $funcType([DebuggingEntryFunc], [ptrType$1], false)}, {prop: "OnExit", name: "OnExit", pkg: "", typ: $funcType([DebuggingExitFunc], [ptrType$1], false)}, {prop: "OnError", name: "OnError", pkg: "", typ: $funcType([DebuggingErrorFunc], [ptrType$1], false)}];
	ptrType$2.methods = [{prop: "recordEntry", name: "recordEntry", pkg: "github.com/inkyblackness/shocked-client/opengl", typ: $funcType([$String, sliceType], [], true)}, {prop: "recordExit", name: "recordExit", pkg: "github.com/inkyblackness/shocked-client/opengl", typ: $funcType([$String, sliceType], [], true)}, {prop: "ActiveTexture", name: "ActiveTexture", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "AttachShader", name: "AttachShader", pkg: "", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "BindAttribLocation", name: "BindAttribLocation", pkg: "", typ: $funcType([$Uint32, $Uint32, $String], [], false)}, {prop: "BindBuffer", name: "BindBuffer", pkg: "", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "BindTexture", name: "BindTexture", pkg: "", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "BindVertexArray", name: "BindVertexArray", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "BlendFunc", name: "BlendFunc", pkg: "", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "BufferData", name: "BufferData", pkg: "", typ: $funcType([$Uint32, $Int, $emptyInterface, $Uint32], [], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ClearColor", name: "ClearColor", pkg: "", typ: $funcType([$Float32, $Float32, $Float32, $Float32], [], false)}, {prop: "CompileShader", name: "CompileShader", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "CreateProgram", name: "CreateProgram", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "CreateShader", name: "CreateShader", pkg: "", typ: $funcType([$Uint32], [$Uint32], false)}, {prop: "DeleteBuffers", name: "DeleteBuffers", pkg: "", typ: $funcType([sliceType$1], [], false)}, {prop: "DeleteProgram", name: "DeleteProgram", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "DeleteShader", name: "DeleteShader", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "DeleteTextures", name: "DeleteTextures", pkg: "", typ: $funcType([sliceType$1], [], false)}, {prop: "DeleteVertexArrays", name: "DeleteVertexArrays", pkg: "", typ: $funcType([sliceType$1], [], false)}, {prop: "DrawArrays", name: "DrawArrays", pkg: "", typ: $funcType([$Uint32, $Int32, $Int32], [], false)}, {prop: "Enable", name: "Enable", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "EnableVertexAttribArray", name: "EnableVertexAttribArray", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "GenerateMipmap", name: "GenerateMipmap", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "GenBuffers", name: "GenBuffers", pkg: "", typ: $funcType([$Int32], [sliceType$1], false)}, {prop: "GenTextures", name: "GenTextures", pkg: "", typ: $funcType([$Int32], [sliceType$1], false)}, {prop: "GenVertexArrays", name: "GenVertexArrays", pkg: "", typ: $funcType([$Int32], [sliceType$1], false)}, {prop: "GetAttribLocation", name: "GetAttribLocation", pkg: "", typ: $funcType([$Uint32, $String], [$Int32], false)}, {prop: "GetError", name: "GetError", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "GetProgramInfoLog", name: "GetProgramInfoLog", pkg: "", typ: $funcType([$Uint32], [$String], false)}, {prop: "GetProgramParameter", name: "GetProgramParameter", pkg: "", typ: $funcType([$Uint32, $Uint32], [$Int32], false)}, {prop: "GetShaderInfoLog", name: "GetShaderInfoLog", pkg: "", typ: $funcType([$Uint32], [$String], false)}, {prop: "GetShaderParameter", name: "GetShaderParameter", pkg: "", typ: $funcType([$Uint32, $Uint32], [$Int32], false)}, {prop: "GetUniformLocation", name: "GetUniformLocation", pkg: "", typ: $funcType([$Uint32, $String], [$Int32], false)}, {prop: "LinkProgram", name: "LinkProgram", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ReadPixels", name: "ReadPixels", pkg: "", typ: $funcType([$Int32, $Int32, $Int32, $Int32, $Uint32, $Uint32, $emptyInterface], [], false)}, {prop: "ShaderSource", name: "ShaderSource", pkg: "", typ: $funcType([$Uint32, $String], [], false)}, {prop: "TexImage2D", name: "TexImage2D", pkg: "", typ: $funcType([$Uint32, $Int32, $Uint32, $Int32, $Int32, $Int32, $Uint32, $Uint32, $emptyInterface], [], false)}, {prop: "TexParameteri", name: "TexParameteri", pkg: "", typ: $funcType([$Uint32, $Uint32, $Int32], [], false)}, {prop: "Uniform1i", name: "Uniform1i", pkg: "", typ: $funcType([$Int32, $Int32], [], false)}, {prop: "UniformMatrix4fv", name: "UniformMatrix4fv", pkg: "", typ: $funcType([$Int32, $Bool, ptrType], [], false)}, {prop: "UseProgram", name: "UseProgram", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "VertexAttribOffset", name: "VertexAttribOffset", pkg: "", typ: $funcType([$Uint32, $Int32, $Uint32, $Bool, $Int32, $Int], [], false)}, {prop: "Viewport", name: "Viewport", pkg: "", typ: $funcType([$Int32, $Int32, $Int32, $Int32], [], false)}];
	DebuggingEntryFunc.init([$String, sliceType], [], true);
	DebuggingExitFunc.init([$String, sliceType], [], true);
	DebuggingErrorFunc.init([$String, sliceType$1], [], false);
	DebugBuilder.init([{prop: "wrapped", name: "wrapped", pkg: "github.com/inkyblackness/shocked-client/opengl", typ: OpenGl, tag: ""}, {prop: "onEntry", name: "onEntry", pkg: "github.com/inkyblackness/shocked-client/opengl", typ: DebuggingEntryFunc, tag: ""}, {prop: "onExit", name: "onExit", pkg: "github.com/inkyblackness/shocked-client/opengl", typ: DebuggingExitFunc, tag: ""}, {prop: "onError", name: "onError", pkg: "github.com/inkyblackness/shocked-client/opengl", typ: DebuggingErrorFunc, tag: ""}]);
	debuggingOpenGl.init([{prop: "gl", name: "gl", pkg: "github.com/inkyblackness/shocked-client/opengl", typ: OpenGl, tag: ""}, {prop: "onEntry", name: "onEntry", pkg: "github.com/inkyblackness/shocked-client/opengl", typ: DebuggingEntryFunc, tag: ""}, {prop: "onExit", name: "onExit", pkg: "github.com/inkyblackness/shocked-client/opengl", typ: DebuggingExitFunc, tag: ""}, {prop: "onError", name: "onError", pkg: "github.com/inkyblackness/shocked-client/opengl", typ: DebuggingErrorFunc, tag: ""}]);
	OpenGl.init([{prop: "ActiveTexture", name: "ActiveTexture", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "AttachShader", name: "AttachShader", pkg: "", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "BindAttribLocation", name: "BindAttribLocation", pkg: "", typ: $funcType([$Uint32, $Uint32, $String], [], false)}, {prop: "BindBuffer", name: "BindBuffer", pkg: "", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "BindTexture", name: "BindTexture", pkg: "", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "BindVertexArray", name: "BindVertexArray", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "BlendFunc", name: "BlendFunc", pkg: "", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "BufferData", name: "BufferData", pkg: "", typ: $funcType([$Uint32, $Int, $emptyInterface, $Uint32], [], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ClearColor", name: "ClearColor", pkg: "", typ: $funcType([$Float32, $Float32, $Float32, $Float32], [], false)}, {prop: "CompileShader", name: "CompileShader", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "CreateProgram", name: "CreateProgram", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "CreateShader", name: "CreateShader", pkg: "", typ: $funcType([$Uint32], [$Uint32], false)}, {prop: "DeleteBuffers", name: "DeleteBuffers", pkg: "", typ: $funcType([sliceType$1], [], false)}, {prop: "DeleteProgram", name: "DeleteProgram", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "DeleteShader", name: "DeleteShader", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "DeleteTextures", name: "DeleteTextures", pkg: "", typ: $funcType([sliceType$1], [], false)}, {prop: "DeleteVertexArrays", name: "DeleteVertexArrays", pkg: "", typ: $funcType([sliceType$1], [], false)}, {prop: "DrawArrays", name: "DrawArrays", pkg: "", typ: $funcType([$Uint32, $Int32, $Int32], [], false)}, {prop: "Enable", name: "Enable", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "EnableVertexAttribArray", name: "EnableVertexAttribArray", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "GenBuffers", name: "GenBuffers", pkg: "", typ: $funcType([$Int32], [sliceType$1], false)}, {prop: "GenTextures", name: "GenTextures", pkg: "", typ: $funcType([$Int32], [sliceType$1], false)}, {prop: "GenVertexArrays", name: "GenVertexArrays", pkg: "", typ: $funcType([$Int32], [sliceType$1], false)}, {prop: "GenerateMipmap", name: "GenerateMipmap", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "GetAttribLocation", name: "GetAttribLocation", pkg: "", typ: $funcType([$Uint32, $String], [$Int32], false)}, {prop: "GetError", name: "GetError", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "GetProgramInfoLog", name: "GetProgramInfoLog", pkg: "", typ: $funcType([$Uint32], [$String], false)}, {prop: "GetProgramParameter", name: "GetProgramParameter", pkg: "", typ: $funcType([$Uint32, $Uint32], [$Int32], false)}, {prop: "GetShaderInfoLog", name: "GetShaderInfoLog", pkg: "", typ: $funcType([$Uint32], [$String], false)}, {prop: "GetShaderParameter", name: "GetShaderParameter", pkg: "", typ: $funcType([$Uint32, $Uint32], [$Int32], false)}, {prop: "GetUniformLocation", name: "GetUniformLocation", pkg: "", typ: $funcType([$Uint32, $String], [$Int32], false)}, {prop: "LinkProgram", name: "LinkProgram", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ReadPixels", name: "ReadPixels", pkg: "", typ: $funcType([$Int32, $Int32, $Int32, $Int32, $Uint32, $Uint32, $emptyInterface], [], false)}, {prop: "ShaderSource", name: "ShaderSource", pkg: "", typ: $funcType([$Uint32, $String], [], false)}, {prop: "TexImage2D", name: "TexImage2D", pkg: "", typ: $funcType([$Uint32, $Int32, $Uint32, $Int32, $Int32, $Int32, $Uint32, $Uint32, $emptyInterface], [], false)}, {prop: "TexParameteri", name: "TexParameteri", pkg: "", typ: $funcType([$Uint32, $Uint32, $Int32], [], false)}, {prop: "Uniform1i", name: "Uniform1i", pkg: "", typ: $funcType([$Int32, $Int32], [], false)}, {prop: "UniformMatrix4fv", name: "UniformMatrix4fv", pkg: "", typ: $funcType([$Int32, $Bool, ptrType], [], false)}, {prop: "UseProgram", name: "UseProgram", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "VertexAttribOffset", name: "VertexAttribOffset", pkg: "", typ: $funcType([$Uint32, $Int32, $Uint32, $Bool, $Int32, $Int], [], false)}, {prop: "Viewport", name: "Viewport", pkg: "", typ: $funcType([$Int32, $Int32, $Int32, $Int32], [], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errorStrings = $makeMap($Uint32.keyFor, [{ k: 0, v: "NO_ERROR" }, { k: 1280, v: "INVALID_ENUM" }, { k: 1281, v: "INVALID_VALUE" }, { k: 1282, v: "INVALID_OPERATION" }, { k: 1283, v: "STACK_OVERFLOW" }, { k: 1284, v: "STACK_UNDERFLOW" }, { k: 1285, v: "OUT_OF_MEMORY" }, { k: 1286, v: "INVALID_FRAMEBUFFER_OPERATION" }]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/inkyblackness/shocked-client/graphics"] = (function() {
	var $pkg = {}, $init, opengl, BitmapTexture, ColorProvider, PaletteTexture, Texture, sliceType, sliceType$1, arrayType, ptrType, ptrType$1, ptrType$2, NewBitmapTexture, NewPaletteTexture;
	opengl = $packages["github.com/inkyblackness/shocked-client/opengl"];
	BitmapTexture = $pkg.BitmapTexture = $newType(0, $kindStruct, "graphics.BitmapTexture", "BitmapTexture", "github.com/inkyblackness/shocked-client/graphics", function(gl_, handle_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.gl = $ifaceNil;
			this.handle = 0;
			return;
		}
		this.gl = gl_;
		this.handle = handle_;
	});
	ColorProvider = $pkg.ColorProvider = $newType(4, $kindFunc, "graphics.ColorProvider", "ColorProvider", "github.com/inkyblackness/shocked-client/graphics", null);
	PaletteTexture = $pkg.PaletteTexture = $newType(0, $kindStruct, "graphics.PaletteTexture", "PaletteTexture", "github.com/inkyblackness/shocked-client/graphics", function(gl_, colorProvider_, handle_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.gl = $ifaceNil;
			this.colorProvider = $throwNilPointerError;
			this.handle = 0;
			return;
		}
		this.gl = gl_;
		this.colorProvider = colorProvider_;
		this.handle = handle_;
	});
	Texture = $pkg.Texture = $newType(8, $kindInterface, "graphics.Texture", "Texture", "github.com/inkyblackness/shocked-client/graphics", null);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 1024);
	ptrType = $ptrType(BitmapTexture);
	ptrType$1 = $ptrType(arrayType);
	ptrType$2 = $ptrType(PaletteTexture);
	NewBitmapTexture = function(gl, width, height, pixelData) {
		var $ptr, _r, gl, height, i, pixelData, rgbaData, tex, value, width, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; gl = $f.gl; height = $f.height; i = $f.i; pixelData = $f.pixelData; rgbaData = $f.rgbaData; tex = $f.tex; value = $f.value; width = $f.width; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = gl.GenTextures(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tex = new BitmapTexture.ptr(gl, (x = _r, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])));
		rgbaData = $makeSlice(sliceType, ($imul(pixelData.$length, 4)));
		i = 0;
		while (true) {
			if (!(i < pixelData.$length)) { break; }
			value = ((i < 0 || i >= pixelData.$length) ? $throwRuntimeError("index out of range") : pixelData.$array[pixelData.$offset + i]);
			(x$1 = ($imul(i, 4)) + 0 >> 0, ((x$1 < 0 || x$1 >= rgbaData.$length) ? $throwRuntimeError("index out of range") : rgbaData.$array[rgbaData.$offset + x$1] = value));
			(x$2 = ($imul(i, 4)) + 1 >> 0, ((x$2 < 0 || x$2 >= rgbaData.$length) ? $throwRuntimeError("index out of range") : rgbaData.$array[rgbaData.$offset + x$2] = value));
			(x$3 = ($imul(i, 4)) + 2 >> 0, ((x$3 < 0 || x$3 >= rgbaData.$length) ? $throwRuntimeError("index out of range") : rgbaData.$array[rgbaData.$offset + x$3] = value));
			(x$4 = ($imul(i, 4)) + 3 >> 0, ((x$4 < 0 || x$4 >= rgbaData.$length) ? $throwRuntimeError("index out of range") : rgbaData.$array[rgbaData.$offset + x$4] = value));
			i = i + (1) >> 0;
		}
		$r = gl.BindTexture(3553, tex.handle); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.TexImage2D(3553, 0, 6408, (width >> 0), (height >> 0), 0, 6408, 5121, rgbaData); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.TexParameteri(3553, 10240, 9728); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.TexParameteri(3553, 10241, 9728); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.GenerateMipmap(3553); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.BindTexture(3553, 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return tex;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBitmapTexture }; } $f.$ptr = $ptr; $f._r = _r; $f.gl = gl; $f.height = height; $f.i = i; $f.pixelData = pixelData; $f.rgbaData = rgbaData; $f.tex = tex; $f.value = value; $f.width = width; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBitmapTexture = NewBitmapTexture;
	BitmapTexture.ptr.prototype.Dispose = function() {
		var $ptr, tex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; tex = $f.tex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tex = this;
		/* */ if (!((tex.handle === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((tex.handle === 0))) { */ case 1:
			$r = tex.gl.DeleteTextures(new sliceType$1([tex.handle])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			tex.handle = 0;
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BitmapTexture.ptr.prototype.Dispose }; } $f.$ptr = $ptr; $f.tex = tex; $f.$s = $s; $f.$r = $r; return $f;
	};
	BitmapTexture.prototype.Dispose = function() { return this.$val.Dispose(); };
	BitmapTexture.ptr.prototype.Handle = function() {
		var $ptr, tex;
		tex = this;
		return tex.handle;
	};
	BitmapTexture.prototype.Handle = function() { return this.$val.Handle(); };
	NewPaletteTexture = function(gl, colorProvider) {
		var $ptr, _r, colorProvider, gl, tex, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; colorProvider = $f.colorProvider; gl = $f.gl; tex = $f.tex; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = gl.GenTextures(1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tex = new PaletteTexture.ptr(gl, colorProvider, (x = _r, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])));
		$r = tex.Update(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return tex;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewPaletteTexture }; } $f.$ptr = $ptr; $f._r = _r; $f.colorProvider = colorProvider; $f.gl = gl; $f.tex = tex; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewPaletteTexture = NewPaletteTexture;
	PaletteTexture.ptr.prototype.Dispose = function() {
		var $ptr, tex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; tex = $f.tex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tex = this;
		/* */ if (!((tex.handle === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((tex.handle === 0))) { */ case 1:
			$r = tex.gl.DeleteTextures(new sliceType$1([tex.handle])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			tex.handle = 0;
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PaletteTexture.ptr.prototype.Dispose }; } $f.$ptr = $ptr; $f.tex = tex; $f.$s = $s; $f.$r = $r; return $f;
	};
	PaletteTexture.prototype.Dispose = function() { return this.$val.Dispose(); };
	PaletteTexture.ptr.prototype.Handle = function() {
		var $ptr, tex;
		tex = this;
		return tex.handle;
	};
	PaletteTexture.prototype.Handle = function() { return this.$val.Handle(); };
	PaletteTexture.ptr.prototype.Update = function() {
		var $ptr, gl, palette, tex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; gl = $f.gl; palette = $f.palette; tex = $f.tex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		palette = [palette];
		tex = this;
		gl = tex.gl;
		palette[0] = arrayType.zero();
		$r = tex.loadColors(palette[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.BindTexture(3553, tex.handle); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.TexImage2D(3553, 0, 6408, 256, 1, 0, 6408, 5121, new sliceType(palette[0])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.TexParameteri(3553, 10240, 9728); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.TexParameteri(3553, 10241, 9728); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.GenerateMipmap(3553); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.BindTexture(3553, 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PaletteTexture.ptr.prototype.Update }; } $f.$ptr = $ptr; $f.gl = gl; $f.palette = palette; $f.tex = tex; $f.$s = $s; $f.$r = $r; return $f;
	};
	PaletteTexture.prototype.Update = function() { return this.$val.Update(); };
	PaletteTexture.ptr.prototype.loadColors = function(palette) {
		var $ptr, _r, _tuple, a, b, g, i, palette, r, tex, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; b = $f.b; g = $f.g; i = $f.i; palette = $f.palette; r = $f.r; tex = $f.tex; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tex = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 256)) { break; } */ if(!(i < 256)) { $s = 2; continue; }
			_r = tex.colorProvider(i); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			r = _tuple[0];
			g = _tuple[1];
			b = _tuple[2];
			a = _tuple[3];
			(x = ($imul(i, 4)) + 0 >> 0, palette.nilCheck, ((x < 0 || x >= palette.length) ? $throwRuntimeError("index out of range") : palette[x] = r));
			(x$1 = ($imul(i, 4)) + 1 >> 0, palette.nilCheck, ((x$1 < 0 || x$1 >= palette.length) ? $throwRuntimeError("index out of range") : palette[x$1] = g));
			(x$2 = ($imul(i, 4)) + 2 >> 0, palette.nilCheck, ((x$2 < 0 || x$2 >= palette.length) ? $throwRuntimeError("index out of range") : palette[x$2] = b));
			(x$3 = ($imul(i, 4)) + 3 >> 0, palette.nilCheck, ((x$3 < 0 || x$3 >= palette.length) ? $throwRuntimeError("index out of range") : palette[x$3] = a));
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PaletteTexture.ptr.prototype.loadColors }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.g = g; $f.i = i; $f.palette = palette; $f.r = r; $f.tex = tex; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	PaletteTexture.prototype.loadColors = function(palette) { return this.$val.loadColors(palette); };
	ptrType.methods = [{prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}, {prop: "Handle", name: "Handle", pkg: "", typ: $funcType([], [$Uint32], false)}];
	ptrType$2.methods = [{prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}, {prop: "Handle", name: "Handle", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Update", name: "Update", pkg: "", typ: $funcType([], [], false)}, {prop: "loadColors", name: "loadColors", pkg: "github.com/inkyblackness/shocked-client/graphics", typ: $funcType([ptrType$1], [], false)}];
	BitmapTexture.init([{prop: "gl", name: "gl", pkg: "github.com/inkyblackness/shocked-client/graphics", typ: opengl.OpenGl, tag: ""}, {prop: "handle", name: "handle", pkg: "github.com/inkyblackness/shocked-client/graphics", typ: $Uint32, tag: ""}]);
	ColorProvider.init([$Int], [$Uint8, $Uint8, $Uint8, $Uint8], false);
	PaletteTexture.init([{prop: "gl", name: "gl", pkg: "github.com/inkyblackness/shocked-client/graphics", typ: opengl.OpenGl, tag: ""}, {prop: "colorProvider", name: "colorProvider", pkg: "github.com/inkyblackness/shocked-client/graphics", typ: ColorProvider, tag: ""}, {prop: "handle", name: "handle", pkg: "github.com/inkyblackness/shocked-client/graphics", typ: $Uint32, tag: ""}]);
	Texture.init([{prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}, {prop: "Handle", name: "Handle", pkg: "", typ: $funcType([], [$Uint32], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = opengl.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/inkyblackness/shocked-model"] = (function() {
	var $pkg = {}, $init, CalculatedWallHeights, HeightUnit, Identifiable, Level, LevelProperties, LevelTextures, Levels, Link, Color, Palette, Project, ProjectTemplate, Projects, RawBitmap, RealWorldTileProperties, Referable, SlopeControl, Texture, TextureProperties, Textures, Tile, TileProperties, TileType, Tiles, ptrType, arrayType, sliceType$1, sliceType$2, sliceType$3, sliceType$5, arrayType$1, ptrType$1, ptrType$2, ptrType$3, sliceType$6, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$7, sliceType$8;
	CalculatedWallHeights = $pkg.CalculatedWallHeights = $newType(0, $kindStruct, "model.CalculatedWallHeights", "CalculatedWallHeights", "github.com/inkyblackness/shocked-model", function(North_, East_, West_, South_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.North = 0;
			this.East = 0;
			this.West = 0;
			this.South = 0;
			return;
		}
		this.North = North_;
		this.East = East_;
		this.West = West_;
		this.South = South_;
	});
	HeightUnit = $pkg.HeightUnit = $newType(4, $kindInt, "model.HeightUnit", "HeightUnit", "github.com/inkyblackness/shocked-model", null);
	Identifiable = $pkg.Identifiable = $newType(0, $kindStruct, "model.Identifiable", "Identifiable", "github.com/inkyblackness/shocked-model", function(Referable_, ID_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Referable = new Referable.ptr("");
			this.ID = "";
			return;
		}
		this.Referable = Referable_;
		this.ID = ID_;
	});
	Level = $pkg.Level = $newType(0, $kindStruct, "model.Level", "Level", "github.com/inkyblackness/shocked-model", function(Identifiable_, Properties_, Links_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Identifiable = new Identifiable.ptr(new Referable.ptr(""), "");
			this.Properties = new LevelProperties.ptr(0, false);
			this.Links = sliceType$2.nil;
			return;
		}
		this.Identifiable = Identifiable_;
		this.Properties = Properties_;
		this.Links = Links_;
	});
	LevelProperties = $pkg.LevelProperties = $newType(0, $kindStruct, "model.LevelProperties", "LevelProperties", "github.com/inkyblackness/shocked-model", function(HeightShift_, CyberspaceFlag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.HeightShift = 0;
			this.CyberspaceFlag = false;
			return;
		}
		this.HeightShift = HeightShift_;
		this.CyberspaceFlag = CyberspaceFlag_;
	});
	LevelTextures = $pkg.LevelTextures = $newType(0, $kindStruct, "model.LevelTextures", "LevelTextures", "github.com/inkyblackness/shocked-model", function(Referable_, IDs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Referable = new Referable.ptr("");
			this.IDs = sliceType$3.nil;
			return;
		}
		this.Referable = Referable_;
		this.IDs = IDs_;
	});
	Levels = $pkg.Levels = $newType(0, $kindStruct, "model.Levels", "Levels", "github.com/inkyblackness/shocked-model", function(Referable_, List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Referable = new Referable.ptr("");
			this.List = sliceType$5.nil;
			return;
		}
		this.Referable = Referable_;
		this.List = List_;
	});
	Link = $pkg.Link = $newType(0, $kindStruct, "model.Link", "Link", "github.com/inkyblackness/shocked-model", function(Rel_, Href_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Rel = "";
			this.Href = "";
			return;
		}
		this.Rel = Rel_;
		this.Href = Href_;
	});
	Color = $pkg.Color = $newType(0, $kindStruct, "model.Color", "Color", "github.com/inkyblackness/shocked-model", function(Red_, Green_, Blue_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Red = 0;
			this.Green = 0;
			this.Blue = 0;
			return;
		}
		this.Red = Red_;
		this.Green = Green_;
		this.Blue = Blue_;
	});
	Palette = $pkg.Palette = $newType(0, $kindStruct, "model.Palette", "Palette", "github.com/inkyblackness/shocked-model", function(Identifiable_, Colors_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Identifiable = new Identifiable.ptr(new Referable.ptr(""), "");
			this.Colors = arrayType$1.zero();
			return;
		}
		this.Identifiable = Identifiable_;
		this.Colors = Colors_;
	});
	Project = $pkg.Project = $newType(0, $kindStruct, "model.Project", "Project", "github.com/inkyblackness/shocked-model", function(Identifiable_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Identifiable = new Identifiable.ptr(new Referable.ptr(""), "");
			return;
		}
		this.Identifiable = Identifiable_;
	});
	ProjectTemplate = $pkg.ProjectTemplate = $newType(0, $kindStruct, "model.ProjectTemplate", "ProjectTemplate", "github.com/inkyblackness/shocked-model", function(ID_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ID = "";
			return;
		}
		this.ID = ID_;
	});
	Projects = $pkg.Projects = $newType(0, $kindStruct, "model.Projects", "Projects", "github.com/inkyblackness/shocked-model", function(Referable_, Items_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Referable = new Referable.ptr("");
			this.Items = sliceType$1.nil;
			return;
		}
		this.Referable = Referable_;
		this.Items = Items_;
	});
	RawBitmap = $pkg.RawBitmap = $newType(0, $kindStruct, "model.RawBitmap", "RawBitmap", "github.com/inkyblackness/shocked-model", function(Width_, Height_, Pixel_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Width = 0;
			this.Height = 0;
			this.Pixel = "";
			return;
		}
		this.Width = Width_;
		this.Height = Height_;
		this.Pixel = Pixel_;
	});
	RealWorldTileProperties = $pkg.RealWorldTileProperties = $newType(0, $kindStruct, "model.RealWorldTileProperties", "RealWorldTileProperties", "github.com/inkyblackness/shocked-model", function(FloorTexture_, CeilingTexture_, WallTexture_, FloorTextureRotations_, CeilingTextureRotations_, UseAdjacentWallTexture_, WallTextureOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FloorTexture = ptrType$1.nil;
			this.CeilingTexture = ptrType$1.nil;
			this.WallTexture = ptrType$1.nil;
			this.FloorTextureRotations = ptrType$1.nil;
			this.CeilingTextureRotations = ptrType$1.nil;
			this.UseAdjacentWallTexture = ptrType$2.nil;
			this.WallTextureOffset = ptrType$3.nil;
			return;
		}
		this.FloorTexture = FloorTexture_;
		this.CeilingTexture = CeilingTexture_;
		this.WallTexture = WallTexture_;
		this.FloorTextureRotations = FloorTextureRotations_;
		this.CeilingTextureRotations = CeilingTextureRotations_;
		this.UseAdjacentWallTexture = UseAdjacentWallTexture_;
		this.WallTextureOffset = WallTextureOffset_;
	});
	Referable = $pkg.Referable = $newType(0, $kindStruct, "model.Referable", "Referable", "github.com/inkyblackness/shocked-model", function(Href_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Href = "";
			return;
		}
		this.Href = Href_;
	});
	SlopeControl = $pkg.SlopeControl = $newType(8, $kindString, "model.SlopeControl", "SlopeControl", "github.com/inkyblackness/shocked-model", null);
	Texture = $pkg.Texture = $newType(0, $kindStruct, "model.Texture", "Texture", "github.com/inkyblackness/shocked-model", function(Identifiable_, Properties_, Images_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Identifiable = new Identifiable.ptr(new Referable.ptr(""), "");
			this.Properties = new TextureProperties.ptr(arrayType.zero(), arrayType.zero());
			this.Images = sliceType$2.nil;
			return;
		}
		this.Identifiable = Identifiable_;
		this.Properties = Properties_;
		this.Images = Images_;
	});
	TextureProperties = $pkg.TextureProperties = $newType(0, $kindStruct, "model.TextureProperties", "TextureProperties", "github.com/inkyblackness/shocked-model", function(Name_, CantBeUsed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = arrayType.zero();
			this.CantBeUsed = arrayType.zero();
			return;
		}
		this.Name = Name_;
		this.CantBeUsed = CantBeUsed_;
	});
	Textures = $pkg.Textures = $newType(0, $kindStruct, "model.Textures", "Textures", "github.com/inkyblackness/shocked-model", function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = sliceType$6.nil;
			return;
		}
		this.List = List_;
	});
	Tile = $pkg.Tile = $newType(0, $kindStruct, "model.Tile", "Tile", "github.com/inkyblackness/shocked-model", function(Referable_, Properties_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Referable = new Referable.ptr("");
			this.Properties = new TileProperties.ptr(ptrType$4.nil, ptrType$3.nil, ptrType$3.nil, ptrType$3.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil);
			return;
		}
		this.Referable = Referable_;
		this.Properties = Properties_;
	});
	TileProperties = $pkg.TileProperties = $newType(0, $kindStruct, "model.TileProperties", "TileProperties", "github.com/inkyblackness/shocked-model", function(Type_, FloorHeight_, CeilingHeight_, SlopeHeight_, SlopeControl_, CalculatedWallHeights_, RealWorld_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = ptrType$4.nil;
			this.FloorHeight = ptrType$3.nil;
			this.CeilingHeight = ptrType$3.nil;
			this.SlopeHeight = ptrType$3.nil;
			this.SlopeControl = ptrType$5.nil;
			this.CalculatedWallHeights = ptrType$6.nil;
			this.RealWorld = ptrType$7.nil;
			return;
		}
		this.Type = Type_;
		this.FloorHeight = FloorHeight_;
		this.CeilingHeight = CeilingHeight_;
		this.SlopeHeight = SlopeHeight_;
		this.SlopeControl = SlopeControl_;
		this.CalculatedWallHeights = CalculatedWallHeights_;
		this.RealWorld = RealWorld_;
	});
	TileType = $pkg.TileType = $newType(8, $kindString, "model.TileType", "TileType", "github.com/inkyblackness/shocked-model", null);
	Tiles = $pkg.Tiles = $newType(0, $kindStruct, "model.Tiles", "Tiles", "github.com/inkyblackness/shocked-model", function(Table_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Table = sliceType$8.nil;
			return;
		}
		this.Table = Table_;
	});
	ptrType = $ptrType($String);
	arrayType = $arrayType(ptrType, 3);
	sliceType$1 = $sliceType(Identifiable);
	sliceType$2 = $sliceType(Link);
	sliceType$3 = $sliceType($Int);
	sliceType$5 = $sliceType(Level);
	arrayType$1 = $arrayType(Color, 256);
	ptrType$1 = $ptrType($Int);
	ptrType$2 = $ptrType($Bool);
	ptrType$3 = $ptrType(HeightUnit);
	sliceType$6 = $sliceType(Texture);
	ptrType$4 = $ptrType(TileType);
	ptrType$5 = $ptrType(SlopeControl);
	ptrType$6 = $ptrType(CalculatedWallHeights);
	ptrType$7 = $ptrType(RealWorldTileProperties);
	sliceType$7 = $sliceType(Tile);
	sliceType$8 = $sliceType(sliceType$7);
	CalculatedWallHeights.init([{prop: "North", name: "North", pkg: "", typ: $Float32, tag: "json:\"north\""}, {prop: "East", name: "East", pkg: "", typ: $Float32, tag: "json:\"east\""}, {prop: "West", name: "West", pkg: "", typ: $Float32, tag: "json:\"west\""}, {prop: "South", name: "South", pkg: "", typ: $Float32, tag: "json:\"south\""}]);
	Identifiable.init([{prop: "Referable", name: "", pkg: "", typ: Referable, tag: ""}, {prop: "ID", name: "ID", pkg: "", typ: $String, tag: "json:\"id\""}]);
	Level.init([{prop: "Identifiable", name: "", pkg: "", typ: Identifiable, tag: ""}, {prop: "Properties", name: "Properties", pkg: "", typ: LevelProperties, tag: "json:\"properties\""}, {prop: "Links", name: "Links", pkg: "", typ: sliceType$2, tag: "json:\"links\""}]);
	LevelProperties.init([{prop: "HeightShift", name: "HeightShift", pkg: "", typ: $Int, tag: "json:\"heightShift\""}, {prop: "CyberspaceFlag", name: "CyberspaceFlag", pkg: "", typ: $Bool, tag: "json:\"cyberspaceFlag\""}]);
	LevelTextures.init([{prop: "Referable", name: "", pkg: "", typ: Referable, tag: ""}, {prop: "IDs", name: "IDs", pkg: "", typ: sliceType$3, tag: "json:\"ids\""}]);
	Levels.init([{prop: "Referable", name: "", pkg: "", typ: Referable, tag: ""}, {prop: "List", name: "List", pkg: "", typ: sliceType$5, tag: "json:\"list\""}]);
	Link.init([{prop: "Rel", name: "Rel", pkg: "", typ: $String, tag: "json:\"rel\""}, {prop: "Href", name: "Href", pkg: "", typ: $String, tag: "json:\"href\""}]);
	Color.init([{prop: "Red", name: "Red", pkg: "", typ: $Int, tag: "json:\"r\""}, {prop: "Green", name: "Green", pkg: "", typ: $Int, tag: "json:\"g\""}, {prop: "Blue", name: "Blue", pkg: "", typ: $Int, tag: "json:\"b\""}]);
	Palette.init([{prop: "Identifiable", name: "", pkg: "", typ: Identifiable, tag: ""}, {prop: "Colors", name: "Colors", pkg: "", typ: arrayType$1, tag: "json:\"colors\""}]);
	Project.init([{prop: "Identifiable", name: "", pkg: "", typ: Identifiable, tag: ""}]);
	ProjectTemplate.init([{prop: "ID", name: "ID", pkg: "", typ: $String, tag: "json:\"id\""}]);
	Projects.init([{prop: "Referable", name: "", pkg: "", typ: Referable, tag: ""}, {prop: "Items", name: "Items", pkg: "", typ: sliceType$1, tag: "json:\"items\""}]);
	RawBitmap.init([{prop: "Width", name: "Width", pkg: "", typ: $Int, tag: "json:\"width\""}, {prop: "Height", name: "Height", pkg: "", typ: $Int, tag: "json:\"height\""}, {prop: "Pixel", name: "Pixel", pkg: "", typ: $String, tag: "json:\"pixel\""}]);
	RealWorldTileProperties.init([{prop: "FloorTexture", name: "FloorTexture", pkg: "", typ: ptrType$1, tag: "json:\"floorTexture\""}, {prop: "CeilingTexture", name: "CeilingTexture", pkg: "", typ: ptrType$1, tag: "json:\"ceilingTexture\""}, {prop: "WallTexture", name: "WallTexture", pkg: "", typ: ptrType$1, tag: "json:\"wallTexture\""}, {prop: "FloorTextureRotations", name: "FloorTextureRotations", pkg: "", typ: ptrType$1, tag: "json:\"floorTextureRotations\""}, {prop: "CeilingTextureRotations", name: "CeilingTextureRotations", pkg: "", typ: ptrType$1, tag: "json:\"ceilingTextureRotations\""}, {prop: "UseAdjacentWallTexture", name: "UseAdjacentWallTexture", pkg: "", typ: ptrType$2, tag: "json:\"useAdjacentWallTexture\""}, {prop: "WallTextureOffset", name: "WallTextureOffset", pkg: "", typ: ptrType$3, tag: "json:\"wallTextureOffset\""}]);
	Referable.init([{prop: "Href", name: "Href", pkg: "", typ: $String, tag: "json:\"href\""}]);
	Texture.init([{prop: "Identifiable", name: "", pkg: "", typ: Identifiable, tag: ""}, {prop: "Properties", name: "Properties", pkg: "", typ: TextureProperties, tag: "json:\"properties\""}, {prop: "Images", name: "Images", pkg: "", typ: sliceType$2, tag: "json:\"images\""}]);
	TextureProperties.init([{prop: "Name", name: "Name", pkg: "", typ: arrayType, tag: "json:\"name\""}, {prop: "CantBeUsed", name: "CantBeUsed", pkg: "", typ: arrayType, tag: "json:\"cantBeUsed\""}]);
	Textures.init([{prop: "List", name: "List", pkg: "", typ: sliceType$6, tag: "json:\"list\""}]);
	Tile.init([{prop: "Referable", name: "", pkg: "", typ: Referable, tag: ""}, {prop: "Properties", name: "Properties", pkg: "", typ: TileProperties, tag: "json:\"properties\""}]);
	TileProperties.init([{prop: "Type", name: "Type", pkg: "", typ: ptrType$4, tag: "json:\"type\""}, {prop: "FloorHeight", name: "FloorHeight", pkg: "", typ: ptrType$3, tag: "json:\"floorHeight\""}, {prop: "CeilingHeight", name: "CeilingHeight", pkg: "", typ: ptrType$3, tag: "json:\"ceilingHeight\""}, {prop: "SlopeHeight", name: "SlopeHeight", pkg: "", typ: ptrType$3, tag: "json:\"slopeHeight\""}, {prop: "SlopeControl", name: "SlopeControl", pkg: "", typ: ptrType$5, tag: "json:\"slopeControl\""}, {prop: "CalculatedWallHeights", name: "CalculatedWallHeights", pkg: "", typ: ptrType$6, tag: "json:\"calculatedWallHeights\""}, {prop: "RealWorld", name: "RealWorld", pkg: "", typ: ptrType$7, tag: "json:\"realWorld\""}]);
	Tiles.init([{prop: "Table", name: "Table", pkg: "", typ: sliceType$8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/inkyblackness/shocked-client/editor/model"] = (function() {
	var $pkg = {}, $init, fmt, graphics, model, TextureQuery, BufferedTextureStore, Tile, TileCoordinate, TileMap, ptrType, sliceType, ptrType$1, ptrType$2, mapType, funcType, ptrType$3, mapType$1, NewBufferedTextureStore, NewTile, TileCoordinateOf, NewTileMap;
	fmt = $packages["fmt"];
	graphics = $packages["github.com/inkyblackness/shocked-client/graphics"];
	model = $packages["github.com/inkyblackness/shocked-model"];
	TextureQuery = $pkg.TextureQuery = $newType(4, $kindFunc, "model.TextureQuery", "TextureQuery", "github.com/inkyblackness/shocked-client/editor/model", null);
	BufferedTextureStore = $pkg.BufferedTextureStore = $newType(0, $kindStruct, "model.BufferedTextureStore", "BufferedTextureStore", "github.com/inkyblackness/shocked-client/editor/model", function(query_, textures_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.query = $throwNilPointerError;
			this.textures = false;
			return;
		}
		this.query = query_;
		this.textures = textures_;
	});
	Tile = $pkg.Tile = $newType(0, $kindStruct, "model.Tile", "Tile", "github.com/inkyblackness/shocked-client/editor/model", function(properties_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.properties = ptrType.nil;
			return;
		}
		this.properties = properties_;
	});
	TileCoordinate = $pkg.TileCoordinate = $newType(0, $kindStruct, "model.TileCoordinate", "TileCoordinate", "github.com/inkyblackness/shocked-client/editor/model", function(x_, y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = 0;
			this.y = 0;
			return;
		}
		this.x = x_;
		this.y = y_;
	});
	TileMap = $pkg.TileMap = $newType(0, $kindStruct, "model.TileMap", "TileMap", "github.com/inkyblackness/shocked-client/editor/model", function(tiles_, selectedTiles_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tiles = false;
			this.selectedTiles = false;
			return;
		}
		this.tiles = tiles_;
		this.selectedTiles = selectedTiles_;
	});
	ptrType = $ptrType(model.TileProperties);
	sliceType = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(Tile);
	ptrType$2 = $ptrType(BufferedTextureStore);
	mapType = $mapType($Int, graphics.Texture);
	funcType = $funcType([TileCoordinate, ptrType$1], [], false);
	ptrType$3 = $ptrType(TileMap);
	mapType$1 = $mapType(TileCoordinate, ptrType$1);
	NewBufferedTextureStore = function(query) {
		var $ptr, query;
		return new BufferedTextureStore.ptr(query, {});
	};
	$pkg.NewBufferedTextureStore = NewBufferedTextureStore;
	BufferedTextureStore.ptr.prototype.Reset = function() {
		var $ptr, _entry, _i, _keys, _ref, oldTextures, store, texture, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; oldTextures = $f.oldTextures; store = $f.store; texture = $f.texture; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		store = this;
		oldTextures = store.textures;
		store.textures = {};
		_ref = oldTextures;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			texture = _entry.v;
			$r = texture.Dispose(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BufferedTextureStore.ptr.prototype.Reset }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.oldTextures = oldTextures; $f.store = store; $f.texture = texture; $f.$s = $s; $f.$r = $r; return $f;
	};
	BufferedTextureStore.prototype.Reset = function() { return this.$val.Reset(); };
	BufferedTextureStore.ptr.prototype.Texture = function(id) {
		var $ptr, _entry, _key, _tuple, existing, id, store, texture, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _tuple = $f._tuple; existing = $f.existing; id = $f.id; store = $f.store; texture = $f.texture; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		store = this;
		_tuple = (_entry = store.textures[$Int.keyFor(id)], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		texture = _tuple[0];
		existing = _tuple[1];
		/* */ if (!existing) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!existing) { */ case 1:
			$r = store.query(id); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_key = id; (store.textures || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: $ifaceNil };
		/* } */ case 2:
		return texture;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BufferedTextureStore.ptr.prototype.Texture }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._tuple = _tuple; $f.existing = existing; $f.id = id; $f.store = store; $f.texture = texture; $f.$s = $s; $f.$r = $r; return $f;
	};
	BufferedTextureStore.prototype.Texture = function(id) { return this.$val.Texture(id); };
	BufferedTextureStore.ptr.prototype.SetTexture = function(id, texture) {
		var $ptr, _entry, _key, id, oldTexture, store, texture, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; id = $f.id; oldTexture = $f.oldTexture; store = $f.store; texture = $f.texture; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		store = this;
		oldTexture = (_entry = store.textures[$Int.keyFor(id)], _entry !== undefined ? _entry.v : $ifaceNil);
		_key = id; (store.textures || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: texture };
		/* */ if (!($interfaceIsEqual(oldTexture, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(oldTexture, $ifaceNil))) { */ case 1:
			$r = oldTexture.Dispose(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BufferedTextureStore.ptr.prototype.SetTexture }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f.id = id; $f.oldTexture = oldTexture; $f.store = store; $f.texture = texture; $f.$s = $s; $f.$r = $r; return $f;
	};
	BufferedTextureStore.prototype.SetTexture = function(id, texture) { return this.$val.SetTexture(id, texture); };
	NewTile = function() {
		var $ptr;
		return new Tile.ptr(ptrType.nil);
	};
	$pkg.NewTile = NewTile;
	Tile.ptr.prototype.SetProperties = function(properties) {
		var $ptr, properties, tile;
		tile = this;
		tile.properties = properties;
	};
	Tile.prototype.SetProperties = function(properties) { return this.$val.SetProperties(properties); };
	Tile.ptr.prototype.Properties = function() {
		var $ptr, tile;
		tile = this;
		return tile.properties;
	};
	Tile.prototype.Properties = function() { return this.$val.Properties(); };
	TileCoordinateOf = function(x, y) {
		var $ptr, x, y;
		return new TileCoordinate.ptr(x, y);
	};
	$pkg.TileCoordinateOf = TileCoordinateOf;
	TileCoordinate.ptr.prototype.XY = function() {
		var $ptr, _tmp, _tmp$1, coord, x, y;
		x = 0;
		y = 0;
		coord = $clone(this, TileCoordinate);
		_tmp = coord.x;
		_tmp$1 = coord.y;
		x = _tmp;
		y = _tmp$1;
		return [x, y];
	};
	TileCoordinate.prototype.XY = function() { return this.$val.XY(); };
	TileCoordinate.ptr.prototype.String = function() {
		var $ptr, _r, coord, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; coord = $f.coord; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		coord = $clone(this, TileCoordinate);
		_r = fmt.Sprintf("%2d/%2d", new sliceType([new $Int(coord.x), new $Int(coord.y)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TileCoordinate.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.coord = coord; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileCoordinate.prototype.String = function() { return this.$val.String(); };
	NewTileMap = function(width, height) {
		var $ptr, _key, coord, height, tileMap, width, x, y;
		tileMap = new TileMap.ptr({}, {});
		y = 0;
		while (true) {
			if (!(y < height)) { break; }
			x = 0;
			while (true) {
				if (!(x < width)) { break; }
				coord = $clone(TileCoordinateOf(x, y), TileCoordinate);
				_key = $clone(coord, TileCoordinate); (tileMap.tiles || $throwRuntimeError("assignment to entry in nil map"))[TileCoordinate.keyFor(_key)] = { k: _key, v: NewTile() };
				x = x + (1) >> 0;
			}
			y = y + (1) >> 0;
		}
		return tileMap;
	};
	$pkg.NewTileMap = NewTileMap;
	TileMap.ptr.prototype.Clear = function() {
		var $ptr, _entry, _i, _keys, _ref, tile, tileMap;
		tileMap = this;
		tileMap.ClearSelection();
		_ref = tileMap.tiles;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			tile = _entry.v;
			tile.SetProperties(ptrType.nil);
			_i++;
		}
	};
	TileMap.prototype.Clear = function() { return this.$val.Clear(); };
	TileMap.ptr.prototype.ForEachSelected = function(callback) {
		var $ptr, _entry, _i, _keys, _ref, callback, coord, tile, tileMap, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; callback = $f.callback; coord = $f.coord; tile = $f.tile; tileMap = $f.tileMap; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tileMap = this;
		_ref = tileMap.selectedTiles;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			coord = $clone(_entry.k, TileCoordinate);
			tile = _entry.v;
			$r = callback(coord, tile); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TileMap.ptr.prototype.ForEachSelected }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.callback = callback; $f.coord = coord; $f.tile = tile; $f.tileMap = tileMap; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileMap.prototype.ForEachSelected = function(callback) { return this.$val.ForEachSelected(callback); };
	TileMap.ptr.prototype.ClearSelection = function() {
		var $ptr, tileMap;
		tileMap = this;
		tileMap.selectedTiles = {};
	};
	TileMap.prototype.ClearSelection = function() { return this.$val.ClearSelection(); };
	TileMap.ptr.prototype.IsSelected = function(coord) {
		var $ptr, _entry, _tuple, coord, isSelected, tileMap;
		coord = $clone(coord, TileCoordinate);
		tileMap = this;
		_tuple = (_entry = tileMap.selectedTiles[TileCoordinate.keyFor(coord)], _entry !== undefined ? [_entry.v, true] : [ptrType$1.nil, false]);
		isSelected = _tuple[1];
		return isSelected;
	};
	TileMap.prototype.IsSelected = function(coord) { return this.$val.IsSelected(coord); };
	TileMap.ptr.prototype.SetSelected = function(coord, value) {
		var $ptr, _entry, _key, _tuple, coord, exists, isSelected, tile, tileMap, value;
		coord = $clone(coord, TileCoordinate);
		tileMap = this;
		isSelected = tileMap.IsSelected(coord);
		_tuple = (_entry = tileMap.tiles[TileCoordinate.keyFor(coord)], _entry !== undefined ? [_entry.v, true] : [ptrType$1.nil, false]);
		tile = _tuple[0];
		exists = _tuple[1];
		if (isSelected && !value) {
			delete tileMap.selectedTiles[TileCoordinate.keyFor(coord)];
		} else if (!isSelected && value && exists) {
			_key = $clone(coord, TileCoordinate); (tileMap.selectedTiles || $throwRuntimeError("assignment to entry in nil map"))[TileCoordinate.keyFor(_key)] = { k: _key, v: tile };
		}
	};
	TileMap.prototype.SetSelected = function(coord, value) { return this.$val.SetSelected(coord, value); };
	TileMap.ptr.prototype.Tile = function(coord) {
		var $ptr, _entry, coord, tileMap;
		coord = $clone(coord, TileCoordinate);
		tileMap = this;
		return (_entry = tileMap.tiles[TileCoordinate.keyFor(coord)], _entry !== undefined ? _entry.v : ptrType$1.nil);
	};
	TileMap.prototype.Tile = function(coord) { return this.$val.Tile(coord); };
	ptrType$2.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Texture", name: "Texture", pkg: "", typ: $funcType([$Int], [graphics.Texture], false)}, {prop: "SetTexture", name: "SetTexture", pkg: "", typ: $funcType([$Int, graphics.Texture], [], false)}];
	ptrType$1.methods = [{prop: "SetProperties", name: "SetProperties", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "Properties", name: "Properties", pkg: "", typ: $funcType([], [ptrType], false)}];
	TileCoordinate.methods = [{prop: "XY", name: "XY", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "ForEachSelected", name: "ForEachSelected", pkg: "", typ: $funcType([funcType], [], false)}, {prop: "ClearSelection", name: "ClearSelection", pkg: "", typ: $funcType([], [], false)}, {prop: "IsSelected", name: "IsSelected", pkg: "", typ: $funcType([TileCoordinate], [$Bool], false)}, {prop: "SetSelected", name: "SetSelected", pkg: "", typ: $funcType([TileCoordinate, $Bool], [], false)}, {prop: "Tile", name: "Tile", pkg: "", typ: $funcType([TileCoordinate], [ptrType$1], false)}];
	TextureQuery.init([$Int], [], false);
	BufferedTextureStore.init([{prop: "query", name: "query", pkg: "github.com/inkyblackness/shocked-client/editor/model", typ: TextureQuery, tag: ""}, {prop: "textures", name: "textures", pkg: "github.com/inkyblackness/shocked-client/editor/model", typ: mapType, tag: ""}]);
	Tile.init([{prop: "properties", name: "properties", pkg: "github.com/inkyblackness/shocked-client/editor/model", typ: ptrType, tag: ""}]);
	TileCoordinate.init([{prop: "x", name: "x", pkg: "github.com/inkyblackness/shocked-client/editor/model", typ: $Int, tag: ""}, {prop: "y", name: "y", pkg: "github.com/inkyblackness/shocked-client/editor/model", typ: $Int, tag: ""}]);
	TileMap.init([{prop: "tiles", name: "tiles", pkg: "github.com/inkyblackness/shocked-client/editor/model", typ: mapType$1, tag: ""}, {prop: "selectedTiles", name: "selectedTiles", pkg: "github.com/inkyblackness/shocked-client/editor/model", typ: mapType$1, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = graphics.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = model.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/inkyblackness/shocked-client/editor/display"] = (function() {
	var $pkg = {}, $init, fmt, mgl32, mgl64, model$1, graphics, opengl, model, math, os, GridRenderable, RenderContext, TileGridMapRenderable, TileSelectionCallback, TileSelectionQuery, TileSelectionRenderable, TextureQuery, TileTextureMapRenderable, sliceType, sliceType$1, sliceType$2, ptrType, arrayType, ptrType$2, sliceType$3, sliceType$4, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, funcType, ptrType$9, gridVertexShaderSource, gridFragmentShaderSource, mapTileGridVertexShaderSource, mapTileGridFragmentShaderSource, mapTileSelectionVertexShaderSource, mapTileSelectionFragmentShaderSource, mapTileVertexShaderSource, mapTileFragmentShaderSource, uvRotations, NewGridRenderable, NewBasicRenderContext, NewTileGridMapRenderable, NewTileSelectionRenderable, init, NewTileTextureMapRenderable;
	fmt = $packages["fmt"];
	mgl32 = $packages["github.com/go-gl/mathgl/mgl32"];
	mgl64 = $packages["github.com/go-gl/mathgl/mgl64"];
	model$1 = $packages["github.com/inkyblackness/shocked-client/editor/model"];
	graphics = $packages["github.com/inkyblackness/shocked-client/graphics"];
	opengl = $packages["github.com/inkyblackness/shocked-client/opengl"];
	model = $packages["github.com/inkyblackness/shocked-model"];
	math = $packages["math"];
	os = $packages["os"];
	GridRenderable = $pkg.GridRenderable = $newType(0, $kindStruct, "display.GridRenderable", "GridRenderable", "github.com/inkyblackness/shocked-client/editor/display", function(gl_, program_, vertexArrayObject_, vertexPositionBuffer_, vertexPositionAttrib_, viewMatrixUniform_, projectionMatrixUniform_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.gl = $ifaceNil;
			this.program = 0;
			this.vertexArrayObject = 0;
			this.vertexPositionBuffer = 0;
			this.vertexPositionAttrib = 0;
			this.viewMatrixUniform = 0;
			this.projectionMatrixUniform = 0;
			return;
		}
		this.gl = gl_;
		this.program = program_;
		this.vertexArrayObject = vertexArrayObject_;
		this.vertexPositionBuffer = vertexPositionBuffer_;
		this.vertexPositionAttrib = vertexPositionAttrib_;
		this.viewMatrixUniform = viewMatrixUniform_;
		this.projectionMatrixUniform = projectionMatrixUniform_;
	});
	RenderContext = $pkg.RenderContext = $newType(0, $kindStruct, "display.RenderContext", "RenderContext", "github.com/inkyblackness/shocked-client/editor/display", function(viewportWidth_, viewportHeight_, viewMatrix_, projectionMatrix_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.viewportWidth = 0;
			this.viewportHeight = 0;
			this.viewMatrix = arrayType.zero();
			this.projectionMatrix = arrayType.zero();
			return;
		}
		this.viewportWidth = viewportWidth_;
		this.viewportHeight = viewportHeight_;
		this.viewMatrix = viewMatrix_;
		this.projectionMatrix = projectionMatrix_;
	});
	TileGridMapRenderable = $pkg.TileGridMapRenderable = $newType(0, $kindStruct, "display.TileGridMapRenderable", "TileGridMapRenderable", "github.com/inkyblackness/shocked-client/editor/display", function(gl_, program_, vertexArrayObject_, vertexPositionBuffer_, vertexPositionAttrib_, viewMatrixUniform_, projectionMatrixUniform_, tiles_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.gl = $ifaceNil;
			this.program = 0;
			this.vertexArrayObject = 0;
			this.vertexPositionBuffer = 0;
			this.vertexPositionAttrib = 0;
			this.viewMatrixUniform = 0;
			this.projectionMatrixUniform = 0;
			this.tiles = sliceType$4.nil;
			return;
		}
		this.gl = gl_;
		this.program = program_;
		this.vertexArrayObject = vertexArrayObject_;
		this.vertexPositionBuffer = vertexPositionBuffer_;
		this.vertexPositionAttrib = vertexPositionAttrib_;
		this.viewMatrixUniform = viewMatrixUniform_;
		this.projectionMatrixUniform = projectionMatrixUniform_;
		this.tiles = tiles_;
	});
	TileSelectionCallback = $pkg.TileSelectionCallback = $newType(4, $kindFunc, "display.TileSelectionCallback", "TileSelectionCallback", "github.com/inkyblackness/shocked-client/editor/display", null);
	TileSelectionQuery = $pkg.TileSelectionQuery = $newType(4, $kindFunc, "display.TileSelectionQuery", "TileSelectionQuery", "github.com/inkyblackness/shocked-client/editor/display", null);
	TileSelectionRenderable = $pkg.TileSelectionRenderable = $newType(0, $kindStruct, "display.TileSelectionRenderable", "TileSelectionRenderable", "github.com/inkyblackness/shocked-client/editor/display", function(gl_, program_, vertexArrayObject_, vertexPositionBuffer_, vertexPositionAttrib_, modelMatrixUniform_, viewMatrixUniform_, projectionMatrixUniform_, query_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.gl = $ifaceNil;
			this.program = 0;
			this.vertexArrayObject = 0;
			this.vertexPositionBuffer = 0;
			this.vertexPositionAttrib = 0;
			this.modelMatrixUniform = 0;
			this.viewMatrixUniform = 0;
			this.projectionMatrixUniform = 0;
			this.query = $throwNilPointerError;
			return;
		}
		this.gl = gl_;
		this.program = program_;
		this.vertexArrayObject = vertexArrayObject_;
		this.vertexPositionBuffer = vertexPositionBuffer_;
		this.vertexPositionAttrib = vertexPositionAttrib_;
		this.modelMatrixUniform = modelMatrixUniform_;
		this.viewMatrixUniform = viewMatrixUniform_;
		this.projectionMatrixUniform = projectionMatrixUniform_;
		this.query = query_;
	});
	TextureQuery = $pkg.TextureQuery = $newType(4, $kindFunc, "display.TextureQuery", "TextureQuery", "github.com/inkyblackness/shocked-client/editor/display", null);
	TileTextureMapRenderable = $pkg.TileTextureMapRenderable = $newType(0, $kindStruct, "display.TileTextureMapRenderable", "TileTextureMapRenderable", "github.com/inkyblackness/shocked-client/editor/display", function(gl_, program_, vertexArrayObject_, vertexPositionBuffer_, vertexPositionAttrib_, modelMatrixUniform_, viewMatrixUniform_, projectionMatrixUniform_, uvMatrixUniform_, paletteUniform_, bitmapUniform_, paletteTexture_, textureQuery_, tiles_, lastTileType_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.gl = $ifaceNil;
			this.program = 0;
			this.vertexArrayObject = 0;
			this.vertexPositionBuffer = 0;
			this.vertexPositionAttrib = 0;
			this.modelMatrixUniform = 0;
			this.viewMatrixUniform = 0;
			this.projectionMatrixUniform = 0;
			this.uvMatrixUniform = 0;
			this.paletteUniform = 0;
			this.bitmapUniform = 0;
			this.paletteTexture = $ifaceNil;
			this.textureQuery = $throwNilPointerError;
			this.tiles = sliceType$4.nil;
			this.lastTileType = "";
			return;
		}
		this.gl = gl_;
		this.program = program_;
		this.vertexArrayObject = vertexArrayObject_;
		this.vertexPositionBuffer = vertexPositionBuffer_;
		this.vertexPositionAttrib = vertexPositionAttrib_;
		this.modelMatrixUniform = modelMatrixUniform_;
		this.viewMatrixUniform = viewMatrixUniform_;
		this.projectionMatrixUniform = projectionMatrixUniform_;
		this.uvMatrixUniform = uvMatrixUniform_;
		this.paletteUniform = paletteUniform_;
		this.bitmapUniform = bitmapUniform_;
		this.paletteTexture = paletteTexture_;
		this.textureQuery = textureQuery_;
		this.tiles = tiles_;
		this.lastTileType = lastTileType_;
	});
	sliceType = $sliceType($Uint32);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType($Float32);
	ptrType = $ptrType(GridRenderable);
	arrayType = $arrayType($Float32, 16);
	ptrType$2 = $ptrType(model.TileProperties);
	sliceType$3 = $sliceType(ptrType$2);
	sliceType$4 = $sliceType(sliceType$3);
	ptrType$3 = $ptrType(TileGridMapRenderable);
	ptrType$4 = $ptrType(TileSelectionRenderable);
	ptrType$5 = $ptrType(TileTextureMapRenderable);
	ptrType$6 = $ptrType(model.RealWorldTileProperties);
	ptrType$7 = $ptrType(mgl32.Mat4);
	ptrType$8 = $ptrType(RenderContext);
	funcType = $funcType([], [], false);
	ptrType$9 = $ptrType(mgl64.Mat4);
	NewGridRenderable = function(gl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, err1, err2, fragmentShader, gl, program, renderable, vertexShader, x, x$1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err1 = $f.err1; err2 = $f.err2; fragmentShader = $f.fragmentShader; gl = $f.gl; program = $f.program; renderable = $f.renderable; vertexShader = $f.vertexShader; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		gl = [gl];
		renderable = [renderable];
		_r = opengl.CompileNewShader(gl[0], 35633, gridVertexShaderSource); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		vertexShader = _tuple[0];
		err1 = _tuple[1];
		$deferred.push([$methodVal(gl[0], "DeleteShader"), [vertexShader]]);
		_r$1 = opengl.CompileNewShader(gl[0], 35632, gridFragmentShaderSource); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		fragmentShader = _tuple$1[0];
		err2 = _tuple$1[1];
		$deferred.push([$methodVal(gl[0], "DeleteShader"), [fragmentShader]]);
		_r$2 = opengl.LinkNewProgram(gl[0], new sliceType([vertexShader, fragmentShader])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		program = _tuple$2[0];
		/* */ if (!($interfaceIsEqual(err1, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(err1, $ifaceNil))) { */ case 4:
			_r$3 = fmt.Fprintf(os.Stderr, "Failed to compile shader 1:\n", new sliceType$1([err1])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 5:
		/* */ if (!($interfaceIsEqual(err2, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(err2, $ifaceNil))) { */ case 7:
			_r$4 = fmt.Fprintf(os.Stderr, "Failed to compile shader 2:\n", new sliceType$1([err2])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 8:
		_r$5 = gl[0].GenVertexArrays(1); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = gl[0].GenBuffers(1); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = gl[0].GetAttribLocation(program, "vertexPosition"); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$8 = gl[0].GetUniformLocation(program, "viewMatrix"); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$9 = gl[0].GetUniformLocation(program, "projectionMatrix"); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		renderable[0] = new GridRenderable.ptr(gl[0], program, (x = _r$5, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), (x$1 = _r$6, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])), _r$7, _r$8, _r$9);
		$r = renderable[0].withShader((function(gl, renderable) { return function $b() {
			var $ptr, half, limit, vertices, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; half = $f.half; limit = $f.limit; vertices = $f.vertices; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = gl[0].BindBuffer(34962, renderable[0].vertexPositionBuffer); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			half = 16;
			limit = $fround(2048 + half);
			vertices = new sliceType$2([-half, -half, 0, limit, -half, 0, limit, limit, 0, limit, limit, 0, -half, limit, 0, -half, -half, 0]);
			$r = gl[0].BufferData(34962, $imul(vertices.$length, 4), vertices, 35044); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.half = half; $f.limit = limit; $f.vertices = vertices; $f.$s = $s; $f.$r = $r; return $f;
		}; })(gl, renderable)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return renderable[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: NewGridRenderable }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err1 = err1; $f.err2 = err2; $f.fragmentShader = fragmentShader; $f.gl = gl; $f.program = program; $f.renderable = renderable; $f.vertexShader = vertexShader; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.NewGridRenderable = NewGridRenderable;
	GridRenderable.ptr.prototype.Render = function(context) {
		var $ptr, context, gl, renderable, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; context = $f.context; gl = $f.gl; renderable = $f.renderable; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		context = [context];
		gl = [gl];
		renderable = [renderable];
		renderable[0] = this;
		gl[0] = renderable[0].gl;
		$r = renderable[0].withShader((function(context, gl, renderable) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = renderable[0].setMatrix(renderable[0].viewMatrixUniform, context[0].ViewMatrix()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = renderable[0].setMatrix(renderable[0].projectionMatrixUniform, context[0].ProjectionMatrix()); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].BindBuffer(34962, renderable[0].vertexPositionBuffer); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].VertexAttribOffset((renderable[0].vertexPositionAttrib >>> 0), 3, 5126, false, 0, 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].DrawArrays(4, 0, 6); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(context, gl, renderable)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GridRenderable.ptr.prototype.Render }; } $f.$ptr = $ptr; $f.context = context; $f.gl = gl; $f.renderable = renderable; $f.$s = $s; $f.$r = $r; return $f;
	};
	GridRenderable.prototype.Render = function(context) { return this.$val.Render(context); };
	GridRenderable.ptr.prototype.withShader = function(task) {
		var $ptr, gl, renderable, task, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; gl = $f.gl; renderable = $f.renderable; task = $f.task; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		gl = [gl];
		renderable = this;
		gl[0] = renderable.gl;
		$r = gl[0].UseProgram(renderable.program); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl[0].BindVertexArray(renderable.vertexArrayObject); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl[0].EnableVertexAttribArray((renderable.vertexPositionAttrib >>> 0)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(gl) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = gl[0].EnableVertexAttribArray(0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].BindVertexArray(0); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].UseProgram(0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(gl), []]);
		$r = task(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: GridRenderable.ptr.prototype.withShader }; } $f.$ptr = $ptr; $f.gl = gl; $f.renderable = renderable; $f.task = task; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	GridRenderable.prototype.withShader = function(task) { return this.$val.withShader(task); };
	GridRenderable.ptr.prototype.setMatrix = function(uniform, matrix) {
		var $ptr, matrix, matrixArray, renderable, uniform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; matrix = $f.matrix; matrixArray = $f.matrixArray; renderable = $f.renderable; uniform = $f.uniform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		matrixArray = [matrixArray];
		renderable = this;
		matrixArray[0] = $clone($clone(matrix, arrayType), arrayType);
		$r = renderable.gl.UniformMatrix4fv(uniform, false, matrixArray[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GridRenderable.ptr.prototype.setMatrix }; } $f.$ptr = $ptr; $f.matrix = matrix; $f.matrixArray = matrixArray; $f.renderable = renderable; $f.uniform = uniform; $f.$s = $s; $f.$r = $r; return $f;
	};
	GridRenderable.prototype.setMatrix = function(uniform, matrix) { return this.$val.setMatrix(uniform, matrix); };
	NewBasicRenderContext = function(width, height, viewMatrix) {
		var $ptr, height, viewMatrix, width;
		viewMatrix = $clone(viewMatrix, mgl32.Mat4);
		return new RenderContext.ptr(width, height, $clone(viewMatrix, mgl32.Mat4), $clone(mgl32.Ortho2D(0, width, height, 0), mgl32.Mat4));
	};
	$pkg.NewBasicRenderContext = NewBasicRenderContext;
	RenderContext.ptr.prototype.ViewportSize = function() {
		var $ptr, _tmp, _tmp$1, context, height, width;
		width = 0;
		height = 0;
		context = this;
		_tmp = context.viewportWidth;
		_tmp$1 = context.viewportHeight;
		width = _tmp;
		height = _tmp$1;
		return [width, height];
	};
	RenderContext.prototype.ViewportSize = function() { return this.$val.ViewportSize(); };
	RenderContext.ptr.prototype.ViewMatrix = function() {
		var $ptr, context;
		context = this;
		return context.viewMatrix;
	};
	RenderContext.prototype.ViewMatrix = function() { return this.$val.ViewMatrix(); };
	RenderContext.ptr.prototype.ProjectionMatrix = function() {
		var $ptr, context;
		context = this;
		return context.projectionMatrix;
	};
	RenderContext.prototype.ProjectionMatrix = function() { return this.$val.ProjectionMatrix(); };
	NewTileGridMapRenderable = function(gl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, err1, err2, fragmentShader, gl, i, program, renderable, vertexShader, x, x$1, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err1 = $f.err1; err2 = $f.err2; fragmentShader = $f.fragmentShader; gl = $f.gl; i = $f.i; program = $f.program; renderable = $f.renderable; vertexShader = $f.vertexShader; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		_r = opengl.CompileNewShader(gl, 35633, mapTileGridVertexShaderSource); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		vertexShader = _tuple[0];
		err1 = _tuple[1];
		$deferred.push([$methodVal(gl, "DeleteShader"), [vertexShader]]);
		_r$1 = opengl.CompileNewShader(gl, 35632, mapTileGridFragmentShaderSource); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		fragmentShader = _tuple$1[0];
		err2 = _tuple$1[1];
		$deferred.push([$methodVal(gl, "DeleteShader"), [fragmentShader]]);
		_r$2 = opengl.LinkNewProgram(gl, new sliceType([vertexShader, fragmentShader])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		program = _tuple$2[0];
		/* */ if (!($interfaceIsEqual(err1, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(err1, $ifaceNil))) { */ case 4:
			_r$3 = fmt.Fprintf(os.Stderr, "Failed to compile shader 1:\n", new sliceType$1([err1])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 5:
		/* */ if (!($interfaceIsEqual(err2, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(err2, $ifaceNil))) { */ case 7:
			_r$4 = fmt.Fprintf(os.Stderr, "Failed to compile shader 2:\n", new sliceType$1([err2])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 8:
		_r$5 = gl.GenVertexArrays(1); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = gl.GenBuffers(1); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = gl.GetAttribLocation(program, "vertexPosition"); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$8 = gl.GetUniformLocation(program, "viewMatrix"); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$9 = gl.GetUniformLocation(program, "projectionMatrix"); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		renderable = new TileGridMapRenderable.ptr(gl, program, (x = _r$5, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), (x$1 = _r$6, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])), _r$7, _r$8, _r$9, $makeSlice(sliceType$4, 64));
		i = 0;
		while (true) {
			if (!(i < 64)) { break; }
			(x$2 = renderable.tiles, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i] = $makeSlice(sliceType$3, 64)));
			i = i + (1) >> 0;
		}
		return renderable;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$3.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: NewTileGridMapRenderable }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err1 = err1; $f.err2 = err2; $f.fragmentShader = fragmentShader; $f.gl = gl; $f.i = i; $f.program = program; $f.renderable = renderable; $f.vertexShader = vertexShader; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.NewTileGridMapRenderable = NewTileGridMapRenderable;
	TileGridMapRenderable.ptr.prototype.Dispose = function() {
		var $ptr, renderable, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; renderable = $f.renderable; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		renderable = this;
		$r = renderable.gl.DeleteProgram(renderable.program); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = renderable.gl.DeleteBuffers(new sliceType([renderable.vertexPositionBuffer])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = renderable.gl.DeleteVertexArrays(new sliceType([renderable.vertexArrayObject])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TileGridMapRenderable.ptr.prototype.Dispose }; } $f.$ptr = $ptr; $f.renderable = renderable; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileGridMapRenderable.prototype.Dispose = function() { return this.$val.Dispose(); };
	TileGridMapRenderable.ptr.prototype.SetTile = function(x, y, properties) {
		var $ptr, properties, renderable, x, x$1, x$2, y;
		renderable = this;
		(x$1 = (x$2 = renderable.tiles, ((y < 0 || y >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + y])), ((x < 0 || x >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x] = properties));
	};
	TileGridMapRenderable.prototype.SetTile = function(x, y, properties) { return this.$val.SetTile(x, y, properties); };
	TileGridMapRenderable.ptr.prototype.Clear = function() {
		var $ptr, _i, _ref, index, renderable, row;
		renderable = this;
		_ref = renderable.tiles;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			row = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			index = 0;
			while (true) {
				if (!(index < row.$length)) { break; }
				((index < 0 || index >= row.$length) ? $throwRuntimeError("index out of range") : row.$array[row.$offset + index] = ptrType$2.nil);
				index = index + (1) >> 0;
			}
			_i++;
		}
	};
	TileGridMapRenderable.prototype.Clear = function() { return this.$val.Clear(); };
	TileGridMapRenderable.ptr.prototype.Render = function(context) {
		var $ptr, context, gl, renderable, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; context = $f.context; gl = $f.gl; renderable = $f.renderable; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		context = [context];
		gl = [gl];
		renderable = [renderable];
		renderable[0] = this;
		gl[0] = renderable[0].gl;
		$r = renderable[0].withShader((function(context, gl, renderable) { return function $b() {
			var $ptr, _i, _i$1, _q, _ref, _ref$1, bottom, left, right, row, tile, top, vertices, x, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _q = $f._q; _ref = $f._ref; _ref$1 = $f._ref$1; bottom = $f.bottom; left = $f.left; right = $f.right; row = $f.row; tile = $f.tile; top = $f.top; vertices = $f.vertices; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = renderable[0].setMatrix32(renderable[0].viewMatrixUniform, context[0].ViewMatrix()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = renderable[0].setMatrix32(renderable[0].projectionMatrixUniform, context[0].ProjectionMatrix()); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].BindBuffer(34962, renderable[0].vertexPositionBuffer); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].VertexAttribOffset((renderable[0].vertexPositionAttrib >>> 0), 3, 5126, false, 0, 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref = renderable[0].tiles;
			_i = 0;
			/* while (true) { */ case 5:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
				y = _i;
				row = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_ref$1 = row;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					x = _i$1;
					tile = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
					/* */ if (!(tile === ptrType$2.nil)) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!(tile === ptrType$2.nil)) { */ case 9:
						left = $fround(x * 32);
						right = $fround(left + 32);
						top = $fround(y * 32);
						bottom = $fround(top + 32);
						vertices = $makeSlice(sliceType$2, 0, 36);
						if (tile.CalculatedWallHeights.North > 0) {
							vertices = $append(vertices, left, top, tile.CalculatedWallHeights.North, right, top, tile.CalculatedWallHeights.North);
						}
						if (tile.CalculatedWallHeights.South > 0) {
							vertices = $append(vertices, left, bottom, tile.CalculatedWallHeights.South, right, bottom, tile.CalculatedWallHeights.South);
						}
						if (tile.CalculatedWallHeights.West > 0) {
							vertices = $append(vertices, left, top, tile.CalculatedWallHeights.West, left, bottom, tile.CalculatedWallHeights.West);
						}
						if (tile.CalculatedWallHeights.East > 0) {
							vertices = $append(vertices, right, top, tile.CalculatedWallHeights.East, right, bottom, tile.CalculatedWallHeights.East);
						}
						if (tile.Type.$get() === "diagonalOpenNorthEast" || tile.Type.$get() === "diagonalOpenSouthWest") {
							vertices = $append(vertices, left, top, 1, right, bottom, 1);
						}
						if (tile.Type.$get() === "diagonalOpenNorthWest" || tile.Type.$get() === "diagonalOpenSouthEast") {
							vertices = $append(vertices, left, bottom, 1, right, top, 1);
						}
						/* */ if (vertices.$length > 0) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (vertices.$length > 0) { */ case 11:
							$r = gl[0].BufferData(34962, $imul(vertices.$length, 4), vertices, 35044); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$r = gl[0].DrawArrays(1, 0, ((_q = vertices.$length / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 12:
					/* } */ case 10:
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 5; continue; case 6:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._q = _q; $f._ref = _ref; $f._ref$1 = _ref$1; $f.bottom = bottom; $f.left = left; $f.right = right; $f.row = row; $f.tile = tile; $f.top = top; $f.vertices = vertices; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		}; })(context, gl, renderable)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TileGridMapRenderable.ptr.prototype.Render }; } $f.$ptr = $ptr; $f.context = context; $f.gl = gl; $f.renderable = renderable; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileGridMapRenderable.prototype.Render = function(context) { return this.$val.Render(context); };
	TileGridMapRenderable.ptr.prototype.withShader = function(task) {
		var $ptr, gl, renderable, task, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; gl = $f.gl; renderable = $f.renderable; task = $f.task; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		gl = [gl];
		renderable = this;
		gl[0] = renderable.gl;
		$r = gl[0].UseProgram(renderable.program); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl[0].BindVertexArray(renderable.vertexArrayObject); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl[0].EnableVertexAttribArray((renderable.vertexPositionAttrib >>> 0)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(gl) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = gl[0].EnableVertexAttribArray(0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].BindVertexArray(0); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].UseProgram(0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(gl), []]);
		$r = task(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: TileGridMapRenderable.ptr.prototype.withShader }; } $f.$ptr = $ptr; $f.gl = gl; $f.renderable = renderable; $f.task = task; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	TileGridMapRenderable.prototype.withShader = function(task) { return this.$val.withShader(task); };
	TileGridMapRenderable.ptr.prototype.setMatrix32 = function(uniform, matrix) {
		var $ptr, matrix, matrixArray, renderable, uniform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; matrix = $f.matrix; matrixArray = $f.matrixArray; renderable = $f.renderable; uniform = $f.uniform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		matrixArray = [matrixArray];
		renderable = this;
		matrixArray[0] = $clone($clone(matrix, arrayType), arrayType);
		$r = renderable.gl.UniformMatrix4fv(uniform, false, matrixArray[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TileGridMapRenderable.ptr.prototype.setMatrix32 }; } $f.$ptr = $ptr; $f.matrix = matrix; $f.matrixArray = matrixArray; $f.renderable = renderable; $f.uniform = uniform; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileGridMapRenderable.prototype.setMatrix32 = function(uniform, matrix) { return this.$val.setMatrix32(uniform, matrix); };
	NewTileSelectionRenderable = function(gl, query) {
		var $ptr, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, err1, err2, fragmentShader, gl, program, query, renderable, vertexShader, x, x$1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err1 = $f.err1; err2 = $f.err2; fragmentShader = $f.fragmentShader; gl = $f.gl; program = $f.program; query = $f.query; renderable = $f.renderable; vertexShader = $f.vertexShader; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		gl = [gl];
		renderable = [renderable];
		_r = opengl.CompileNewShader(gl[0], 35633, mapTileSelectionVertexShaderSource); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		vertexShader = _tuple[0];
		err1 = _tuple[1];
		$deferred.push([$methodVal(gl[0], "DeleteShader"), [vertexShader]]);
		_r$1 = opengl.CompileNewShader(gl[0], 35632, mapTileSelectionFragmentShaderSource); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		fragmentShader = _tuple$1[0];
		err2 = _tuple$1[1];
		$deferred.push([$methodVal(gl[0], "DeleteShader"), [fragmentShader]]);
		_r$2 = opengl.LinkNewProgram(gl[0], new sliceType([vertexShader, fragmentShader])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		program = _tuple$2[0];
		/* */ if (!($interfaceIsEqual(err1, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(err1, $ifaceNil))) { */ case 4:
			_r$3 = fmt.Fprintf(os.Stderr, "Failed to compile shader 1:\n", new sliceType$1([err1])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 5:
		/* */ if (!($interfaceIsEqual(err2, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(err2, $ifaceNil))) { */ case 7:
			_r$4 = fmt.Fprintf(os.Stderr, "Failed to compile shader 2:\n", new sliceType$1([err2])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 8:
		_r$5 = gl[0].GenVertexArrays(1); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = gl[0].GenBuffers(1); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = gl[0].GetAttribLocation(program, "vertexPosition"); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$8 = gl[0].GetUniformLocation(program, "modelMatrix"); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$9 = gl[0].GetUniformLocation(program, "viewMatrix"); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$10 = gl[0].GetUniformLocation(program, "projectionMatrix"); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		renderable[0] = new TileSelectionRenderable.ptr(gl[0], program, (x = _r$5, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), (x$1 = _r$6, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])), _r$7, _r$8, _r$9, _r$10, query);
		$r = renderable[0].withShader((function(gl, renderable) { return function $b() {
			var $ptr, limit, vertices, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; limit = $f.limit; vertices = $f.vertices; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			limit = 32;
			vertices = new sliceType$2([0, 0, 0, limit, 0, 0, limit, limit, 0, limit, limit, 0, 0, limit, 0, 0, 0, 0]);
			$r = gl[0].BindBuffer(34962, renderable[0].vertexPositionBuffer); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].BufferData(34962, $imul(vertices.$length, 4), vertices, 35044); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.limit = limit; $f.vertices = vertices; $f.$s = $s; $f.$r = $r; return $f;
		}; })(gl, renderable)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return renderable[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$4.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: NewTileSelectionRenderable }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err1 = err1; $f.err2 = err2; $f.fragmentShader = fragmentShader; $f.gl = gl; $f.program = program; $f.query = query; $f.renderable = renderable; $f.vertexShader = vertexShader; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.NewTileSelectionRenderable = NewTileSelectionRenderable;
	TileSelectionRenderable.ptr.prototype.Dispose = function() {
		var $ptr, renderable, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; renderable = $f.renderable; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		renderable = this;
		$r = renderable.gl.DeleteProgram(renderable.program); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = renderable.gl.DeleteBuffers(new sliceType([renderable.vertexPositionBuffer])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = renderable.gl.DeleteVertexArrays(new sliceType([renderable.vertexArrayObject])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TileSelectionRenderable.ptr.prototype.Dispose }; } $f.$ptr = $ptr; $f.renderable = renderable; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileSelectionRenderable.prototype.Dispose = function() { return this.$val.Dispose(); };
	TileSelectionRenderable.ptr.prototype.Render = function(context) {
		var $ptr, context, gl, renderable, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; context = $f.context; gl = $f.gl; renderable = $f.renderable; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		context = [context];
		gl = [gl];
		renderable = [renderable];
		renderable[0] = this;
		gl[0] = renderable[0].gl;
		$r = renderable[0].withShader((function(context, gl, renderable) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = renderable[0].setMatrix32(renderable[0].viewMatrixUniform, context[0].ViewMatrix()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = renderable[0].setMatrix32(renderable[0].projectionMatrixUniform, context[0].ProjectionMatrix()); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].BindBuffer(34962, renderable[0].vertexPositionBuffer); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].VertexAttribOffset((renderable[0].vertexPositionAttrib >>> 0), 3, 5126, false, 0, 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = renderable[0].query((function(context, gl, renderable) { return function $b(coord) {
				var $ptr, _tuple, coord, modelMatrix, x, y, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; coord = $f.coord; modelMatrix = $f.modelMatrix; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				modelMatrix = [modelMatrix];
				coord = $clone(coord, model$1.TileCoordinate);
				_tuple = coord.XY();
				x = _tuple[0];
				y = _tuple[1];
				modelMatrix[0] = $clone(mgl32.Translate3D($fround(x * 32), $fround((63 - y >> 0) * 32), 0), mgl32.Mat4);
				$r = renderable[0].setMatrix32(renderable[0].modelMatrixUniform, modelMatrix[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = gl[0].DrawArrays(4, 0, 6); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.coord = coord; $f.modelMatrix = modelMatrix; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
			}; })(context, gl, renderable)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(context, gl, renderable)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TileSelectionRenderable.ptr.prototype.Render }; } $f.$ptr = $ptr; $f.context = context; $f.gl = gl; $f.renderable = renderable; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileSelectionRenderable.prototype.Render = function(context) { return this.$val.Render(context); };
	TileSelectionRenderable.ptr.prototype.withShader = function(task) {
		var $ptr, gl, renderable, task, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; gl = $f.gl; renderable = $f.renderable; task = $f.task; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		gl = [gl];
		renderable = this;
		gl[0] = renderable.gl;
		$r = gl[0].UseProgram(renderable.program); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl[0].BindVertexArray(renderable.vertexArrayObject); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl[0].EnableVertexAttribArray((renderable.vertexPositionAttrib >>> 0)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(gl) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = gl[0].EnableVertexAttribArray(0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].BindVertexArray(0); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].UseProgram(0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(gl), []]);
		$r = task(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: TileSelectionRenderable.ptr.prototype.withShader }; } $f.$ptr = $ptr; $f.gl = gl; $f.renderable = renderable; $f.task = task; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	TileSelectionRenderable.prototype.withShader = function(task) { return this.$val.withShader(task); };
	TileSelectionRenderable.ptr.prototype.setMatrix32 = function(uniform, matrix) {
		var $ptr, matrix, matrixArray, renderable, uniform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; matrix = $f.matrix; matrixArray = $f.matrixArray; renderable = $f.renderable; uniform = $f.uniform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		matrixArray = [matrixArray];
		renderable = this;
		matrixArray[0] = $clone($clone(matrix, arrayType), arrayType);
		$r = renderable.gl.UniformMatrix4fv(uniform, false, matrixArray[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TileSelectionRenderable.ptr.prototype.setMatrix32 }; } $f.$ptr = $ptr; $f.matrix = matrix; $f.matrixArray = matrixArray; $f.renderable = renderable; $f.uniform = uniform; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileSelectionRenderable.prototype.setMatrix32 = function(uniform, matrix) { return this.$val.setMatrix32(uniform, matrix); };
	init = function() {
		var $ptr, _key, i, matrix;
		uvRotations = {};
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			matrix = [matrix];
			matrix[0] = $clone(new mgl32.Mat4(new mgl32.Mat4(mgl32.Translate3D(0.5, 0.5, 0)).Mul4(mgl32.HomogRotate3DZ($fround($fround(3.1415927410125732 * i) / 2)))).Mul4(mgl32.Translate3D(-0.5, -0.5, 0)), mgl32.Mat4);
			_key = i; (uvRotations || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: matrix[0] };
			i = i + (1) >> 0;
		}
	};
	NewTileTextureMapRenderable = function(gl, paletteTexture, textureQuery) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, err1, err2, fragmentShader, gl, i, paletteTexture, program, renderable, textureQuery, vertexShader, x, x$1, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err1 = $f.err1; err2 = $f.err2; fragmentShader = $f.fragmentShader; gl = $f.gl; i = $f.i; paletteTexture = $f.paletteTexture; program = $f.program; renderable = $f.renderable; textureQuery = $f.textureQuery; vertexShader = $f.vertexShader; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		gl = [gl];
		renderable = [renderable];
		_r = opengl.CompileNewShader(gl[0], 35633, mapTileVertexShaderSource); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		vertexShader = _tuple[0];
		err1 = _tuple[1];
		$deferred.push([$methodVal(gl[0], "DeleteShader"), [vertexShader]]);
		_r$1 = opengl.CompileNewShader(gl[0], 35632, mapTileFragmentShaderSource); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		fragmentShader = _tuple$1[0];
		err2 = _tuple$1[1];
		$deferred.push([$methodVal(gl[0], "DeleteShader"), [fragmentShader]]);
		_r$2 = opengl.LinkNewProgram(gl[0], new sliceType([vertexShader, fragmentShader])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		program = _tuple$2[0];
		/* */ if (!($interfaceIsEqual(err1, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(err1, $ifaceNil))) { */ case 4:
			_r$3 = fmt.Fprintf(os.Stderr, "Failed to compile shader 1:\n", new sliceType$1([err1])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 5:
		/* */ if (!($interfaceIsEqual(err2, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(err2, $ifaceNil))) { */ case 7:
			_r$4 = fmt.Fprintf(os.Stderr, "Failed to compile shader 2:\n", new sliceType$1([err2])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 8:
		_r$5 = gl[0].GenVertexArrays(1); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = gl[0].GenBuffers(1); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = gl[0].GetAttribLocation(program, "vertexPosition"); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$8 = gl[0].GetUniformLocation(program, "modelMatrix"); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$9 = gl[0].GetUniformLocation(program, "viewMatrix"); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$10 = gl[0].GetUniformLocation(program, "projectionMatrix"); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$11 = gl[0].GetUniformLocation(program, "uvMatrix"); /* */ $s = 16; case 16: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$12 = gl[0].GetUniformLocation(program, "palette"); /* */ $s = 17; case 17: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_r$13 = gl[0].GetUniformLocation(program, "bitmap"); /* */ $s = 18; case 18: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		renderable[0] = new TileTextureMapRenderable.ptr(gl[0], program, (x = _r$5, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), (x$1 = _r$6, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])), _r$7, _r$8, _r$9, _r$10, _r$11, _r$12, _r$13, paletteTexture, textureQuery, $makeSlice(sliceType$4, 64), "solid");
		i = 0;
		while (true) {
			if (!(i < 64)) { break; }
			(x$2 = renderable[0].tiles, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i] = $makeSlice(sliceType$3, 64)));
			i = i + (1) >> 0;
		}
		$r = renderable[0].withShader((function(gl, renderable) { return function $b() {
			var $ptr, limit, vertices, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; limit = $f.limit; vertices = $f.vertices; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = gl[0].BindBuffer(34962, renderable[0].vertexPositionBuffer); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			limit = 1;
			vertices = new sliceType$2([0, 0, 0, limit, 0, 0, limit, limit, 0, limit, limit, 0, 0, limit, 0, 0, 0, 0]);
			$r = gl[0].BufferData(34962, $imul(vertices.$length, 4), vertices, 35044); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.limit = limit; $f.vertices = vertices; $f.$s = $s; $f.$r = $r; return $f;
		}; })(gl, renderable)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return renderable[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$5.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: NewTileTextureMapRenderable }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err1 = err1; $f.err2 = err2; $f.fragmentShader = fragmentShader; $f.gl = gl; $f.i = i; $f.paletteTexture = paletteTexture; $f.program = program; $f.renderable = renderable; $f.textureQuery = textureQuery; $f.vertexShader = vertexShader; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.NewTileTextureMapRenderable = NewTileTextureMapRenderable;
	TileTextureMapRenderable.ptr.prototype.Dispose = function() {
		var $ptr, renderable, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; renderable = $f.renderable; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		renderable = this;
		$r = renderable.gl.DeleteProgram(renderable.program); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = renderable.gl.DeleteBuffers(new sliceType([renderable.vertexPositionBuffer])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = renderable.gl.DeleteVertexArrays(new sliceType([renderable.vertexArrayObject])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TileTextureMapRenderable.ptr.prototype.Dispose }; } $f.$ptr = $ptr; $f.renderable = renderable; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileTextureMapRenderable.prototype.Dispose = function() { return this.$val.Dispose(); };
	TileTextureMapRenderable.ptr.prototype.SetTile = function(x, y, properties) {
		var $ptr, properties, renderable, x, x$1, x$2, y;
		renderable = this;
		(x$1 = (x$2 = renderable.tiles, ((y < 0 || y >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + y])), ((x < 0 || x >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x] = properties));
	};
	TileTextureMapRenderable.prototype.SetTile = function(x, y, properties) { return this.$val.SetTile(x, y, properties); };
	TileTextureMapRenderable.ptr.prototype.Clear = function() {
		var $ptr, _i, _ref, index, renderable, row;
		renderable = this;
		_ref = renderable.tiles;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			row = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			index = 0;
			while (true) {
				if (!(index < row.$length)) { break; }
				((index < 0 || index >= row.$length) ? $throwRuntimeError("index out of range") : row.$array[row.$offset + index] = ptrType$2.nil);
				index = index + (1) >> 0;
			}
			_i++;
		}
	};
	TileTextureMapRenderable.prototype.Clear = function() { return this.$val.Clear(); };
	TileTextureMapRenderable.ptr.prototype.Render = function(context) {
		var $ptr, context, gl, renderable, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; context = $f.context; gl = $f.gl; renderable = $f.renderable; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		context = [context];
		gl = [gl];
		renderable = [renderable];
		renderable[0] = this;
		gl[0] = renderable[0].gl;
		$r = renderable[0].withShader((function(context, gl, renderable) { return function $b() {
			var $ptr, _arg, _arg$1, _entry, _i, _i$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, modelMatrix, row, scaling, texture, textureUnit, tile, uvMatrix, verticeCount, x, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; modelMatrix = $f.modelMatrix; row = $f.row; scaling = $f.scaling; texture = $f.texture; textureUnit = $f.textureUnit; tile = $f.tile; uvMatrix = $f.uvMatrix; verticeCount = $f.verticeCount; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = renderable[0].setMatrix32(renderable[0].viewMatrixUniform, context[0].ViewMatrix()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = renderable[0].setMatrix32(renderable[0].projectionMatrixUniform, context[0].ProjectionMatrix()); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].BindBuffer(34962, renderable[0].vertexPositionBuffer); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].VertexAttribOffset((renderable[0].vertexPositionAttrib >>> 0), 3, 5126, false, 0, 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			textureUnit = 0;
			$r = gl[0].ActiveTexture(33984 + (textureUnit >>> 0) >>> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = renderable[0].paletteTexture.Handle(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg = _r;
			$r = gl[0].BindTexture(3553, _arg); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].Uniform1i(renderable[0].paletteUniform, textureUnit); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			textureUnit = 1;
			$r = gl[0].ActiveTexture(33984 + (textureUnit >>> 0) >>> 0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			scaling = $clone(mgl64.Scale3D(32, 32, 1), mgl64.Mat4);
			_ref = renderable[0].tiles;
			_i = 0;
			/* while (true) { */ case 10:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 11; continue; }
				y = _i;
				row = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_ref$1 = row;
				_i$1 = 0;
				/* while (true) { */ case 12:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 13; continue; }
					modelMatrix = [modelMatrix];
					x = _i$1;
					tile = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
					/* */ if (!(tile === ptrType$2.nil) && !(tile.Type.$get() === "solid") && !(tile.RealWorld === ptrType$6.nil)) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (!(tile === ptrType$2.nil) && !(tile.Type.$get() === "solid") && !(tile.RealWorld === ptrType$6.nil)) { */ case 14:
						_r$1 = renderable[0].textureQuery(tile.RealWorld.FloorTexture.$get()); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						texture = _r$1;
						/* */ if (!($interfaceIsEqual(texture, $ifaceNil))) { $s = 17; continue; }
						/* */ $s = 18; continue;
						/* if (!($interfaceIsEqual(texture, $ifaceNil))) { */ case 17:
							modelMatrix[0] = $clone(new mgl64.Mat4(mgl64.Translate3D(x * 32, y * 32, 0)).Mul4(scaling), mgl64.Mat4);
							uvMatrix = (_entry = uvRotations[$Int.keyFor(tile.RealWorld.FloorTextureRotations.$get())], _entry !== undefined ? _entry.v : ptrType$7.nil);
							$r = renderable[0].setMatrix32(renderable[0].uvMatrixUniform, uvMatrix); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$r = renderable[0].setMatrix64(renderable[0].modelMatrixUniform, modelMatrix[0]); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_r$2 = renderable[0].ensureTileType(tile.Type.$get()); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							verticeCount = _r$2;
							_r$3 = texture.Handle(); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
							_arg$1 = _r$3;
							$r = gl[0].BindTexture(3553, _arg$1); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$r = gl[0].Uniform1i(renderable[0].bitmapUniform, textureUnit); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$r = gl[0].DrawArrays(4, 0, (verticeCount >> 0)); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 18:
					/* } */ case 15:
					_i$1++;
				/* } */ $s = 12; continue; case 13:
				_i++;
			/* } */ $s = 10; continue; case 11:
			$r = gl[0].BindTexture(3553, 0); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.modelMatrix = modelMatrix; $f.row = row; $f.scaling = scaling; $f.texture = texture; $f.textureUnit = textureUnit; $f.tile = tile; $f.uvMatrix = uvMatrix; $f.verticeCount = verticeCount; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		}; })(context, gl, renderable)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TileTextureMapRenderable.ptr.prototype.Render }; } $f.$ptr = $ptr; $f.context = context; $f.gl = gl; $f.renderable = renderable; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileTextureMapRenderable.prototype.Render = function(context) { return this.$val.Render(context); };
	TileTextureMapRenderable.ptr.prototype.ensureTileType = function(tileType) {
		var $ptr, displayedType, gl, limit, renderable, tileType, verticeCount, vertices, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; displayedType = $f.displayedType; gl = $f.gl; limit = $f.limit; renderable = $f.renderable; tileType = $f.tileType; verticeCount = $f.verticeCount; vertices = $f.vertices; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		verticeCount = 0;
		renderable = this;
		displayedType = "open";
		verticeCount = 6;
		if (tileType === "diagonalOpenNorthEast" || tileType === "diagonalOpenNorthWest" || tileType === "diagonalOpenSouthEast" || tileType === "diagonalOpenSouthWest") {
			displayedType = tileType;
			verticeCount = 3;
		}
		/* */ if (!(renderable.lastTileType === displayedType)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(renderable.lastTileType === displayedType)) { */ case 1:
			gl = renderable.gl;
			vertices = sliceType$2.nil;
			limit = 1;
			if (displayedType === "diagonalOpenNorthEast") {
				vertices = new sliceType$2([0, 0, 0, limit, 0, 0, limit, limit, 0]);
			} else if (displayedType === "diagonalOpenNorthWest") {
				vertices = new sliceType$2([0, 0, 0, limit, 0, 0, 0, limit, 0]);
			} else if (displayedType === "diagonalOpenSouthEast") {
				vertices = new sliceType$2([limit, 0, 0, limit, limit, 0, 0, limit, 0]);
			} else if (displayedType === "diagonalOpenSouthWest") {
				vertices = new sliceType$2([0, 0, 0, limit, limit, 0, 0, limit, 0]);
			} else if (displayedType === "open") {
				vertices = new sliceType$2([0, 0, 0, limit, 0, 0, limit, limit, 0, limit, limit, 0, 0, limit, 0, 0, 0, 0]);
			}
			$r = gl.BindBuffer(34962, renderable.vertexPositionBuffer); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl.BufferData(34962, $imul(vertices.$length, 4), vertices, 35044); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			renderable.lastTileType = displayedType;
		/* } */ case 2:
		return verticeCount;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TileTextureMapRenderable.ptr.prototype.ensureTileType }; } $f.$ptr = $ptr; $f.displayedType = displayedType; $f.gl = gl; $f.limit = limit; $f.renderable = renderable; $f.tileType = tileType; $f.verticeCount = verticeCount; $f.vertices = vertices; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileTextureMapRenderable.prototype.ensureTileType = function(tileType) { return this.$val.ensureTileType(tileType); };
	TileTextureMapRenderable.ptr.prototype.withShader = function(task) {
		var $ptr, gl, renderable, task, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; gl = $f.gl; renderable = $f.renderable; task = $f.task; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		gl = [gl];
		renderable = this;
		gl[0] = renderable.gl;
		$r = gl[0].UseProgram(renderable.program); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl[0].BindVertexArray(renderable.vertexArrayObject); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl[0].EnableVertexAttribArray((renderable.vertexPositionAttrib >>> 0)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(gl) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = gl[0].EnableVertexAttribArray(0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].BindVertexArray(0); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = gl[0].UseProgram(0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(gl), []]);
		$r = task(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: TileTextureMapRenderable.ptr.prototype.withShader }; } $f.$ptr = $ptr; $f.gl = gl; $f.renderable = renderable; $f.task = task; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	TileTextureMapRenderable.prototype.withShader = function(task) { return this.$val.withShader(task); };
	TileTextureMapRenderable.ptr.prototype.setMatrix32 = function(uniform, matrix) {
		var $ptr, matrix, matrixArray, renderable, uniform, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; matrix = $f.matrix; matrixArray = $f.matrixArray; renderable = $f.renderable; uniform = $f.uniform; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		matrixArray = [matrixArray];
		renderable = this;
		matrixArray[0] = $clone($clone(matrix, arrayType), arrayType);
		$r = renderable.gl.UniformMatrix4fv(uniform, false, matrixArray[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TileTextureMapRenderable.ptr.prototype.setMatrix32 }; } $f.$ptr = $ptr; $f.matrix = matrix; $f.matrixArray = matrixArray; $f.renderable = renderable; $f.uniform = uniform; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileTextureMapRenderable.prototype.setMatrix32 = function(uniform, matrix) { return this.$val.setMatrix32(uniform, matrix); };
	TileTextureMapRenderable.ptr.prototype.setMatrix64 = function(uniform, matrix) {
		var $ptr, _i, _ref, index, matrix, matrixArray, renderable, uniform, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; index = $f.index; matrix = $f.matrix; matrixArray = $f.matrixArray; renderable = $f.renderable; uniform = $f.uniform; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		matrixArray = [matrixArray];
		renderable = this;
		matrixArray[0] = arrayType.zero();
		_ref = matrix;
		_i = 0;
		while (true) {
			if (!(_i < 16)) { break; }
			index = _i;
			value = (_ref.nilCheck, ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]));
			((index < 0 || index >= matrixArray[0].length) ? $throwRuntimeError("index out of range") : matrixArray[0][index] = $fround(value));
			_i++;
		}
		$r = renderable.gl.UniformMatrix4fv(uniform, false, matrixArray[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TileTextureMapRenderable.ptr.prototype.setMatrix64 }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.index = index; $f.matrix = matrix; $f.matrixArray = matrixArray; $f.renderable = renderable; $f.uniform = uniform; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	TileTextureMapRenderable.prototype.setMatrix64 = function(uniform, matrix) { return this.$val.setMatrix64(uniform, matrix); };
	ptrType.methods = [{prop: "Render", name: "Render", pkg: "", typ: $funcType([ptrType$8], [], false)}, {prop: "withShader", name: "withShader", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $funcType([funcType], [], false)}, {prop: "setMatrix", name: "setMatrix", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $funcType([$Int32, ptrType$7], [], false)}];
	ptrType$8.methods = [{prop: "ViewportSize", name: "ViewportSize", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "ViewMatrix", name: "ViewMatrix", pkg: "", typ: $funcType([], [ptrType$7], false)}, {prop: "ProjectionMatrix", name: "ProjectionMatrix", pkg: "", typ: $funcType([], [ptrType$7], false)}];
	ptrType$3.methods = [{prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}, {prop: "SetTile", name: "SetTile", pkg: "", typ: $funcType([$Int, $Int, ptrType$2], [], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "Render", name: "Render", pkg: "", typ: $funcType([ptrType$8], [], false)}, {prop: "withShader", name: "withShader", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $funcType([funcType], [], false)}, {prop: "setMatrix32", name: "setMatrix32", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $funcType([$Int32, ptrType$7], [], false)}];
	ptrType$4.methods = [{prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}, {prop: "Render", name: "Render", pkg: "", typ: $funcType([ptrType$8], [], false)}, {prop: "withShader", name: "withShader", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $funcType([funcType], [], false)}, {prop: "setMatrix32", name: "setMatrix32", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $funcType([$Int32, ptrType$7], [], false)}];
	ptrType$5.methods = [{prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}, {prop: "SetTile", name: "SetTile", pkg: "", typ: $funcType([$Int, $Int, ptrType$2], [], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "Render", name: "Render", pkg: "", typ: $funcType([ptrType$8], [], false)}, {prop: "ensureTileType", name: "ensureTileType", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $funcType([model.TileType], [$Int], false)}, {prop: "withShader", name: "withShader", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $funcType([funcType], [], false)}, {prop: "setMatrix32", name: "setMatrix32", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $funcType([$Int32, ptrType$7], [], false)}, {prop: "setMatrix64", name: "setMatrix64", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $funcType([$Int32, ptrType$9], [], false)}];
	GridRenderable.init([{prop: "gl", name: "gl", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: opengl.OpenGl, tag: ""}, {prop: "program", name: "program", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Uint32, tag: ""}, {prop: "vertexArrayObject", name: "vertexArrayObject", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Uint32, tag: ""}, {prop: "vertexPositionBuffer", name: "vertexPositionBuffer", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Uint32, tag: ""}, {prop: "vertexPositionAttrib", name: "vertexPositionAttrib", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "viewMatrixUniform", name: "viewMatrixUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "projectionMatrixUniform", name: "projectionMatrixUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}]);
	RenderContext.init([{prop: "viewportWidth", name: "viewportWidth", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int, tag: ""}, {prop: "viewportHeight", name: "viewportHeight", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int, tag: ""}, {prop: "viewMatrix", name: "viewMatrix", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: mgl32.Mat4, tag: ""}, {prop: "projectionMatrix", name: "projectionMatrix", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: mgl32.Mat4, tag: ""}]);
	TileGridMapRenderable.init([{prop: "gl", name: "gl", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: opengl.OpenGl, tag: ""}, {prop: "program", name: "program", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Uint32, tag: ""}, {prop: "vertexArrayObject", name: "vertexArrayObject", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Uint32, tag: ""}, {prop: "vertexPositionBuffer", name: "vertexPositionBuffer", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Uint32, tag: ""}, {prop: "vertexPositionAttrib", name: "vertexPositionAttrib", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "viewMatrixUniform", name: "viewMatrixUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "projectionMatrixUniform", name: "projectionMatrixUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "tiles", name: "tiles", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: sliceType$4, tag: ""}]);
	TileSelectionCallback.init([model$1.TileCoordinate], [], false);
	TileSelectionQuery.init([TileSelectionCallback], [], false);
	TileSelectionRenderable.init([{prop: "gl", name: "gl", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: opengl.OpenGl, tag: ""}, {prop: "program", name: "program", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Uint32, tag: ""}, {prop: "vertexArrayObject", name: "vertexArrayObject", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Uint32, tag: ""}, {prop: "vertexPositionBuffer", name: "vertexPositionBuffer", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Uint32, tag: ""}, {prop: "vertexPositionAttrib", name: "vertexPositionAttrib", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "modelMatrixUniform", name: "modelMatrixUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "viewMatrixUniform", name: "viewMatrixUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "projectionMatrixUniform", name: "projectionMatrixUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "query", name: "query", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: TileSelectionQuery, tag: ""}]);
	TextureQuery.init([$Int], [graphics.Texture], false);
	TileTextureMapRenderable.init([{prop: "gl", name: "gl", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: opengl.OpenGl, tag: ""}, {prop: "program", name: "program", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Uint32, tag: ""}, {prop: "vertexArrayObject", name: "vertexArrayObject", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Uint32, tag: ""}, {prop: "vertexPositionBuffer", name: "vertexPositionBuffer", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Uint32, tag: ""}, {prop: "vertexPositionAttrib", name: "vertexPositionAttrib", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "modelMatrixUniform", name: "modelMatrixUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "viewMatrixUniform", name: "viewMatrixUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "projectionMatrixUniform", name: "projectionMatrixUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "uvMatrixUniform", name: "uvMatrixUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "paletteUniform", name: "paletteUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "bitmapUniform", name: "bitmapUniform", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: $Int32, tag: ""}, {prop: "paletteTexture", name: "paletteTexture", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: graphics.Texture, tag: ""}, {prop: "textureQuery", name: "textureQuery", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: TextureQuery, tag: ""}, {prop: "tiles", name: "tiles", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: sliceType$4, tag: ""}, {prop: "lastTileType", name: "lastTileType", pkg: "github.com/inkyblackness/shocked-client/editor/display", typ: model.TileType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mgl32.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mgl64.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = model$1.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = graphics.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = model.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		uvRotations = false;
		gridVertexShaderSource = "\n  attribute vec3 vertexPosition;\n\n  uniform mat4 viewMatrix;\n  uniform mat4 projectionMatrix;\n\n  varying vec4 color;\n  varying vec3 originalPosition;\n\n  void main(void) {\n    gl_Position = projectionMatrix * viewMatrix * vec4(vertexPosition, 1.0);\n\n    color = vec4(0.0, 0.1, 0.0, 0.6);\n    originalPosition = vertexPosition;\n  }\n";
		gridFragmentShaderSource = "\n  #ifdef GL_ES\n    precision mediump float;\n  #endif\n\n  varying vec4 color;\n  varying vec3 originalPosition;\n\n  float modulo(float x, float y) {\n    return x - y * floor(x/y);\n  }\n\n  float nearGrid(float stepSize, float value) {\n    float remainder = modulo(value - (stepSize / 2.0), stepSize) * 2.0;\n\n    if (remainder >= stepSize) {\n      remainder = (stepSize * 2.0) - remainder;\n    }\n\n    return remainder / stepSize;\n  }\n\n  void main(void) {\n    float alphaX = nearGrid(32.0, originalPosition.x);\n    float alphaY = nearGrid(32.0, originalPosition.y);\n    bool beyondX = (originalPosition.x / 32.0) >= 64.0;\n    bool beyondY = (originalPosition.y / 32.0) >= 64.0;\n    float alpha = 0.0;\n\n    if (!beyondX && !beyondY) {\n       alpha = max(alphaX, alphaY);\n    } else if (beyondX && !beyondY) {\n       alpha = alphaX;\n    } else if (beyondY && !beyondX) {\n       alpha = alphaY;\n    } else {\n       alpha = min(alphaX, alphaY);\n    }\n\n    alpha = pow(2.0, 10.0 * (alpha - 1.0));\n\n    gl_FragColor = vec4(color.rgb, color.a * alpha);\n  }\n";
		mapTileGridVertexShaderSource = "\n  attribute vec3 vertexPosition;\n\n  uniform mat4 viewMatrix;\n  uniform mat4 projectionMatrix;\n\n  varying float height;\n\n  void main(void) {\n    gl_Position = projectionMatrix * viewMatrix * vec4(vertexPosition.xy, 0.0, 1.0);\n    height = vertexPosition.z;\n  }\n";
		mapTileGridFragmentShaderSource = "\n  #ifdef GL_ES\n    precision mediump float;\n  #endif\n\n  varying float height;\n\n  void main(void) {\n    gl_FragColor = vec4(0.0, 0.8, 0.0, height);\n  }\n";
		mapTileSelectionVertexShaderSource = "\n  attribute vec3 vertexPosition;\n\n  uniform mat4 modelMatrix;\n  uniform mat4 viewMatrix;\n  uniform mat4 projectionMatrix;\n\n  void main(void) {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vertexPosition, 1.0);\n  }\n";
		mapTileSelectionFragmentShaderSource = "\n  #ifdef GL_ES\n    precision mediump float;\n  #endif\n\n  void main(void) {\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 0.75);\n  }\n";
		mapTileVertexShaderSource = "\n  attribute vec3 vertexPosition;\n\n  uniform mat4 modelMatrix;\n  uniform mat4 viewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform mat4 uvMatrix;\n\n  varying vec2 uv;\n\n  void main(void) {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vertexPosition, 1.0);\n\n    uv = (uvMatrix * vec4(vertexPosition, 1.0)).xy;\n  }\n";
		mapTileFragmentShaderSource = "\n  #ifdef GL_ES\n    precision mediump float;\n  #endif\n\n  uniform sampler2D palette;\n  uniform sampler2D bitmap;\n\n  varying vec2 uv;\n\n  void main(void) {\n    vec4 pixel = texture2D(bitmap, uv);\n    vec4 color = texture2D(palette, vec2(pixel.a, 0.5));\n\n    gl_FragColor = color;\n  }\n";
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/inkyblackness/shocked-client/viewmodel"] = (function() {
	var $pkg = {}, $init, ActionListener, ActionNode, BoolValueListener, BoolValueNode, ContainerNode, Node, NodeVisitor, SectionNode, SectionSelectionNode, StringValueListener, StringValueNode, TableListener, TableNode, ValueSelectionValuesListener, ValueSelectionNode, sliceType, sliceType$1, ptrType, sliceType$2, ptrType$1, sliceType$3, sliceType$4, sliceType$5, ptrType$2, sliceType$6, ptrType$3, sliceType$7, ptrType$4, mapType, ptrType$5, ptrType$6, ptrType$7, mapType$1, NewActionNode, NewBoolValueNode, NewSectionNode, NewSectionSelectionNode, NewStringValueNode, NewEditableStringValueNode, NewValueSelectionNode;
	ActionListener = $pkg.ActionListener = $newType(4, $kindFunc, "viewmodel.ActionListener", "ActionListener", "github.com/inkyblackness/shocked-client/viewmodel", null);
	ActionNode = $pkg.ActionNode = $newType(0, $kindStruct, "viewmodel.ActionNode", "ActionNode", "github.com/inkyblackness/shocked-client/viewmodel", function(label_, listeners_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.label = "";
			this.listeners = sliceType.nil;
			return;
		}
		this.label = label_;
		this.listeners = listeners_;
	});
	BoolValueListener = $pkg.BoolValueListener = $newType(4, $kindFunc, "viewmodel.BoolValueListener", "BoolValueListener", "github.com/inkyblackness/shocked-client/viewmodel", null);
	BoolValueNode = $pkg.BoolValueNode = $newType(0, $kindStruct, "viewmodel.BoolValueNode", "BoolValueNode", "github.com/inkyblackness/shocked-client/viewmodel", function(label_, listeners_, value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.label = "";
			this.listeners = sliceType$1.nil;
			this.value = false;
			return;
		}
		this.label = label_;
		this.listeners = listeners_;
		this.value = value_;
	});
	ContainerNode = $pkg.ContainerNode = $newType(0, $kindStruct, "viewmodel.ContainerNode", "ContainerNode", "github.com/inkyblackness/shocked-client/viewmodel", function(label_, nodes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.label = "";
			this.nodes = false;
			return;
		}
		this.label = label_;
		this.nodes = nodes_;
	});
	Node = $pkg.Node = $newType(8, $kindInterface, "viewmodel.Node", "Node", "github.com/inkyblackness/shocked-client/viewmodel", null);
	NodeVisitor = $pkg.NodeVisitor = $newType(8, $kindInterface, "viewmodel.NodeVisitor", "NodeVisitor", "github.com/inkyblackness/shocked-client/viewmodel", null);
	SectionNode = $pkg.SectionNode = $newType(0, $kindStruct, "viewmodel.SectionNode", "SectionNode", "github.com/inkyblackness/shocked-client/viewmodel", function(label_, available_, nodes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.label = "";
			this.available = ptrType.nil;
			this.nodes = sliceType$2.nil;
			return;
		}
		this.label = label_;
		this.available = available_;
		this.nodes = nodes_;
	});
	SectionSelectionNode = $pkg.SectionSelectionNode = $newType(0, $kindStruct, "viewmodel.SectionSelectionNode", "SectionSelectionNode", "github.com/inkyblackness/shocked-client/viewmodel", function(label_, selected_, sections_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.label = "";
			this.selected = ptrType$1.nil;
			this.sections = false;
			return;
		}
		this.label = label_;
		this.selected = selected_;
		this.sections = sections_;
	});
	StringValueListener = $pkg.StringValueListener = $newType(4, $kindFunc, "viewmodel.StringValueListener", "StringValueListener", "github.com/inkyblackness/shocked-client/viewmodel", null);
	StringValueNode = $pkg.StringValueNode = $newType(0, $kindStruct, "viewmodel.StringValueNode", "StringValueNode", "github.com/inkyblackness/shocked-client/viewmodel", function(label_, listeners_, value_, editable_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.label = "";
			this.listeners = sliceType$4.nil;
			this.value = "";
			this.editable = false;
			return;
		}
		this.label = label_;
		this.listeners = listeners_;
		this.value = value_;
		this.editable = editable_;
	});
	TableListener = $pkg.TableListener = $newType(4, $kindFunc, "viewmodel.TableListener", "TableListener", "github.com/inkyblackness/shocked-client/viewmodel", null);
	TableNode = $pkg.TableNode = $newType(0, $kindStruct, "viewmodel.TableNode", "TableNode", "github.com/inkyblackness/shocked-client/viewmodel", function(label_, listeners_, rows_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.label = "";
			this.listeners = sliceType$5.nil;
			this.rows = sliceType$6.nil;
			return;
		}
		this.label = label_;
		this.listeners = listeners_;
		this.rows = rows_;
	});
	ValueSelectionValuesListener = $pkg.ValueSelectionValuesListener = $newType(4, $kindFunc, "viewmodel.ValueSelectionValuesListener", "ValueSelectionValuesListener", "github.com/inkyblackness/shocked-client/viewmodel", null);
	ValueSelectionNode = $pkg.ValueSelectionNode = $newType(0, $kindStruct, "viewmodel.ValueSelectionNode", "ValueSelectionNode", "github.com/inkyblackness/shocked-client/viewmodel", function(label_, selected_, valuesListeners_, values_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.label = "";
			this.selected = ptrType$3.nil;
			this.valuesListeners = sliceType$7.nil;
			this.values = sliceType$3.nil;
			return;
		}
		this.label = label_;
		this.selected = selected_;
		this.valuesListeners = valuesListeners_;
		this.values = values_;
	});
	sliceType = $sliceType(ActionListener);
	sliceType$1 = $sliceType(BoolValueListener);
	ptrType = $ptrType(BoolValueNode);
	sliceType$2 = $sliceType(Node);
	ptrType$1 = $ptrType(ValueSelectionNode);
	sliceType$3 = $sliceType($String);
	sliceType$4 = $sliceType(StringValueListener);
	sliceType$5 = $sliceType(TableListener);
	ptrType$2 = $ptrType(ContainerNode);
	sliceType$6 = $sliceType(ptrType$2);
	ptrType$3 = $ptrType(StringValueNode);
	sliceType$7 = $sliceType(ValueSelectionValuesListener);
	ptrType$4 = $ptrType(ActionNode);
	mapType = $mapType($String, Node);
	ptrType$5 = $ptrType(SectionNode);
	ptrType$6 = $ptrType(SectionSelectionNode);
	ptrType$7 = $ptrType(TableNode);
	mapType$1 = $mapType($String, ptrType$5);
	NewActionNode = function(label) {
		var $ptr, label, node;
		node = new ActionNode.ptr(label, sliceType.nil);
		return node;
	};
	$pkg.NewActionNode = NewActionNode;
	ActionNode.ptr.prototype.Label = function() {
		var $ptr, node;
		node = this;
		return node.label;
	};
	ActionNode.prototype.Label = function() { return this.$val.Label(); };
	ActionNode.ptr.prototype.Specialize = function(visitor) {
		var $ptr, node, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; node = $f.node; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		$r = visitor.Action(node); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ActionNode.ptr.prototype.Specialize }; } $f.$ptr = $ptr; $f.node = node; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	ActionNode.prototype.Specialize = function(visitor) { return this.$val.Specialize(visitor); };
	ActionNode.ptr.prototype.Subscribe = function(listener) {
		var $ptr, listener, node;
		node = this;
		node.listeners = $append(node.listeners, listener);
	};
	ActionNode.prototype.Subscribe = function(listener) { return this.$val.Subscribe(listener); };
	ActionNode.ptr.prototype.Act = function() {
		var $ptr, _i, _ref, listener, node, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; listener = $f.listener; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		_ref = node.listeners;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			listener = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = listener(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ActionNode.ptr.prototype.Act }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.listener = listener; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;
	};
	ActionNode.prototype.Act = function() { return this.$val.Act(); };
	NewBoolValueNode = function(label, value) {
		var $ptr, label, node, value;
		node = new BoolValueNode.ptr(label, sliceType$1.nil, value);
		return node;
	};
	$pkg.NewBoolValueNode = NewBoolValueNode;
	BoolValueNode.ptr.prototype.Label = function() {
		var $ptr, node;
		node = this;
		return node.label;
	};
	BoolValueNode.prototype.Label = function() { return this.$val.Label(); };
	BoolValueNode.ptr.prototype.Specialize = function(visitor) {
		var $ptr, node, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; node = $f.node; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		$r = visitor.BoolValue(node); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BoolValueNode.ptr.prototype.Specialize }; } $f.$ptr = $ptr; $f.node = node; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	BoolValueNode.prototype.Specialize = function(visitor) { return this.$val.Specialize(visitor); };
	BoolValueNode.ptr.prototype.Subscribe = function(listener) {
		var $ptr, listener, node;
		node = this;
		node.listeners = $append(node.listeners, listener);
	};
	BoolValueNode.prototype.Subscribe = function(listener) { return this.$val.Subscribe(listener); };
	BoolValueNode.ptr.prototype.Get = function() {
		var $ptr, node;
		node = this;
		return node.value;
	};
	BoolValueNode.prototype.Get = function() { return this.$val.Get(); };
	BoolValueNode.ptr.prototype.Set = function(value) {
		var $ptr, _i, _ref, listener, node, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; listener = $f.listener; node = $f.node; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		node.value = value;
		_ref = node.listeners;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			listener = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = listener(value); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: BoolValueNode.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.listener = listener; $f.node = node; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	BoolValueNode.prototype.Set = function(value) { return this.$val.Set(value); };
	ContainerNode.ptr.prototype.Label = function() {
		var $ptr, node;
		node = this;
		return node.label;
	};
	ContainerNode.prototype.Label = function() { return this.$val.Label(); };
	ContainerNode.ptr.prototype.Specialize = function(visitor) {
		var $ptr, node, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; node = $f.node; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		$r = visitor.Container(node); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ContainerNode.ptr.prototype.Specialize }; } $f.$ptr = $ptr; $f.node = node; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	ContainerNode.prototype.Specialize = function(visitor) { return this.$val.Specialize(visitor); };
	ContainerNode.ptr.prototype.Get = function() {
		var $ptr, node;
		node = this;
		return node.nodes;
	};
	ContainerNode.prototype.Get = function() { return this.$val.Get(); };
	NewSectionNode = function(label, nodes, available) {
		var $ptr, available, label, node, nodes;
		node = new SectionNode.ptr(label, available, nodes);
		return node;
	};
	$pkg.NewSectionNode = NewSectionNode;
	SectionNode.ptr.prototype.Label = function() {
		var $ptr, node;
		node = this;
		return node.label;
	};
	SectionNode.prototype.Label = function() { return this.$val.Label(); };
	SectionNode.ptr.prototype.Specialize = function(visitor) {
		var $ptr, node, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; node = $f.node; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		$r = visitor.Section(node); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SectionNode.ptr.prototype.Specialize }; } $f.$ptr = $ptr; $f.node = node; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	SectionNode.prototype.Specialize = function(visitor) { return this.$val.Specialize(visitor); };
	SectionNode.ptr.prototype.Available = function() {
		var $ptr, node;
		node = this;
		return node.available;
	};
	SectionNode.prototype.Available = function() { return this.$val.Available(); };
	SectionNode.ptr.prototype.Get = function() {
		var $ptr, node;
		node = this;
		return node.nodes;
	};
	SectionNode.prototype.Get = function() { return this.$val.Get(); };
	NewSectionSelectionNode = function(label, sections, selected) {
		var $ptr, _entry, _i, _keys, _ref, label, node, section, sections, selected;
		node = new SectionSelectionNode.ptr(label, ptrType$1.nil, sections);
		node.selected = NewValueSelectionNode(label, node.availableSectionKeys(), selected);
		_ref = sections;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			section = _entry.v;
			section.Available().Subscribe((function $b(param) {
				var $ptr, param, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; param = $f.param; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				$r = node.selected.SetValues(node.availableSectionKeys()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.param = param; $f.$s = $s; $f.$r = $r; return $f;
			}));
			_i++;
		}
		return node;
	};
	$pkg.NewSectionSelectionNode = NewSectionSelectionNode;
	SectionSelectionNode.ptr.prototype.Label = function() {
		var $ptr, node;
		node = this;
		return node.label;
	};
	SectionSelectionNode.prototype.Label = function() { return this.$val.Label(); };
	SectionSelectionNode.ptr.prototype.Specialize = function(visitor) {
		var $ptr, node, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; node = $f.node; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		$r = visitor.SectionSelection(node); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SectionSelectionNode.ptr.prototype.Specialize }; } $f.$ptr = $ptr; $f.node = node; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	SectionSelectionNode.prototype.Specialize = function(visitor) { return this.$val.Specialize(visitor); };
	SectionSelectionNode.ptr.prototype.Sections = function() {
		var $ptr, node;
		node = this;
		return node.sections;
	};
	SectionSelectionNode.prototype.Sections = function() { return this.$val.Sections(); };
	SectionSelectionNode.ptr.prototype.Selection = function() {
		var $ptr, node;
		node = this;
		return node.selected;
	};
	SectionSelectionNode.prototype.Selection = function() { return this.$val.Selection(); };
	SectionSelectionNode.ptr.prototype.availableSectionKeys = function() {
		var $ptr, _entry, _i, _keys, _ref, key, node, section, values;
		node = this;
		values = sliceType$3.nil;
		_ref = node.sections;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			key = _entry.k;
			section = _entry.v;
			if (section.Available().Get()) {
				values = $append(values, key);
			}
			_i++;
		}
		return values;
	};
	SectionSelectionNode.prototype.availableSectionKeys = function() { return this.$val.availableSectionKeys(); };
	NewStringValueNode = function(label, value) {
		var $ptr, label, node, value;
		node = new StringValueNode.ptr(label, sliceType$4.nil, value, false);
		return node;
	};
	$pkg.NewStringValueNode = NewStringValueNode;
	NewEditableStringValueNode = function(label, value) {
		var $ptr, label, node, value;
		node = NewStringValueNode(label, value);
		node.editable = true;
		return node;
	};
	$pkg.NewEditableStringValueNode = NewEditableStringValueNode;
	StringValueNode.ptr.prototype.Label = function() {
		var $ptr, node;
		node = this;
		return node.label;
	};
	StringValueNode.prototype.Label = function() { return this.$val.Label(); };
	StringValueNode.ptr.prototype.Specialize = function(visitor) {
		var $ptr, node, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; node = $f.node; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		$r = visitor.StringValue(node); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: StringValueNode.ptr.prototype.Specialize }; } $f.$ptr = $ptr; $f.node = node; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	StringValueNode.prototype.Specialize = function(visitor) { return this.$val.Specialize(visitor); };
	StringValueNode.ptr.prototype.Editable = function() {
		var $ptr, node;
		node = this;
		return node.editable;
	};
	StringValueNode.prototype.Editable = function() { return this.$val.Editable(); };
	StringValueNode.ptr.prototype.Subscribe = function(listener) {
		var $ptr, listener, node;
		node = this;
		node.listeners = $append(node.listeners, listener);
	};
	StringValueNode.prototype.Subscribe = function(listener) { return this.$val.Subscribe(listener); };
	StringValueNode.ptr.prototype.Get = function() {
		var $ptr, node;
		node = this;
		return node.value;
	};
	StringValueNode.prototype.Get = function() { return this.$val.Get(); };
	StringValueNode.ptr.prototype.Set = function(value) {
		var $ptr, _i, _ref, listener, node, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; listener = $f.listener; node = $f.node; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		node.value = value;
		_ref = node.listeners;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			listener = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = listener(value); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: StringValueNode.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.listener = listener; $f.node = node; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	StringValueNode.prototype.Set = function(value) { return this.$val.Set(value); };
	TableNode.ptr.prototype.Label = function() {
		var $ptr, node;
		node = this;
		return node.label;
	};
	TableNode.prototype.Label = function() { return this.$val.Label(); };
	TableNode.ptr.prototype.Specialize = function(visitor) {
		var $ptr, node, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; node = $f.node; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		$r = visitor.Table(node); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TableNode.ptr.prototype.Specialize }; } $f.$ptr = $ptr; $f.node = node; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	TableNode.prototype.Specialize = function(visitor) { return this.$val.Specialize(visitor); };
	TableNode.ptr.prototype.Subscribe = function(listener) {
		var $ptr, listener, node;
		node = this;
		node.listeners = $append(node.listeners, listener);
	};
	TableNode.prototype.Subscribe = function(listener) { return this.$val.Subscribe(listener); };
	TableNode.ptr.prototype.Get = function() {
		var $ptr, node;
		node = this;
		return node.rows;
	};
	TableNode.prototype.Get = function() { return this.$val.Get(); };
	TableNode.ptr.prototype.Set = function(rows) {
		var $ptr, _i, _ref, listener, newRows, node, rows, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; listener = $f.listener; newRows = $f.newRows; node = $f.node; rows = $f.rows; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		newRows = rows;
		node.rows = newRows;
		_ref = node.listeners;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			listener = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = listener(newRows); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TableNode.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.listener = listener; $f.newRows = newRows; $f.node = node; $f.rows = rows; $f.$s = $s; $f.$r = $r; return $f;
	};
	TableNode.prototype.Set = function(rows) { return this.$val.Set(rows); };
	NewValueSelectionNode = function(label, values, selected) {
		var $ptr, label, node, selected, values;
		node = new ValueSelectionNode.ptr(label, NewStringValueNode("Selected", selected), sliceType$7.nil, values);
		return node;
	};
	$pkg.NewValueSelectionNode = NewValueSelectionNode;
	ValueSelectionNode.ptr.prototype.Label = function() {
		var $ptr, node;
		node = this;
		return node.label;
	};
	ValueSelectionNode.prototype.Label = function() { return this.$val.Label(); };
	ValueSelectionNode.ptr.prototype.Specialize = function(visitor) {
		var $ptr, node, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; node = $f.node; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		$r = visitor.ValueSelection(node); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ValueSelectionNode.ptr.prototype.Specialize }; } $f.$ptr = $ptr; $f.node = node; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	ValueSelectionNode.prototype.Specialize = function(visitor) { return this.$val.Specialize(visitor); };
	ValueSelectionNode.ptr.prototype.Subscribe = function(listener) {
		var $ptr, listener, node;
		node = this;
		node.valuesListeners = $append(node.valuesListeners, listener);
	};
	ValueSelectionNode.prototype.Subscribe = function(listener) { return this.$val.Subscribe(listener); };
	ValueSelectionNode.ptr.prototype.Selected = function() {
		var $ptr, node;
		node = this;
		return node.selected;
	};
	ValueSelectionNode.prototype.Selected = function() { return this.$val.Selected(); };
	ValueSelectionNode.ptr.prototype.Values = function() {
		var $ptr, node;
		node = this;
		return node.values;
	};
	ValueSelectionNode.prototype.Values = function() { return this.$val.Values(); };
	ValueSelectionNode.ptr.prototype.SetValues = function(values) {
		var $ptr, _i, _i$1, _ref, _ref$1, found, listener, newValues, node, selected, value, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; found = $f.found; listener = $f.listener; newValues = $f.newValues; node = $f.node; selected = $f.selected; value = $f.value; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		node = this;
		newValues = values;
		node.values = newValues;
		selected = node.selected.Get();
		found = false;
		_ref = newValues;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			value = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (value === selected) {
				found = true;
			}
			_i++;
		}
		/* */ if (!found) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!found) { */ case 1:
			$r = node.selected.Set(""); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_ref$1 = node.valuesListeners;
		_i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 5; continue; }
			listener = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			$r = listener(newValues); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$1++;
		/* } */ $s = 4; continue; case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ValueSelectionNode.ptr.prototype.SetValues }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.found = found; $f.listener = listener; $f.newValues = newValues; $f.node = node; $f.selected = selected; $f.value = value; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	ValueSelectionNode.prototype.SetValues = function(values) { return this.$val.SetValues(values); };
	ptrType$4.methods = [{prop: "Label", name: "Label", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Specialize", name: "Specialize", pkg: "", typ: $funcType([NodeVisitor], [], false)}, {prop: "Subscribe", name: "Subscribe", pkg: "", typ: $funcType([ActionListener], [], false)}, {prop: "Act", name: "Act", pkg: "", typ: $funcType([], [], false)}];
	ptrType.methods = [{prop: "Label", name: "Label", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Specialize", name: "Specialize", pkg: "", typ: $funcType([NodeVisitor], [], false)}, {prop: "Subscribe", name: "Subscribe", pkg: "", typ: $funcType([BoolValueListener], [], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Bool], [], false)}];
	ptrType$2.methods = [{prop: "Label", name: "Label", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Specialize", name: "Specialize", pkg: "", typ: $funcType([NodeVisitor], [], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [mapType], false)}];
	ptrType$5.methods = [{prop: "Label", name: "Label", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Specialize", name: "Specialize", pkg: "", typ: $funcType([NodeVisitor], [], false)}, {prop: "Available", name: "Available", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [sliceType$2], false)}];
	ptrType$6.methods = [{prop: "Label", name: "Label", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Specialize", name: "Specialize", pkg: "", typ: $funcType([NodeVisitor], [], false)}, {prop: "Sections", name: "Sections", pkg: "", typ: $funcType([], [mapType$1], false)}, {prop: "Selection", name: "Selection", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "availableSectionKeys", name: "availableSectionKeys", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: $funcType([], [sliceType$3], false)}];
	ptrType$3.methods = [{prop: "Label", name: "Label", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Specialize", name: "Specialize", pkg: "", typ: $funcType([NodeVisitor], [], false)}, {prop: "Editable", name: "Editable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Subscribe", name: "Subscribe", pkg: "", typ: $funcType([StringValueListener], [], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$7.methods = [{prop: "Label", name: "Label", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Specialize", name: "Specialize", pkg: "", typ: $funcType([NodeVisitor], [], false)}, {prop: "Subscribe", name: "Subscribe", pkg: "", typ: $funcType([TableListener], [], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [sliceType$6], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([sliceType$6], [], false)}];
	ptrType$1.methods = [{prop: "Label", name: "Label", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Specialize", name: "Specialize", pkg: "", typ: $funcType([NodeVisitor], [], false)}, {prop: "Subscribe", name: "Subscribe", pkg: "", typ: $funcType([ValueSelectionValuesListener], [], false)}, {prop: "Selected", name: "Selected", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "Values", name: "Values", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "SetValues", name: "SetValues", pkg: "", typ: $funcType([sliceType$3], [], false)}];
	ActionListener.init([], [], false);
	ActionNode.init([{prop: "label", name: "label", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: $String, tag: ""}, {prop: "listeners", name: "listeners", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: sliceType, tag: ""}]);
	BoolValueListener.init([$Bool], [], false);
	BoolValueNode.init([{prop: "label", name: "label", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: $String, tag: ""}, {prop: "listeners", name: "listeners", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: sliceType$1, tag: ""}, {prop: "value", name: "value", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: $Bool, tag: ""}]);
	ContainerNode.init([{prop: "label", name: "label", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: $String, tag: ""}, {prop: "nodes", name: "nodes", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: mapType, tag: ""}]);
	Node.init([{prop: "Label", name: "Label", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Specialize", name: "Specialize", pkg: "", typ: $funcType([NodeVisitor], [], false)}]);
	NodeVisitor.init([{prop: "Action", name: "Action", pkg: "", typ: $funcType([ptrType$4], [], false)}, {prop: "BoolValue", name: "BoolValue", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "Container", name: "Container", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "Section", name: "Section", pkg: "", typ: $funcType([ptrType$5], [], false)}, {prop: "SectionSelection", name: "SectionSelection", pkg: "", typ: $funcType([ptrType$6], [], false)}, {prop: "StringValue", name: "StringValue", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "Table", name: "Table", pkg: "", typ: $funcType([ptrType$7], [], false)}, {prop: "ValueSelection", name: "ValueSelection", pkg: "", typ: $funcType([ptrType$1], [], false)}]);
	SectionNode.init([{prop: "label", name: "label", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: $String, tag: ""}, {prop: "available", name: "available", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: ptrType, tag: ""}, {prop: "nodes", name: "nodes", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: sliceType$2, tag: ""}]);
	SectionSelectionNode.init([{prop: "label", name: "label", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: $String, tag: ""}, {prop: "selected", name: "selected", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: ptrType$1, tag: ""}, {prop: "sections", name: "sections", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: mapType$1, tag: ""}]);
	StringValueListener.init([$String], [], false);
	StringValueNode.init([{prop: "label", name: "label", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: $String, tag: ""}, {prop: "listeners", name: "listeners", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: sliceType$4, tag: ""}, {prop: "value", name: "value", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: $String, tag: ""}, {prop: "editable", name: "editable", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: $Bool, tag: ""}]);
	TableListener.init([sliceType$6], [], false);
	TableNode.init([{prop: "label", name: "label", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: $String, tag: ""}, {prop: "listeners", name: "listeners", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: sliceType$5, tag: ""}, {prop: "rows", name: "rows", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: sliceType$6, tag: ""}]);
	ValueSelectionValuesListener.init([sliceType$3], [], false);
	ValueSelectionNode.init([{prop: "label", name: "label", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: $String, tag: ""}, {prop: "selected", name: "selected", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: ptrType$3, tag: ""}, {prop: "valuesListeners", name: "valuesListeners", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: sliceType$7, tag: ""}, {prop: "values", name: "values", pkg: "github.com/inkyblackness/shocked-client/viewmodel", typ: sliceType$3, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/inkyblackness/shocked-client/env"] = (function() {
	var $pkg = {}, $init, opengl, viewmodel, AbstractOpenGlWindow, RenderCallback, MouseMoveCallback, MouseButtonCallback, MouseScrollCallback, OpenGlWindow, ptrType, InitAbstractOpenGlWindow;
	opengl = $packages["github.com/inkyblackness/shocked-client/opengl"];
	viewmodel = $packages["github.com/inkyblackness/shocked-client/viewmodel"];
	AbstractOpenGlWindow = $pkg.AbstractOpenGlWindow = $newType(0, $kindStruct, "env.AbstractOpenGlWindow", "AbstractOpenGlWindow", "github.com/inkyblackness/shocked-client/env", function(CallRender_, CallOnMouseMove_, CallOnMouseButtonUp_, CallOnMouseButtonDown_, CallOnMouseScroll_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CallRender = $throwNilPointerError;
			this.CallOnMouseMove = $throwNilPointerError;
			this.CallOnMouseButtonUp = $throwNilPointerError;
			this.CallOnMouseButtonDown = $throwNilPointerError;
			this.CallOnMouseScroll = $throwNilPointerError;
			return;
		}
		this.CallRender = CallRender_;
		this.CallOnMouseMove = CallOnMouseMove_;
		this.CallOnMouseButtonUp = CallOnMouseButtonUp_;
		this.CallOnMouseButtonDown = CallOnMouseButtonDown_;
		this.CallOnMouseScroll = CallOnMouseScroll_;
	});
	RenderCallback = $pkg.RenderCallback = $newType(4, $kindFunc, "env.RenderCallback", "RenderCallback", "github.com/inkyblackness/shocked-client/env", null);
	MouseMoveCallback = $pkg.MouseMoveCallback = $newType(4, $kindFunc, "env.MouseMoveCallback", "MouseMoveCallback", "github.com/inkyblackness/shocked-client/env", null);
	MouseButtonCallback = $pkg.MouseButtonCallback = $newType(4, $kindFunc, "env.MouseButtonCallback", "MouseButtonCallback", "github.com/inkyblackness/shocked-client/env", null);
	MouseScrollCallback = $pkg.MouseScrollCallback = $newType(4, $kindFunc, "env.MouseScrollCallback", "MouseScrollCallback", "github.com/inkyblackness/shocked-client/env", null);
	OpenGlWindow = $pkg.OpenGlWindow = $newType(8, $kindInterface, "env.OpenGlWindow", "OpenGlWindow", "github.com/inkyblackness/shocked-client/env", null);
	ptrType = $ptrType(AbstractOpenGlWindow);
	InitAbstractOpenGlWindow = function() {
		var $ptr;
		return new AbstractOpenGlWindow.ptr((function() {
			var $ptr;
		}), (function(param, param$1) {
			var $ptr, param, param$1;
		}), (function(param, param$1) {
			var $ptr, param, param$1;
		}), (function(param, param$1) {
			var $ptr, param, param$1;
		}), $throwNilPointerError);
	};
	$pkg.InitAbstractOpenGlWindow = InitAbstractOpenGlWindow;
	AbstractOpenGlWindow.ptr.prototype.OnRender = function(callback) {
		var $ptr, callback, window;
		window = this;
		window.CallRender = callback;
	};
	AbstractOpenGlWindow.prototype.OnRender = function(callback) { return this.$val.OnRender(callback); };
	AbstractOpenGlWindow.ptr.prototype.OnMouseMove = function(callback) {
		var $ptr, callback, window;
		window = this;
		window.CallOnMouseMove = callback;
	};
	AbstractOpenGlWindow.prototype.OnMouseMove = function(callback) { return this.$val.OnMouseMove(callback); };
	AbstractOpenGlWindow.ptr.prototype.OnMouseButtonDown = function(callback) {
		var $ptr, callback, window;
		window = this;
		window.CallOnMouseButtonDown = callback;
	};
	AbstractOpenGlWindow.prototype.OnMouseButtonDown = function(callback) { return this.$val.OnMouseButtonDown(callback); };
	AbstractOpenGlWindow.ptr.prototype.OnMouseButtonUp = function(callback) {
		var $ptr, callback, window;
		window = this;
		window.CallOnMouseButtonUp = callback;
	};
	AbstractOpenGlWindow.prototype.OnMouseButtonUp = function(callback) { return this.$val.OnMouseButtonUp(callback); };
	AbstractOpenGlWindow.ptr.prototype.OnMouseScroll = function(callback) {
		var $ptr, callback, window;
		window = this;
		window.CallOnMouseScroll = callback;
	};
	AbstractOpenGlWindow.prototype.OnMouseScroll = function(callback) { return this.$val.OnMouseScroll(callback); };
	ptrType.methods = [{prop: "OnRender", name: "OnRender", pkg: "", typ: $funcType([RenderCallback], [], false)}, {prop: "OnMouseMove", name: "OnMouseMove", pkg: "", typ: $funcType([MouseMoveCallback], [], false)}, {prop: "OnMouseButtonDown", name: "OnMouseButtonDown", pkg: "", typ: $funcType([MouseButtonCallback], [], false)}, {prop: "OnMouseButtonUp", name: "OnMouseButtonUp", pkg: "", typ: $funcType([MouseButtonCallback], [], false)}, {prop: "OnMouseScroll", name: "OnMouseScroll", pkg: "", typ: $funcType([MouseScrollCallback], [], false)}];
	AbstractOpenGlWindow.init([{prop: "CallRender", name: "CallRender", pkg: "", typ: RenderCallback, tag: ""}, {prop: "CallOnMouseMove", name: "CallOnMouseMove", pkg: "", typ: MouseMoveCallback, tag: ""}, {prop: "CallOnMouseButtonUp", name: "CallOnMouseButtonUp", pkg: "", typ: MouseButtonCallback, tag: ""}, {prop: "CallOnMouseButtonDown", name: "CallOnMouseButtonDown", pkg: "", typ: MouseButtonCallback, tag: ""}, {prop: "CallOnMouseScroll", name: "CallOnMouseScroll", pkg: "", typ: MouseScrollCallback, tag: ""}]);
	RenderCallback.init([], [], false);
	MouseMoveCallback.init([$Float32, $Float32], [], false);
	MouseButtonCallback.init([$Uint32, $Uint32], [], false);
	MouseScrollCallback.init([$Float32, $Float32], [], false);
	OpenGlWindow.init([{prop: "OnMouseButtonDown", name: "OnMouseButtonDown", pkg: "", typ: $funcType([MouseButtonCallback], [], false)}, {prop: "OnMouseButtonUp", name: "OnMouseButtonUp", pkg: "", typ: $funcType([MouseButtonCallback], [], false)}, {prop: "OnMouseMove", name: "OnMouseMove", pkg: "", typ: $funcType([MouseMoveCallback], [], false)}, {prop: "OnMouseScroll", name: "OnMouseScroll", pkg: "", typ: $funcType([MouseScrollCallback], [], false)}, {prop: "OnRender", name: "OnRender", pkg: "", typ: $funcType([RenderCallback], [], false)}, {prop: "OpenGl", name: "OpenGl", pkg: "", typ: $funcType([], [opengl.OpenGl], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int, $Int], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = opengl.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = viewmodel.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/inkyblackness/shocked-client/util"] = (function() {
	var $pkg = {}, $init, ValueUnifier, ptrType, mapType, NewValueUnifier;
	ValueUnifier = $pkg.ValueUnifier = $newType(0, $kindStruct, "util.ValueUnifier", "ValueUnifier", "github.com/inkyblackness/shocked-client/util", function(defaultValue_, values_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.defaultValue = $ifaceNil;
			this.values = false;
			return;
		}
		this.defaultValue = defaultValue_;
		this.values = values_;
	});
	ptrType = $ptrType(ValueUnifier);
	mapType = $mapType($emptyInterface, $Int);
	NewValueUnifier = function(defaultValue) {
		var $ptr, defaultValue;
		return new ValueUnifier.ptr(defaultValue, {});
	};
	$pkg.NewValueUnifier = NewValueUnifier;
	ValueUnifier.ptr.prototype.Value = function() {
		var $ptr, _entry, _i, _keys, _ref, key, result, unifier;
		result = $ifaceNil;
		unifier = this;
		result = unifier.defaultValue;
		if ($keys(unifier.values).length === 1) {
			_ref = unifier.values;
			_i = 0;
			_keys = $keys(_ref);
			while (true) {
				if (!(_i < _keys.length)) { break; }
				_entry = _ref[_keys[_i]];
				if (_entry === undefined) {
					_i++;
					continue;
				}
				key = _entry.k;
				result = key;
				_i++;
			}
		}
		return result;
	};
	ValueUnifier.prototype.Value = function() { return this.$val.Value(); };
	ValueUnifier.ptr.prototype.Add = function(value) {
		var $ptr, _entry, _key, unifier, value;
		unifier = this;
		_key = value; (unifier.values || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: (_entry = unifier.values[$emptyInterface.keyFor(value)], _entry !== undefined ? _entry.v : 0) + (1) >> 0 };
	};
	ValueUnifier.prototype.Add = function(value) { return this.$val.Add(value); };
	ptrType.methods = [{prop: "Value", name: "Value", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	ValueUnifier.init([{prop: "defaultValue", name: "defaultValue", pkg: "github.com/inkyblackness/shocked-client/util", typ: $emptyInterface, tag: ""}, {prop: "values", name: "values", pkg: "github.com/inkyblackness/shocked-client/util", typ: mapType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/inkyblackness/shocked-client/editor"] = (function() {
	var $pkg = {}, $init, bytes, base64, json, fmt, mgl32, camera, display, model$1, env, graphics, opengl, util, viewmodel, model, os, strconv, time, FailureFunc, DataStore, MainApplication, RestDataStore, RestTransport, TilesViewModel, ViewModel, ptrType, ptrType$1, ptrType$2, sliceType, ptrType$3, sliceType$1, sliceType$2, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, sliceType$3, sliceType$4, arrayType, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, sliceType$5, sliceType$6, sliceType$7, ptrType$18, ptrType$19, sliceType$8, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, funcType, funcType$1, funcType$2, funcType$3, funcType$4, funcType$5, ptrType$25, funcType$6, funcType$7, funcType$8, ptrType$26, funcType$9, funcType$10, funcType$11, funcType$12, ptrType$27, ptrType$28, sliceType$9, NewMainApplication, NewRestDataStore, intStringList, NewTilesViewModel, NewViewModel;
	bytes = $packages["bytes"];
	base64 = $packages["encoding/base64"];
	json = $packages["encoding/json"];
	fmt = $packages["fmt"];
	mgl32 = $packages["github.com/go-gl/mathgl/mgl32"];
	camera = $packages["github.com/inkyblackness/shocked-client/editor/camera"];
	display = $packages["github.com/inkyblackness/shocked-client/editor/display"];
	model$1 = $packages["github.com/inkyblackness/shocked-client/editor/model"];
	env = $packages["github.com/inkyblackness/shocked-client/env"];
	graphics = $packages["github.com/inkyblackness/shocked-client/graphics"];
	opengl = $packages["github.com/inkyblackness/shocked-client/opengl"];
	util = $packages["github.com/inkyblackness/shocked-client/util"];
	viewmodel = $packages["github.com/inkyblackness/shocked-client/viewmodel"];
	model = $packages["github.com/inkyblackness/shocked-model"];
	os = $packages["os"];
	strconv = $packages["strconv"];
	time = $packages["time"];
	FailureFunc = $pkg.FailureFunc = $newType(4, $kindFunc, "editor.FailureFunc", "FailureFunc", "github.com/inkyblackness/shocked-client/editor", null);
	DataStore = $pkg.DataStore = $newType(8, $kindInterface, "editor.DataStore", "DataStore", "github.com/inkyblackness/shocked-client/editor", null);
	MainApplication = $pkg.MainApplication = $newType(0, $kindStruct, "editor.MainApplication", "MainApplication", "github.com/inkyblackness/shocked-client/editor", function(lastElapsedTick_, elapsedMSec_, store_, viewModel_, viewModelUpdating_, glWindow_, gl_, mouseX_, mouseY_, mouseDragged_, mouseMoveCapture_, view_, levels_, activeLevelID_, paletteTexture_, levelTextures_, textureData_, textureStore_, tileMap_, gridRenderable_, tileTextureMapRenderable_, tileGridMapRenderable_, tileSelectionRenderable_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lastElapsedTick = new time.Time.ptr(new $Int64(0, 0), 0, ptrType.nil);
			this.elapsedMSec = new $Int64(0, 0);
			this.store = $ifaceNil;
			this.viewModel = ptrType$1.nil;
			this.viewModelUpdating = false;
			this.glWindow = $ifaceNil;
			this.gl = $ifaceNil;
			this.mouseX = 0;
			this.mouseY = 0;
			this.mouseDragged = false;
			this.mouseMoveCapture = $throwNilPointerError;
			this.view = ptrType$2.nil;
			this.levels = sliceType.nil;
			this.activeLevelID = 0;
			this.paletteTexture = ptrType$3.nil;
			this.levelTextures = sliceType$1.nil;
			this.textureData = sliceType$2.nil;
			this.textureStore = ptrType$4.nil;
			this.tileMap = ptrType$5.nil;
			this.gridRenderable = ptrType$6.nil;
			this.tileTextureMapRenderable = ptrType$7.nil;
			this.tileGridMapRenderable = ptrType$8.nil;
			this.tileSelectionRenderable = ptrType$9.nil;
			return;
		}
		this.lastElapsedTick = lastElapsedTick_;
		this.elapsedMSec = elapsedMSec_;
		this.store = store_;
		this.viewModel = viewModel_;
		this.viewModelUpdating = viewModelUpdating_;
		this.glWindow = glWindow_;
		this.gl = gl_;
		this.mouseX = mouseX_;
		this.mouseY = mouseY_;
		this.mouseDragged = mouseDragged_;
		this.mouseMoveCapture = mouseMoveCapture_;
		this.view = view_;
		this.levels = levels_;
		this.activeLevelID = activeLevelID_;
		this.paletteTexture = paletteTexture_;
		this.levelTextures = levelTextures_;
		this.textureData = textureData_;
		this.textureStore = textureStore_;
		this.tileMap = tileMap_;
		this.gridRenderable = gridRenderable_;
		this.tileTextureMapRenderable = tileTextureMapRenderable_;
		this.tileGridMapRenderable = tileGridMapRenderable_;
		this.tileSelectionRenderable = tileSelectionRenderable_;
	});
	RestDataStore = $pkg.RestDataStore = $newType(0, $kindStruct, "editor.RestDataStore", "RestDataStore", "github.com/inkyblackness/shocked-client/editor", function(transport_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.transport = $ifaceNil;
			return;
		}
		this.transport = transport_;
	});
	RestTransport = $pkg.RestTransport = $newType(8, $kindInterface, "editor.RestTransport", "RestTransport", "github.com/inkyblackness/shocked-client/editor", null);
	TilesViewModel = $pkg.TilesViewModel = $newType(0, $kindStruct, "editor.TilesViewModel", "TilesViewModel", "github.com/inkyblackness/shocked-client/editor", function(root_, tileType_, floorHeight_, ceilingHeight_, slopeHeight_, slopeControl_, floorTexture_, ceilingTexture_, wallTexture_, floorTextureRotations_, ceilingTextureRotations_, useAdjacentWallTexture_, wallTextureOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.root = ptrType$18.nil;
			this.tileType = ptrType$19.nil;
			this.floorHeight = ptrType$19.nil;
			this.ceilingHeight = ptrType$19.nil;
			this.slopeHeight = ptrType$19.nil;
			this.slopeControl = ptrType$19.nil;
			this.floorTexture = ptrType$19.nil;
			this.ceilingTexture = ptrType$19.nil;
			this.wallTexture = ptrType$19.nil;
			this.floorTextureRotations = ptrType$19.nil;
			this.ceilingTextureRotations = ptrType$19.nil;
			this.useAdjacentWallTexture = ptrType$19.nil;
			this.wallTextureOffset = ptrType$19.nil;
			return;
		}
		this.root = root_;
		this.tileType = tileType_;
		this.floorHeight = floorHeight_;
		this.ceilingHeight = ceilingHeight_;
		this.slopeHeight = slopeHeight_;
		this.slopeControl = slopeControl_;
		this.floorTexture = floorTexture_;
		this.ceilingTexture = ceilingTexture_;
		this.wallTexture = wallTexture_;
		this.floorTextureRotations = floorTextureRotations_;
		this.ceilingTextureRotations = ceilingTextureRotations_;
		this.useAdjacentWallTexture = useAdjacentWallTexture_;
		this.wallTextureOffset = wallTextureOffset_;
	});
	ViewModel = $pkg.ViewModel = $newType(0, $kindStruct, "editor.ViewModel", "ViewModel", "github.com/inkyblackness/shocked-client/editor", function(root_, mainSection_, projects_, newProjectID_, createProject_, textureCount_, levels_, levelIsRealWorld_, levelTextureIndex_, levelTextureID_, levelTextureIDs_, pointerCoordinate_, tiles_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.root = ptrType$18.nil;
			this.mainSection = ptrType$20.nil;
			this.projects = ptrType$19.nil;
			this.newProjectID = ptrType$21.nil;
			this.createProject = ptrType$22.nil;
			this.textureCount = ptrType$21.nil;
			this.levels = ptrType$19.nil;
			this.levelIsRealWorld = ptrType$23.nil;
			this.levelTextureIndex = ptrType$19.nil;
			this.levelTextureID = ptrType$19.nil;
			this.levelTextureIDs = sliceType$1.nil;
			this.pointerCoordinate = ptrType$21.nil;
			this.tiles = ptrType$24.nil;
			return;
		}
		this.root = root_;
		this.mainSection = mainSection_;
		this.projects = projects_;
		this.newProjectID = newProjectID_;
		this.createProject = createProject_;
		this.textureCount = textureCount_;
		this.levels = levels_;
		this.levelIsRealWorld = levelIsRealWorld_;
		this.levelTextureIndex = levelTextureIndex_;
		this.levelTextureID = levelTextureID_;
		this.levelTextureIDs = levelTextureIDs_;
		this.pointerCoordinate = pointerCoordinate_;
		this.tiles = tiles_;
	});
	ptrType = $ptrType(time.Location);
	ptrType$1 = $ptrType(ViewModel);
	ptrType$2 = $ptrType(camera.LimitedCamera);
	sliceType = $sliceType(model.Level);
	ptrType$3 = $ptrType(graphics.PaletteTexture);
	sliceType$1 = $sliceType($Int);
	sliceType$2 = $sliceType(model.Texture);
	ptrType$4 = $ptrType(model$1.BufferedTextureStore);
	ptrType$5 = $ptrType(model$1.TileMap);
	ptrType$6 = $ptrType(display.GridRenderable);
	ptrType$7 = $ptrType(display.TileTextureMapRenderable);
	ptrType$8 = $ptrType(display.TileGridMapRenderable);
	ptrType$9 = $ptrType(display.TileSelectionRenderable);
	ptrType$10 = $ptrType($Int);
	ptrType$11 = $ptrType(ptrType$10);
	sliceType$3 = $sliceType($String);
	sliceType$4 = $sliceType($emptyInterface);
	arrayType = $arrayType(model.Color, 256);
	ptrType$12 = $ptrType(model.TileType);
	ptrType$13 = $ptrType(model.HeightUnit);
	ptrType$14 = $ptrType(model.SlopeControl);
	ptrType$15 = $ptrType(model.CalculatedWallHeights);
	ptrType$16 = $ptrType(model.RealWorldTileProperties);
	ptrType$17 = $ptrType($Bool);
	sliceType$5 = $sliceType(model.Identifiable);
	sliceType$6 = $sliceType(model.Tile);
	sliceType$7 = $sliceType(sliceType$6);
	ptrType$18 = $ptrType(viewmodel.SectionNode);
	ptrType$19 = $ptrType(viewmodel.ValueSelectionNode);
	sliceType$8 = $sliceType(viewmodel.Node);
	ptrType$20 = $ptrType(viewmodel.SectionSelectionNode);
	ptrType$21 = $ptrType(viewmodel.StringValueNode);
	ptrType$22 = $ptrType(viewmodel.ActionNode);
	ptrType$23 = $ptrType(viewmodel.BoolValueNode);
	ptrType$24 = $ptrType(TilesViewModel);
	funcType = $funcType([sliceType$1], [], false);
	funcType$1 = $funcType([sliceType], [], false);
	funcType$2 = $funcType([], [], false);
	funcType$3 = $funcType([arrayType], [], false);
	funcType$4 = $funcType([sliceType$3], [], false);
	funcType$5 = $funcType([model.TileProperties], [], false);
	ptrType$25 = $ptrType(model.RawBitmap);
	funcType$6 = $funcType([ptrType$25], [], false);
	funcType$7 = $funcType([sliceType$2], [], false);
	funcType$8 = $funcType([model.Tiles], [], false);
	ptrType$26 = $ptrType(model.TileProperties);
	funcType$9 = $funcType([ptrType$26], [], false);
	funcType$10 = $funcType([ptrType$26], [ptrType$11], false);
	funcType$11 = $funcType([$String], [], false);
	funcType$12 = $funcType([ptrType$16], [ptrType$11], false);
	ptrType$27 = $ptrType(MainApplication);
	ptrType$28 = $ptrType(RestDataStore);
	sliceType$9 = $sliceType($Uint8);
	NewMainApplication = function(store) {
		var $ptr, _r, app, camLimit, store, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; app = $f.app; camLimit = $f.camLimit; store = $f.store; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		camLimit = 2016;
		_r = NewViewModel(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		app = new MainApplication.ptr($clone(time.Now(), time.Time), new $Int64(0, 0), store, _r, false, $ifaceNil, $ifaceNil, 0, 0, false, (function() {
			var $ptr;
		}), camera.NewLimited(-2, 4, 0, camLimit), sliceType.nil, 0, ptrType$3.nil, sliceType$1.nil, sliceType$2.nil, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$8.nil, ptrType$9.nil);
		app.viewModel.OnSelectedProjectChanged($methodVal(app, "onSelectedProjectChanged"));
		app.viewModel.CreateProject().Subscribe($methodVal(app, "onCreateProject"));
		app.viewModel.OnSelectedLevelChanged($methodVal(app, "onSelectedLevelChanged"));
		app.viewModel.Tiles().TileType().Selected().Subscribe($methodVal(app, "onTileTypeChanged"));
		app.viewModel.Tiles().FloorHeight().Selected().Subscribe($methodVal(app, "onTileFloorHeightChanged"));
		app.viewModel.Tiles().CeilingHeight().Selected().Subscribe($methodVal(app, "onTileCeilingHeightChanged"));
		app.viewModel.Tiles().SlopeHeight().Selected().Subscribe($methodVal(app, "onTileSlopeHeightChanged"));
		app.viewModel.Tiles().SlopeControl().Selected().Subscribe($methodVal(app, "onTileSlopeControlChanged"));
		app.viewModel.Tiles().FloorTexture().Selected().Subscribe(app.tileIntRealWorldValueChangeCallback((function(properties) {
			var $ptr, properties;
			return (properties.$ptr_FloorTexture || (properties.$ptr_FloorTexture = new ptrType$11(function() { return this.$target.FloorTexture; }, function($v) { this.$target.FloorTexture = $v; }, properties)));
		}), false));
		app.viewModel.Tiles().CeilingTexture().Selected().Subscribe(app.tileIntRealWorldValueChangeCallback((function(properties) {
			var $ptr, properties;
			return (properties.$ptr_CeilingTexture || (properties.$ptr_CeilingTexture = new ptrType$11(function() { return this.$target.CeilingTexture; }, function($v) { this.$target.CeilingTexture = $v; }, properties)));
		}), false));
		app.viewModel.Tiles().WallTexture().Selected().Subscribe(app.tileIntRealWorldValueChangeCallback((function(properties) {
			var $ptr, properties;
			return (properties.$ptr_WallTexture || (properties.$ptr_WallTexture = new ptrType$11(function() { return this.$target.WallTexture; }, function($v) { this.$target.WallTexture = $v; }, properties)));
		}), false));
		app.viewModel.Tiles().FloorTextureRotations().Selected().Subscribe(app.tileIntRealWorldValueChangeCallback((function(properties) {
			var $ptr, properties;
			return (properties.$ptr_FloorTextureRotations || (properties.$ptr_FloorTextureRotations = new ptrType$11(function() { return this.$target.FloorTextureRotations; }, function($v) { this.$target.FloorTextureRotations = $v; }, properties)));
		}), false));
		app.viewModel.Tiles().CeilingTextureRotations().Selected().Subscribe(app.tileIntRealWorldValueChangeCallback((function(properties) {
			var $ptr, properties;
			return (properties.$ptr_CeilingTextureRotations || (properties.$ptr_CeilingTextureRotations = new ptrType$11(function() { return this.$target.CeilingTextureRotations; }, function($v) { this.$target.CeilingTextureRotations = $v; }, properties)));
		}), false));
		app.viewModel.Tiles().WallTextureOffset().Selected().Subscribe($methodVal(app, "onTileWallTextureOffsetChanged"));
		app.viewModel.Tiles().UseAdjacentWallTexture().Selected().Subscribe($methodVal(app, "onTileUseAdjacentWallTextureChanged"));
		app.viewModel.LevelTextureIndex().Selected().Subscribe($methodVal(app, "onLevelTextureIndexChanged"));
		app.viewModel.LevelTextureID().Selected().Subscribe($methodVal(app, "onLevelTextureIDChanged"));
		app.activeLevelID = -1;
		app.textureStore = model$1.NewBufferedTextureStore($methodVal(app, "loadTexture"));
		app.tileMap = model$1.NewTileMap(64, 64);
		$r = app.queryProjectsAndSelect("(inplace)"); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return app;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewMainApplication }; } $f.$ptr = $ptr; $f._r = _r; $f.app = app; $f.camLimit = camLimit; $f.store = store; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewMainApplication = NewMainApplication;
	MainApplication.ptr.prototype.queryProjectsAndSelect = function(projectID) {
		var $ptr, app, projectID, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; projectID = $f.projectID; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = [app];
		projectID = [projectID];
		app[0] = this;
		$r = app[0].store.Projects((function(app, projectID) { return function $b(projectIDs) {
			var $ptr, _i, _ref, found, id, projectIDs, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; found = $f.found; id = $f.id; projectIDs = $f.projectIDs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = app[0].viewModel.SetProjects(projectIDs); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			found = false;
			_ref = projectIDs;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				id = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (id === projectID[0]) {
					found = true;
				}
				_i++;
			}
			/* */ if (found) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (found) { */ case 2:
				$r = app[0].viewModel.SelectProject(projectID[0]); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = app[0].viewModel.SelectMapSection(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 3:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.found = found; $f.id = id; $f.projectIDs = projectIDs; $f.$s = $s; $f.$r = $r; return $f;
		}; })(app, projectID), app[0].simpleStoreFailure("Projects")); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.queryProjectsAndSelect }; } $f.$ptr = $ptr; $f.app = app; $f.projectID = projectID; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.queryProjectsAndSelect = function(projectID) { return this.$val.queryProjectsAndSelect(projectID); };
	MainApplication.ptr.prototype.ViewModel = function() {
		var $ptr, app;
		app = this;
		return app.viewModel.Root();
	};
	MainApplication.prototype.ViewModel = function() { return this.$val.ViewModel(); };
	MainApplication.ptr.prototype.Init = function(glWindow) {
		var $ptr, _r, _r$1, _r$2, _r$3, app, builder, glWindow, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; app = $f.app; builder = $f.builder; glWindow = $f.glWindow; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = [app];
		app[0] = this;
		app[0].glWindow = glWindow;
		$r = glWindow.OnRender($methodVal(app[0], "render")); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = glWindow.OnMouseMove($methodVal(app[0], "onMouseMove")); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = glWindow.OnMouseButtonDown($methodVal(app[0], "onMouseButtonDown")); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = glWindow.OnMouseButtonUp($methodVal(app[0], "onMouseButtonUp")); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = glWindow.OnMouseScroll($methodVal(app[0], "onMouseScroll")); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = app[0].glWindow.OpenGl(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = opengl.NewDebugBuilder(_r); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		builder = _r$1;
		builder.OnError((function(app) { return function $b(name, errorCodes) {
			var $ptr, _i, _r$2, _r$3, _ref, errorCode, errorCodes, errorStrings, index, name, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; errorCode = $f.errorCode; errorCodes = $f.errorCodes; errorStrings = $f.errorStrings; index = $f.index; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			errorStrings = $makeSlice(sliceType$3, errorCodes.$length);
			_ref = errorCodes;
			_i = 0;
			/* while (true) { */ case 1:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
				index = _i;
				errorCode = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r$2 = opengl.ErrorString(errorCode); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				((index < 0 || index >= errorStrings.$length) ? $throwRuntimeError("index out of range") : errorStrings.$array[errorStrings.$offset + index] = _r$2);
				_i++;
			/* } */ $s = 1; continue; case 2:
			_r$3 = fmt.Fprintf(os.Stderr, "!!: [%-20s] %v -> %v\n", new sliceType$4([new $String(name), errorCodes, errorStrings])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.errorCode = errorCode; $f.errorCodes = errorCodes; $f.errorStrings = errorStrings; $f.index = index; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
		}; })(app));
		app[0].gl = builder.Build();
		$r = app[0].gl.Enable(3042); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = app[0].gl.BlendFunc(770, 771); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = app[0].gl.ClearColor(0, 0, 0, 1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = display.NewGridRenderable(app[0].gl); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		app[0].gridRenderable = _r$2;
		_r$3 = display.NewTileSelectionRenderable(app[0].gl, (function(app) { return function $b(callback) {
			var $ptr, callback, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; callback = $f.callback; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			callback = [callback];
			$r = app[0].tileMap.ForEachSelected((function(app, callback) { return function $b(coord, tile) {
				var $ptr, coord, tile, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; coord = $f.coord; tile = $f.tile; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				coord = $clone(coord, model$1.TileCoordinate);
				$r = callback[0](coord); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.coord = coord; $f.tile = tile; $f.$s = $s; $f.$r = $r; return $f;
			}; })(app, callback)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.callback = callback; $f.$s = $s; $f.$r = $r; return $f;
		}; })(app)); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		app[0].tileSelectionRenderable = _r$3;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.Init }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.app = app; $f.builder = builder; $f.glWindow = glWindow; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.Init = function(glWindow) { return this.$val.Init(glWindow); };
	MainApplication.ptr.prototype.simpleStoreFailure = function(info) {
		var $ptr, app, info;
		app = this;
		return (function $b() {
			var $ptr, _r, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = fmt.Fprintf(os.Stderr, "Failed to process store query <%s>\n", new sliceType$4([new $String(info)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
		});
	};
	MainApplication.prototype.simpleStoreFailure = function(info) { return this.$val.simpleStoreFailure(info); };
	MainApplication.ptr.prototype.updateElapsedNano = function() {
		var $ptr, app, diff, now, x, x$1;
		app = this;
		now = $clone(time.Now(), time.Time);
		diff = now.Sub(app.lastElapsedTick).Nanoseconds();
		if ((diff.$high > 0 || (diff.$high === 0 && diff.$low > 0))) {
			app.elapsedMSec = (x = app.elapsedMSec, x$1 = $div64(diff, new $Int64(0, 1000000), false), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		}
		time.Time.copy(app.lastElapsedTick, now);
	};
	MainApplication.prototype.updateElapsedNano = function() { return this.$val.updateElapsedNano(); };
	MainApplication.ptr.prototype.render = function() {
		var $ptr, _r, _tuple, app, context, gl, height, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; app = $f.app; context = $f.context; gl = $f.gl; height = $f.height; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = this;
		gl = app.gl;
		_r = app.glWindow.Size(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		width = _tuple[0];
		height = _tuple[1];
		$r = gl.Viewport(0, 0, (width >> 0), (height >> 0)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gl.Clear(16640); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		app.updateElapsedNano();
		/* */ if (!(app.paletteTexture === ptrType$3.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(app.paletteTexture === ptrType$3.nil)) { */ case 4:
			$r = app.paletteTexture.Update(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		context = display.NewBasicRenderContext(width, height, app.view.ViewMatrix());
		$r = app.gridRenderable.Render(context); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!(app.tileTextureMapRenderable === ptrType$7.nil)) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(app.tileTextureMapRenderable === ptrType$7.nil)) { */ case 8:
			$r = app.tileTextureMapRenderable.Render(context); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		$r = app.tileSelectionRenderable.Render(context); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!(app.tileGridMapRenderable === ptrType$8.nil)) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (!(app.tileGridMapRenderable === ptrType$8.nil)) { */ case 12:
			$r = app.tileGridMapRenderable.Render(context); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.render }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.app = app; $f.context = context; $f.gl = gl; $f.height = height; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.render = function() { return this.$val.render(); };
	MainApplication.ptr.prototype.unprojectPixel = function(pixelX, pixelY) {
		var $ptr, _tmp, _tmp$1, app, invertedView, pixelVec, pixelX, pixelY, result, x, y;
		x = 0;
		y = 0;
		app = this;
		pixelVec = $toNativeArray($kindFloat32, [pixelX, pixelY, 0, 1]);
		invertedView = $clone(new mgl32.Mat4(app.view.ViewMatrix()).Inv(), mgl32.Mat4);
		result = $clone(new mgl32.Mat4(invertedView).Mul4x1(pixelVec), mgl32.Vec4);
		_tmp = result[0];
		_tmp$1 = result[1];
		x = _tmp;
		y = _tmp$1;
		return [x, y];
	};
	MainApplication.prototype.unprojectPixel = function(pixelX, pixelY) { return this.$val.unprojectPixel(pixelX, pixelY); };
	MainApplication.ptr.prototype.onMouseMove = function(x, y) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, app, subX, subY, tileX, tileY, worldMouseX, worldMouseY, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; app = $f.app; subX = $f.subX; subY = $f.subY; tileX = $f.tileX; tileY = $f.tileY; worldMouseX = $f.worldMouseX; worldMouseY = $f.worldMouseY; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = this;
		_tmp = x;
		_tmp$1 = y;
		app.mouseX = _tmp;
		app.mouseY = _tmp$1;
		$r = app.mouseMoveCapture(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = app.unprojectPixel(app.mouseX, app.mouseY);
		worldMouseX = _tuple[0];
		worldMouseY = _tuple[1];
		_tmp$2 = ($fround(worldMouseX / 32) >> 0);
		_tmp$3 = (_r = (($fround($fround(worldMouseX / 32) * 256) >> 0)) % 256, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		tileX = _tmp$2;
		subX = _tmp$3;
		_tmp$4 = 63 - ($fround(worldMouseY / 32) >> 0) >> 0;
		_tmp$5 = 255 - ((_r$1 = (($fround($fround(worldMouseY / 32) * 256) >> 0)) % 256, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"))) >> 0;
		tileY = _tmp$4;
		subY = _tmp$5;
		$r = app.viewModel.SetPointerAt(tileX, tileY, subX, subY); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onMouseMove }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.app = app; $f.subX = subX; $f.subY = subY; $f.tileX = tileX; $f.tileY = tileY; $f.worldMouseX = worldMouseX; $f.worldMouseY = worldMouseY; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onMouseMove = function(x, y) { return this.$val.onMouseMove(x, y); };
	MainApplication.ptr.prototype.onMouseButtonDown = function(mouseButton, modifierMask) {
		var $ptr, _tmp, _tmp$1, app, lastMouseX, lastMouseY, modifierMask, mouseButton;
		app = this;
		if ((((mouseButton & 1) >>> 0)) === 1) {
			_tmp = app.mouseX;
			_tmp$1 = app.mouseY;
			lastMouseX = _tmp;
			lastMouseY = _tmp$1;
			app.mouseDragged = false;
			app.mouseMoveCapture = (function() {
				var $ptr, _tmp$2, _tmp$3, _tuple, _tuple$1, lastWorldMouseX, lastWorldMouseY, worldMouseX, worldMouseY;
				_tuple = app.unprojectPixel(lastMouseX, lastMouseY);
				lastWorldMouseX = _tuple[0];
				lastWorldMouseY = _tuple[1];
				_tuple$1 = app.unprojectPixel(app.mouseX, app.mouseY);
				worldMouseX = _tuple$1[0];
				worldMouseY = _tuple$1[1];
				app.mouseDragged = true;
				app.view.MoveBy($fround(worldMouseX - lastWorldMouseX), $fround(worldMouseY - lastWorldMouseY));
				_tmp$2 = app.mouseX;
				_tmp$3 = app.mouseY;
				lastMouseX = _tmp$2;
				lastMouseY = _tmp$3;
			});
		}
	};
	MainApplication.prototype.onMouseButtonDown = function(mouseButton, modifierMask) { return this.$val.onMouseButtonDown(mouseButton, modifierMask); };
	MainApplication.ptr.prototype.onMouseButtonUp = function(mouseButton, modifierMask) {
		var $ptr, app, modifierMask, mouseButton, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; modifierMask = $f.modifierMask; mouseButton = $f.mouseButton; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = this;
		/* */ if ((((mouseButton & 1) >>> 0)) === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((((mouseButton & 1) >>> 0)) === 1) { */ case 1:
			app.mouseMoveCapture = (function() {
				var $ptr;
			});
			/* */ if (!app.mouseDragged) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!app.mouseDragged) { */ case 3:
				$r = app.onMouseClick(modifierMask); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onMouseButtonUp }; } $f.$ptr = $ptr; $f.app = app; $f.modifierMask = modifierMask; $f.mouseButton = mouseButton; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onMouseButtonUp = function(mouseButton, modifierMask) { return this.$val.onMouseButtonUp(mouseButton, modifierMask); };
	MainApplication.ptr.prototype.onMouseScroll = function(dx, dy) {
		var $ptr, _tuple, app, dx, dy, worldMouseX, worldMouseY;
		app = this;
		_tuple = app.unprojectPixel(app.mouseX, app.mouseY);
		worldMouseX = _tuple[0];
		worldMouseY = _tuple[1];
		if (dy > 0) {
			app.view.ZoomAt(-0.5, worldMouseX, worldMouseY);
		}
		if (dy < 0) {
			app.view.ZoomAt(0.5, worldMouseX, worldMouseY);
		}
	};
	MainApplication.prototype.onMouseScroll = function(dx, dy) { return this.$val.onMouseScroll(dx, dy); };
	MainApplication.ptr.prototype.onMouseClick = function(modifierMask) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, app, modifierMask, tileCoord, tileX, tileY, worldMouseX, worldMouseY, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; app = $f.app; modifierMask = $f.modifierMask; tileCoord = $f.tileCoord; tileX = $f.tileX; tileY = $f.tileY; worldMouseX = $f.worldMouseX; worldMouseY = $f.worldMouseY; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = this;
		_tuple = app.unprojectPixel(app.mouseX, app.mouseY);
		worldMouseX = _tuple[0];
		worldMouseY = _tuple[1];
		_tmp = ($fround(worldMouseX / 32) >> 0);
		tileX = _tmp;
		_tmp$2 = 63 - ($fround(worldMouseY / 32) >> 0) >> 0;
		tileY = _tmp$2;
		tileCoord = $clone(model$1.TileCoordinateOf(tileX, tileY), model$1.TileCoordinate);
		if (!(((((modifierMask & 1) >>> 0)) === 0))) {
			app.tileMap.SetSelected(tileCoord, !app.tileMap.IsSelected(tileCoord));
		} else {
			app.tileMap.ClearSelection();
			app.tileMap.SetSelected(tileCoord, true);
		}
		$r = app.onTileSelectionChanged(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onMouseClick }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.app = app; $f.modifierMask = modifierMask; $f.tileCoord = tileCoord; $f.tileX = tileX; $f.tileY = tileY; $f.worldMouseX = worldMouseX; $f.worldMouseY = worldMouseY; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onMouseClick = function(modifierMask) { return this.$val.onMouseClick(modifierMask); };
	MainApplication.ptr.prototype.animatedPaletteIndex = function(index) {
		var $ptr, app, index, loopIndex, newIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; index = $f.index; loopIndex = $f.loopIndex; newIndex = $f.newIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = [app];
		newIndex = [newIndex];
		app[0] = this;
		newIndex[0] = index;
		loopIndex = (function(app, newIndex) { return function(from, count, stepTimeMSec) {
			var $ptr, _r, count, from, step, stepTimeMSec, x, x$1;
			if (newIndex[0] >= from && newIndex[0] < ((from + count >> 0))) {
				step = $div64(app[0].elapsedMSec, stepTimeMSec, false);
				newIndex[0] = from + (_r = ((x = (x$1 = new $Int64(0, (newIndex[0] - from >> 0)), new $Int64(x$1.$high + step.$high, x$1.$low + step.$low)), x.$low + ((x.$high >> 31) * 4294967296)) >> 0) % count, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >> 0;
			}
		}; })(app, newIndex);
		$r = loopIndex(3, 5, new $Int64(0, 1200)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = loopIndex(11, 5, new $Int64(0, 700)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = loopIndex(16, 5, new $Int64(0, 360)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = loopIndex(21, 3, new $Int64(0, 1800)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = loopIndex(24, 3, new $Int64(0, 1430)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = loopIndex(27, 5, new $Int64(0, 1080)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return newIndex[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.animatedPaletteIndex }; } $f.$ptr = $ptr; $f.app = app; $f.index = index; $f.loopIndex = loopIndex; $f.newIndex = newIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.animatedPaletteIndex = function(index) { return this.$val.animatedPaletteIndex(index); };
	MainApplication.ptr.prototype.onCreateProject = function() {
		var $ptr, app, projectID, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; projectID = $f.projectID; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = [app];
		projectID = [projectID];
		app[0] = this;
		projectID[0] = app[0].viewModel.NewProjectID().Get();
		/* */ if (!(projectID[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(projectID[0] === "")) { */ case 1:
			$r = app[0].store.NewProject(projectID[0], (function(app, projectID) { return function $b() {
				var $ptr, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				$r = app[0].viewModel.NewProjectID().Set(""); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = app[0].queryProjectsAndSelect(projectID[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
			}; })(app, projectID), app[0].simpleStoreFailure("NewProject")); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onCreateProject }; } $f.$ptr = $ptr; $f.app = app; $f.projectID = projectID; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onCreateProject = function() { return this.$val.onCreateProject(); };
	MainApplication.ptr.prototype.onSelectedProjectChanged = function(projectID) {
		var $ptr, app, projectID, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; projectID = $f.projectID; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = [app];
		app[0] = this;
		$r = app[0].updateViewModel((function(app) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = app[0].viewModel.SetLevels(sliceType$3.nil); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].viewModel.SetTextureCount(0); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(app)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!(app[0].tileTextureMapRenderable === ptrType$7.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(app[0].tileTextureMapRenderable === ptrType$7.nil)) { */ case 2:
			$r = app[0].tileTextureMapRenderable.Dispose(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			app[0].tileTextureMapRenderable = ptrType$7.nil;
		/* } */ case 3:
		/* */ if (!(app[0].tileGridMapRenderable === ptrType$8.nil)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!(app[0].tileGridMapRenderable === ptrType$8.nil)) { */ case 5:
			$r = app[0].tileGridMapRenderable.Dispose(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			app[0].tileGridMapRenderable = ptrType$8.nil;
		/* } */ case 6:
		/* */ if (!(app[0].paletteTexture === ptrType$3.nil)) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(app[0].paletteTexture === ptrType$3.nil)) { */ case 8:
			$r = app[0].paletteTexture.Dispose(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			app[0].paletteTexture = ptrType$3.nil;
		/* } */ case 9:
		app[0].textureData = sliceType$2.nil;
		$r = app[0].textureStore.Reset(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		app[0].levels = sliceType.nil;
		/* */ if (!(projectID === "")) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (!(projectID === "")) { */ case 12:
			$r = app[0].store.Palette(projectID, "game", (function(app) { return function $b(colors) {
				var $ptr, _r, _r$1, colorProvider, colors, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; colorProvider = $f.colorProvider; colors = $f.colors; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				colors = [colors];
				colors[0] = $clone(colors[0], arrayType);
				colorProvider = (function(app, colors) { return function $b(index) {
					var $ptr, _r, entry, index, x, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; entry = $f.entry; index = $f.index; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					_r = app[0].animatedPaletteIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					entry = (x = _r, ((x < 0 || x >= colors[0].length) ? $throwRuntimeError("index out of range") : colors[0][x]));
					return [(entry.Red << 24 >>> 24), (entry.Green << 24 >>> 24), (entry.Blue << 24 >>> 24), 255];
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.entry = entry; $f.index = index; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
				}; })(app, colors);
				_r = graphics.NewPaletteTexture(app[0].gl, colorProvider); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				app[0].paletteTexture = _r;
				_r$1 = display.NewTileGridMapRenderable(app[0].gl); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				app[0].tileGridMapRenderable = _r$1;
				/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.colorProvider = colorProvider; $f.colors = colors; $f.$s = $s; $f.$r = $r; return $f;
			}; })(app), app[0].simpleStoreFailure("Palette")); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].store.Textures(projectID, (function(app) { return function $b(textures) {
				var $ptr, textures, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; textures = $f.textures; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				textures = [textures];
				app[0].textureData = textures[0];
				$r = app[0].updateViewModel((function(app, textures) { return function $b() {
					var $ptr, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					$r = app[0].viewModel.SetTextureCount(textures[0].$length); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
				}; })(app, textures)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.textures = textures; $f.$s = $s; $f.$r = $r; return $f;
			}; })(app), app[0].simpleStoreFailure("Textures")); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].store.Levels(projectID, "archive", (function(app) { return function $b(levels) {
				var $ptr, _i, _ref, index, level, levelIDs, levels, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; index = $f.index; level = $f.level; levelIDs = $f.levelIDs; levels = $f.levels; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				levelIDs = [levelIDs];
				levelIDs[0] = $makeSlice(sliceType$3, levels.$length);
				_ref = levels;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					index = _i;
					level = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), model.Level);
					((index < 0 || index >= levelIDs[0].$length) ? $throwRuntimeError("index out of range") : levelIDs[0].$array[levelIDs[0].$offset + index] = level.Identifiable.ID);
					_i++;
				}
				app[0].levels = levels;
				$r = app[0].updateViewModel((function(app, levelIDs) { return function $b() {
					var $ptr, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					$r = app[0].viewModel.SetLevels(levelIDs[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
				}; })(app, levelIDs)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.index = index; $f.level = level; $f.levelIDs = levelIDs; $f.levels = levels; $f.$s = $s; $f.$r = $r; return $f;
			}; })(app), app[0].simpleStoreFailure("Levels")); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onSelectedProjectChanged }; } $f.$ptr = $ptr; $f.app = app; $f.projectID = projectID; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onSelectedProjectChanged = function(projectID) { return this.$val.onSelectedProjectChanged(projectID); };
	MainApplication.ptr.prototype.onSelectedLevelChanged = function(levelIDString) {
		var $ptr, _r, _tuple, app, levelID, levelIDError, levelIDString, projectID, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; app = $f.app; levelID = $f.levelID; levelIDError = $f.levelIDError; levelIDString = $f.levelIDString; projectID = $f.projectID; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = [app];
		app[0] = this;
		projectID = app[0].viewModel.SelectedProject();
		_tuple = strconv.ParseInt(levelIDString, 10, 16);
		levelID = _tuple[0];
		levelIDError = _tuple[1];
		/* */ if (!(app[0].tileTextureMapRenderable === ptrType$7.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(app[0].tileTextureMapRenderable === ptrType$7.nil)) { */ case 1:
			app[0].tileTextureMapRenderable.Clear();
			$r = app[0].tileTextureMapRenderable.Dispose(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			app[0].tileTextureMapRenderable = ptrType$7.nil;
		/* } */ case 2:
		if (!(app[0].tileGridMapRenderable === ptrType$8.nil)) {
			app[0].tileGridMapRenderable.Clear();
		}
		app[0].tileMap.Clear();
		$r = app[0].onTileSelectionChanged(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		app[0].activeLevelID = -1;
		$r = app[0].updateViewModel((function(app) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = app[0].viewModel.SetLevelTextures(sliceType$1.nil); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(app)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!(projectID === "") && $interfaceIsEqual(levelIDError, $ifaceNil)) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!(projectID === "") && $interfaceIsEqual(levelIDError, $ifaceNil)) { */ case 6:
			app[0].activeLevelID = ((levelID.$low + ((levelID.$high >> 31) * 4294967296)) >> 0);
			/* */ if (app[0].isActiveLevelRealWorld()) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (app[0].isActiveLevelRealWorld()) { */ case 8:
				_r = display.NewTileTextureMapRenderable(app[0].gl, app[0].paletteTexture, $methodVal(app[0], "levelTexture")); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				app[0].tileTextureMapRenderable = _r;
			/* } */ case 9:
			$r = app[0].store.Tiles(projectID, "archive", app[0].activeLevelID, (function(app) { return function(data) {
				var $ptr, _i, _ref, coord, data, properties, row, x, y;
				data = $clone(data, model.Tiles);
				_ref = data.Table;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					y = _i;
					row = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					x = 0;
					while (true) {
						if (!(x < row.$length)) { break; }
						coord = $clone(model$1.TileCoordinateOf(x, y), model$1.TileCoordinate);
						properties = ((x < 0 || x >= row.$length) ? $throwRuntimeError("index out of range") : row.$array[row.$offset + x]).Properties;
						app[0].onTilePropertiesUpdated(coord, properties);
						x = x + (1) >> 0;
					}
					_i++;
				}
			}; })(app), app[0].simpleStoreFailure("Tiles")); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].store.LevelTextures(projectID, "archive", app[0].activeLevelID, $methodVal(app[0], "onStoreLevelTexturesChanged"), app[0].simpleStoreFailure("LevelTextures")); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		$r = app[0].updateViewModel((function(app) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = app[0].viewModel.SetLevelIsRealWorld(app[0].isActiveLevelRealWorld()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(app)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onSelectedLevelChanged }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.app = app; $f.levelID = levelID; $f.levelIDError = levelIDError; $f.levelIDString = levelIDString; $f.projectID = projectID; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onSelectedLevelChanged = function(levelIDString) { return this.$val.onSelectedLevelChanged(levelIDString); };
	MainApplication.ptr.prototype.isActiveLevelRealWorld = function() {
		var $ptr, app, level, realWorld, x, x$1;
		realWorld = false;
		app = this;
		if ((app.activeLevelID >= 0) && (app.activeLevelID < app.levels.$length)) {
			level = (x = app.levels, x$1 = app.activeLevelID, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
			realWorld = !level.Properties.CyberspaceFlag;
		}
		return realWorld;
	};
	MainApplication.prototype.isActiveLevelRealWorld = function() { return this.$val.isActiveLevelRealWorld(); };
	MainApplication.ptr.prototype.onStoreLevelTexturesChanged = function(textureIDs) {
		var $ptr, app, textureIDs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; textureIDs = $f.textureIDs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = [app];
		app[0] = this;
		app[0].levelTextures = textureIDs;
		$r = app[0].updateViewModel((function(app) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = app[0].viewModel.SetLevelTextures(app[0].levelTextures); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(app)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onStoreLevelTexturesChanged }; } $f.$ptr = $ptr; $f.app = app; $f.textureIDs = textureIDs; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onStoreLevelTexturesChanged = function(textureIDs) { return this.$val.onStoreLevelTexturesChanged(textureIDs); };
	MainApplication.ptr.prototype.loadTexture = function(id) {
		var $ptr, app, id, projectID, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; id = $f.id; projectID = $f.projectID; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = [app];
		id = [id];
		app[0] = this;
		projectID = app[0].viewModel.SelectedProject();
		$r = app[0].store.TextureBitmap(projectID, id[0], "large", (function(app, id) { return function $b(bmp) {
			var $ptr, _arg, _arg$1, _r, _tuple, bmp, pixelData, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _tuple = $f._tuple; bmp = $f.bmp; pixelData = $f.pixelData; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_tuple = base64.StdEncoding.DecodeString(bmp.Pixel);
			pixelData = _tuple[0];
			_arg = id[0];
			_r = graphics.NewBitmapTexture(app[0].gl, bmp.Width, bmp.Height, pixelData); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = _r;
			$r = app[0].textureStore.SetTexture(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._tuple = _tuple; $f.bmp = bmp; $f.pixelData = pixelData; $f.$s = $s; $f.$r = $r; return $f;
		}; })(app, id), app[0].simpleStoreFailure("TextureBitmap")); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.loadTexture }; } $f.$ptr = $ptr; $f.app = app; $f.id = id; $f.projectID = projectID; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.loadTexture = function(id) { return this.$val.loadTexture(id); };
	MainApplication.ptr.prototype.levelTexture = function(index) {
		var $ptr, _r, app, index, texture, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; app = $f.app; index = $f.index; texture = $f.texture; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		texture = $ifaceNil;
		app = this;
		/* */ if (index >= 0 && index < app.levelTextures.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index >= 0 && index < app.levelTextures.$length) { */ case 1:
			_r = app.textureStore.Texture((x = app.levelTextures, ((index < 0 || index >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + index]))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			texture = _r;
		/* } */ case 2:
		return texture;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.levelTexture }; } $f.$ptr = $ptr; $f._r = _r; $f.app = app; $f.index = index; $f.texture = texture; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.levelTexture = function(index) { return this.$val.levelTexture(index); };
	MainApplication.ptr.prototype.onTilePropertiesUpdated = function(coord, properties) {
		var $ptr, _tuple, app, coord, properties, x, y;
		coord = $clone(coord, model$1.TileCoordinate);
		app = this;
		_tuple = coord.XY();
		x = _tuple[0];
		y = _tuple[1];
		if (!(app.tileTextureMapRenderable === ptrType$7.nil)) {
			app.tileTextureMapRenderable.SetTile(x, 63 - y >> 0, properties);
		}
		app.tileGridMapRenderable.SetTile(x, 63 - y >> 0, properties);
		app.tileMap.Tile(coord).SetProperties(properties);
	};
	MainApplication.prototype.onTilePropertiesUpdated = function(coord, properties) { return this.$val.onTilePropertiesUpdated(coord, properties); };
	MainApplication.ptr.prototype.updateViewModel = function(updater) {
		var $ptr, app, updater, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; updater = $f.updater; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		app = [app];
		app[0] = this;
		app[0].viewModelUpdating = true;
		$deferred.push([(function(app) { return function() {
			var $ptr;
			app[0].viewModelUpdating = false;
		}; })(app), []]);
		$r = updater(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.updateViewModel }; } $f.$ptr = $ptr; $f.app = app; $f.updater = updater; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	MainApplication.prototype.updateViewModel = function(updater) { return this.$val.updateViewModel(updater); };
	MainApplication.ptr.prototype.requestSelectedTilesChange = function(modifier, updateNeighbours) {
		var $ptr, app, archiveID, levelID, modifier, neighbours, onWriteCompleted, projectID, updateNeighbours, writesPending, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; archiveID = $f.archiveID; levelID = $f.levelID; modifier = $f.modifier; neighbours = $f.neighbours; onWriteCompleted = $f.onWriteCompleted; projectID = $f.projectID; updateNeighbours = $f.updateNeighbours; writesPending = $f.writesPending; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = [app];
		archiveID = [archiveID];
		levelID = [levelID];
		modifier = [modifier];
		neighbours = [neighbours];
		onWriteCompleted = [onWriteCompleted];
		projectID = [projectID];
		updateNeighbours = [updateNeighbours];
		writesPending = [writesPending];
		app[0] = this;
		/* */ if (!app[0].viewModelUpdating) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!app[0].viewModelUpdating) { */ case 1:
			projectID[0] = app[0].viewModel.SelectedProject();
			archiveID[0] = "archive";
			levelID[0] = app[0].activeLevelID;
			neighbours[0] = {};
			writesPending[0] = 0;
			onWriteCompleted[0] = (function(app, archiveID, levelID, modifier, neighbours, onWriteCompleted, projectID, updateNeighbours, writesPending) { return function $b() {
				var $ptr, _entry, _i, _keys, _ref, _tuple, coord, localCoord, x, y, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; _tuple = $f._tuple; coord = $f.coord; localCoord = $f.localCoord; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				writesPending[0] = writesPending[0] - (1) >> 0;
				/* */ if (writesPending[0] === 0) { $s = 1; continue; }
				/* */ $s = 2; continue;
				/* if (writesPending[0] === 0) { */ case 1:
					_ref = neighbours[0];
					_i = 0;
					_keys = $keys(_ref);
					/* while (true) { */ case 3:
						/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 4; continue; }
						localCoord = [localCoord];
						_entry = _ref[_keys[_i]];
						if (_entry === undefined) {
							_i++;
							/* continue; */ $s = 3; continue;
						}
						coord = $clone(_entry.k, model$1.TileCoordinate);
						localCoord[0] = $clone(coord, model$1.TileCoordinate);
						_tuple = localCoord[0].XY();
						x = _tuple[0];
						y = _tuple[1];
						$r = app[0].store.Tile(projectID[0], archiveID[0], levelID[0], x, y, (function(app, archiveID, levelID, localCoord, modifier, neighbours, onWriteCompleted, projectID, updateNeighbours, writesPending) { return function(properties) {
							var $ptr, properties;
							properties = $clone(properties, model.TileProperties);
							app[0].onTilePropertiesUpdated(localCoord[0], properties);
						}; })(app, archiveID, levelID, localCoord, modifier, neighbours, onWriteCompleted, projectID, updateNeighbours, writesPending), app[0].simpleStoreFailure("GetTile")); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
					/* } */ $s = 3; continue; case 4:
				/* } */ case 2:
				/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f._tuple = _tuple; $f.coord = coord; $f.localCoord = localCoord; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
			}; })(app, archiveID, levelID, modifier, neighbours, onWriteCompleted, projectID, updateNeighbours, writesPending);
			$r = app[0].tileMap.ForEachSelected((function(app, archiveID, levelID, modifier, neighbours, onWriteCompleted, projectID, updateNeighbours, writesPending) { return function $b(coord, tile) {
				var $ptr, _entry, _entry$1, _entry$2, _entry$3, _index, _index$1, _index$2, _index$3, _key, _key$1, _key$2, _key$3, _tuple, coord, properties, tile, x, y, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _index = $f._index; _index$1 = $f._index$1; _index$2 = $f._index$2; _index$3 = $f._index$3; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _tuple = $f._tuple; coord = $f.coord; properties = $f.properties; tile = $f.tile; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				coord = [coord];
				properties = [properties];
				coord[0] = $clone(coord[0], model$1.TileCoordinate);
				properties[0] = new model.TileProperties.ptr(ptrType$12.nil, ptrType$13.nil, ptrType$13.nil, ptrType$13.nil, ptrType$14.nil, ptrType$15.nil, ptrType$16.nil);
				$r = modifier[0](properties[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				writesPending[0] = writesPending[0] + (1) >> 0;
				_tuple = coord[0].XY();
				x = _tuple[0];
				y = _tuple[1];
				if (updateNeighbours[0]) {
					if (x > 0) {
						_index = $clone(model$1.TileCoordinateOf(x - 1 >> 0, y), model$1.TileCoordinate);
						_key = $clone(_index, model$1.TileCoordinate); (neighbours[0] || $throwRuntimeError("assignment to entry in nil map"))[model$1.TileCoordinate.keyFor(_key)] = { k: _key, v: (_entry = neighbours[0][model$1.TileCoordinate.keyFor(_index)], _entry !== undefined ? _entry.v : 0) + (1) >> 0 };
					}
					if (((x + 1 >> 0)) < 64) {
						_index$1 = $clone(model$1.TileCoordinateOf(x + 1 >> 0, y), model$1.TileCoordinate);
						_key$1 = $clone(_index$1, model$1.TileCoordinate); (neighbours[0] || $throwRuntimeError("assignment to entry in nil map"))[model$1.TileCoordinate.keyFor(_key$1)] = { k: _key$1, v: (_entry$1 = neighbours[0][model$1.TileCoordinate.keyFor(_index$1)], _entry$1 !== undefined ? _entry$1.v : 0) + (1) >> 0 };
					}
					if (y > 0) {
						_index$2 = $clone(model$1.TileCoordinateOf(x, y - 1 >> 0), model$1.TileCoordinate);
						_key$2 = $clone(_index$2, model$1.TileCoordinate); (neighbours[0] || $throwRuntimeError("assignment to entry in nil map"))[model$1.TileCoordinate.keyFor(_key$2)] = { k: _key$2, v: (_entry$2 = neighbours[0][model$1.TileCoordinate.keyFor(_index$2)], _entry$2 !== undefined ? _entry$2.v : 0) + (1) >> 0 };
					}
					if (((y + 1 >> 0)) < 64) {
						_index$3 = $clone(model$1.TileCoordinateOf(x, y + 1 >> 0), model$1.TileCoordinate);
						_key$3 = $clone(_index$3, model$1.TileCoordinate); (neighbours[0] || $throwRuntimeError("assignment to entry in nil map"))[model$1.TileCoordinate.keyFor(_key$3)] = { k: _key$3, v: (_entry$3 = neighbours[0][model$1.TileCoordinate.keyFor(_index$3)], _entry$3 !== undefined ? _entry$3.v : 0) + (1) >> 0 };
					}
				}
				$r = app[0].store.SetTile(projectID[0], archiveID[0], levelID[0], x, y, properties[0], (function(app, archiveID, coord, levelID, modifier, neighbours, onWriteCompleted, projectID, properties, updateNeighbours, writesPending) { return function $b(newProperties) {
					var $ptr, newProperties, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; newProperties = $f.newProperties; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					newProperties = [newProperties];
					newProperties[0] = $clone(newProperties[0], model.TileProperties);
					app[0].onTilePropertiesUpdated(coord[0], newProperties[0]);
					$r = onWriteCompleted[0](); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.newProperties = newProperties; $f.$s = $s; $f.$r = $r; return $f;
				}; })(app, archiveID, coord, levelID, modifier, neighbours, onWriteCompleted, projectID, properties, updateNeighbours, writesPending), app[0].simpleStoreFailure("SetTile")); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._index = _index; $f._index$1 = _index$1; $f._index$2 = _index$2; $f._index$3 = _index$3; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._tuple = _tuple; $f.coord = coord; $f.properties = properties; $f.tile = tile; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
			}; })(app, archiveID, levelID, modifier, neighbours, onWriteCompleted, projectID, updateNeighbours, writesPending)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.requestSelectedTilesChange }; } $f.$ptr = $ptr; $f.app = app; $f.archiveID = archiveID; $f.levelID = levelID; $f.modifier = modifier; $f.neighbours = neighbours; $f.onWriteCompleted = onWriteCompleted; $f.projectID = projectID; $f.updateNeighbours = updateNeighbours; $f.writesPending = writesPending; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.requestSelectedTilesChange = function(modifier, updateNeighbours) { return this.$val.requestSelectedTilesChange(modifier, updateNeighbours); };
	MainApplication.ptr.prototype.onTileSelectionChanged = function() {
		var $ptr, app, ceilingHeight, ceilingTexture, ceilingTextureRotations, floorHeight, floorTexture, floorTextureRotations, slopeControl, slopeHeight, tileType, useAdjacentWallTexture, wallTexture, wallTextureOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; ceilingHeight = $f.ceilingHeight; ceilingTexture = $f.ceilingTexture; ceilingTextureRotations = $f.ceilingTextureRotations; floorHeight = $f.floorHeight; floorTexture = $f.floorTexture; floorTextureRotations = $f.floorTextureRotations; slopeControl = $f.slopeControl; slopeHeight = $f.slopeHeight; tileType = $f.tileType; useAdjacentWallTexture = $f.useAdjacentWallTexture; wallTexture = $f.wallTexture; wallTextureOffset = $f.wallTextureOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = [app];
		ceilingHeight = [ceilingHeight];
		ceilingTexture = [ceilingTexture];
		ceilingTextureRotations = [ceilingTextureRotations];
		floorHeight = [floorHeight];
		floorTexture = [floorTexture];
		floorTextureRotations = [floorTextureRotations];
		slopeControl = [slopeControl];
		slopeHeight = [slopeHeight];
		tileType = [tileType];
		useAdjacentWallTexture = [useAdjacentWallTexture];
		wallTexture = [wallTexture];
		wallTextureOffset = [wallTextureOffset];
		app[0] = this;
		tileType[0] = util.NewValueUnifier(new $String(""));
		floorHeight[0] = util.NewValueUnifier(new $String(""));
		ceilingHeight[0] = util.NewValueUnifier(new $String(""));
		slopeHeight[0] = util.NewValueUnifier(new $String(""));
		slopeControl[0] = util.NewValueUnifier(new $String(""));
		floorTexture[0] = util.NewValueUnifier(new $String(""));
		ceilingTexture[0] = util.NewValueUnifier(new $String(""));
		wallTexture[0] = util.NewValueUnifier(new $String(""));
		floorTextureRotations[0] = util.NewValueUnifier(new $String(""));
		ceilingTextureRotations[0] = util.NewValueUnifier(new $String(""));
		useAdjacentWallTexture[0] = util.NewValueUnifier(new $String(""));
		wallTextureOffset[0] = util.NewValueUnifier(new $String(""));
		$r = app[0].tileMap.ForEachSelected((function(app, ceilingHeight, ceilingTexture, ceilingTextureRotations, floorHeight, floorTexture, floorTextureRotations, slopeControl, slopeHeight, tileType, useAdjacentWallTexture, wallTexture, wallTextureOffset) { return function $b(coord, tile) {
			var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, coord, realWorld, tile, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; coord = $f.coord; realWorld = $f.realWorld; tile = $f.tile; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			coord = $clone(coord, model$1.TileCoordinate);
			tileType[0].Add(new $String(tile.Properties().Type.$get()));
			_r = fmt.Sprintf("%d", new sliceType$4([new model.HeightUnit(tile.Properties().FloorHeight.$get())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = floorHeight[0].Add(new $String(_r)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = fmt.Sprintf("%d", new sliceType$4([new model.HeightUnit((32 - tile.Properties().CeilingHeight.$get() >> 0))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = ceilingHeight[0].Add(new $String(_r$1)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = fmt.Sprintf("%d", new sliceType$4([new model.HeightUnit(tile.Properties().SlopeHeight.$get())])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$r = slopeHeight[0].Add(new $String(_r$2)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			slopeControl[0].Add(new $String(tile.Properties().SlopeControl.$get()));
			/* */ if (!(tile.Properties().RealWorld === ptrType$16.nil)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(tile.Properties().RealWorld === ptrType$16.nil)) { */ case 7:
				realWorld = tile.Properties().RealWorld;
				_r$3 = fmt.Sprintf("%d", new sliceType$4([new $Int(realWorld.FloorTexture.$get())])); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = floorTexture[0].Add(new $String(_r$3)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$4 = fmt.Sprintf("%d", new sliceType$4([new $Int(realWorld.CeilingTexture.$get())])); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = ceilingTexture[0].Add(new $String(_r$4)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$5 = fmt.Sprintf("%d", new sliceType$4([new $Int(realWorld.WallTexture.$get())])); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = wallTexture[0].Add(new $String(_r$5)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$6 = fmt.Sprintf("%d", new sliceType$4([new $Int(realWorld.FloorTextureRotations.$get())])); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$r = floorTextureRotations[0].Add(new $String(_r$6)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$7 = fmt.Sprintf("%d", new sliceType$4([new $Int(realWorld.CeilingTextureRotations.$get())])); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$r = ceilingTextureRotations[0].Add(new $String(_r$7)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (realWorld.UseAdjacentWallTexture.$get()) {
					useAdjacentWallTexture[0].Add(new $String("yes"));
				} else {
					useAdjacentWallTexture[0].Add(new $String("no"));
				}
				_r$8 = fmt.Sprintf("%d", new sliceType$4([new model.HeightUnit(realWorld.WallTextureOffset.$get())])); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = wallTextureOffset[0].Add(new $String(_r$8)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.coord = coord; $f.realWorld = realWorld; $f.tile = tile; $f.$s = $s; $f.$r = $r; return $f;
		}; })(app, ceilingHeight, ceilingTexture, ceilingTextureRotations, floorHeight, floorTexture, floorTextureRotations, slopeControl, slopeHeight, tileType, useAdjacentWallTexture, wallTexture, wallTextureOffset)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = app[0].updateViewModel((function(app, ceilingHeight, ceilingTexture, ceilingTextureRotations, floorHeight, floorTexture, floorTextureRotations, slopeControl, slopeHeight, tileType, useAdjacentWallTexture, wallTexture, wallTextureOffset) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = app[0].viewModel.Tiles().TileType().Selected().Set($assertType(tileType[0].Value(), $String)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].viewModel.Tiles().FloorHeight().Selected().Set($assertType(floorHeight[0].Value(), $String)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].viewModel.Tiles().CeilingHeight().Selected().Set($assertType(ceilingHeight[0].Value(), $String)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].viewModel.Tiles().SlopeHeight().Selected().Set($assertType(slopeHeight[0].Value(), $String)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].viewModel.Tiles().SlopeControl().Selected().Set($assertType(slopeControl[0].Value(), $String)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].viewModel.Tiles().FloorTexture().Selected().Set($assertType(floorTexture[0].Value(), $String)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].viewModel.Tiles().CeilingTexture().Selected().Set($assertType(ceilingTexture[0].Value(), $String)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].viewModel.Tiles().WallTexture().Selected().Set($assertType(wallTexture[0].Value(), $String)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].viewModel.Tiles().FloorTextureRotations().Selected().Set($assertType(floorTextureRotations[0].Value(), $String)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].viewModel.Tiles().CeilingTextureRotations().Selected().Set($assertType(ceilingTextureRotations[0].Value(), $String)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].viewModel.Tiles().UseAdjacentWallTexture().Selected().Set($assertType(useAdjacentWallTexture[0].Value(), $String)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = app[0].viewModel.Tiles().WallTextureOffset().Selected().Set($assertType(wallTextureOffset[0].Value(), $String)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(app, ceilingHeight, ceilingTexture, ceilingTextureRotations, floorHeight, floorTexture, floorTextureRotations, slopeControl, slopeHeight, tileType, useAdjacentWallTexture, wallTexture, wallTextureOffset)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onTileSelectionChanged }; } $f.$ptr = $ptr; $f.app = app; $f.ceilingHeight = ceilingHeight; $f.ceilingTexture = ceilingTexture; $f.ceilingTextureRotations = ceilingTextureRotations; $f.floorHeight = floorHeight; $f.floorTexture = floorTexture; $f.floorTextureRotations = floorTextureRotations; $f.slopeControl = slopeControl; $f.slopeHeight = slopeHeight; $f.tileType = tileType; $f.useAdjacentWallTexture = useAdjacentWallTexture; $f.wallTexture = wallTexture; $f.wallTextureOffset = wallTextureOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onTileSelectionChanged = function() { return this.$val.onTileSelectionChanged(); };
	MainApplication.ptr.prototype.onTileTypeChanged = function(newType) {
		var $ptr, app, newType, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; newType = $f.newType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		newType = [newType];
		app = this;
		/* */ if (!(newType[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(newType[0] === "")) { */ case 1:
			$r = app.requestSelectedTilesChange((function(newType) { return function(properties) {
				var $ptr, properties;
				properties.Type = $newDataPointer("", ptrType$12);
				properties.Type.$set(newType[0]);
			}; })(newType), true); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onTileTypeChanged }; } $f.$ptr = $ptr; $f.app = app; $f.newType = newType; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onTileTypeChanged = function(newType) { return this.$val.onTileTypeChanged(newType); };
	MainApplication.ptr.prototype.onTileFloorHeightChanged = function(newValueString) {
		var $ptr, _tuple, app, err, newValue, newValueString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; app = $f.app; err = $f.err; newValue = $f.newValue; newValueString = $f.newValueString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		newValue = [newValue];
		app = this;
		_tuple = strconv.ParseInt(newValueString, 10, 16);
		newValue[0] = _tuple[0];
		err = _tuple[1];
		/* */ if (!(newValueString === "") && $interfaceIsEqual(err, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(newValueString === "") && $interfaceIsEqual(err, $ifaceNil)) { */ case 1:
			$r = app.requestSelectedTilesChange((function(newValue) { return function(properties) {
				var $ptr, properties;
				properties.FloorHeight = $newDataPointer(0, ptrType$13);
				properties.FloorHeight.$set((((newValue[0].$low + ((newValue[0].$high >> 31) * 4294967296)) >> 0) >> 0));
			}; })(newValue), true); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onTileFloorHeightChanged }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.app = app; $f.err = err; $f.newValue = newValue; $f.newValueString = newValueString; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onTileFloorHeightChanged = function(newValueString) { return this.$val.onTileFloorHeightChanged(newValueString); };
	MainApplication.ptr.prototype.onTileCeilingHeightChanged = function(newValueString) {
		var $ptr, _tuple, app, err, newValue, newValueString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; app = $f.app; err = $f.err; newValue = $f.newValue; newValueString = $f.newValueString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		newValue = [newValue];
		app = this;
		_tuple = strconv.ParseInt(newValueString, 10, 16);
		newValue[0] = _tuple[0];
		err = _tuple[1];
		/* */ if (!(newValueString === "") && $interfaceIsEqual(err, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(newValueString === "") && $interfaceIsEqual(err, $ifaceNil)) { */ case 1:
			$r = app.requestSelectedTilesChange((function(newValue) { return function(properties) {
				var $ptr, properties;
				properties.CeilingHeight = $newDataPointer(0, ptrType$13);
				properties.CeilingHeight.$set(((32 - ((newValue[0].$low + ((newValue[0].$high >> 31) * 4294967296)) >> 0) >> 0) >> 0));
			}; })(newValue), true); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onTileCeilingHeightChanged }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.app = app; $f.err = err; $f.newValue = newValue; $f.newValueString = newValueString; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onTileCeilingHeightChanged = function(newValueString) { return this.$val.onTileCeilingHeightChanged(newValueString); };
	MainApplication.ptr.prototype.onTileSlopeHeightChanged = function(newValueString) {
		var $ptr, _tuple, app, err, newValue, newValueString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; app = $f.app; err = $f.err; newValue = $f.newValue; newValueString = $f.newValueString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		newValue = [newValue];
		app = this;
		_tuple = strconv.ParseInt(newValueString, 10, 16);
		newValue[0] = _tuple[0];
		err = _tuple[1];
		/* */ if (!(newValueString === "") && $interfaceIsEqual(err, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(newValueString === "") && $interfaceIsEqual(err, $ifaceNil)) { */ case 1:
			$r = app.requestSelectedTilesChange((function(newValue) { return function(properties) {
				var $ptr, properties;
				properties.SlopeHeight = $newDataPointer(0, ptrType$13);
				properties.SlopeHeight.$set((((newValue[0].$low + ((newValue[0].$high >> 31) * 4294967296)) >> 0) >> 0));
			}; })(newValue), true); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onTileSlopeHeightChanged }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.app = app; $f.err = err; $f.newValue = newValue; $f.newValueString = newValueString; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onTileSlopeHeightChanged = function(newValueString) { return this.$val.onTileSlopeHeightChanged(newValueString); };
	MainApplication.ptr.prototype.onTileSlopeControlChanged = function(newValue) {
		var $ptr, app, newValue, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; newValue = $f.newValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		newValue = [newValue];
		app = this;
		/* */ if (!(newValue[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(newValue[0] === "")) { */ case 1:
			$r = app.requestSelectedTilesChange((function(newValue) { return function(properties) {
				var $ptr, properties;
				properties.SlopeControl = $newDataPointer("", ptrType$14);
				properties.SlopeControl.$set(newValue[0]);
			}; })(newValue), true); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onTileSlopeControlChanged }; } $f.$ptr = $ptr; $f.app = app; $f.newValue = newValue; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onTileSlopeControlChanged = function(newValue) { return this.$val.onTileSlopeControlChanged(newValue); };
	MainApplication.ptr.prototype.tileIntValueChangeCallback = function(accessor, updateNeighbors) {
		var $ptr, accessor, app, updateNeighbors;
		app = this;
		return (function $b(newValueString) {
			var $ptr, _tuple, err, newValue, newValueString, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; err = $f.err; newValue = $f.newValue; newValueString = $f.newValueString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			newValue = [newValue];
			_tuple = strconv.ParseInt(newValueString, 10, 16);
			newValue[0] = _tuple[0];
			err = _tuple[1];
			/* */ if (!(newValueString === "") && $interfaceIsEqual(err, $ifaceNil)) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!(newValueString === "") && $interfaceIsEqual(err, $ifaceNil)) { */ case 1:
				$r = app.requestSelectedTilesChange((function(newValue) { return function $b(properties) {
					var $ptr, _r, intPointer, properties, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; intPointer = $f.intPointer; properties = $f.properties; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					_r = accessor(properties); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					intPointer = _r;
					intPointer.$set($newDataPointer(0, ptrType$10));
					intPointer.$get().$set(((newValue[0].$low + ((newValue[0].$high >> 31) * 4294967296)) >> 0));
					/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.intPointer = intPointer; $f.properties = properties; $f.$s = $s; $f.$r = $r; return $f;
				}; })(newValue), updateNeighbors); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 2:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.err = err; $f.newValue = newValue; $f.newValueString = newValueString; $f.$s = $s; $f.$r = $r; return $f;
		});
	};
	MainApplication.prototype.tileIntValueChangeCallback = function(accessor, updateNeighbors) { return this.$val.tileIntValueChangeCallback(accessor, updateNeighbors); };
	MainApplication.ptr.prototype.tileIntRealWorldValueChangeCallback = function(accessor, updateNeighbors) {
		var $ptr, accessor, app, updateNeighbors;
		app = this;
		return app.tileIntValueChangeCallback((function $b(properties) {
			var $ptr, _r, properties, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; properties = $f.properties; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (properties.RealWorld === ptrType$16.nil) {
				properties.RealWorld = new model.RealWorldTileProperties.ptr(ptrType$10.nil, ptrType$10.nil, ptrType$10.nil, ptrType$10.nil, ptrType$10.nil, ptrType$17.nil, ptrType$13.nil);
			}
			_r = accessor(properties.RealWorld); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 2; case 2:
			return _r;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.properties = properties; $f.$s = $s; $f.$r = $r; return $f;
		}), updateNeighbors);
	};
	MainApplication.prototype.tileIntRealWorldValueChangeCallback = function(accessor, updateNeighbors) { return this.$val.tileIntRealWorldValueChangeCallback(accessor, updateNeighbors); };
	MainApplication.ptr.prototype.onTileWallTextureOffsetChanged = function(newValueString) {
		var $ptr, _tuple, app, err, newValue, newValueString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; app = $f.app; err = $f.err; newValue = $f.newValue; newValueString = $f.newValueString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		newValue = [newValue];
		app = this;
		_tuple = strconv.ParseInt(newValueString, 10, 16);
		newValue[0] = _tuple[0];
		err = _tuple[1];
		/* */ if (!(newValueString === "") && $interfaceIsEqual(err, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(newValueString === "") && $interfaceIsEqual(err, $ifaceNil)) { */ case 1:
			$r = app.requestSelectedTilesChange((function(newValue) { return function(properties) {
				var $ptr, properties;
				if (properties.RealWorld === ptrType$16.nil) {
					properties.RealWorld = new model.RealWorldTileProperties.ptr(ptrType$10.nil, ptrType$10.nil, ptrType$10.nil, ptrType$10.nil, ptrType$10.nil, ptrType$17.nil, ptrType$13.nil);
				}
				properties.RealWorld.WallTextureOffset = $newDataPointer(0, ptrType$13);
				properties.RealWorld.WallTextureOffset.$set((((newValue[0].$low + ((newValue[0].$high >> 31) * 4294967296)) >> 0) >> 0));
			}; })(newValue), true); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onTileWallTextureOffsetChanged }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.app = app; $f.err = err; $f.newValue = newValue; $f.newValueString = newValueString; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onTileWallTextureOffsetChanged = function(newValueString) { return this.$val.onTileWallTextureOffsetChanged(newValueString); };
	MainApplication.ptr.prototype.onTileUseAdjacentWallTextureChanged = function(newValue) {
		var $ptr, app, newValue, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; app = $f.app; newValue = $f.newValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		newValue = [newValue];
		app = this;
		/* */ if (!(newValue[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(newValue[0] === "")) { */ case 1:
			$r = app.requestSelectedTilesChange((function(newValue) { return function(properties) {
				var $ptr, properties;
				if (properties.RealWorld === ptrType$16.nil) {
					properties.RealWorld = new model.RealWorldTileProperties.ptr(ptrType$10.nil, ptrType$10.nil, ptrType$10.nil, ptrType$10.nil, ptrType$10.nil, ptrType$17.nil, ptrType$13.nil);
				}
				properties.RealWorld.UseAdjacentWallTexture = $newDataPointer(false, ptrType$17);
				properties.RealWorld.UseAdjacentWallTexture.$set(newValue[0] === "yes");
			}; })(newValue), true); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onTileUseAdjacentWallTextureChanged }; } $f.$ptr = $ptr; $f.app = app; $f.newValue = newValue; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onTileUseAdjacentWallTextureChanged = function(newValue) { return this.$val.onTileUseAdjacentWallTextureChanged(newValue); };
	MainApplication.ptr.prototype.onLevelTextureIndexChanged = function(newValueString) {
		var $ptr, _tuple, app, err, newValue, newValueString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; app = $f.app; err = $f.err; newValue = $f.newValue; newValueString = $f.newValueString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = [app];
		err = [err];
		newValue = [newValue];
		newValueString = [newValueString];
		app[0] = this;
		_tuple = strconv.ParseInt(newValueString[0], 10, 16);
		newValue[0] = _tuple[0];
		err[0] = _tuple[1];
		$r = app[0].updateViewModel((function(app, err, newValue, newValueString) { return function $b() {
			var $ptr, _r, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			/* */ if ((!(newValueString[0] === "")) && ($interfaceIsEqual(err[0], $ifaceNil)) && ((newValue[0].$high > 0 || (newValue[0].$high === 0 && newValue[0].$low >= 0))) && (((newValue[0].$low + ((newValue[0].$high >> 31) * 4294967296)) >> 0) < app[0].levelTextures.$length)) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if ((!(newValueString[0] === "")) && ($interfaceIsEqual(err[0], $ifaceNil)) && ((newValue[0].$high > 0 || (newValue[0].$high === 0 && newValue[0].$low >= 0))) && (((newValue[0].$low + ((newValue[0].$high >> 31) * 4294967296)) >> 0) < app[0].levelTextures.$length)) { */ case 1:
				_r = fmt.Sprintf("%d", new sliceType$4([new $Int((x = app[0].levelTextures, (($flatten64(newValue[0]) < 0 || $flatten64(newValue[0]) >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + $flatten64(newValue[0])])))])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = app[0].viewModel.LevelTextureID().Selected().Set(_r); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 3; continue;
			/* } else { */ case 2:
				$r = app[0].viewModel.LevelTextureID().Selected().Set(""); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 3:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		}; })(app, err, newValue, newValueString)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onLevelTextureIndexChanged }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.app = app; $f.err = err; $f.newValue = newValue; $f.newValueString = newValueString; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onLevelTextureIndexChanged = function(newValueString) { return this.$val.onLevelTextureIndexChanged(newValueString); };
	MainApplication.ptr.prototype.onLevelTextureIDChanged = function(newValueString) {
		var $ptr, _tuple, _tuple$1, app, archiveID, idErr, index, indexErr, levelID, newValue, newValueString, projectID, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; app = $f.app; archiveID = $f.archiveID; idErr = $f.idErr; index = $f.index; indexErr = $f.indexErr; levelID = $f.levelID; newValue = $f.newValue; newValueString = $f.newValueString; projectID = $f.projectID; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		app = this;
		/* */ if (!app.viewModelUpdating) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!app.viewModelUpdating) { */ case 1:
			_tuple = strconv.ParseInt(newValueString, 10, 16);
			newValue = _tuple[0];
			idErr = _tuple[1];
			_tuple$1 = strconv.ParseInt(app.viewModel.LevelTextureIndex().Selected().Get(), 10, 16);
			index = _tuple$1[0];
			indexErr = _tuple$1[1];
			/* */ if ((!(newValueString === "")) && ($interfaceIsEqual(idErr, $ifaceNil)) && ($interfaceIsEqual(indexErr, $ifaceNil)) && ((newValue.$high > 0 || (newValue.$high === 0 && newValue.$low >= 0))) && (((newValue.$low + ((newValue.$high >> 31) * 4294967296)) >> 0) < app.textureData.$length)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((!(newValueString === "")) && ($interfaceIsEqual(idErr, $ifaceNil)) && ($interfaceIsEqual(indexErr, $ifaceNil)) && ((newValue.$high > 0 || (newValue.$high === 0 && newValue.$low >= 0))) && (((newValue.$low + ((newValue.$high >> 31) * 4294967296)) >> 0) < app.textureData.$length)) { */ case 3:
				(x = app.levelTextures, (($flatten64(index) < 0 || $flatten64(index) >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + $flatten64(index)] = ((newValue.$low + ((newValue.$high >> 31) * 4294967296)) >> 0)));
				projectID = app.viewModel.SelectedProject();
				archiveID = "archive";
				levelID = app.activeLevelID;
				$r = app.store.SetLevelTextures(projectID, archiveID, levelID, app.levelTextures, $methodVal(app, "onStoreLevelTexturesChanged"), app.simpleStoreFailure("SetLevelTextures")); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: MainApplication.ptr.prototype.onLevelTextureIDChanged }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.app = app; $f.archiveID = archiveID; $f.idErr = idErr; $f.index = index; $f.indexErr = indexErr; $f.levelID = levelID; $f.newValue = newValue; $f.newValueString = newValueString; $f.projectID = projectID; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	MainApplication.prototype.onLevelTextureIDChanged = function(newValueString) { return this.$val.onLevelTextureIDChanged(newValueString); };
	NewRestDataStore = function(transport) {
		var $ptr, transport;
		return new RestDataStore.ptr(transport);
	};
	$pkg.NewRestDataStore = NewRestDataStore;
	RestDataStore.ptr.prototype.get = function(url, responseData, onSuccess, onFailure) {
		var $ptr, onFailure, onSuccess, responseData, store, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; onFailure = $f.onFailure; onSuccess = $f.onSuccess; responseData = $f.responseData; store = $f.store; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		onFailure = [onFailure];
		onSuccess = [onSuccess];
		responseData = [responseData];
		store = this;
		$r = store.transport.Get(url, (function(onFailure, onSuccess, responseData) { return function $b(jsonString) {
			var $ptr, _r, jsonString, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; jsonString = $f.jsonString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = json.Unmarshal(bytes.NewBufferString(jsonString).Bytes(), responseData[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$r = onSuccess[0](); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.jsonString = jsonString; $f.$s = $s; $f.$r = $r; return $f;
		}; })(onFailure, onSuccess, responseData), (function(onFailure, onSuccess, responseData) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onFailure[0](); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(onFailure, onSuccess, responseData)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.get }; } $f.$ptr = $ptr; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.responseData = responseData; $f.store = store; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.get = function(url, responseData, onSuccess, onFailure) { return this.$val.get(url, responseData, onSuccess, onFailure); };
	RestDataStore.ptr.prototype.put = function(url, requestData, responseData, onSuccess, onFailure) {
		var $ptr, _r, _tuple, data, onFailure, onSuccess, requestData, responseData, store, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; data = $f.data; onFailure = $f.onFailure; onSuccess = $f.onSuccess; requestData = $f.requestData; responseData = $f.responseData; store = $f.store; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		onFailure = [onFailure];
		onSuccess = [onSuccess];
		responseData = [responseData];
		store = this;
		_r = json.Marshal(requestData); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		data = _tuple[0];
		$r = store.transport.Put(url, data, (function(onFailure, onSuccess, responseData) { return function $b(jsonString) {
			var $ptr, _r$1, jsonString, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; jsonString = $f.jsonString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = json.Unmarshal(bytes.NewBufferString(jsonString).Bytes(), responseData[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$r = onSuccess[0](); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.jsonString = jsonString; $f.$s = $s; $f.$r = $r; return $f;
		}; })(onFailure, onSuccess, responseData), (function(onFailure, onSuccess, responseData) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onFailure[0](); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(onFailure, onSuccess, responseData)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.put }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.requestData = requestData; $f.responseData = responseData; $f.store = store; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.put = function(url, requestData, responseData, onSuccess, onFailure) { return this.$val.put(url, requestData, responseData, onSuccess, onFailure); };
	RestDataStore.ptr.prototype.post = function(url, requestData, responseData, onSuccess, onFailure) {
		var $ptr, _r, _tuple, data, onFailure, onSuccess, requestData, responseData, store, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; data = $f.data; onFailure = $f.onFailure; onSuccess = $f.onSuccess; requestData = $f.requestData; responseData = $f.responseData; store = $f.store; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		onFailure = [onFailure];
		onSuccess = [onSuccess];
		responseData = [responseData];
		store = this;
		_r = json.Marshal(requestData); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		data = _tuple[0];
		$r = store.transport.Post(url, data, (function(onFailure, onSuccess, responseData) { return function $b(jsonString) {
			var $ptr, _r$1, jsonString, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; jsonString = $f.jsonString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = json.Unmarshal(bytes.NewBufferString(jsonString).Bytes(), responseData[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$r = onSuccess[0](); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.jsonString = jsonString; $f.$s = $s; $f.$r = $r; return $f;
		}; })(onFailure, onSuccess, responseData), (function(onFailure, onSuccess, responseData) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onFailure[0](); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(onFailure, onSuccess, responseData)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.post }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.requestData = requestData; $f.responseData = responseData; $f.store = store; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.post = function(url, requestData, responseData, onSuccess, onFailure) { return this.$val.post(url, requestData, responseData, onSuccess, onFailure); };
	RestDataStore.ptr.prototype.NewProject = function(projectID, onSuccess, onFailure) {
		var $ptr, _r, inData, onFailure, onSuccess, outData, projectID, store, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; inData = $f.inData; onFailure = $f.onFailure; onSuccess = $f.onSuccess; outData = $f.outData; projectID = $f.projectID; store = $f.store; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		inData = [inData];
		outData = [outData];
		store = this;
		_r = fmt.Sprintf("/projects", new sliceType$4([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url = _r;
		inData[0] = new model.ProjectTemplate.ptr("");
		outData[0] = new model.Project.ptr(new model.Identifiable.ptr(new model.Referable.ptr(""), ""));
		inData[0].ID = projectID;
		$r = store.post(url, inData[0], outData[0], onSuccess, onFailure); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.NewProject }; } $f.$ptr = $ptr; $f._r = _r; $f.inData = inData; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.outData = outData; $f.projectID = projectID; $f.store = store; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.NewProject = function(projectID, onSuccess, onFailure) { return this.$val.NewProject(projectID, onSuccess, onFailure); };
	RestDataStore.ptr.prototype.Projects = function(onSuccess, onFailure) {
		var $ptr, data, onFailure, onSuccess, store, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; data = $f.data; onFailure = $f.onFailure; onSuccess = $f.onSuccess; store = $f.store; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		onSuccess = [onSuccess];
		store = this;
		url = "/projects";
		data[0] = new model.Projects.ptr(new model.Referable.ptr(""), sliceType$5.nil);
		$r = store.get(url, data[0], (function(data, onSuccess) { return function $b() {
			var $ptr, _i, _ref, index, item, projectIDs, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; index = $f.index; item = $f.item; projectIDs = $f.projectIDs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			projectIDs = $makeSlice(sliceType$3, data[0].Items.$length);
			_ref = data[0].Items;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				index = _i;
				item = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), model.Identifiable);
				((index < 0 || index >= projectIDs.$length) ? $throwRuntimeError("index out of range") : projectIDs.$array[projectIDs.$offset + index] = item.ID);
				_i++;
			}
			$r = onSuccess[0](projectIDs); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.index = index; $f.item = item; $f.projectIDs = projectIDs; $f.$s = $s; $f.$r = $r; return $f;
		}; })(data, onSuccess), onFailure); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.Projects }; } $f.$ptr = $ptr; $f.data = data; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.store = store; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.Projects = function(onSuccess, onFailure) { return this.$val.Projects(onSuccess, onFailure); };
	RestDataStore.ptr.prototype.Palette = function(projectID, paletteID, onSuccess, onFailure) {
		var $ptr, _r, data, onFailure, onSuccess, paletteID, projectID, store, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; onFailure = $f.onFailure; onSuccess = $f.onSuccess; paletteID = $f.paletteID; projectID = $f.projectID; store = $f.store; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		onSuccess = [onSuccess];
		store = this;
		_r = fmt.Sprintf("/projects/%s/palettes/%s", new sliceType$4([new $String(projectID), new $String(paletteID)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url = _r;
		data[0] = new model.Palette.ptr(new model.Identifiable.ptr(new model.Referable.ptr(""), ""), arrayType.zero());
		$r = store.get(url, data[0], (function(data, onSuccess) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onSuccess[0](data[0].Colors); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(data, onSuccess), onFailure); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.Palette }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.paletteID = paletteID; $f.projectID = projectID; $f.store = store; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.Palette = function(projectID, paletteID, onSuccess, onFailure) { return this.$val.Palette(projectID, paletteID, onSuccess, onFailure); };
	RestDataStore.ptr.prototype.Levels = function(projectID, archiveID, onSuccess, onFailure) {
		var $ptr, _r, archiveID, data, onFailure, onSuccess, projectID, store, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; archiveID = $f.archiveID; data = $f.data; onFailure = $f.onFailure; onSuccess = $f.onSuccess; projectID = $f.projectID; store = $f.store; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		onSuccess = [onSuccess];
		store = this;
		_r = fmt.Sprintf("/projects/%s/%s/levels", new sliceType$4([new $String(projectID), new $String(archiveID)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url = _r;
		data[0] = new model.Levels.ptr(new model.Referable.ptr(""), sliceType.nil);
		$r = store.get(url, data[0], (function(data, onSuccess) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onSuccess[0](data[0].List); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(data, onSuccess), onFailure); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.Levels }; } $f.$ptr = $ptr; $f._r = _r; $f.archiveID = archiveID; $f.data = data; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.projectID = projectID; $f.store = store; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.Levels = function(projectID, archiveID, onSuccess, onFailure) { return this.$val.Levels(projectID, archiveID, onSuccess, onFailure); };
	RestDataStore.ptr.prototype.LevelTextures = function(projectID, archiveID, levelID, onSuccess, onFailure) {
		var $ptr, _r, archiveID, data, levelID, onFailure, onSuccess, projectID, store, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; archiveID = $f.archiveID; data = $f.data; levelID = $f.levelID; onFailure = $f.onFailure; onSuccess = $f.onSuccess; projectID = $f.projectID; store = $f.store; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		onSuccess = [onSuccess];
		store = this;
		_r = fmt.Sprintf("/projects/%s/%s/levels/%d/textures", new sliceType$4([new $String(projectID), new $String(archiveID), new $Int(levelID)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url = _r;
		data[0] = new model.LevelTextures.ptr(new model.Referable.ptr(""), sliceType$1.nil);
		$r = store.get(url, data[0], (function(data, onSuccess) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onSuccess[0](data[0].IDs); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(data, onSuccess), onFailure); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.LevelTextures }; } $f.$ptr = $ptr; $f._r = _r; $f.archiveID = archiveID; $f.data = data; $f.levelID = levelID; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.projectID = projectID; $f.store = store; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.LevelTextures = function(projectID, archiveID, levelID, onSuccess, onFailure) { return this.$val.LevelTextures(projectID, archiveID, levelID, onSuccess, onFailure); };
	RestDataStore.ptr.prototype.SetLevelTextures = function(projectID, archiveID, levelID, textureIDs, onSuccess, onFailure) {
		var $ptr, _r, archiveID, data, levelID, onFailure, onSuccess, projectID, store, textureIDs, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; archiveID = $f.archiveID; data = $f.data; levelID = $f.levelID; onFailure = $f.onFailure; onSuccess = $f.onSuccess; projectID = $f.projectID; store = $f.store; textureIDs = $f.textureIDs; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		onSuccess = [onSuccess];
		store = this;
		_r = fmt.Sprintf("/projects/%s/%s/levels/%d/textures", new sliceType$4([new $String(projectID), new $String(archiveID), new $Int(levelID)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url = _r;
		data[0] = new model.LevelTextures.ptr(new model.Referable.ptr(""), sliceType$1.nil);
		$r = store.put(url, textureIDs, data[0], (function(data, onSuccess) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onSuccess[0](data[0].IDs); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(data, onSuccess), onFailure); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.SetLevelTextures }; } $f.$ptr = $ptr; $f._r = _r; $f.archiveID = archiveID; $f.data = data; $f.levelID = levelID; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.projectID = projectID; $f.store = store; $f.textureIDs = textureIDs; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.SetLevelTextures = function(projectID, archiveID, levelID, textureIDs, onSuccess, onFailure) { return this.$val.SetLevelTextures(projectID, archiveID, levelID, textureIDs, onSuccess, onFailure); };
	RestDataStore.ptr.prototype.Textures = function(projectID, onSuccess, onFailure) {
		var $ptr, _r, data, onFailure, onSuccess, projectID, store, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; onFailure = $f.onFailure; onSuccess = $f.onSuccess; projectID = $f.projectID; store = $f.store; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		onSuccess = [onSuccess];
		store = this;
		_r = fmt.Sprintf("/projects/%s/textures", new sliceType$4([new $String(projectID)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url = _r;
		data[0] = new model.Textures.ptr(sliceType$2.nil);
		$r = store.get(url, data[0], (function(data, onSuccess) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onSuccess[0](data[0].List); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(data, onSuccess), onFailure); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.Textures }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.projectID = projectID; $f.store = store; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.Textures = function(projectID, onSuccess, onFailure) { return this.$val.Textures(projectID, onSuccess, onFailure); };
	RestDataStore.ptr.prototype.TextureBitmap = function(projectID, textureID, size, onSuccess, onFailure) {
		var $ptr, _r, data, onFailure, onSuccess, projectID, size, store, textureID, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; onFailure = $f.onFailure; onSuccess = $f.onSuccess; projectID = $f.projectID; size = $f.size; store = $f.store; textureID = $f.textureID; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		onSuccess = [onSuccess];
		store = this;
		_r = fmt.Sprintf("/projects/%s/textures/%d/%s/raw", new sliceType$4([new $String(projectID), new $Int(textureID), new $String(size)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url = _r;
		data[0] = new model.RawBitmap.ptr(0, 0, "");
		$r = store.get(url, data[0], (function(data, onSuccess) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onSuccess[0](data[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(data, onSuccess), onFailure); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.TextureBitmap }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.projectID = projectID; $f.size = size; $f.store = store; $f.textureID = textureID; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.TextureBitmap = function(projectID, textureID, size, onSuccess, onFailure) { return this.$val.TextureBitmap(projectID, textureID, size, onSuccess, onFailure); };
	RestDataStore.ptr.prototype.Tiles = function(projectID, archiveID, levelID, onSuccess, onFailure) {
		var $ptr, _r, archiveID, data, levelID, onFailure, onSuccess, projectID, store, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; archiveID = $f.archiveID; data = $f.data; levelID = $f.levelID; onFailure = $f.onFailure; onSuccess = $f.onSuccess; projectID = $f.projectID; store = $f.store; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		onSuccess = [onSuccess];
		store = this;
		_r = fmt.Sprintf("/projects/%s/%s/levels/%d/tiles", new sliceType$4([new $String(projectID), new $String(archiveID), new $Int(levelID)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url = _r;
		data[0] = new model.Tiles.ptr(sliceType$7.nil);
		$r = store.get(url, data[0], (function(data, onSuccess) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onSuccess[0](data[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(data, onSuccess), onFailure); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.Tiles }; } $f.$ptr = $ptr; $f._r = _r; $f.archiveID = archiveID; $f.data = data; $f.levelID = levelID; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.projectID = projectID; $f.store = store; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.Tiles = function(projectID, archiveID, levelID, onSuccess, onFailure) { return this.$val.Tiles(projectID, archiveID, levelID, onSuccess, onFailure); };
	RestDataStore.ptr.prototype.Tile = function(projectID, archiveID, levelID, x, y, onSuccess, onFailure) {
		var $ptr, _r, archiveID, data, levelID, onFailure, onSuccess, projectID, store, url, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; archiveID = $f.archiveID; data = $f.data; levelID = $f.levelID; onFailure = $f.onFailure; onSuccess = $f.onSuccess; projectID = $f.projectID; store = $f.store; url = $f.url; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		onSuccess = [onSuccess];
		store = this;
		_r = fmt.Sprintf("/projects/%s/%s/levels/%d/tiles/%d/%d", new sliceType$4([new $String(projectID), new $String(archiveID), new $Int(levelID), new $Int(y), new $Int(x)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url = _r;
		data[0] = new model.Tile.ptr(new model.Referable.ptr(""), new model.TileProperties.ptr(ptrType$12.nil, ptrType$13.nil, ptrType$13.nil, ptrType$13.nil, ptrType$14.nil, ptrType$15.nil, ptrType$16.nil));
		$r = store.get(url, data[0], (function(data, onSuccess) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onSuccess[0](data[0].Properties); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(data, onSuccess), onFailure); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.Tile }; } $f.$ptr = $ptr; $f._r = _r; $f.archiveID = archiveID; $f.data = data; $f.levelID = levelID; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.projectID = projectID; $f.store = store; $f.url = url; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.Tile = function(projectID, archiveID, levelID, x, y, onSuccess, onFailure) { return this.$val.Tile(projectID, archiveID, levelID, x, y, onSuccess, onFailure); };
	RestDataStore.ptr.prototype.SetTile = function(projectID, archiveID, levelID, x, y, properties, onSuccess, onFailure) {
		var $ptr, _r, archiveID, data, levelID, onFailure, onSuccess, projectID, properties, store, url, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; archiveID = $f.archiveID; data = $f.data; levelID = $f.levelID; onFailure = $f.onFailure; onSuccess = $f.onSuccess; projectID = $f.projectID; properties = $f.properties; store = $f.store; url = $f.url; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		onSuccess = [onSuccess];
		properties = [properties];
		properties[0] = $clone(properties[0], model.TileProperties);
		store = this;
		_r = fmt.Sprintf("/projects/%s/%s/levels/%d/tiles/%d/%d", new sliceType$4([new $String(projectID), new $String(archiveID), new $Int(levelID), new $Int(y), new $Int(x)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url = _r;
		data[0] = new model.Tile.ptr(new model.Referable.ptr(""), new model.TileProperties.ptr(ptrType$12.nil, ptrType$13.nil, ptrType$13.nil, ptrType$13.nil, ptrType$14.nil, ptrType$15.nil, ptrType$16.nil));
		$r = store.put(url, properties[0], data[0], (function(data, onSuccess, properties) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onSuccess[0](data[0].Properties); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(data, onSuccess, properties), onFailure); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RestDataStore.ptr.prototype.SetTile }; } $f.$ptr = $ptr; $f._r = _r; $f.archiveID = archiveID; $f.data = data; $f.levelID = levelID; $f.onFailure = onFailure; $f.onSuccess = onSuccess; $f.projectID = projectID; $f.properties = properties; $f.store = store; $f.url = url; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	RestDataStore.prototype.SetTile = function(projectID, archiveID, levelID, x, y, properties, onSuccess, onFailure) { return this.$val.SetTile(projectID, archiveID, levelID, x, y, properties, onSuccess, onFailure); };
	intStringList = function(start, stop) {
		var $ptr, _r, list, start, stop, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; list = $f.list; start = $f.start; stop = $f.stop; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		list = sliceType$3.nil;
		value = start;
		/* while (true) { */ case 1:
			/* if (!(value <= stop)) { break; } */ if(!(value <= stop)) { $s = 2; continue; }
			_r = fmt.Sprintf("%d", new sliceType$4([new $Int(value)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			list = $append(list, _r);
			value = value + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		list = $append(list, "");
		return list;
		/* */ } return; } if ($f === undefined) { $f = { $blk: intStringList }; } $f.$ptr = $ptr; $f._r = _r; $f.list = list; $f.start = start; $f.stop = stop; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	NewTilesViewModel = function(levelIsRealWorld) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, levelIsRealWorld, realWorldSection, vm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; levelIsRealWorld = $f.levelIsRealWorld; realWorldSection = $f.realWorldSection; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		vm = new TilesViewModel.ptr(ptrType$18.nil, ptrType$19.nil, ptrType$19.nil, ptrType$19.nil, ptrType$19.nil, ptrType$19.nil, ptrType$19.nil, ptrType$19.nil, ptrType$19.nil, ptrType$19.nil, ptrType$19.nil, ptrType$19.nil, ptrType$19.nil);
		vm.tileType = viewmodel.NewValueSelectionNode("Tile Type", new sliceType$3(["open", "solid", "diagonalOpenSouthEast", "diagonalOpenSouthWest", "diagonalOpenNorthWest", "diagonalOpenNorthEast", "slopeSouthToNorth", "slopeWestToEast", "slopeNorthToSouth", "slopeEastToWest", "valleySouthEastToNorthWest", "valleySouthWestToNorthEast", "valleyNorthWestToSouthEast", "valleyNorthEastToSouthWest", "ridgeNorthWestToSouthEast", "ridgeNorthEastToSouthWest", "ridgeSouthEastToNorthWest", "ridgeSouthWestToNorthEast", ""]), "");
		_r = intStringList(0, 31); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = viewmodel.NewValueSelectionNode("Floor Height Level", _arg, ""); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		vm.floorHeight = _r$1;
		_r$2 = intStringList(1, 32); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_r$3 = viewmodel.NewValueSelectionNode("Ceiling Height Level", _arg$1, ""); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		vm.ceilingHeight = _r$3;
		_r$4 = intStringList(0, 31); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$2 = _r$4;
		_r$5 = viewmodel.NewValueSelectionNode("Slope Height", _arg$2, ""); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		vm.slopeHeight = _r$5;
		vm.slopeControl = viewmodel.NewValueSelectionNode("Slope Control", new sliceType$3(["ceilingInverted", "ceilingMirrored", "ceilingFlat", "floorFlat", ""]), "");
		vm.floorTexture = viewmodel.NewValueSelectionNode("Floor Texture Index", new sliceType$3([""]), "");
		vm.ceilingTexture = viewmodel.NewValueSelectionNode("Ceiling Texture Index", new sliceType$3([""]), "");
		vm.wallTexture = viewmodel.NewValueSelectionNode("Wall Texture Index", new sliceType$3([""]), "");
		_r$6 = intStringList(0, 3); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$3 = _r$6;
		_r$7 = viewmodel.NewValueSelectionNode("Floor Tex Rotations", _arg$3, ""); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		vm.floorTextureRotations = _r$7;
		_r$8 = intStringList(0, 3); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_arg$4 = _r$8;
		_r$9 = viewmodel.NewValueSelectionNode("Ceiling Tex Rotations", _arg$4, ""); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		vm.ceilingTextureRotations = _r$9;
		vm.useAdjacentWallTexture = viewmodel.NewValueSelectionNode("Use Adj. Wall Tex", new sliceType$3(["yes", "no", ""]), "");
		_r$10 = intStringList(0, 31); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_arg$5 = _r$10;
		_r$11 = viewmodel.NewValueSelectionNode("Wall Texture Offset", _arg$5, ""); /* */ $s = 12; case 12: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		vm.wallTextureOffset = _r$11;
		realWorldSection = viewmodel.NewSectionNode("Real World", new sliceType$8([vm.floorTexture, vm.ceilingTexture, vm.wallTexture, vm.floorTextureRotations, vm.ceilingTextureRotations, vm.useAdjacentWallTexture, vm.wallTextureOffset]), levelIsRealWorld);
		vm.root = viewmodel.NewSectionNode("Tiles", new sliceType$8([vm.tileType, vm.floorHeight, vm.ceilingHeight, vm.slopeHeight, vm.slopeControl, realWorldSection]), viewmodel.NewBoolValueNode("", true));
		return vm;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewTilesViewModel }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.levelIsRealWorld = levelIsRealWorld; $f.realWorldSection = realWorldSection; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewTilesViewModel = NewTilesViewModel;
	TilesViewModel.ptr.prototype.SetLevelTextureCount = function(count) {
		var $ptr, _r, count, values, vm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; count = $f.count; values = $f.values; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		vm = this;
		values = new sliceType$3([""]);
		/* */ if (count > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (count > 0) { */ case 1:
			_r = intStringList(0, count - 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			values = _r;
		/* } */ case 2:
		$r = vm.floorTexture.SetValues(values); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = vm.ceilingTexture.SetValues(values); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = vm.wallTexture.SetValues(values); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: TilesViewModel.ptr.prototype.SetLevelTextureCount }; } $f.$ptr = $ptr; $f._r = _r; $f.count = count; $f.values = values; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
	};
	TilesViewModel.prototype.SetLevelTextureCount = function(count) { return this.$val.SetLevelTextureCount(count); };
	TilesViewModel.ptr.prototype.TileType = function() {
		var $ptr, vm;
		vm = this;
		return vm.tileType;
	};
	TilesViewModel.prototype.TileType = function() { return this.$val.TileType(); };
	TilesViewModel.ptr.prototype.FloorHeight = function() {
		var $ptr, vm;
		vm = this;
		return vm.floorHeight;
	};
	TilesViewModel.prototype.FloorHeight = function() { return this.$val.FloorHeight(); };
	TilesViewModel.ptr.prototype.CeilingHeight = function() {
		var $ptr, vm;
		vm = this;
		return vm.ceilingHeight;
	};
	TilesViewModel.prototype.CeilingHeight = function() { return this.$val.CeilingHeight(); };
	TilesViewModel.ptr.prototype.SlopeHeight = function() {
		var $ptr, vm;
		vm = this;
		return vm.slopeHeight;
	};
	TilesViewModel.prototype.SlopeHeight = function() { return this.$val.SlopeHeight(); };
	TilesViewModel.ptr.prototype.SlopeControl = function() {
		var $ptr, vm;
		vm = this;
		return vm.slopeControl;
	};
	TilesViewModel.prototype.SlopeControl = function() { return this.$val.SlopeControl(); };
	TilesViewModel.ptr.prototype.FloorTexture = function() {
		var $ptr, vm;
		vm = this;
		return vm.floorTexture;
	};
	TilesViewModel.prototype.FloorTexture = function() { return this.$val.FloorTexture(); };
	TilesViewModel.ptr.prototype.CeilingTexture = function() {
		var $ptr, vm;
		vm = this;
		return vm.ceilingTexture;
	};
	TilesViewModel.prototype.CeilingTexture = function() { return this.$val.CeilingTexture(); };
	TilesViewModel.ptr.prototype.WallTexture = function() {
		var $ptr, vm;
		vm = this;
		return vm.wallTexture;
	};
	TilesViewModel.prototype.WallTexture = function() { return this.$val.WallTexture(); };
	TilesViewModel.ptr.prototype.FloorTextureRotations = function() {
		var $ptr, vm;
		vm = this;
		return vm.floorTextureRotations;
	};
	TilesViewModel.prototype.FloorTextureRotations = function() { return this.$val.FloorTextureRotations(); };
	TilesViewModel.ptr.prototype.CeilingTextureRotations = function() {
		var $ptr, vm;
		vm = this;
		return vm.ceilingTextureRotations;
	};
	TilesViewModel.prototype.CeilingTextureRotations = function() { return this.$val.CeilingTextureRotations(); };
	TilesViewModel.ptr.prototype.UseAdjacentWallTexture = function() {
		var $ptr, vm;
		vm = this;
		return vm.useAdjacentWallTexture;
	};
	TilesViewModel.prototype.UseAdjacentWallTexture = function() { return this.$val.UseAdjacentWallTexture(); };
	TilesViewModel.ptr.prototype.WallTextureOffset = function() {
		var $ptr, vm;
		vm = this;
		return vm.wallTextureOffset;
	};
	TilesViewModel.prototype.WallTextureOffset = function() { return this.$val.WallTextureOffset(); };
	NewViewModel = function() {
		var $ptr, _r, levelTexturesControlSection, mapControlSection, mapSection, mapSectionSelection, projectSection, projectSelected, vm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; levelTexturesControlSection = $f.levelTexturesControlSection; mapControlSection = $f.mapControlSection; mapSection = $f.mapSection; mapSectionSelection = $f.mapSectionSelection; projectSection = $f.projectSection; projectSelected = $f.projectSelected; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		projectSelected = [projectSelected];
		vm = new ViewModel.ptr(ptrType$18.nil, ptrType$20.nil, ptrType$19.nil, ptrType$21.nil, ptrType$22.nil, ptrType$21.nil, ptrType$19.nil, ptrType$23.nil, ptrType$19.nil, ptrType$19.nil, sliceType$1.nil, ptrType$21.nil, ptrType$24.nil);
		vm.projects = viewmodel.NewValueSelectionNode("Select", sliceType$3.nil, "");
		vm.newProjectID = viewmodel.NewEditableStringValueNode("New Project Name", "");
		vm.createProject = viewmodel.NewActionNode("Create Project");
		vm.textureCount = viewmodel.NewStringValueNode("Texture Count", "");
		projectSection = viewmodel.NewSectionNode("Project", new sliceType$8([vm.projects, vm.newProjectID, vm.createProject, vm.textureCount]), viewmodel.NewBoolValueNode("Available", true));
		vm.levels = viewmodel.NewValueSelectionNode("Level", sliceType$3.nil, "");
		vm.levelIsRealWorld = viewmodel.NewBoolValueNode("Is Real World", false);
		_r = NewTilesViewModel(vm.levelIsRealWorld); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		vm.tiles = _r;
		vm.levelTextureIndex = viewmodel.NewValueSelectionNode("Texture Index", new sliceType$3([""]), "");
		vm.levelTextureID = viewmodel.NewValueSelectionNode("Texture ID", new sliceType$3([""]), "");
		levelTexturesControlSection = viewmodel.NewSectionNode("Level Textures", new sliceType$8([vm.levelTextureIndex, vm.levelTextureID]), vm.levelIsRealWorld);
		mapControlSection = viewmodel.NewSectionNode("Control", new sliceType$8([vm.levels]), viewmodel.NewBoolValueNode("", true));
		mapSectionSelection = viewmodel.NewSectionSelectionNode("Map Section", $makeMap($String.keyFor, [{ k: "Control", v: mapControlSection }, { k: "Level Textures", v: levelTexturesControlSection }, { k: "Tiles", v: vm.tiles.root }]), "Control");
		projectSelected[0] = viewmodel.NewBoolValueNode("Available", false);
		vm.projects.Selected().Subscribe((function(projectSelected) { return function $b(projectID) {
			var $ptr, projectID, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; projectID = $f.projectID; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = projectSelected[0].Set(!(projectID === "")); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.projectID = projectID; $f.$s = $s; $f.$r = $r; return $f;
		}; })(projectSelected));
		mapSection = viewmodel.NewSectionNode("Map", new sliceType$8([mapSectionSelection]), projectSelected[0]);
		vm.mainSection = viewmodel.NewSectionSelectionNode("Section", $makeMap($String.keyFor, [{ k: "Project", v: projectSection }, { k: "Map", v: mapSection }]), "Project");
		vm.pointerCoordinate = viewmodel.NewStringValueNode("Pointer at", "");
		vm.root = viewmodel.NewSectionNode("", new sliceType$8([vm.mainSection, vm.pointerCoordinate]), viewmodel.NewBoolValueNode("", true));
		return vm;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewViewModel }; } $f.$ptr = $ptr; $f._r = _r; $f.levelTexturesControlSection = levelTexturesControlSection; $f.mapControlSection = mapControlSection; $f.mapSection = mapSection; $f.mapSectionSelection = mapSectionSelection; $f.projectSection = projectSection; $f.projectSelected = projectSelected; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewViewModel = NewViewModel;
	ViewModel.ptr.prototype.Root = function() {
		var $ptr, vm;
		vm = this;
		return vm.root;
	};
	ViewModel.prototype.Root = function() { return this.$val.Root(); };
	ViewModel.ptr.prototype.SelectMapSection = function() {
		var $ptr, vm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		vm = this;
		$r = vm.mainSection.Selection().Selected().Set("Map"); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ViewModel.ptr.prototype.SelectMapSection }; } $f.$ptr = $ptr; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
	};
	ViewModel.prototype.SelectMapSection = function() { return this.$val.SelectMapSection(); };
	ViewModel.ptr.prototype.SelectedProject = function() {
		var $ptr, vm;
		vm = this;
		return vm.projects.Selected().Get();
	};
	ViewModel.prototype.SelectedProject = function() { return this.$val.SelectedProject(); };
	ViewModel.ptr.prototype.OnSelectedProjectChanged = function(callback) {
		var $ptr, callback, vm;
		vm = this;
		vm.projects.Selected().Subscribe(callback);
	};
	ViewModel.prototype.OnSelectedProjectChanged = function(callback) { return this.$val.OnSelectedProjectChanged(callback); };
	ViewModel.ptr.prototype.SetProjects = function(projectIDs) {
		var $ptr, projectIDs, vm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; projectIDs = $f.projectIDs; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		vm = this;
		$r = vm.projects.SetValues(projectIDs); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ViewModel.ptr.prototype.SetProjects }; } $f.$ptr = $ptr; $f.projectIDs = projectIDs; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
	};
	ViewModel.prototype.SetProjects = function(projectIDs) { return this.$val.SetProjects(projectIDs); };
	ViewModel.ptr.prototype.SelectProject = function(id) {
		var $ptr, id, vm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; id = $f.id; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		vm = this;
		$r = vm.projects.Selected().Set(id); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ViewModel.ptr.prototype.SelectProject }; } $f.$ptr = $ptr; $f.id = id; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
	};
	ViewModel.prototype.SelectProject = function(id) { return this.$val.SelectProject(id); };
	ViewModel.ptr.prototype.NewProjectID = function() {
		var $ptr, vm;
		vm = this;
		return vm.newProjectID;
	};
	ViewModel.prototype.NewProjectID = function() { return this.$val.NewProjectID(); };
	ViewModel.ptr.prototype.CreateProject = function() {
		var $ptr, vm;
		vm = this;
		return vm.createProject;
	};
	ViewModel.prototype.CreateProject = function() { return this.$val.CreateProject(); };
	ViewModel.ptr.prototype.SetTextureCount = function(value) {
		var $ptr, _r, _r$1, textureIDs, value, vm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; textureIDs = $f.textureIDs; value = $f.value; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		vm = this;
		textureIDs = new sliceType$3([""]);
		_r = fmt.Sprintf("%d", new sliceType$4([new $Int(value)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = vm.textureCount.Set(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (value > 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (value > 0) { */ case 3:
			_r$1 = intStringList(0, value - 1 >> 0); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			textureIDs = _r$1;
		/* } */ case 4:
		$r = vm.levelTextureID.SetValues(textureIDs); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ViewModel.ptr.prototype.SetTextureCount }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.textureIDs = textureIDs; $f.value = value; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
	};
	ViewModel.prototype.SetTextureCount = function(value) { return this.$val.SetTextureCount(value); };
	ViewModel.ptr.prototype.OnSelectedLevelChanged = function(callback) {
		var $ptr, callback, vm;
		vm = this;
		vm.levels.Selected().Subscribe(callback);
	};
	ViewModel.prototype.OnSelectedLevelChanged = function(callback) { return this.$val.OnSelectedLevelChanged(callback); };
	ViewModel.ptr.prototype.SetLevels = function(levelIDs) {
		var $ptr, levelIDs, vm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; levelIDs = $f.levelIDs; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		vm = this;
		$r = vm.levels.SetValues(levelIDs); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ViewModel.ptr.prototype.SetLevels }; } $f.$ptr = $ptr; $f.levelIDs = levelIDs; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
	};
	ViewModel.prototype.SetLevels = function(levelIDs) { return this.$val.SetLevels(levelIDs); };
	ViewModel.ptr.prototype.SetPointerAt = function(tileX, tileY, subX, subY) {
		var $ptr, _r, subX, subY, text, tileX, tileY, vm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; subX = $f.subX; subY = $f.subY; text = $f.text; tileX = $f.tileX; tileY = $f.tileY; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		vm = this;
		text = "";
		/* */ if ((tileX >= 0) && (tileY >= 0) && (tileX < 64) && (tileY < 64)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((tileX >= 0) && (tileY >= 0) && (tileX < 64) && (tileY < 64)) { */ case 1:
			_r = fmt.Sprintf("Tile: %2d/%2d Sub: %3d/%3d", new sliceType$4([new $Int(tileX), new $Int(tileY), new $Int(subX), new $Int(subY)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			text = _r;
		/* } */ case 2:
		$r = vm.pointerCoordinate.Set(text); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ViewModel.ptr.prototype.SetPointerAt }; } $f.$ptr = $ptr; $f._r = _r; $f.subX = subX; $f.subY = subY; $f.text = text; $f.tileX = tileX; $f.tileY = tileY; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
	};
	ViewModel.prototype.SetPointerAt = function(tileX, tileY, subX, subY) { return this.$val.SetPointerAt(tileX, tileY, subX, subY); };
	ViewModel.ptr.prototype.SetLevelIsRealWorld = function(value) {
		var $ptr, value, vm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; value = $f.value; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		vm = this;
		$r = vm.levelIsRealWorld.Set(value); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ViewModel.ptr.prototype.SetLevelIsRealWorld }; } $f.$ptr = $ptr; $f.value = value; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
	};
	ViewModel.prototype.SetLevelIsRealWorld = function(value) { return this.$val.SetLevelIsRealWorld(value); };
	ViewModel.ptr.prototype.Tiles = function() {
		var $ptr, vm;
		vm = this;
		return vm.tiles;
	};
	ViewModel.prototype.Tiles = function() { return this.$val.Tiles(); };
	ViewModel.ptr.prototype.SetLevelTextures = function(textureIDs) {
		var $ptr, _r, idCount, indexStrings, textureIDs, vm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; idCount = $f.idCount; indexStrings = $f.indexStrings; textureIDs = $f.textureIDs; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		vm = this;
		idCount = textureIDs.$length;
		vm.levelTextureIDs = textureIDs;
		$r = vm.tiles.SetLevelTextureCount(idCount); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		indexStrings = new sliceType$3([""]);
		/* */ if (idCount > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (idCount > 0) { */ case 2:
			_r = intStringList(0, idCount - 1 >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			indexStrings = _r;
		/* } */ case 3:
		$r = vm.levelTextureIndex.SetValues(indexStrings); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ViewModel.ptr.prototype.SetLevelTextures }; } $f.$ptr = $ptr; $f._r = _r; $f.idCount = idCount; $f.indexStrings = indexStrings; $f.textureIDs = textureIDs; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
	};
	ViewModel.prototype.SetLevelTextures = function(textureIDs) { return this.$val.SetLevelTextures(textureIDs); };
	ViewModel.ptr.prototype.LevelTextureIndex = function() {
		var $ptr, vm;
		vm = this;
		return vm.levelTextureIndex;
	};
	ViewModel.prototype.LevelTextureIndex = function() { return this.$val.LevelTextureIndex(); };
	ViewModel.ptr.prototype.LevelTextureID = function() {
		var $ptr, vm;
		vm = this;
		return vm.levelTextureID;
	};
	ViewModel.prototype.LevelTextureID = function() { return this.$val.LevelTextureID(); };
	ptrType$27.methods = [{prop: "queryProjectsAndSelect", name: "queryProjectsAndSelect", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [], false)}, {prop: "ViewModel", name: "ViewModel", pkg: "", typ: $funcType([], [viewmodel.Node], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([env.OpenGlWindow], [], false)}, {prop: "simpleStoreFailure", name: "simpleStoreFailure", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [FailureFunc], false)}, {prop: "updateElapsedNano", name: "updateElapsedNano", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([], [], false)}, {prop: "render", name: "render", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([], [], false)}, {prop: "unprojectPixel", name: "unprojectPixel", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$Float32, $Float32], [$Float32, $Float32], false)}, {prop: "onMouseMove", name: "onMouseMove", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$Float32, $Float32], [], false)}, {prop: "onMouseButtonDown", name: "onMouseButtonDown", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "onMouseButtonUp", name: "onMouseButtonUp", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "onMouseScroll", name: "onMouseScroll", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$Float32, $Float32], [], false)}, {prop: "onMouseClick", name: "onMouseClick", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$Uint32], [], false)}, {prop: "animatedPaletteIndex", name: "animatedPaletteIndex", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$Int], [$Int], false)}, {prop: "onCreateProject", name: "onCreateProject", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([], [], false)}, {prop: "onSelectedProjectChanged", name: "onSelectedProjectChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [], false)}, {prop: "onSelectedLevelChanged", name: "onSelectedLevelChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [], false)}, {prop: "isActiveLevelRealWorld", name: "isActiveLevelRealWorld", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([], [$Bool], false)}, {prop: "onStoreLevelTexturesChanged", name: "onStoreLevelTexturesChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([sliceType$1], [], false)}, {prop: "loadTexture", name: "loadTexture", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$Int], [], false)}, {prop: "levelTexture", name: "levelTexture", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$Int], [graphics.Texture], false)}, {prop: "onTilePropertiesUpdated", name: "onTilePropertiesUpdated", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([model$1.TileCoordinate, ptrType$26], [], false)}, {prop: "updateViewModel", name: "updateViewModel", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([funcType$2], [], false)}, {prop: "requestSelectedTilesChange", name: "requestSelectedTilesChange", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([funcType$9, $Bool], [], false)}, {prop: "onTileSelectionChanged", name: "onTileSelectionChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([], [], false)}, {prop: "onTileTypeChanged", name: "onTileTypeChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [], false)}, {prop: "onTileFloorHeightChanged", name: "onTileFloorHeightChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [], false)}, {prop: "onTileCeilingHeightChanged", name: "onTileCeilingHeightChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [], false)}, {prop: "onTileSlopeHeightChanged", name: "onTileSlopeHeightChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [], false)}, {prop: "onTileSlopeControlChanged", name: "onTileSlopeControlChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [], false)}, {prop: "tileIntValueChangeCallback", name: "tileIntValueChangeCallback", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([funcType$10, $Bool], [funcType$11], false)}, {prop: "tileIntRealWorldValueChangeCallback", name: "tileIntRealWorldValueChangeCallback", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([funcType$12, $Bool], [funcType$11], false)}, {prop: "onTileWallTextureOffsetChanged", name: "onTileWallTextureOffsetChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [], false)}, {prop: "onTileUseAdjacentWallTextureChanged", name: "onTileUseAdjacentWallTextureChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [], false)}, {prop: "onLevelTextureIndexChanged", name: "onLevelTextureIndexChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [], false)}, {prop: "onLevelTextureIDChanged", name: "onLevelTextureIDChanged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String], [], false)}];
	ptrType$28.methods = [{prop: "get", name: "get", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String, $emptyInterface, funcType$2, FailureFunc], [], false)}, {prop: "put", name: "put", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String, $emptyInterface, $emptyInterface, funcType$2, FailureFunc], [], false)}, {prop: "post", name: "post", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $funcType([$String, $emptyInterface, $emptyInterface, funcType$2, FailureFunc], [], false)}, {prop: "NewProject", name: "NewProject", pkg: "", typ: $funcType([$String, funcType$2, FailureFunc], [], false)}, {prop: "Projects", name: "Projects", pkg: "", typ: $funcType([funcType$4, FailureFunc], [], false)}, {prop: "Palette", name: "Palette", pkg: "", typ: $funcType([$String, $String, funcType$3, FailureFunc], [], false)}, {prop: "Levels", name: "Levels", pkg: "", typ: $funcType([$String, $String, funcType$1, FailureFunc], [], false)}, {prop: "LevelTextures", name: "LevelTextures", pkg: "", typ: $funcType([$String, $String, $Int, funcType, FailureFunc], [], false)}, {prop: "SetLevelTextures", name: "SetLevelTextures", pkg: "", typ: $funcType([$String, $String, $Int, sliceType$1, funcType, FailureFunc], [], false)}, {prop: "Textures", name: "Textures", pkg: "", typ: $funcType([$String, funcType$7, FailureFunc], [], false)}, {prop: "TextureBitmap", name: "TextureBitmap", pkg: "", typ: $funcType([$String, $Int, $String, funcType$6, FailureFunc], [], false)}, {prop: "Tiles", name: "Tiles", pkg: "", typ: $funcType([$String, $String, $Int, funcType$8, FailureFunc], [], false)}, {prop: "Tile", name: "Tile", pkg: "", typ: $funcType([$String, $String, $Int, $Int, $Int, funcType$5, FailureFunc], [], false)}, {prop: "SetTile", name: "SetTile", pkg: "", typ: $funcType([$String, $String, $Int, $Int, $Int, model.TileProperties, funcType$5, FailureFunc], [], false)}];
	ptrType$24.methods = [{prop: "SetLevelTextureCount", name: "SetLevelTextureCount", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "TileType", name: "TileType", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "FloorHeight", name: "FloorHeight", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "CeilingHeight", name: "CeilingHeight", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "SlopeHeight", name: "SlopeHeight", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "SlopeControl", name: "SlopeControl", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "FloorTexture", name: "FloorTexture", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "CeilingTexture", name: "CeilingTexture", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "WallTexture", name: "WallTexture", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "FloorTextureRotations", name: "FloorTextureRotations", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "CeilingTextureRotations", name: "CeilingTextureRotations", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "UseAdjacentWallTexture", name: "UseAdjacentWallTexture", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "WallTextureOffset", name: "WallTextureOffset", pkg: "", typ: $funcType([], [ptrType$19], false)}];
	ptrType$1.methods = [{prop: "Root", name: "Root", pkg: "", typ: $funcType([], [viewmodel.Node], false)}, {prop: "SelectMapSection", name: "SelectMapSection", pkg: "", typ: $funcType([], [], false)}, {prop: "SelectedProject", name: "SelectedProject", pkg: "", typ: $funcType([], [$String], false)}, {prop: "OnSelectedProjectChanged", name: "OnSelectedProjectChanged", pkg: "", typ: $funcType([funcType$11], [], false)}, {prop: "SetProjects", name: "SetProjects", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "SelectProject", name: "SelectProject", pkg: "", typ: $funcType([$String], [], false)}, {prop: "NewProjectID", name: "NewProjectID", pkg: "", typ: $funcType([], [ptrType$21], false)}, {prop: "CreateProject", name: "CreateProject", pkg: "", typ: $funcType([], [ptrType$22], false)}, {prop: "SetTextureCount", name: "SetTextureCount", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "OnSelectedLevelChanged", name: "OnSelectedLevelChanged", pkg: "", typ: $funcType([funcType$11], [], false)}, {prop: "SetLevels", name: "SetLevels", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "SetPointerAt", name: "SetPointerAt", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "SetLevelIsRealWorld", name: "SetLevelIsRealWorld", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "Tiles", name: "Tiles", pkg: "", typ: $funcType([], [ptrType$24], false)}, {prop: "SetLevelTextures", name: "SetLevelTextures", pkg: "", typ: $funcType([sliceType$1], [], false)}, {prop: "LevelTextureIndex", name: "LevelTextureIndex", pkg: "", typ: $funcType([], [ptrType$19], false)}, {prop: "LevelTextureID", name: "LevelTextureID", pkg: "", typ: $funcType([], [ptrType$19], false)}];
	FailureFunc.init([], [], false);
	DataStore.init([{prop: "LevelTextures", name: "LevelTextures", pkg: "", typ: $funcType([$String, $String, $Int, funcType, FailureFunc], [], false)}, {prop: "Levels", name: "Levels", pkg: "", typ: $funcType([$String, $String, funcType$1, FailureFunc], [], false)}, {prop: "NewProject", name: "NewProject", pkg: "", typ: $funcType([$String, funcType$2, FailureFunc], [], false)}, {prop: "Palette", name: "Palette", pkg: "", typ: $funcType([$String, $String, funcType$3, FailureFunc], [], false)}, {prop: "Projects", name: "Projects", pkg: "", typ: $funcType([funcType$4, FailureFunc], [], false)}, {prop: "SetLevelTextures", name: "SetLevelTextures", pkg: "", typ: $funcType([$String, $String, $Int, sliceType$1, funcType, FailureFunc], [], false)}, {prop: "SetTile", name: "SetTile", pkg: "", typ: $funcType([$String, $String, $Int, $Int, $Int, model.TileProperties, funcType$5, FailureFunc], [], false)}, {prop: "TextureBitmap", name: "TextureBitmap", pkg: "", typ: $funcType([$String, $Int, $String, funcType$6, FailureFunc], [], false)}, {prop: "Textures", name: "Textures", pkg: "", typ: $funcType([$String, funcType$7, FailureFunc], [], false)}, {prop: "Tile", name: "Tile", pkg: "", typ: $funcType([$String, $String, $Int, $Int, $Int, funcType$5, FailureFunc], [], false)}, {prop: "Tiles", name: "Tiles", pkg: "", typ: $funcType([$String, $String, $Int, funcType$8, FailureFunc], [], false)}]);
	MainApplication.init([{prop: "lastElapsedTick", name: "lastElapsedTick", pkg: "github.com/inkyblackness/shocked-client/editor", typ: time.Time, tag: ""}, {prop: "elapsedMSec", name: "elapsedMSec", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $Int64, tag: ""}, {prop: "store", name: "store", pkg: "github.com/inkyblackness/shocked-client/editor", typ: DataStore, tag: ""}, {prop: "viewModel", name: "viewModel", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$1, tag: ""}, {prop: "viewModelUpdating", name: "viewModelUpdating", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $Bool, tag: ""}, {prop: "glWindow", name: "glWindow", pkg: "github.com/inkyblackness/shocked-client/editor", typ: env.OpenGlWindow, tag: ""}, {prop: "gl", name: "gl", pkg: "github.com/inkyblackness/shocked-client/editor", typ: opengl.OpenGl, tag: ""}, {prop: "mouseX", name: "mouseX", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $Float32, tag: ""}, {prop: "mouseY", name: "mouseY", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $Float32, tag: ""}, {prop: "mouseDragged", name: "mouseDragged", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $Bool, tag: ""}, {prop: "mouseMoveCapture", name: "mouseMoveCapture", pkg: "github.com/inkyblackness/shocked-client/editor", typ: funcType$2, tag: ""}, {prop: "view", name: "view", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$2, tag: ""}, {prop: "levels", name: "levels", pkg: "github.com/inkyblackness/shocked-client/editor", typ: sliceType, tag: ""}, {prop: "activeLevelID", name: "activeLevelID", pkg: "github.com/inkyblackness/shocked-client/editor", typ: $Int, tag: ""}, {prop: "paletteTexture", name: "paletteTexture", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$3, tag: ""}, {prop: "levelTextures", name: "levelTextures", pkg: "github.com/inkyblackness/shocked-client/editor", typ: sliceType$1, tag: ""}, {prop: "textureData", name: "textureData", pkg: "github.com/inkyblackness/shocked-client/editor", typ: sliceType$2, tag: ""}, {prop: "textureStore", name: "textureStore", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$4, tag: ""}, {prop: "tileMap", name: "tileMap", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$5, tag: ""}, {prop: "gridRenderable", name: "gridRenderable", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$6, tag: ""}, {prop: "tileTextureMapRenderable", name: "tileTextureMapRenderable", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$7, tag: ""}, {prop: "tileGridMapRenderable", name: "tileGridMapRenderable", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$8, tag: ""}, {prop: "tileSelectionRenderable", name: "tileSelectionRenderable", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$9, tag: ""}]);
	RestDataStore.init([{prop: "transport", name: "transport", pkg: "github.com/inkyblackness/shocked-client/editor", typ: RestTransport, tag: ""}]);
	RestTransport.init([{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String, funcType$11, funcType$2], [], false)}, {prop: "Post", name: "Post", pkg: "", typ: $funcType([$String, sliceType$9, funcType$11, funcType$2], [], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$String, sliceType$9, funcType$11, funcType$2], [], false)}]);
	TilesViewModel.init([{prop: "root", name: "root", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$18, tag: ""}, {prop: "tileType", name: "tileType", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "floorHeight", name: "floorHeight", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "ceilingHeight", name: "ceilingHeight", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "slopeHeight", name: "slopeHeight", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "slopeControl", name: "slopeControl", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "floorTexture", name: "floorTexture", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "ceilingTexture", name: "ceilingTexture", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "wallTexture", name: "wallTexture", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "floorTextureRotations", name: "floorTextureRotations", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "ceilingTextureRotations", name: "ceilingTextureRotations", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "useAdjacentWallTexture", name: "useAdjacentWallTexture", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "wallTextureOffset", name: "wallTextureOffset", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}]);
	ViewModel.init([{prop: "root", name: "root", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$18, tag: ""}, {prop: "mainSection", name: "mainSection", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$20, tag: ""}, {prop: "projects", name: "projects", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "newProjectID", name: "newProjectID", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$21, tag: ""}, {prop: "createProject", name: "createProject", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$22, tag: ""}, {prop: "textureCount", name: "textureCount", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$21, tag: ""}, {prop: "levels", name: "levels", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "levelIsRealWorld", name: "levelIsRealWorld", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$23, tag: ""}, {prop: "levelTextureIndex", name: "levelTextureIndex", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "levelTextureID", name: "levelTextureID", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$19, tag: ""}, {prop: "levelTextureIDs", name: "levelTextureIDs", pkg: "github.com/inkyblackness/shocked-client/editor", typ: sliceType$1, tag: ""}, {prop: "pointerCoordinate", name: "pointerCoordinate", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$21, tag: ""}, {prop: "tiles", name: "tiles", pkg: "github.com/inkyblackness/shocked-client/editor", typ: ptrType$24, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base64.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = json.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mgl32.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = camera.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = display.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = model$1.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = env.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = graphics.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = util.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = viewmodel.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = model.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/Archs/js/JSON"] = (function() {
	var $pkg = {}, $init, js, json, Stringify;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Stringify = function(obj) {
		var $ptr, obj;
		return $internalize(json.stringify($externalize(obj, $emptyInterface)), $String);
	};
	$pkg.Stringify = Stringify;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		json = $global.JSON;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/Archs/js/dom"] = (function() {
	var $pkg = {}, $init, js, CSSStyleDeclaration, EventTarget, NodeType, NodeList, Node, Doc, Element, HTMLCollection, File, Event, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType, ptrType$6, sliceType$1, ptrType$7, funcType, mapType, ptrType$8, funcType$1, funcType$2, funcType$3, sliceType$2, funcType$4, funcType$5, funcType$6, funcType$7, funcType$8, funcType$9, funcType$10, funcType$11, funcType$12, funcType$13, funcType$14, funcType$15, funcType$16, funcType$17, funcType$18, funcType$19, ptrType$9, funcType$20, funcType$21, funcType$22, funcType$23, funcType$24, funcType$25, funcType$26;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	CSSStyleDeclaration = $pkg.CSSStyleDeclaration = $newType(0, $kindStruct, "dom.CSSStyleDeclaration", "CSSStyleDeclaration", "github.com/Archs/js/dom", function(Object_, CssText_, Length_, ParentRule_, RemoveProperty_, GetPropertyValue_, GetPropertyPriority_, SetProperty_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.CssText = "";
			this.Length = 0;
			this.ParentRule = ptrType.nil;
			this.RemoveProperty = $throwNilPointerError;
			this.GetPropertyValue = $throwNilPointerError;
			this.GetPropertyPriority = $throwNilPointerError;
			this.SetProperty = $throwNilPointerError;
			return;
		}
		this.Object = Object_;
		this.CssText = CssText_;
		this.Length = Length_;
		this.ParentRule = ParentRule_;
		this.RemoveProperty = RemoveProperty_;
		this.GetPropertyValue = GetPropertyValue_;
		this.GetPropertyPriority = GetPropertyPriority_;
		this.SetProperty = SetProperty_;
	});
	EventTarget = $pkg.EventTarget = $newType(0, $kindStruct, "dom.EventTarget", "EventTarget", "github.com/Archs/js/dom", function(Object_, AddEventListener_, RemoveEventListener_, DispatchEvent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.AddEventListener = $throwNilPointerError;
			this.RemoveEventListener = $throwNilPointerError;
			this.DispatchEvent = $throwNilPointerError;
			return;
		}
		this.Object = Object_;
		this.AddEventListener = AddEventListener_;
		this.RemoveEventListener = RemoveEventListener_;
		this.DispatchEvent = DispatchEvent_;
	});
	NodeType = $pkg.NodeType = $newType(4, $kindInt, "dom.NodeType", "NodeType", "github.com/Archs/js/dom", null);
	NodeList = $pkg.NodeList = $newType(0, $kindStruct, "dom.NodeList", "NodeList", "github.com/Archs/js/dom", function(Object_, Length_, Item_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.Length = 0;
			this.Item = $throwNilPointerError;
			return;
		}
		this.Object = Object_;
		this.Length = Length_;
		this.Item = Item_;
	});
	Node = $pkg.Node = $newType(0, $kindStruct, "dom.Node", "Node", "github.com/Archs/js/dom", function(EventTarget_, BaseURI_, ChildNodes_, FirstChild_, LastChild_, LocalName_, NamespaceURI_, NextSibling_, NodeName_, NodeType_, NodeValue_, OwnerDocument_, ParentNode_, Prefix_, PreviousSibling_, TextContent_, AppendChild_, CloneNode_, CompareDocumentPosition_, HasChildNodes_, InsertBefore_, IsDefaultNamespace_, IsEqualNode_, IsSameNode_, LookupNamespaceURI_, LookupPrefix_, Normalize_, RemoveChild_, ReplaceChild_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.EventTarget = ptrType$1.nil;
			this.BaseURI = "";
			this.ChildNodes = ptrType$2.nil;
			this.FirstChild = ptrType$3.nil;
			this.LastChild = ptrType$3.nil;
			this.LocalName = "";
			this.NamespaceURI = "";
			this.NextSibling = ptrType$3.nil;
			this.NodeName = "";
			this.NodeType = 0;
			this.NodeValue = "";
			this.OwnerDocument = ptrType$4.nil;
			this.ParentNode = ptrType$3.nil;
			this.Prefix = "";
			this.PreviousSibling = ptrType$3.nil;
			this.TextContent = "";
			this.AppendChild = $throwNilPointerError;
			this.CloneNode = $throwNilPointerError;
			this.CompareDocumentPosition = $throwNilPointerError;
			this.HasChildNodes = $throwNilPointerError;
			this.InsertBefore = $throwNilPointerError;
			this.IsDefaultNamespace = $throwNilPointerError;
			this.IsEqualNode = $throwNilPointerError;
			this.IsSameNode = $throwNilPointerError;
			this.LookupNamespaceURI = $throwNilPointerError;
			this.LookupPrefix = $throwNilPointerError;
			this.Normalize = $throwNilPointerError;
			this.RemoveChild = $throwNilPointerError;
			this.ReplaceChild = $throwNilPointerError;
			return;
		}
		this.EventTarget = EventTarget_;
		this.BaseURI = BaseURI_;
		this.ChildNodes = ChildNodes_;
		this.FirstChild = FirstChild_;
		this.LastChild = LastChild_;
		this.LocalName = LocalName_;
		this.NamespaceURI = NamespaceURI_;
		this.NextSibling = NextSibling_;
		this.NodeName = NodeName_;
		this.NodeType = NodeType_;
		this.NodeValue = NodeValue_;
		this.OwnerDocument = OwnerDocument_;
		this.ParentNode = ParentNode_;
		this.Prefix = Prefix_;
		this.PreviousSibling = PreviousSibling_;
		this.TextContent = TextContent_;
		this.AppendChild = AppendChild_;
		this.CloneNode = CloneNode_;
		this.CompareDocumentPosition = CompareDocumentPosition_;
		this.HasChildNodes = HasChildNodes_;
		this.InsertBefore = InsertBefore_;
		this.IsDefaultNamespace = IsDefaultNamespace_;
		this.IsEqualNode = IsEqualNode_;
		this.IsSameNode = IsSameNode_;
		this.LookupNamespaceURI = LookupNamespaceURI_;
		this.LookupPrefix = LookupPrefix_;
		this.Normalize = Normalize_;
		this.RemoveChild = RemoveChild_;
		this.ReplaceChild = ReplaceChild_;
	});
	Doc = $pkg.Doc = $newType(0, $kindStruct, "dom.Doc", "Doc", "github.com/Archs/js/dom", function(Node_, CharacterSet_, Async_, Doctype_, DocumentElement_, DocumentURI_, Implementation_, AdoptNode_, CreateComment_, CreateElement_, CreateElementNS_, CreateEvent_, CreateTextNode_, GetElementById_, GetElementsByTagName_, GetElementsByTagNameNS_, ImportNode_, QuerySelector_, QuerySelectorAll_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Node = ptrType$3.nil;
			this.CharacterSet = "";
			this.Async = false;
			this.Doctype = null;
			this.DocumentElement = ptrType$5.nil;
			this.DocumentURI = "";
			this.Implementation = null;
			this.AdoptNode = $throwNilPointerError;
			this.CreateComment = $throwNilPointerError;
			this.CreateElement = $throwNilPointerError;
			this.CreateElementNS = $throwNilPointerError;
			this.CreateEvent = $throwNilPointerError;
			this.CreateTextNode = $throwNilPointerError;
			this.GetElementById = $throwNilPointerError;
			this.GetElementsByTagName = $throwNilPointerError;
			this.GetElementsByTagNameNS = $throwNilPointerError;
			this.ImportNode = $throwNilPointerError;
			this.QuerySelector = $throwNilPointerError;
			this.QuerySelectorAll = $throwNilPointerError;
			return;
		}
		this.Node = Node_;
		this.CharacterSet = CharacterSet_;
		this.Async = Async_;
		this.Doctype = Doctype_;
		this.DocumentElement = DocumentElement_;
		this.DocumentURI = DocumentURI_;
		this.Implementation = Implementation_;
		this.AdoptNode = AdoptNode_;
		this.CreateComment = CreateComment_;
		this.CreateElement = CreateElement_;
		this.CreateElementNS = CreateElementNS_;
		this.CreateEvent = CreateEvent_;
		this.CreateTextNode = CreateTextNode_;
		this.GetElementById = GetElementById_;
		this.GetElementsByTagName = GetElementsByTagName_;
		this.GetElementsByTagNameNS = GetElementsByTagNameNS_;
		this.ImportNode = ImportNode_;
		this.QuerySelector = QuerySelector_;
		this.QuerySelectorAll = QuerySelectorAll_;
	});
	Element = $pkg.Element = $newType(0, $kindStruct, "dom.Element", "Element", "github.com/Archs/js/dom", function(Node_, Id_, InnerHTML_, InnerText_, TagName_, ContentEditable_, Width_, Height_, InnerWidth_, InnerHeight_, PreviousElementSibling_, NextElementSibling_, FirstElementChild_, LastElementChild_, Src_, Style_, ClassName_, ClassList_, SetAttribute_, GetAttribute_, RemoveAttribute_, AppendChild_, RemoveChild_, Remove_, QuerySelector_, QuerySelectorAll_, Click_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Node = ptrType$3.nil;
			this.Id = "";
			this.InnerHTML = "";
			this.InnerText = "";
			this.TagName = "";
			this.ContentEditable = false;
			this.Width = 0;
			this.Height = 0;
			this.InnerWidth = 0;
			this.InnerHeight = 0;
			this.PreviousElementSibling = ptrType$5.nil;
			this.NextElementSibling = ptrType$5.nil;
			this.FirstElementChild = ptrType$5.nil;
			this.LastElementChild = ptrType$5.nil;
			this.Src = "";
			this.Style = ptrType.nil;
			this.ClassName = "";
			this.ClassList = sliceType.nil;
			this.SetAttribute = $throwNilPointerError;
			this.GetAttribute = $throwNilPointerError;
			this.RemoveAttribute = $throwNilPointerError;
			this.AppendChild = $throwNilPointerError;
			this.RemoveChild = $throwNilPointerError;
			this.Remove = $throwNilPointerError;
			this.QuerySelector = $throwNilPointerError;
			this.QuerySelectorAll = $throwNilPointerError;
			this.Click = $throwNilPointerError;
			return;
		}
		this.Node = Node_;
		this.Id = Id_;
		this.InnerHTML = InnerHTML_;
		this.InnerText = InnerText_;
		this.TagName = TagName_;
		this.ContentEditable = ContentEditable_;
		this.Width = Width_;
		this.Height = Height_;
		this.InnerWidth = InnerWidth_;
		this.InnerHeight = InnerHeight_;
		this.PreviousElementSibling = PreviousElementSibling_;
		this.NextElementSibling = NextElementSibling_;
		this.FirstElementChild = FirstElementChild_;
		this.LastElementChild = LastElementChild_;
		this.Src = Src_;
		this.Style = Style_;
		this.ClassName = ClassName_;
		this.ClassList = ClassList_;
		this.SetAttribute = SetAttribute_;
		this.GetAttribute = GetAttribute_;
		this.RemoveAttribute = RemoveAttribute_;
		this.AppendChild = AppendChild_;
		this.RemoveChild = RemoveChild_;
		this.Remove = Remove_;
		this.QuerySelector = QuerySelector_;
		this.QuerySelectorAll = QuerySelectorAll_;
		this.Click = Click_;
	});
	HTMLCollection = $pkg.HTMLCollection = $newType(0, $kindStruct, "dom.HTMLCollection", "HTMLCollection", "github.com/Archs/js/dom", function(Object_, Length_, Item_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.Length = 0;
			this.Item = $throwNilPointerError;
			return;
		}
		this.Object = Object_;
		this.Length = Length_;
		this.Item = Item_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "dom.File", "File", "github.com/Archs/js/dom", function(Object_, LastModifiledData_, Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.LastModifiledData = null;
			this.Name = "";
			return;
		}
		this.Object = Object_;
		this.LastModifiledData = LastModifiledData_;
		this.Name = Name_;
	});
	Event = $pkg.Event = $newType(0, $kindStruct, "dom.Event", "Event", "github.com/Archs/js/dom", function(Object_, Type_, Code_, Reason_, WasClean_, DeltaX_, DeltaY_, DeltaZ_, DeltaMode_, AltKey_, CharCode_, CtrlKey_, Key_, KeyIdentifier_, KeyCode_, Locale_, Location_, KeyLocation_, MetaKey_, Repeat_, ShiftKey_, Button_, ClientX_, ClientY_, MovementX_, MovementY_, ScreenX_, ScreenY_, LayerX_, LayerY_, Data_, Bubbles_, Cancelable_, CurrentTarget_, DefaultPrevented_, EventPhase_, Target_, Timestamp_, PreventDefault_, StopImmediatePropagation_, StopPropagation_, GetModifierState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.Type = "";
			this.Code = 0;
			this.Reason = "";
			this.WasClean = false;
			this.DeltaX = 0;
			this.DeltaY = 0;
			this.DeltaZ = 0;
			this.DeltaMode = 0;
			this.AltKey = false;
			this.CharCode = 0;
			this.CtrlKey = false;
			this.Key = "";
			this.KeyIdentifier = "";
			this.KeyCode = 0;
			this.Locale = "";
			this.Location = 0;
			this.KeyLocation = 0;
			this.MetaKey = false;
			this.Repeat = false;
			this.ShiftKey = false;
			this.Button = 0;
			this.ClientX = 0;
			this.ClientY = 0;
			this.MovementX = 0;
			this.MovementY = 0;
			this.ScreenX = 0;
			this.ScreenY = 0;
			this.LayerX = 0;
			this.LayerY = 0;
			this.Data = null;
			this.Bubbles = false;
			this.Cancelable = false;
			this.CurrentTarget = ptrType$5.nil;
			this.DefaultPrevented = false;
			this.EventPhase = 0;
			this.Target = ptrType$5.nil;
			this.Timestamp = 0;
			this.PreventDefault = $throwNilPointerError;
			this.StopImmediatePropagation = $throwNilPointerError;
			this.StopPropagation = $throwNilPointerError;
			this.GetModifierState = $throwNilPointerError;
			return;
		}
		this.Object = Object_;
		this.Type = Type_;
		this.Code = Code_;
		this.Reason = Reason_;
		this.WasClean = WasClean_;
		this.DeltaX = DeltaX_;
		this.DeltaY = DeltaY_;
		this.DeltaZ = DeltaZ_;
		this.DeltaMode = DeltaMode_;
		this.AltKey = AltKey_;
		this.CharCode = CharCode_;
		this.CtrlKey = CtrlKey_;
		this.Key = Key_;
		this.KeyIdentifier = KeyIdentifier_;
		this.KeyCode = KeyCode_;
		this.Locale = Locale_;
		this.Location = Location_;
		this.KeyLocation = KeyLocation_;
		this.MetaKey = MetaKey_;
		this.Repeat = Repeat_;
		this.ShiftKey = ShiftKey_;
		this.Button = Button_;
		this.ClientX = ClientX_;
		this.ClientY = ClientY_;
		this.MovementX = MovementX_;
		this.MovementY = MovementY_;
		this.ScreenX = ScreenX_;
		this.ScreenY = ScreenY_;
		this.LayerX = LayerX_;
		this.LayerY = LayerY_;
		this.Data = Data_;
		this.Bubbles = Bubbles_;
		this.Cancelable = Cancelable_;
		this.CurrentTarget = CurrentTarget_;
		this.DefaultPrevented = DefaultPrevented_;
		this.EventPhase = EventPhase_;
		this.Target = Target_;
		this.Timestamp = Timestamp_;
		this.PreventDefault = PreventDefault_;
		this.StopImmediatePropagation = StopImmediatePropagation_;
		this.StopPropagation = StopPropagation_;
		this.GetModifierState = GetModifierState_;
	});
	ptrType = $ptrType(CSSStyleDeclaration);
	ptrType$1 = $ptrType(EventTarget);
	ptrType$2 = $ptrType(NodeList);
	ptrType$3 = $ptrType(Node);
	ptrType$4 = $ptrType(Doc);
	ptrType$5 = $ptrType(Element);
	sliceType = $sliceType($String);
	ptrType$6 = $ptrType(File);
	sliceType$1 = $sliceType(ptrType$6);
	ptrType$7 = $ptrType(Event);
	funcType = $funcType([ptrType$7], [], false);
	mapType = $mapType($String, $String);
	ptrType$8 = $ptrType(js.Object);
	funcType$1 = $funcType([$String], [], false);
	funcType$2 = $funcType([$String], [$String], false);
	funcType$3 = $funcType([$String, $String, sliceType], [], true);
	sliceType$2 = $sliceType($Bool);
	funcType$4 = $funcType([$String, funcType, sliceType$2], [], true);
	funcType$5 = $funcType([$Int], [Node], false);
	funcType$6 = $funcType([ptrType$3], [], false);
	funcType$7 = $funcType([], [ptrType$3], false);
	funcType$8 = $funcType([ptrType$3], [$Int], false);
	funcType$9 = $funcType([], [$Bool], false);
	funcType$10 = $funcType([ptrType$3, ptrType$3], [], false);
	funcType$11 = $funcType([$String], [$Bool], false);
	funcType$12 = $funcType([ptrType$3], [$Bool], false);
	funcType$13 = $funcType([], [$String], false);
	funcType$14 = $funcType([], [], false);
	funcType$15 = $funcType([ptrType$3], [ptrType$3], false);
	funcType$16 = $funcType([$String], [ptrType$3], false);
	funcType$17 = $funcType([$String], [ptrType$5], false);
	funcType$18 = $funcType([$String, $String], [ptrType$5], false);
	funcType$19 = $funcType([$String], [ptrType$7], false);
	ptrType$9 = $ptrType(HTMLCollection);
	funcType$20 = $funcType([$String], [ptrType$9], false);
	funcType$21 = $funcType([$String, $String], [ptrType$9], false);
	funcType$22 = $funcType([ptrType$3, $Bool], [ptrType$3], false);
	funcType$23 = $funcType([$String, $emptyInterface], [], false);
	funcType$24 = $funcType([$String], [ptrType$8], false);
	funcType$25 = $funcType([ptrType$5], [], false);
	funcType$26 = $funcType([$Int], [ptrType$5], false);
	CSSStyleDeclaration.ptr.prototype.ToMap = function() {
		var $ptr, N, _key, css, i, m, name, value;
		css = this;
		m = {};
		N = $parseInt(css.Object.length) >> 0;
		i = 0;
		while (true) {
			if (!(i < N)) { break; }
			name = $internalize(css.Object.index(i), $String);
			value = $internalize(css.Object.getPropertyValue(), $String);
			_key = name; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: value };
			i = i + (1) >> 0;
		}
		return m;
	};
	CSSStyleDeclaration.prototype.ToMap = function() { return this.$val.ToMap(); };
	Element.ptr.prototype.Files = function() {
		var $ptr, _i, _ref, e, files, i, out;
		e = this;
		files = e.Node.EventTarget.Object.files;
		out = $makeSlice(sliceType$1, ($parseInt(files.length) >> 0));
		_ref = out;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i] = new File.ptr(files.item(i), null, ""));
			_i++;
		}
		return out;
	};
	Element.prototype.Files = function() { return this.$val.Files(); };
	ptrType.methods = [{prop: "ToMap", name: "ToMap", pkg: "", typ: $funcType([], [mapType], false)}];
	ptrType$5.methods = [{prop: "Files", name: "Files", pkg: "", typ: $funcType([], [sliceType$1], false)}];
	CSSStyleDeclaration.init([{prop: "Object", name: "", pkg: "", typ: ptrType$8, tag: ""}, {prop: "CssText", name: "CssText", pkg: "", typ: $String, tag: "js:\"cssText\""}, {prop: "Length", name: "Length", pkg: "", typ: $Int, tag: "js:\"length\""}, {prop: "ParentRule", name: "ParentRule", pkg: "", typ: ptrType, tag: "js:\"parentRule\""}, {prop: "RemoveProperty", name: "RemoveProperty", pkg: "", typ: funcType$1, tag: "js:\"removeProperty\""}, {prop: "GetPropertyValue", name: "GetPropertyValue", pkg: "", typ: funcType$2, tag: "js:\"getPropertyValue\""}, {prop: "GetPropertyPriority", name: "GetPropertyPriority", pkg: "", typ: funcType$2, tag: "js:\"getPropertyPriority\""}, {prop: "SetProperty", name: "SetProperty", pkg: "", typ: funcType$3, tag: "js:\"setProperty\""}]);
	EventTarget.init([{prop: "Object", name: "", pkg: "", typ: ptrType$8, tag: ""}, {prop: "AddEventListener", name: "AddEventListener", pkg: "", typ: funcType$4, tag: "js:\"addEventListener\""}, {prop: "RemoveEventListener", name: "RemoveEventListener", pkg: "", typ: funcType$4, tag: "js:\"removeEventListener\""}, {prop: "DispatchEvent", name: "DispatchEvent", pkg: "", typ: funcType, tag: "js:\"dispatchEvent\""}]);
	NodeList.init([{prop: "Object", name: "", pkg: "", typ: ptrType$8, tag: ""}, {prop: "Length", name: "Length", pkg: "", typ: $Int, tag: "js:\"length\""}, {prop: "Item", name: "Item", pkg: "", typ: funcType$5, tag: "js:\"item\""}]);
	Node.init([{prop: "EventTarget", name: "", pkg: "", typ: ptrType$1, tag: ""}, {prop: "BaseURI", name: "BaseURI", pkg: "", typ: $String, tag: "js:\"baseURI\""}, {prop: "ChildNodes", name: "ChildNodes", pkg: "", typ: ptrType$2, tag: "js:\"childNodes\""}, {prop: "FirstChild", name: "FirstChild", pkg: "", typ: ptrType$3, tag: "js:\"firstChild\""}, {prop: "LastChild", name: "LastChild", pkg: "", typ: ptrType$3, tag: "js:\"lastChild\""}, {prop: "LocalName", name: "LocalName", pkg: "", typ: $String, tag: "js:\"localName\""}, {prop: "NamespaceURI", name: "NamespaceURI", pkg: "", typ: $String, tag: "js:\"namespaceURI\""}, {prop: "NextSibling", name: "NextSibling", pkg: "", typ: ptrType$3, tag: "js:\"nextSibling\""}, {prop: "NodeName", name: "NodeName", pkg: "", typ: $String, tag: "js:\"nodeName\""}, {prop: "NodeType", name: "NodeType", pkg: "", typ: NodeType, tag: "js:\"nodeType\""}, {prop: "NodeValue", name: "NodeValue", pkg: "", typ: $String, tag: "js:\"nodeValue\""}, {prop: "OwnerDocument", name: "OwnerDocument", pkg: "", typ: ptrType$4, tag: "js:\"ownerDocument\""}, {prop: "ParentNode", name: "ParentNode", pkg: "", typ: ptrType$3, tag: "js:\"parentNode\""}, {prop: "Prefix", name: "Prefix", pkg: "", typ: $String, tag: "js:\"prefix\""}, {prop: "PreviousSibling", name: "PreviousSibling", pkg: "", typ: ptrType$3, tag: "js:\"previousSibling\""}, {prop: "TextContent", name: "TextContent", pkg: "", typ: $String, tag: "js:\"textContent\""}, {prop: "AppendChild", name: "AppendChild", pkg: "", typ: funcType$6, tag: "js:\"appendChild\""}, {prop: "CloneNode", name: "CloneNode", pkg: "", typ: funcType$7, tag: "js:\"cloneNode\""}, {prop: "CompareDocumentPosition", name: "CompareDocumentPosition", pkg: "", typ: funcType$8, tag: "js:\"compareDocumentPosition\""}, {prop: "HasChildNodes", name: "HasChildNodes", pkg: "", typ: funcType$9, tag: "js:\"hasChildNodes\""}, {prop: "InsertBefore", name: "InsertBefore", pkg: "", typ: funcType$10, tag: "js:\"insertBefore\""}, {prop: "IsDefaultNamespace", name: "IsDefaultNamespace", pkg: "", typ: funcType$11, tag: "js:\"isDefaultNamespace\""}, {prop: "IsEqualNode", name: "IsEqualNode", pkg: "", typ: funcType$12, tag: "js:\"isEqualNode\""}, {prop: "IsSameNode", name: "IsSameNode", pkg: "", typ: funcType$12, tag: "js:\"isSameNode\""}, {prop: "LookupNamespaceURI", name: "LookupNamespaceURI", pkg: "", typ: funcType$2, tag: "js:\"lookupNamespaceURI\""}, {prop: "LookupPrefix", name: "LookupPrefix", pkg: "", typ: funcType$13, tag: "js:\"lookupPrefix\""}, {prop: "Normalize", name: "Normalize", pkg: "", typ: funcType$14, tag: "js:\"normalize\""}, {prop: "RemoveChild", name: "RemoveChild", pkg: "", typ: funcType$6, tag: "js:\"removeChild\""}, {prop: "ReplaceChild", name: "ReplaceChild", pkg: "", typ: funcType$10, tag: "js:\"replaceChild\""}]);
	Doc.init([{prop: "Node", name: "", pkg: "", typ: ptrType$3, tag: ""}, {prop: "CharacterSet", name: "CharacterSet", pkg: "", typ: $String, tag: "js:\"characterSet\""}, {prop: "Async", name: "Async", pkg: "", typ: $Bool, tag: "js:\"async\""}, {prop: "Doctype", name: "Doctype", pkg: "", typ: ptrType$8, tag: "js:\"doctype\""}, {prop: "DocumentElement", name: "DocumentElement", pkg: "", typ: ptrType$5, tag: "js:\"documentElement\""}, {prop: "DocumentURI", name: "DocumentURI", pkg: "", typ: $String, tag: "js:\"documentURI\""}, {prop: "Implementation", name: "Implementation", pkg: "", typ: ptrType$8, tag: "js:\"implementation\""}, {prop: "AdoptNode", name: "AdoptNode", pkg: "", typ: funcType$15, tag: "js:\"adoptNode\""}, {prop: "CreateComment", name: "CreateComment", pkg: "", typ: funcType$16, tag: "js:\"createComment\""}, {prop: "CreateElement", name: "CreateElement", pkg: "", typ: funcType$17, tag: "js:\"createElement\""}, {prop: "CreateElementNS", name: "CreateElementNS", pkg: "", typ: funcType$18, tag: "js:\"createElementNS\""}, {prop: "CreateEvent", name: "CreateEvent", pkg: "", typ: funcType$19, tag: "js:\"createEvent\""}, {prop: "CreateTextNode", name: "CreateTextNode", pkg: "", typ: funcType$16, tag: "js:\"createTextNode\""}, {prop: "GetElementById", name: "GetElementById", pkg: "", typ: funcType$17, tag: "js:\"getElementById\""}, {prop: "GetElementsByTagName", name: "GetElementsByTagName", pkg: "", typ: funcType$20, tag: "js:\"getElementsByTagName\""}, {prop: "GetElementsByTagNameNS", name: "GetElementsByTagNameNS", pkg: "", typ: funcType$21, tag: "js:\"getElementsByTagNameNS\""}, {prop: "ImportNode", name: "ImportNode", pkg: "", typ: funcType$22, tag: "js:\"importNode\""}, {prop: "QuerySelector", name: "QuerySelector", pkg: "", typ: funcType$17, tag: "js:\"querySelector\""}, {prop: "QuerySelectorAll", name: "QuerySelectorAll", pkg: "", typ: funcType$20, tag: "js:\"querySelectorAll\""}]);
	Element.init([{prop: "Node", name: "", pkg: "", typ: ptrType$3, tag: ""}, {prop: "Id", name: "Id", pkg: "", typ: $String, tag: "js:\"id\""}, {prop: "InnerHTML", name: "InnerHTML", pkg: "", typ: $String, tag: "js:\"innerHTML\""}, {prop: "InnerText", name: "InnerText", pkg: "", typ: $String, tag: "js:\"innerText\""}, {prop: "TagName", name: "TagName", pkg: "", typ: $String, tag: "js:\"tagName\""}, {prop: "ContentEditable", name: "ContentEditable", pkg: "", typ: $Bool, tag: "js:\"contentEditable\""}, {prop: "Width", name: "Width", pkg: "", typ: $Int, tag: "js:\"width\""}, {prop: "Height", name: "Height", pkg: "", typ: $Int, tag: "js:\"height\""}, {prop: "InnerWidth", name: "InnerWidth", pkg: "", typ: $Int, tag: "js:\"innerWidth\""}, {prop: "InnerHeight", name: "InnerHeight", pkg: "", typ: $Int, tag: "js:\"innerHeight\""}, {prop: "PreviousElementSibling", name: "PreviousElementSibling", pkg: "", typ: ptrType$5, tag: "js:\"previousElementSibling\""}, {prop: "NextElementSibling", name: "NextElementSibling", pkg: "", typ: ptrType$5, tag: "js:\"nextElementSibling\""}, {prop: "FirstElementChild", name: "FirstElementChild", pkg: "", typ: ptrType$5, tag: "js:\"firstElementChild\""}, {prop: "LastElementChild", name: "LastElementChild", pkg: "", typ: ptrType$5, tag: "js:\"lastElementChild\""}, {prop: "Src", name: "Src", pkg: "", typ: $String, tag: "js:\"src\""}, {prop: "Style", name: "Style", pkg: "", typ: ptrType, tag: "js:\"style\""}, {prop: "ClassName", name: "ClassName", pkg: "", typ: $String, tag: "js:\"className\""}, {prop: "ClassList", name: "ClassList", pkg: "", typ: sliceType, tag: "js:\"classList\""}, {prop: "SetAttribute", name: "SetAttribute", pkg: "", typ: funcType$23, tag: "js:\"setAttribute\""}, {prop: "GetAttribute", name: "GetAttribute", pkg: "", typ: funcType$24, tag: "js:\"getAttribute\""}, {prop: "RemoveAttribute", name: "RemoveAttribute", pkg: "", typ: funcType$1, tag: "js:\"removeAttribute\""}, {prop: "AppendChild", name: "AppendChild", pkg: "", typ: funcType$25, tag: "js:\"appendChild\""}, {prop: "RemoveChild", name: "RemoveChild", pkg: "", typ: funcType$25, tag: "js:\"removeChild\""}, {prop: "Remove", name: "Remove", pkg: "", typ: funcType$14, tag: "js:\"remove\""}, {prop: "QuerySelector", name: "QuerySelector", pkg: "", typ: funcType$17, tag: "js:\"querySelector\""}, {prop: "QuerySelectorAll", name: "QuerySelectorAll", pkg: "", typ: funcType$20, tag: "js:\"querySelectorAll\""}, {prop: "Click", name: "Click", pkg: "", typ: funcType$14, tag: "js:\"click\""}]);
	HTMLCollection.init([{prop: "Object", name: "", pkg: "", typ: ptrType$8, tag: ""}, {prop: "Length", name: "Length", pkg: "", typ: $Int, tag: "js:\"length\""}, {prop: "Item", name: "Item", pkg: "", typ: funcType$26, tag: "js:\"item\""}]);
	File.init([{prop: "Object", name: "", pkg: "", typ: ptrType$8, tag: ""}, {prop: "LastModifiledData", name: "LastModifiledData", pkg: "", typ: ptrType$8, tag: "js:\"lastModifiedDate\""}, {prop: "Name", name: "Name", pkg: "", typ: $String, tag: "js:\"name\""}]);
	Event.init([{prop: "Object", name: "", pkg: "", typ: ptrType$8, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: $String, tag: "js:\"type\""}, {prop: "Code", name: "Code", pkg: "", typ: $Int, tag: "js:\"code\""}, {prop: "Reason", name: "Reason", pkg: "", typ: $String, tag: "js:\"reason\""}, {prop: "WasClean", name: "WasClean", pkg: "", typ: $Bool, tag: "js:\"wasClean\""}, {prop: "DeltaX", name: "DeltaX", pkg: "", typ: $Float64, tag: "js:\"deltaX\""}, {prop: "DeltaY", name: "DeltaY", pkg: "", typ: $Float64, tag: "js:\"deltaY\""}, {prop: "DeltaZ", name: "DeltaZ", pkg: "", typ: $Float64, tag: "js:\"deltaZ\""}, {prop: "DeltaMode", name: "DeltaMode", pkg: "", typ: $Int, tag: "js:\"deltaMode\""}, {prop: "AltKey", name: "AltKey", pkg: "", typ: $Bool, tag: "js:\"altKey\""}, {prop: "CharCode", name: "CharCode", pkg: "", typ: $Int, tag: "js:\"charCode\""}, {prop: "CtrlKey", name: "CtrlKey", pkg: "", typ: $Bool, tag: "js:\"ctrlKey\""}, {prop: "Key", name: "Key", pkg: "", typ: $String, tag: "js:\"key\""}, {prop: "KeyIdentifier", name: "KeyIdentifier", pkg: "", typ: $String, tag: "js:\"keyIdentifier\""}, {prop: "KeyCode", name: "KeyCode", pkg: "", typ: $Int, tag: "js:\"keyCode\""}, {prop: "Locale", name: "Locale", pkg: "", typ: $String, tag: "js:\"locale\""}, {prop: "Location", name: "Location", pkg: "", typ: $Int, tag: "js:\"location\""}, {prop: "KeyLocation", name: "KeyLocation", pkg: "", typ: $Int, tag: "js:\"keyLocation\""}, {prop: "MetaKey", name: "MetaKey", pkg: "", typ: $Bool, tag: "js:\"metaKey\""}, {prop: "Repeat", name: "Repeat", pkg: "", typ: $Bool, tag: "js:\"repeat\""}, {prop: "ShiftKey", name: "ShiftKey", pkg: "", typ: $Bool, tag: "js:\"shiftKey\""}, {prop: "Button", name: "Button", pkg: "", typ: $Int, tag: "js:\"button\""}, {prop: "ClientX", name: "ClientX", pkg: "", typ: $Int, tag: "js:\"clientX\""}, {prop: "ClientY", name: "ClientY", pkg: "", typ: $Int, tag: "js:\"clientY\""}, {prop: "MovementX", name: "MovementX", pkg: "", typ: $Int, tag: "js:\"movementX\""}, {prop: "MovementY", name: "MovementY", pkg: "", typ: $Int, tag: "js:\"movementY\""}, {prop: "ScreenX", name: "ScreenX", pkg: "", typ: $Int, tag: "js:\"screenX\""}, {prop: "ScreenY", name: "ScreenY", pkg: "", typ: $Int, tag: "js:\"screenY\""}, {prop: "LayerX", name: "LayerX", pkg: "", typ: $Int, tag: "js:\"layerX\""}, {prop: "LayerY", name: "LayerY", pkg: "", typ: $Int, tag: "js:\"layerY\""}, {prop: "Data", name: "Data", pkg: "", typ: ptrType$8, tag: "js:\"data\""}, {prop: "Bubbles", name: "Bubbles", pkg: "", typ: $Bool, tag: "js:\"bubbles\""}, {prop: "Cancelable", name: "Cancelable", pkg: "", typ: $Bool, tag: "js:\"cancelable\""}, {prop: "CurrentTarget", name: "CurrentTarget", pkg: "", typ: ptrType$5, tag: "js:\"currentTarget\""}, {prop: "DefaultPrevented", name: "DefaultPrevented", pkg: "", typ: $Bool, tag: "js:\"defaultPrevented\""}, {prop: "EventPhase", name: "EventPhase", pkg: "", typ: $Int, tag: "js:\"eventPhase\""}, {prop: "Target", name: "Target", pkg: "", typ: ptrType$5, tag: "js:\"target\""}, {prop: "Timestamp", name: "Timestamp", pkg: "", typ: $Int, tag: "js:\"timeStamp\""}, {prop: "PreventDefault", name: "PreventDefault", pkg: "", typ: funcType$14, tag: "js:\"preventDefault\""}, {prop: "StopImmediatePropagation", name: "StopImmediatePropagation", pkg: "", typ: funcType$14, tag: "js:\"stopImmediatePropagation\""}, {prop: "StopPropagation", name: "StopPropagation", pkg: "", typ: funcType$14, tag: "js:\"stopPropagation\""}, {prop: "GetModifierState", name: "GetModifierState", pkg: "", typ: funcType$11, tag: "js:\"getModifierState\""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/Archs/js/utils/property"] = (function() {
	var $pkg = {}, $init, js, strings, sep, getProterty, Get;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	strings = $packages["strings"];
	sep = function(path) {
		var $ptr, path, ps;
		ps = strings.Split(path, ".");
		if (ps.$length < 1) {
			$panic(new $String("no property specified"));
		}
		return ps;
	};
	getProterty = function(obj, ps) {
		var $ptr, _i, _ref, obj, p, ps;
		_ref = ps;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			p = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			obj = obj[$externalize(p, $String)];
			if (obj === undefined) {
				break;
			}
			_i++;
		}
		return obj;
	};
	Get = function(obj, path) {
		var $ptr, obj, path;
		return getProterty(obj, sep(path));
	};
	$pkg.Get = Get;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
	(function() {
/*!
 * Knockout JavaScript library v3.3.0
 * (c) Steven Sanderson - http://knockoutjs.com/
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

(function() {(function(p){var y=this||(0,eval)("this"),w=y.document,M=y.navigator,u=y.jQuery,E=y.JSON;(function(p){"function"===typeof define&&define.amd?define(["exports","require"],p):"function"===typeof require&&"object"===typeof exports&&"object"===typeof module?p(module.exports||exports):p(y.ko={})})(function(N,O){function J(a,d){return null===a||typeof a in Q?a===d:!1}function R(a,d){var c;return function(){c||(c=setTimeout(function(){c=p;a()},d))}}function S(a,d){var c;return function(){clearTimeout(c);
c=setTimeout(a,d)}}function K(b,d,c,e){a.d[b]={init:function(b,k,h,l,g){var m,x;a.w(function(){var q=a.a.c(k()),n=!c!==!q,r=!x;if(r||d||n!==m)r&&a.Z.oa()&&(x=a.a.la(a.e.childNodes(b),!0)),n?(r||a.e.T(b,a.a.la(x)),a.Ja(e?e(g,q):g,b)):a.e.ma(b),m=n},null,{q:b});return{controlsDescendantBindings:!0}}};a.h.ka[b]=!1;a.e.R[b]=!0}var a="undefined"!==typeof N?N:{};a.b=function(b,d){for(var c=b.split("."),e=a,f=0;f<c.length-1;f++)e=e[c[f]];e[c[c.length-1]]=d};a.D=function(a,d,c){a[d]=c};a.version="3.3.0";
a.b("version",a.version);a.a=function(){function b(a,b){for(var c in a)a.hasOwnProperty(c)&&b(c,a[c])}function d(a,b){if(b)for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a}function c(a,b){a.__proto__=b;return a}function e(b,c,g,d){var e=b[c].match(m)||[];a.a.o(g.match(m),function(b){a.a.ga(e,b,d)});b[c]=e.join(" ")}var f={__proto__:[]}instanceof Array,k={},h={};k[M&&/Firefox\/2/i.test(M.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"];k.MouseEvents="click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" ");
b(k,function(a,b){if(b.length)for(var c=0,g=b.length;c<g;c++)h[b[c]]=a});var l={propertychange:!0},g=w&&function(){for(var a=3,b=w.createElement("div"),c=b.getElementsByTagName("i");b.innerHTML="\x3c!--[if gt IE "+ ++a+"]><i></i><![endif]--\x3e",c[0];);return 4<a?a:p}(),m=/\S+/g;return{Bb:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],o:function(a,b){for(var c=0,g=a.length;c<g;c++)b(a[c],c)},m:function(a,b){if("function"==typeof Array.prototype.indexOf)return Array.prototype.indexOf.call(a,
b);for(var c=0,g=a.length;c<g;c++)if(a[c]===b)return c;return-1},vb:function(a,b,c){for(var g=0,d=a.length;g<d;g++)if(b.call(c,a[g],g))return a[g];return null},ya:function(b,c){var g=a.a.m(b,c);0<g?b.splice(g,1):0===g&&b.shift()},wb:function(b){b=b||[];for(var c=[],g=0,d=b.length;g<d;g++)0>a.a.m(c,b[g])&&c.push(b[g]);return c},Ka:function(a,b){a=a||[];for(var c=[],g=0,d=a.length;g<d;g++)c.push(b(a[g],g));return c},xa:function(a,b){a=a||[];for(var c=[],g=0,d=a.length;g<d;g++)b(a[g],g)&&c.push(a[g]);
return c},ia:function(a,b){if(b instanceof Array)a.push.apply(a,b);else for(var c=0,g=b.length;c<g;c++)a.push(b[c]);return a},ga:function(b,c,g){var d=a.a.m(a.a.cb(b),c);0>d?g&&b.push(c):g||b.splice(d,1)},za:f,extend:d,Fa:c,Ga:f?c:d,A:b,pa:function(a,b){if(!a)return a;var c={},g;for(g in a)a.hasOwnProperty(g)&&(c[g]=b(a[g],g,a));return c},Ra:function(b){for(;b.firstChild;)a.removeNode(b.firstChild)},Jb:function(b){b=a.a.O(b);for(var c=(b[0]&&b[0].ownerDocument||w).createElement("div"),g=0,d=b.length;g<
d;g++)c.appendChild(a.S(b[g]));return c},la:function(b,c){for(var g=0,d=b.length,e=[];g<d;g++){var m=b[g].cloneNode(!0);e.push(c?a.S(m):m)}return e},T:function(b,c){a.a.Ra(b);if(c)for(var g=0,d=c.length;g<d;g++)b.appendChild(c[g])},Qb:function(b,c){var g=b.nodeType?[b]:b;if(0<g.length){for(var d=g[0],e=d.parentNode,m=0,f=c.length;m<f;m++)e.insertBefore(c[m],d);m=0;for(f=g.length;m<f;m++)a.removeNode(g[m])}},na:function(a,b){if(a.length){for(b=8===b.nodeType&&b.parentNode||b;a.length&&a[0].parentNode!==
b;)a.splice(0,1);if(1<a.length){var c=a[0],g=a[a.length-1];for(a.length=0;c!==g;)if(a.push(c),c=c.nextSibling,!c)return;a.push(g)}}return a},Sb:function(a,b){7>g?a.setAttribute("selected",b):a.selected=b},ib:function(a){return null===a||a===p?"":a.trim?a.trim():a.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},Dc:function(a,b){a=a||"";return b.length>a.length?!1:a.substring(0,b.length)===b},jc:function(a,b){if(a===b)return!0;if(11===a.nodeType)return!1;if(b.contains)return b.contains(3===a.nodeType?
a.parentNode:a);if(b.compareDocumentPosition)return 16==(b.compareDocumentPosition(a)&16);for(;a&&a!=b;)a=a.parentNode;return!!a},Qa:function(b){return a.a.jc(b,b.ownerDocument.documentElement)},tb:function(b){return!!a.a.vb(b,a.a.Qa)},v:function(a){return a&&a.tagName&&a.tagName.toLowerCase()},n:function(b,c,d){var m=g&&l[c];if(!m&&u)u(b).bind(c,d);else if(m||"function"!=typeof b.addEventListener)if("undefined"!=typeof b.attachEvent){var e=function(a){d.call(b,a)},f="on"+c;b.attachEvent(f,e);a.a.C.fa(b,
function(){b.detachEvent(f,e)})}else throw Error("Browser doesn't support addEventListener or attachEvent");else b.addEventListener(c,d,!1)},qa:function(b,c){if(!b||!b.nodeType)throw Error("element must be a DOM node when calling triggerEvent");var g;"input"===a.a.v(b)&&b.type&&"click"==c.toLowerCase()?(g=b.type,g="checkbox"==g||"radio"==g):g=!1;if(u&&!g)u(b).trigger(c);else if("function"==typeof w.createEvent)if("function"==typeof b.dispatchEvent)g=w.createEvent(h[c]||"HTMLEvents"),g.initEvent(c,
!0,!0,y,0,0,0,0,0,!1,!1,!1,!1,0,b),b.dispatchEvent(g);else throw Error("The supplied element doesn't support dispatchEvent");else if(g&&b.click)b.click();else if("undefined"!=typeof b.fireEvent)b.fireEvent("on"+c);else throw Error("Browser doesn't support triggering events");},c:function(b){return a.F(b)?b():b},cb:function(b){return a.F(b)?b.B():b},Ia:function(b,c,g){var d;c&&("object"===typeof b.classList?(d=b.classList[g?"add":"remove"],a.a.o(c.match(m),function(a){d.call(b.classList,a)})):"string"===
typeof b.className.baseVal?e(b.className,"baseVal",c,g):e(b,"className",c,g))},Ha:function(b,c){var g=a.a.c(c);if(null===g||g===p)g="";var d=a.e.firstChild(b);!d||3!=d.nodeType||a.e.nextSibling(d)?a.e.T(b,[b.ownerDocument.createTextNode(g)]):d.data=g;a.a.mc(b)},Rb:function(a,b){a.name=b;if(7>=g)try{a.mergeAttributes(w.createElement("<input name='"+a.name+"'/>"),!1)}catch(c){}},mc:function(a){9<=g&&(a=1==a.nodeType?a:a.parentNode,a.style&&(a.style.zoom=a.style.zoom))},kc:function(a){if(g){var b=a.style.width;
a.style.width=0;a.style.width=b}},Bc:function(b,c){b=a.a.c(b);c=a.a.c(c);for(var g=[],d=b;d<=c;d++)g.push(d);return g},O:function(a){for(var b=[],c=0,g=a.length;c<g;c++)b.push(a[c]);return b},Hc:6===g,Ic:7===g,M:g,Db:function(b,c){for(var g=a.a.O(b.getElementsByTagName("input")).concat(a.a.O(b.getElementsByTagName("textarea"))),d="string"==typeof c?function(a){return a.name===c}:function(a){return c.test(a.name)},m=[],e=g.length-1;0<=e;e--)d(g[e])&&m.push(g[e]);return m},yc:function(b){return"string"==
typeof b&&(b=a.a.ib(b))?E&&E.parse?E.parse(b):(new Function("return "+b))():null},jb:function(b,c,g){if(!E||!E.stringify)throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return E.stringify(a.a.c(b),c,g)},zc:function(c,g,d){d=d||{};var m=d.params||{},e=d.includeFields||this.Bb,f=c;if("object"==typeof c&&"form"===a.a.v(c))for(var f=c.action,
l=e.length-1;0<=l;l--)for(var k=a.a.Db(c,e[l]),h=k.length-1;0<=h;h--)m[k[h].name]=k[h].value;g=a.a.c(g);var s=w.createElement("form");s.style.display="none";s.action=f;s.method="post";for(var p in g)c=w.createElement("input"),c.type="hidden",c.name=p,c.value=a.a.jb(a.a.c(g[p])),s.appendChild(c);b(m,function(a,b){var c=w.createElement("input");c.type="hidden";c.name=a;c.value=b;s.appendChild(c)});w.body.appendChild(s);d.submitter?d.submitter(s):s.submit();setTimeout(function(){s.parentNode.removeChild(s)},
0)}}}();a.b("utils",a.a);a.b("utils.arrayForEach",a.a.o);a.b("utils.arrayFirst",a.a.vb);a.b("utils.arrayFilter",a.a.xa);a.b("utils.arrayGetDistinctValues",a.a.wb);a.b("utils.arrayIndexOf",a.a.m);a.b("utils.arrayMap",a.a.Ka);a.b("utils.arrayPushAll",a.a.ia);a.b("utils.arrayRemoveItem",a.a.ya);a.b("utils.extend",a.a.extend);a.b("utils.fieldsIncludedWithJsonPost",a.a.Bb);a.b("utils.getFormFields",a.a.Db);a.b("utils.peekObservable",a.a.cb);a.b("utils.postJson",a.a.zc);a.b("utils.parseJson",a.a.yc);a.b("utils.registerEventHandler",
a.a.n);a.b("utils.stringifyJson",a.a.jb);a.b("utils.range",a.a.Bc);a.b("utils.toggleDomNodeCssClass",a.a.Ia);a.b("utils.triggerEvent",a.a.qa);a.b("utils.unwrapObservable",a.a.c);a.b("utils.objectForEach",a.a.A);a.b("utils.addOrRemoveItem",a.a.ga);a.b("utils.setTextContent",a.a.Ha);a.b("unwrap",a.a.c);Function.prototype.bind||(Function.prototype.bind=function(a){var d=this;if(1===arguments.length)return function(){return d.apply(a,arguments)};var c=Array.prototype.slice.call(arguments,1);return function(){var e=
c.slice(0);e.push.apply(e,arguments);return d.apply(a,e)}});a.a.f=new function(){function a(b,k){var h=b[c];if(!h||"null"===h||!e[h]){if(!k)return p;h=b[c]="ko"+d++;e[h]={}}return e[h]}var d=0,c="__ko__"+(new Date).getTime(),e={};return{get:function(c,d){var e=a(c,!1);return e===p?p:e[d]},set:function(c,d,e){if(e!==p||a(c,!1)!==p)a(c,!0)[d]=e},clear:function(a){var b=a[c];return b?(delete e[b],a[c]=null,!0):!1},I:function(){return d++ +c}}};a.b("utils.domData",a.a.f);a.b("utils.domData.clear",a.a.f.clear);
a.a.C=new function(){function b(b,d){var e=a.a.f.get(b,c);e===p&&d&&(e=[],a.a.f.set(b,c,e));return e}function d(c){var e=b(c,!1);if(e)for(var e=e.slice(0),l=0;l<e.length;l++)e[l](c);a.a.f.clear(c);a.a.C.cleanExternalData(c);if(f[c.nodeType])for(e=c.firstChild;c=e;)e=c.nextSibling,8===c.nodeType&&d(c)}var c=a.a.f.I(),e={1:!0,8:!0,9:!0},f={1:!0,9:!0};return{fa:function(a,c){if("function"!=typeof c)throw Error("Callback must be a function");b(a,!0).push(c)},Pb:function(d,e){var f=b(d,!1);f&&(a.a.ya(f,
e),0==f.length&&a.a.f.set(d,c,p))},S:function(b){if(e[b.nodeType]&&(d(b),f[b.nodeType])){var c=[];a.a.ia(c,b.getElementsByTagName("*"));for(var l=0,g=c.length;l<g;l++)d(c[l])}return b},removeNode:function(b){a.S(b);b.parentNode&&b.parentNode.removeChild(b)},cleanExternalData:function(a){u&&"function"==typeof u.cleanData&&u.cleanData([a])}}};a.S=a.a.C.S;a.removeNode=a.a.C.removeNode;a.b("cleanNode",a.S);a.b("removeNode",a.removeNode);a.b("utils.domNodeDisposal",a.a.C);a.b("utils.domNodeDisposal.addDisposeCallback",
a.a.C.fa);a.b("utils.domNodeDisposal.removeDisposeCallback",a.a.C.Pb);(function(){a.a.ca=function(b,d){var c;if(u)if(u.parseHTML)c=u.parseHTML(b,d)||[];else{if((c=u.clean([b],d))&&c[0]){for(var e=c[0];e.parentNode&&11!==e.parentNode.nodeType;)e=e.parentNode;e.parentNode&&e.parentNode.removeChild(e)}}else{(e=d)||(e=w);c=e.parentWindow||e.defaultView||y;var f=a.a.ib(b).toLowerCase(),e=e.createElement("div"),f=f.match(/^<(thead|tbody|tfoot)/)&&[1,"<table>","</table>"]||!f.indexOf("<tr")&&[2,"<table><tbody>",
"</tbody></table>"]||(!f.indexOf("<td")||!f.indexOf("<th"))&&[3,"<table><tbody><tr>","</tr></tbody></table>"]||[0,"",""],k="ignored<div>"+f[1]+b+f[2]+"</div>";for("function"==typeof c.innerShiv?e.appendChild(c.innerShiv(k)):e.innerHTML=k;f[0]--;)e=e.lastChild;c=a.a.O(e.lastChild.childNodes)}return c};a.a.gb=function(b,d){a.a.Ra(b);d=a.a.c(d);if(null!==d&&d!==p)if("string"!=typeof d&&(d=d.toString()),u)u(b).html(d);else for(var c=a.a.ca(d,b.ownerDocument),e=0;e<c.length;e++)b.appendChild(c[e])}})();
a.b("utils.parseHtmlFragment",a.a.ca);a.b("utils.setHtml",a.a.gb);a.H=function(){function b(c,d){if(c)if(8==c.nodeType){var f=a.H.Lb(c.nodeValue);null!=f&&d.push({ic:c,wc:f})}else if(1==c.nodeType)for(var f=0,k=c.childNodes,h=k.length;f<h;f++)b(k[f],d)}var d={};return{$a:function(a){if("function"!=typeof a)throw Error("You can only pass a function to ko.memoization.memoize()");var b=(4294967296*(1+Math.random())|0).toString(16).substring(1)+(4294967296*(1+Math.random())|0).toString(16).substring(1);
d[b]=a;return"\x3c!--[ko_memo:"+b+"]--\x3e"},Wb:function(a,b){var f=d[a];if(f===p)throw Error("Couldn't find any memo with ID "+a+". Perhaps it's already been unmemoized.");try{return f.apply(null,b||[]),!0}finally{delete d[a]}},Xb:function(c,d){var f=[];b(c,f);for(var k=0,h=f.length;k<h;k++){var l=f[k].ic,g=[l];d&&a.a.ia(g,d);a.H.Wb(f[k].wc,g);l.nodeValue="";l.parentNode&&l.parentNode.removeChild(l)}},Lb:function(a){return(a=a.match(/^\[ko_memo\:(.*?)\]$/))?a[1]:null}}}();a.b("memoization",a.H);
a.b("memoization.memoize",a.H.$a);a.b("memoization.unmemoize",a.H.Wb);a.b("memoization.parseMemoText",a.H.Lb);a.b("memoization.unmemoizeDomNodeAndDescendants",a.H.Xb);a.Sa={throttle:function(b,d){b.throttleEvaluation=d;var c=null;return a.j({read:b,write:function(a){clearTimeout(c);c=setTimeout(function(){b(a)},d)}})},rateLimit:function(a,d){var c,e,f;"number"==typeof d?c=d:(c=d.timeout,e=d.method);f="notifyWhenChangesStop"==e?S:R;a.Za(function(a){return f(a,c)})},notify:function(a,d){a.equalityComparer=
"always"==d?null:J}};var Q={undefined:1,"boolean":1,number:1,string:1};a.b("extenders",a.Sa);a.Ub=function(b,d,c){this.da=b;this.La=d;this.hc=c;this.Gb=!1;a.D(this,"dispose",this.p)};a.Ub.prototype.p=function(){this.Gb=!0;this.hc()};a.Q=function(){a.a.Ga(this,a.Q.fn);this.G={};this.rb=1};var z={U:function(b,d,c){var e=this;c=c||"change";var f=new a.Ub(e,d?b.bind(d):b,function(){a.a.ya(e.G[c],f);e.ua&&e.ua(c)});e.ja&&e.ja(c);e.G[c]||(e.G[c]=[]);e.G[c].push(f);return f},notifySubscribers:function(b,
d){d=d||"change";"change"===d&&this.Yb();if(this.Ba(d))try{a.k.xb();for(var c=this.G[d].slice(0),e=0,f;f=c[e];++e)f.Gb||f.La(b)}finally{a.k.end()}},Aa:function(){return this.rb},pc:function(a){return this.Aa()!==a},Yb:function(){++this.rb},Za:function(b){var d=this,c=a.F(d),e,f,k;d.ta||(d.ta=d.notifySubscribers,d.notifySubscribers=function(a,b){b&&"change"!==b?"beforeChange"===b?d.pb(a):d.ta(a,b):d.qb(a)});var h=b(function(){c&&k===d&&(k=d());e=!1;d.Wa(f,k)&&d.ta(f=k)});d.qb=function(a){e=!0;k=a;
h()};d.pb=function(a){e||(f=a,d.ta(a,"beforeChange"))}},Ba:function(a){return this.G[a]&&this.G[a].length},nc:function(b){if(b)return this.G[b]&&this.G[b].length||0;var d=0;a.a.A(this.G,function(a,b){d+=b.length});return d},Wa:function(a,d){return!this.equalityComparer||!this.equalityComparer(a,d)},extend:function(b){var d=this;b&&a.a.A(b,function(b,e){var f=a.Sa[b];"function"==typeof f&&(d=f(d,e)||d)});return d}};a.D(z,"subscribe",z.U);a.D(z,"extend",z.extend);a.D(z,"getSubscriptionsCount",z.nc);
a.a.za&&a.a.Fa(z,Function.prototype);a.Q.fn=z;a.Hb=function(a){return null!=a&&"function"==typeof a.U&&"function"==typeof a.notifySubscribers};a.b("subscribable",a.Q);a.b("isSubscribable",a.Hb);a.Z=a.k=function(){function b(a){c.push(e);e=a}function d(){e=c.pop()}var c=[],e,f=0;return{xb:b,end:d,Ob:function(b){if(e){if(!a.Hb(b))throw Error("Only subscribable things can act as dependencies");e.La(b,b.ac||(b.ac=++f))}},u:function(a,c,e){try{return b(),a.apply(c,e||[])}finally{d()}},oa:function(){if(e)return e.w.oa()},
Ca:function(){if(e)return e.Ca}}}();a.b("computedContext",a.Z);a.b("computedContext.getDependenciesCount",a.Z.oa);a.b("computedContext.isInitial",a.Z.Ca);a.b("computedContext.isSleeping",a.Z.Jc);a.b("ignoreDependencies",a.Gc=a.k.u);a.r=function(b){function d(){if(0<arguments.length)return d.Wa(c,arguments[0])&&(d.X(),c=arguments[0],d.W()),this;a.k.Ob(d);return c}var c=b;a.Q.call(d);a.a.Ga(d,a.r.fn);d.B=function(){return c};d.W=function(){d.notifySubscribers(c)};d.X=function(){d.notifySubscribers(c,
"beforeChange")};a.D(d,"peek",d.B);a.D(d,"valueHasMutated",d.W);a.D(d,"valueWillMutate",d.X);return d};a.r.fn={equalityComparer:J};var H=a.r.Ac="__ko_proto__";a.r.fn[H]=a.r;a.a.za&&a.a.Fa(a.r.fn,a.Q.fn);a.Ta=function(b,d){return null===b||b===p||b[H]===p?!1:b[H]===d?!0:a.Ta(b[H],d)};a.F=function(b){return a.Ta(b,a.r)};a.Da=function(b){return"function"==typeof b&&b[H]===a.r||"function"==typeof b&&b[H]===a.j&&b.qc?!0:!1};a.b("observable",a.r);a.b("isObservable",a.F);a.b("isWriteableObservable",a.Da);
a.b("isWritableObservable",a.Da);a.ba=function(b){b=b||[];if("object"!=typeof b||!("length"in b))throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");b=a.r(b);a.a.Ga(b,a.ba.fn);return b.extend({trackArrayChanges:!0})};a.ba.fn={remove:function(b){for(var d=this.B(),c=[],e="function"!=typeof b||a.F(b)?function(a){return a===b}:b,f=0;f<d.length;f++){var k=d[f];e(k)&&(0===c.length&&this.X(),c.push(k),d.splice(f,1),f--)}c.length&&this.W();return c},
removeAll:function(b){if(b===p){var d=this.B(),c=d.slice(0);this.X();d.splice(0,d.length);this.W();return c}return b?this.remove(function(c){return 0<=a.a.m(b,c)}):[]},destroy:function(b){var d=this.B(),c="function"!=typeof b||a.F(b)?function(a){return a===b}:b;this.X();for(var e=d.length-1;0<=e;e--)c(d[e])&&(d[e]._destroy=!0);this.W()},destroyAll:function(b){return b===p?this.destroy(function(){return!0}):b?this.destroy(function(d){return 0<=a.a.m(b,d)}):[]},indexOf:function(b){var d=this();return a.a.m(d,
b)},replace:function(a,d){var c=this.indexOf(a);0<=c&&(this.X(),this.B()[c]=d,this.W())}};a.a.o("pop push reverse shift sort splice unshift".split(" "),function(b){a.ba.fn[b]=function(){var a=this.B();this.X();this.yb(a,b,arguments);a=a[b].apply(a,arguments);this.W();return a}});a.a.o(["slice"],function(b){a.ba.fn[b]=function(){var a=this();return a[b].apply(a,arguments)}});a.a.za&&a.a.Fa(a.ba.fn,a.r.fn);a.b("observableArray",a.ba);a.Sa.trackArrayChanges=function(b){function d(){if(!c){c=!0;var g=
b.notifySubscribers;b.notifySubscribers=function(a,b){b&&"change"!==b||++k;return g.apply(this,arguments)};var d=[].concat(b.B()||[]);e=null;f=b.U(function(c){c=[].concat(c||[]);if(b.Ba("arrayChange")){var g;if(!e||1<k)e=a.a.Ma(d,c,{sparse:!0});g=e}d=c;e=null;k=0;g&&g.length&&b.notifySubscribers(g,"arrayChange")})}}if(!b.yb){var c=!1,e=null,f,k=0,h=b.ja,l=b.ua;b.ja=function(a){h&&h.call(b,a);"arrayChange"===a&&d()};b.ua=function(a){l&&l.call(b,a);"arrayChange"!==a||b.Ba("arrayChange")||(f.p(),c=!1)};
b.yb=function(b,d,f){function l(a,b,c){return h[h.length]={status:a,value:b,index:c}}if(c&&!k){var h=[],r=b.length,v=f.length,t=0;switch(d){case "push":t=r;case "unshift":for(d=0;d<v;d++)l("added",f[d],t+d);break;case "pop":t=r-1;case "shift":r&&l("deleted",b[t],t);break;case "splice":d=Math.min(Math.max(0,0>f[0]?r+f[0]:f[0]),r);for(var r=1===v?r:Math.min(d+(f[1]||0),r),v=d+v-2,t=Math.max(r,v),G=[],A=[],p=2;d<t;++d,++p)d<r&&A.push(l("deleted",b[d],d)),d<v&&G.push(l("added",f[p],d));a.a.Cb(A,G);break;
default:return}e=h}}}};a.w=a.j=function(b,d,c){function e(a,b,c){if(I&&b===g)throw Error("A 'pure' computed must not be called recursively");B[a]=c;c.sa=F++;c.ea=b.Aa()}function f(){var a,b;for(a in B)if(B.hasOwnProperty(a)&&(b=B[a],b.da.pc(b.ea)))return!0}function k(){!s&&B&&a.a.A(B,function(a,b){b.p&&b.p()});B=null;F=0;G=!0;s=r=!1}function h(){var a=g.throttleEvaluation;a&&0<=a?(clearTimeout(z),z=setTimeout(function(){l(!0)},a)):g.nb?g.nb():l(!0)}function l(b){if(!v&&!G){if(y&&y()){if(!t){w();return}}else t=
!1;v=!0;try{var c=B,m=F,f=I?p:!F;a.k.xb({La:function(a,b){G||(m&&c[b]?(e(b,a,c[b]),delete c[b],--m):B[b]||e(b,a,s?{da:a}:a.U(h)))},w:g,Ca:f});B={};F=0;try{var l=d?A.call(d):A()}finally{a.k.end(),m&&!s&&a.a.A(c,function(a,b){b.p&&b.p()}),r=!1}g.Wa(n,l)&&(s||q(n,"beforeChange"),n=l,s?g.Yb():b&&q(n));f&&q(n,"awake")}finally{v=!1}F||w()}}function g(){if(0<arguments.length){if("function"===typeof C)C.apply(d,arguments);else throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");
return this}a.k.Ob(g);(r||s&&f())&&l();return n}function m(){(r&&!F||s&&f())&&l();return n}function x(){return r||0<F}function q(a,b){g.notifySubscribers(a,b)}var n,r=!0,v=!1,t=!1,G=!1,A=b,I=!1,s=!1;A&&"object"==typeof A?(c=A,A=c.read):(c=c||{},A||(A=c.read));if("function"!=typeof A)throw Error("Pass a function that returns the value of the ko.computed");var C=c.write,D=c.disposeWhenNodeIsRemoved||c.q||null,u=c.disposeWhen||c.Pa,y=u,w=k,B={},F=0,z=null;d||(d=c.owner);a.Q.call(g);a.a.Ga(g,a.j.fn);
g.B=m;g.oa=function(){return F};g.qc="function"===typeof C;g.p=function(){w()};g.$=x;var T=g.Za;g.Za=function(a){T.call(g,a);g.nb=function(){g.pb(n);r=!0;g.qb(g)}};c.pure?(s=I=!0,g.ja=function(b){if(!G&&s&&"change"==b){s=!1;if(r||f())B=null,F=0,r=!0,l();else{var c=[];a.a.A(B,function(a,b){c[b.sa]=a});a.a.o(c,function(a,b){var c=B[a],g=c.da.U(h);g.sa=b;g.ea=c.ea;B[a]=g})}G||q(n,"awake")}},g.ua=function(b){G||"change"!=b||g.Ba("change")||(a.a.A(B,function(a,b){b.p&&(B[a]={da:b.da,sa:b.sa,ea:b.ea},b.p())}),
s=!0,q(p,"asleep"))},g.bc=g.Aa,g.Aa=function(){s&&(r||f())&&l();return g.bc()}):c.deferEvaluation&&(g.ja=function(a){"change"!=a&&"beforeChange"!=a||m()});a.D(g,"peek",g.B);a.D(g,"dispose",g.p);a.D(g,"isActive",g.$);a.D(g,"getDependenciesCount",g.oa);D&&(t=!0,D.nodeType&&(y=function(){return!a.a.Qa(D)||u&&u()}));s||c.deferEvaluation||l();D&&x()&&D.nodeType&&(w=function(){a.a.C.Pb(D,w);k()},a.a.C.fa(D,w));return g};a.sc=function(b){return a.Ta(b,a.j)};z=a.r.Ac;a.j[z]=a.r;a.j.fn={equalityComparer:J};
a.j.fn[z]=a.j;a.a.za&&a.a.Fa(a.j.fn,a.Q.fn);a.b("dependentObservable",a.j);a.b("computed",a.j);a.b("isComputed",a.sc);a.Nb=function(b,d){if("function"===typeof b)return a.w(b,d,{pure:!0});b=a.a.extend({},b);b.pure=!0;return a.w(b,d)};a.b("pureComputed",a.Nb);(function(){function b(a,f,k){k=k||new c;a=f(a);if("object"!=typeof a||null===a||a===p||a instanceof Date||a instanceof String||a instanceof Number||a instanceof Boolean)return a;var h=a instanceof Array?[]:{};k.save(a,h);d(a,function(c){var g=
f(a[c]);switch(typeof g){case "boolean":case "number":case "string":case "function":h[c]=g;break;case "object":case "undefined":var d=k.get(g);h[c]=d!==p?d:b(g,f,k)}});return h}function d(a,b){if(a instanceof Array){for(var c=0;c<a.length;c++)b(c);"function"==typeof a.toJSON&&b("toJSON")}else for(c in a)b(c)}function c(){this.keys=[];this.mb=[]}a.Vb=function(c){if(0==arguments.length)throw Error("When calling ko.toJS, pass the object you want to convert.");return b(c,function(b){for(var c=0;a.F(b)&&
10>c;c++)b=b();return b})};a.toJSON=function(b,c,d){b=a.Vb(b);return a.a.jb(b,c,d)};c.prototype={save:function(b,c){var d=a.a.m(this.keys,b);0<=d?this.mb[d]=c:(this.keys.push(b),this.mb.push(c))},get:function(b){b=a.a.m(this.keys,b);return 0<=b?this.mb[b]:p}}})();a.b("toJS",a.Vb);a.b("toJSON",a.toJSON);(function(){a.i={s:function(b){switch(a.a.v(b)){case "option":return!0===b.__ko__hasDomDataOptionValue__?a.a.f.get(b,a.d.options.ab):7>=a.a.M?b.getAttributeNode("value")&&b.getAttributeNode("value").specified?
b.value:b.text:b.value;case "select":return 0<=b.selectedIndex?a.i.s(b.options[b.selectedIndex]):p;default:return b.value}},Y:function(b,d,c){switch(a.a.v(b)){case "option":switch(typeof d){case "string":a.a.f.set(b,a.d.options.ab,p);"__ko__hasDomDataOptionValue__"in b&&delete b.__ko__hasDomDataOptionValue__;b.value=d;break;default:a.a.f.set(b,a.d.options.ab,d),b.__ko__hasDomDataOptionValue__=!0,b.value="number"===typeof d?d:""}break;case "select":if(""===d||null===d)d=p;for(var e=-1,f=0,k=b.options.length,
h;f<k;++f)if(h=a.i.s(b.options[f]),h==d||""==h&&d===p){e=f;break}if(c||0<=e||d===p&&1<b.size)b.selectedIndex=e;break;default:if(null===d||d===p)d="";b.value=d}}}})();a.b("selectExtensions",a.i);a.b("selectExtensions.readValue",a.i.s);a.b("selectExtensions.writeValue",a.i.Y);a.h=function(){function b(b){b=a.a.ib(b);123===b.charCodeAt(0)&&(b=b.slice(1,-1));var c=[],d=b.match(e),x,h=[],n=0;if(d){d.push(",");for(var r=0,v;v=d[r];++r){var t=v.charCodeAt(0);if(44===t){if(0>=n){c.push(x&&h.length?{key:x,
value:h.join("")}:{unknown:x||h.join("")});x=n=0;h=[];continue}}else if(58===t){if(!n&&!x&&1===h.length){x=h.pop();continue}}else 47===t&&r&&1<v.length?(t=d[r-1].match(f))&&!k[t[0]]&&(b=b.substr(b.indexOf(v)+1),d=b.match(e),d.push(","),r=-1,v="/"):40===t||123===t||91===t?++n:41===t||125===t||93===t?--n:x||h.length||34!==t&&39!==t||(v=v.slice(1,-1));h.push(v)}}return c}var d=["true","false","null","undefined"],c=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,e=RegExp("\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|/(?:[^/\\\\]|\\\\.)*/w*|[^\\s:,/][^,\"'{}()/:[\\]]*[^\\s,\"'{}()/:[\\]]|[^\\s]",
"g"),f=/[\])"'A-Za-z0-9_$]+$/,k={"in":1,"return":1,"typeof":1},h={};return{ka:[],V:h,bb:b,Ea:function(e,g){function m(b,g){var e;if(!r){var l=a.getBindingHandler(b);if(l&&l.preprocess&&!(g=l.preprocess(g,b,m)))return;if(l=h[b])e=g,0<=a.a.m(d,e)?e=!1:(l=e.match(c),e=null===l?!1:l[1]?"Object("+l[1]+")"+l[2]:e),l=e;l&&k.push("'"+b+"':function(_z){"+e+"=_z}")}n&&(g="function(){return "+g+" }");f.push("'"+b+"':"+g)}g=g||{};var f=[],k=[],n=g.valueAccessors,r=g.bindingParams,v="string"===typeof e?b(e):e;
a.a.o(v,function(a){m(a.key||a.unknown,a.value)});k.length&&m("_ko_property_writers","{"+k.join(",")+" }");return f.join(",")},vc:function(a,b){for(var c=0;c<a.length;c++)if(a[c].key==b)return!0;return!1},ra:function(b,c,d,e,f){if(b&&a.F(b))!a.Da(b)||f&&b.B()===e||b(e);else if((b=c.get("_ko_property_writers"))&&b[d])b[d](e)}}}();a.b("expressionRewriting",a.h);a.b("expressionRewriting.bindingRewriteValidators",a.h.ka);a.b("expressionRewriting.parseObjectLiteral",a.h.bb);a.b("expressionRewriting.preProcessBindings",
a.h.Ea);a.b("expressionRewriting._twoWayBindings",a.h.V);a.b("jsonExpressionRewriting",a.h);a.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",a.h.Ea);(function(){function b(a){return 8==a.nodeType&&k.test(f?a.text:a.nodeValue)}function d(a){return 8==a.nodeType&&h.test(f?a.text:a.nodeValue)}function c(a,c){for(var e=a,f=1,l=[];e=e.nextSibling;){if(d(e)&&(f--,0===f))return l;l.push(e);b(e)&&f++}if(!c)throw Error("Cannot find closing comment tag to match: "+a.nodeValue);return null}function e(a,
b){var d=c(a,b);return d?0<d.length?d[d.length-1].nextSibling:a.nextSibling:null}var f=w&&"\x3c!--test--\x3e"===w.createComment("test").text,k=f?/^\x3c!--\s*ko(?:\s+([\s\S]+))?\s*--\x3e$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,h=f?/^\x3c!--\s*\/ko\s*--\x3e$/:/^\s*\/ko\s*$/,l={ul:!0,ol:!0};a.e={R:{},childNodes:function(a){return b(a)?c(a):a.childNodes},ma:function(c){if(b(c)){c=a.e.childNodes(c);for(var d=0,e=c.length;d<e;d++)a.removeNode(c[d])}else a.a.Ra(c)},T:function(c,d){if(b(c)){a.e.ma(c);for(var e=c.nextSibling,
f=0,l=d.length;f<l;f++)e.parentNode.insertBefore(d[f],e)}else a.a.T(c,d)},Mb:function(a,c){b(a)?a.parentNode.insertBefore(c,a.nextSibling):a.firstChild?a.insertBefore(c,a.firstChild):a.appendChild(c)},Fb:function(c,d,e){e?b(c)?c.parentNode.insertBefore(d,e.nextSibling):e.nextSibling?c.insertBefore(d,e.nextSibling):c.appendChild(d):a.e.Mb(c,d)},firstChild:function(a){return b(a)?!a.nextSibling||d(a.nextSibling)?null:a.nextSibling:a.firstChild},nextSibling:function(a){b(a)&&(a=e(a));return a.nextSibling&&
d(a.nextSibling)?null:a.nextSibling},oc:b,Fc:function(a){return(a=(f?a.text:a.nodeValue).match(k))?a[1]:null},Kb:function(c){if(l[a.a.v(c)]){var m=c.firstChild;if(m){do if(1===m.nodeType){var f;f=m.firstChild;var h=null;if(f){do if(h)h.push(f);else if(b(f)){var k=e(f,!0);k?f=k:h=[f]}else d(f)&&(h=[f]);while(f=f.nextSibling)}if(f=h)for(h=m.nextSibling,k=0;k<f.length;k++)h?c.insertBefore(f[k],h):c.appendChild(f[k])}while(m=m.nextSibling)}}}}})();a.b("virtualElements",a.e);a.b("virtualElements.allowedBindings",
a.e.R);a.b("virtualElements.emptyNode",a.e.ma);a.b("virtualElements.insertAfter",a.e.Fb);a.b("virtualElements.prepend",a.e.Mb);a.b("virtualElements.setDomNodeChildren",a.e.T);(function(){a.L=function(){this.ec={}};a.a.extend(a.L.prototype,{nodeHasBindings:function(b){switch(b.nodeType){case 1:return null!=b.getAttribute("data-bind")||a.g.getComponentNameForNode(b);case 8:return a.e.oc(b);default:return!1}},getBindings:function(b,d){var c=this.getBindingsString(b,d),c=c?this.parseBindingsString(c,
d,b):null;return a.g.sb(c,b,d,!1)},getBindingAccessors:function(b,d){var c=this.getBindingsString(b,d),c=c?this.parseBindingsString(c,d,b,{valueAccessors:!0}):null;return a.g.sb(c,b,d,!0)},getBindingsString:function(b){switch(b.nodeType){case 1:return b.getAttribute("data-bind");case 8:return a.e.Fc(b);default:return null}},parseBindingsString:function(b,d,c,e){try{var f=this.ec,k=b+(e&&e.valueAccessors||""),h;if(!(h=f[k])){var l,g="with($context){with($data||{}){return{"+a.h.Ea(b,e)+"}}}";l=new Function("$context",
"$element",g);h=f[k]=l}return h(d,c)}catch(m){throw m.message="Unable to parse bindings.\nBindings value: "+b+"\nMessage: "+m.message,m;}}});a.L.instance=new a.L})();a.b("bindingProvider",a.L);(function(){function b(a){return function(){return a}}function d(a){return a()}function c(b){return a.a.pa(a.k.u(b),function(a,c){return function(){return b()[c]}})}function e(d,g,e){return"function"===typeof d?c(d.bind(null,g,e)):a.a.pa(d,b)}function f(a,b){return c(this.getBindings.bind(this,a,b))}function k(b,
c,d){var g,e=a.e.firstChild(c),f=a.L.instance,m=f.preprocessNode;if(m){for(;g=e;)e=a.e.nextSibling(g),m.call(f,g);e=a.e.firstChild(c)}for(;g=e;)e=a.e.nextSibling(g),h(b,g,d)}function h(b,c,d){var e=!0,f=1===c.nodeType;f&&a.e.Kb(c);if(f&&d||a.L.instance.nodeHasBindings(c))e=g(c,null,b,d).shouldBindDescendants;e&&!x[a.a.v(c)]&&k(b,c,!f)}function l(b){var c=[],d={},g=[];a.a.A(b,function I(e){if(!d[e]){var f=a.getBindingHandler(e);f&&(f.after&&(g.push(e),a.a.o(f.after,function(c){if(b[c]){if(-1!==a.a.m(g,
c))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+g.join(", "));I(c)}}),g.length--),c.push({key:e,Eb:f}));d[e]=!0}});return c}function g(b,c,g,e){var m=a.a.f.get(b,q);if(!c){if(m)throw Error("You cannot apply bindings multiple times to the same element.");a.a.f.set(b,q,!0)}!m&&e&&a.Tb(b,g);var h;if(c&&"function"!==typeof c)h=c;else{var k=a.L.instance,x=k.getBindingAccessors||f,n=a.j(function(){(h=c?c(g,b):x.call(k,b,g))&&g.K&&g.K();return h},null,{q:b});
h&&n.$()||(n=null)}var u;if(h){var w=n?function(a){return function(){return d(n()[a])}}:function(a){return h[a]},y=function(){return a.a.pa(n?n():h,d)};y.get=function(a){return h[a]&&d(w(a))};y.has=function(a){return a in h};e=l(h);a.a.o(e,function(c){var d=c.Eb.init,e=c.Eb.update,f=c.key;if(8===b.nodeType&&!a.e.R[f])throw Error("The binding '"+f+"' cannot be used with virtual elements");try{"function"==typeof d&&a.k.u(function(){var a=d(b,w(f),y,g.$data,g);if(a&&a.controlsDescendantBindings){if(u!==
p)throw Error("Multiple bindings ("+u+" and "+f+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");u=f}}),"function"==typeof e&&a.j(function(){e(b,w(f),y,g.$data,g)},null,{q:b})}catch(m){throw m.message='Unable to process binding "'+f+": "+h[f]+'"\nMessage: '+m.message,m;}})}return{shouldBindDescendants:u===p}}function m(b){return b&&b instanceof a.N?b:new a.N(b)}a.d={};var x={script:!0,textarea:!0};a.getBindingHandler=function(b){return a.d[b]};
a.N=function(b,c,d,g){var e=this,f="function"==typeof b&&!a.F(b),m,l=a.j(function(){var m=f?b():b,h=a.a.c(m);c?(c.K&&c.K(),a.a.extend(e,c),l&&(e.K=l)):(e.$parents=[],e.$root=h,e.ko=a);e.$rawData=m;e.$data=h;d&&(e[d]=h);g&&g(e,c,h);return e.$data},null,{Pa:function(){return m&&!a.a.tb(m)},q:!0});l.$()&&(e.K=l,l.equalityComparer=null,m=[],l.Zb=function(b){m.push(b);a.a.C.fa(b,function(b){a.a.ya(m,b);m.length||(l.p(),e.K=l=p)})})};a.N.prototype.createChildContext=function(b,c,d){return new a.N(b,this,
c,function(a,b){a.$parentContext=b;a.$parent=b.$data;a.$parents=(b.$parents||[]).slice(0);a.$parents.unshift(a.$parent);d&&d(a)})};a.N.prototype.extend=function(b){return new a.N(this.K||this.$data,this,null,function(c,d){c.$rawData=d.$rawData;a.a.extend(c,"function"==typeof b?b():b)})};var q=a.a.f.I(),n=a.a.f.I();a.Tb=function(b,c){if(2==arguments.length)a.a.f.set(b,n,c),c.K&&c.K.Zb(b);else return a.a.f.get(b,n)};a.va=function(b,c,d){1===b.nodeType&&a.e.Kb(b);return g(b,c,m(d),!0)};a.cc=function(b,
c,d){d=m(d);return a.va(b,e(c,d,b),d)};a.Ja=function(a,b){1!==b.nodeType&&8!==b.nodeType||k(m(a),b,!0)};a.ub=function(a,b){!u&&y.jQuery&&(u=y.jQuery);if(b&&1!==b.nodeType&&8!==b.nodeType)throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");b=b||y.document.body;h(m(a),b,!0)};a.Oa=function(b){switch(b.nodeType){case 1:case 8:var c=a.Tb(b);if(c)return c;if(b.parentNode)return a.Oa(b.parentNode)}return p};a.gc=function(b){return(b=a.Oa(b))?
b.$data:p};a.b("bindingHandlers",a.d);a.b("applyBindings",a.ub);a.b("applyBindingsToDescendants",a.Ja);a.b("applyBindingAccessorsToNode",a.va);a.b("applyBindingsToNode",a.cc);a.b("contextFor",a.Oa);a.b("dataFor",a.gc)})();(function(b){function d(d,e){var g=f.hasOwnProperty(d)?f[d]:b,m;g?g.U(e):(g=f[d]=new a.Q,g.U(e),c(d,function(a,b){var c=!(!b||!b.synchronous);k[d]={definition:a,tc:c};delete f[d];m||c?g.notifySubscribers(a):setTimeout(function(){g.notifySubscribers(a)},0)}),m=!0)}function c(a,b){e("getConfig",
[a],function(c){c?e("loadComponent",[a,c],function(a){b(a,c)}):b(null,null)})}function e(c,d,g,f){f||(f=a.g.loaders.slice(0));var k=f.shift();if(k){var q=k[c];if(q){var n=!1;if(q.apply(k,d.concat(function(a){n?g(null):null!==a?g(a):e(c,d,g,f)}))!==b&&(n=!0,!k.suppressLoaderExceptions))throw Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.");}else e(c,d,g,f)}else g(null)}var f={},k={};a.g={get:function(c,e){var g=k.hasOwnProperty(c)?k[c]:
b;g?g.tc?a.k.u(function(){e(g.definition)}):setTimeout(function(){e(g.definition)},0):d(c,e)},zb:function(a){delete k[a]},ob:e};a.g.loaders=[];a.b("components",a.g);a.b("components.get",a.g.get);a.b("components.clearCachedDefinition",a.g.zb)})();(function(){function b(b,c,d,e){function k(){0===--v&&e(h)}var h={},v=2,t=d.template;d=d.viewModel;t?f(c,t,function(c){a.g.ob("loadTemplate",[b,c],function(a){h.template=a;k()})}):k();d?f(c,d,function(c){a.g.ob("loadViewModel",[b,c],function(a){h[l]=a;k()})}):
k()}function d(a,b,c){if("function"===typeof b)c(function(a){return new b(a)});else if("function"===typeof b[l])c(b[l]);else if("instance"in b){var e=b.instance;c(function(){return e})}else"viewModel"in b?d(a,b.viewModel,c):a("Unknown viewModel value: "+b)}function c(b){switch(a.a.v(b)){case "script":return a.a.ca(b.text);case "textarea":return a.a.ca(b.value);case "template":if(e(b.content))return a.a.la(b.content.childNodes)}return a.a.la(b.childNodes)}function e(a){return y.DocumentFragment?a instanceof
DocumentFragment:a&&11===a.nodeType}function f(a,b,c){"string"===typeof b.require?O||y.require?(O||y.require)([b.require],c):a("Uses require, but no AMD loader is present"):c(b)}function k(a){return function(b){throw Error("Component '"+a+"': "+b);}}var h={};a.g.register=function(b,c){if(!c)throw Error("Invalid configuration for "+b);if(a.g.Xa(b))throw Error("Component "+b+" is already registered");h[b]=c};a.g.Xa=function(a){return a in h};a.g.Ec=function(b){delete h[b];a.g.zb(b)};a.g.Ab={getConfig:function(a,
b){b(h.hasOwnProperty(a)?h[a]:null)},loadComponent:function(a,c,d){var e=k(a);f(e,c,function(c){b(a,e,c,d)})},loadTemplate:function(b,d,f){b=k(b);if("string"===typeof d)f(a.a.ca(d));else if(d instanceof Array)f(d);else if(e(d))f(a.a.O(d.childNodes));else if(d.element)if(d=d.element,y.HTMLElement?d instanceof HTMLElement:d&&d.tagName&&1===d.nodeType)f(c(d));else if("string"===typeof d){var l=w.getElementById(d);l?f(c(l)):b("Cannot find element with ID "+d)}else b("Unknown element type: "+d);else b("Unknown template value: "+
d)},loadViewModel:function(a,b,c){d(k(a),b,c)}};var l="createViewModel";a.b("components.register",a.g.register);a.b("components.isRegistered",a.g.Xa);a.b("components.unregister",a.g.Ec);a.b("components.defaultLoader",a.g.Ab);a.g.loaders.push(a.g.Ab);a.g.$b=h})();(function(){function b(b,e){var f=b.getAttribute("params");if(f){var f=d.parseBindingsString(f,e,b,{valueAccessors:!0,bindingParams:!0}),f=a.a.pa(f,function(d){return a.w(d,null,{q:b})}),k=a.a.pa(f,function(d){var e=d.B();return d.$()?a.w({read:function(){return a.a.c(d())},
write:a.Da(e)&&function(a){d()(a)},q:b}):e});k.hasOwnProperty("$raw")||(k.$raw=f);return k}return{$raw:{}}}a.g.getComponentNameForNode=function(b){b=a.a.v(b);return a.g.Xa(b)&&b};a.g.sb=function(c,d,f,k){if(1===d.nodeType){var h=a.g.getComponentNameForNode(d);if(h){c=c||{};if(c.component)throw Error('Cannot use the "component" binding on a custom element matching a component');var l={name:h,params:b(d,f)};c.component=k?function(){return l}:l}}return c};var d=new a.L;9>a.a.M&&(a.g.register=function(a){return function(b){w.createElement(b);
return a.apply(this,arguments)}}(a.g.register),w.createDocumentFragment=function(b){return function(){var d=b(),f=a.g.$b,k;for(k in f)f.hasOwnProperty(k)&&d.createElement(k);return d}}(w.createDocumentFragment))})();(function(b){function d(b,c,d){c=c.template;if(!c)throw Error("Component '"+b+"' has no template");b=a.a.la(c);a.e.T(d,b)}function c(a,b,c,d){var e=a.createViewModel;return e?e.call(a,d,{element:b,templateNodes:c}):d}var e=0;a.d.component={init:function(f,k,h,l,g){function m(){var a=x&&
x.dispose;"function"===typeof a&&a.call(x);q=null}var x,q,n=a.a.O(a.e.childNodes(f));a.a.C.fa(f,m);a.w(function(){var l=a.a.c(k()),h,t;"string"===typeof l?h=l:(h=a.a.c(l.name),t=a.a.c(l.params));if(!h)throw Error("No component name specified");var p=q=++e;a.g.get(h,function(e){if(q===p){m();if(!e)throw Error("Unknown component '"+h+"'");d(h,e,f);var l=c(e,f,n,t);e=g.createChildContext(l,b,function(a){a.$component=l;a.$componentTemplateNodes=n});x=l;a.Ja(e,f)}})},null,{q:f});return{controlsDescendantBindings:!0}}};
a.e.R.component=!0})();var P={"class":"className","for":"htmlFor"};a.d.attr={update:function(b,d){var c=a.a.c(d())||{};a.a.A(c,function(c,d){d=a.a.c(d);var k=!1===d||null===d||d===p;k&&b.removeAttribute(c);8>=a.a.M&&c in P?(c=P[c],k?b.removeAttribute(c):b[c]=d):k||b.setAttribute(c,d.toString());"name"===c&&a.a.Rb(b,k?"":d.toString())})}};(function(){a.d.checked={after:["value","attr"],init:function(b,d,c){function e(){var e=b.checked,f=x?k():e;if(!a.Z.Ca()&&(!l||e)){var h=a.k.u(d);g?m!==f?(e&&(a.a.ga(h,
f,!0),a.a.ga(h,m,!1)),m=f):a.a.ga(h,f,e):a.h.ra(h,c,"checked",f,!0)}}function f(){var c=a.a.c(d());b.checked=g?0<=a.a.m(c,k()):h?c:k()===c}var k=a.Nb(function(){return c.has("checkedValue")?a.a.c(c.get("checkedValue")):c.has("value")?a.a.c(c.get("value")):b.value}),h="checkbox"==b.type,l="radio"==b.type;if(h||l){var g=h&&a.a.c(d())instanceof Array,m=g?k():p,x=l||g;l&&!b.name&&a.d.uniqueName.init(b,function(){return!0});a.w(e,null,{q:b});a.a.n(b,"click",e);a.w(f,null,{q:b})}}};a.h.V.checked=!0;a.d.checkedValue=
{update:function(b,d){b.value=a.a.c(d())}}})();a.d.css={update:function(b,d){var c=a.a.c(d());null!==c&&"object"==typeof c?a.a.A(c,function(c,d){d=a.a.c(d);a.a.Ia(b,c,d)}):(c=String(c||""),a.a.Ia(b,b.__ko__cssValue,!1),b.__ko__cssValue=c,a.a.Ia(b,c,!0))}};a.d.enable={update:function(b,d){var c=a.a.c(d());c&&b.disabled?b.removeAttribute("disabled"):c||b.disabled||(b.disabled=!0)}};a.d.disable={update:function(b,d){a.d.enable.update(b,function(){return!a.a.c(d())})}};a.d.event={init:function(b,d,c,
e,f){var k=d()||{};a.a.A(k,function(h){"string"==typeof h&&a.a.n(b,h,function(b){var g,m=d()[h];if(m){try{var k=a.a.O(arguments);e=f.$data;k.unshift(e);g=m.apply(e,k)}finally{!0!==g&&(b.preventDefault?b.preventDefault():b.returnValue=!1)}!1===c.get(h+"Bubble")&&(b.cancelBubble=!0,b.stopPropagation&&b.stopPropagation())}})})}};a.d.foreach={Ib:function(b){return function(){var d=b(),c=a.a.cb(d);if(!c||"number"==typeof c.length)return{foreach:d,templateEngine:a.P.Va};a.a.c(d);return{foreach:c.data,as:c.as,
includeDestroyed:c.includeDestroyed,afterAdd:c.afterAdd,beforeRemove:c.beforeRemove,afterRender:c.afterRender,beforeMove:c.beforeMove,afterMove:c.afterMove,templateEngine:a.P.Va}}},init:function(b,d){return a.d.template.init(b,a.d.foreach.Ib(d))},update:function(b,d,c,e,f){return a.d.template.update(b,a.d.foreach.Ib(d),c,e,f)}};a.h.ka.foreach=!1;a.e.R.foreach=!0;a.d.hasfocus={init:function(b,d,c){function e(e){b.__ko_hasfocusUpdating=!0;var f=b.ownerDocument;if("activeElement"in f){var g;try{g=f.activeElement}catch(m){g=
f.body}e=g===b}f=d();a.h.ra(f,c,"hasfocus",e,!0);b.__ko_hasfocusLastValue=e;b.__ko_hasfocusUpdating=!1}var f=e.bind(null,!0),k=e.bind(null,!1);a.a.n(b,"focus",f);a.a.n(b,"focusin",f);a.a.n(b,"blur",k);a.a.n(b,"focusout",k)},update:function(b,d){var c=!!a.a.c(d());b.__ko_hasfocusUpdating||b.__ko_hasfocusLastValue===c||(c?b.focus():b.blur(),a.k.u(a.a.qa,null,[b,c?"focusin":"focusout"]))}};a.h.V.hasfocus=!0;a.d.hasFocus=a.d.hasfocus;a.h.V.hasFocus=!0;a.d.html={init:function(){return{controlsDescendantBindings:!0}},
update:function(b,d){a.a.gb(b,d())}};K("if");K("ifnot",!1,!0);K("with",!0,!1,function(a,d){return a.createChildContext(d)});var L={};a.d.options={init:function(b){if("select"!==a.a.v(b))throw Error("options binding applies only to SELECT elements");for(;0<b.length;)b.remove(0);return{controlsDescendantBindings:!0}},update:function(b,d,c){function e(){return a.a.xa(b.options,function(a){return a.selected})}function f(a,b,c){var d=typeof b;return"function"==d?b(a):"string"==d?a[b]:c}function k(d,e){if(r&&
m)a.i.Y(b,a.a.c(c.get("value")),!0);else if(n.length){var g=0<=a.a.m(n,a.i.s(e[0]));a.a.Sb(e[0],g);r&&!g&&a.k.u(a.a.qa,null,[b,"change"])}}var h=b.multiple,l=0!=b.length&&h?b.scrollTop:null,g=a.a.c(d()),m=c.get("valueAllowUnset")&&c.has("value"),x=c.get("optionsIncludeDestroyed");d={};var q,n=[];m||(h?n=a.a.Ka(e(),a.i.s):0<=b.selectedIndex&&n.push(a.i.s(b.options[b.selectedIndex])));g&&("undefined"==typeof g.length&&(g=[g]),q=a.a.xa(g,function(b){return x||b===p||null===b||!a.a.c(b._destroy)}),c.has("optionsCaption")&&
(g=a.a.c(c.get("optionsCaption")),null!==g&&g!==p&&q.unshift(L)));var r=!1;d.beforeRemove=function(a){b.removeChild(a)};g=k;c.has("optionsAfterRender")&&"function"==typeof c.get("optionsAfterRender")&&(g=function(b,d){k(0,d);a.k.u(c.get("optionsAfterRender"),null,[d[0],b!==L?b:p])});a.a.fb(b,q,function(d,e,g){g.length&&(n=!m&&g[0].selected?[a.i.s(g[0])]:[],r=!0);e=b.ownerDocument.createElement("option");d===L?(a.a.Ha(e,c.get("optionsCaption")),a.i.Y(e,p)):(g=f(d,c.get("optionsValue"),d),a.i.Y(e,a.a.c(g)),
d=f(d,c.get("optionsText"),g),a.a.Ha(e,d));return[e]},d,g);a.k.u(function(){m?a.i.Y(b,a.a.c(c.get("value")),!0):(h?n.length&&e().length<n.length:n.length&&0<=b.selectedIndex?a.i.s(b.options[b.selectedIndex])!==n[0]:n.length||0<=b.selectedIndex)&&a.a.qa(b,"change")});a.a.kc(b);l&&20<Math.abs(l-b.scrollTop)&&(b.scrollTop=l)}};a.d.options.ab=a.a.f.I();a.d.selectedOptions={after:["options","foreach"],init:function(b,d,c){a.a.n(b,"change",function(){var e=d(),f=[];a.a.o(b.getElementsByTagName("option"),
function(b){b.selected&&f.push(a.i.s(b))});a.h.ra(e,c,"selectedOptions",f)})},update:function(b,d){if("select"!=a.a.v(b))throw Error("values binding applies only to SELECT elements");var c=a.a.c(d());c&&"number"==typeof c.length&&a.a.o(b.getElementsByTagName("option"),function(b){var d=0<=a.a.m(c,a.i.s(b));a.a.Sb(b,d)})}};a.h.V.selectedOptions=!0;a.d.style={update:function(b,d){var c=a.a.c(d()||{});a.a.A(c,function(c,d){d=a.a.c(d);if(null===d||d===p||!1===d)d="";b.style[c]=d})}};a.d.submit={init:function(b,
d,c,e,f){if("function"!=typeof d())throw Error("The value for a submit binding must be a function");a.a.n(b,"submit",function(a){var c,e=d();try{c=e.call(f.$data,b)}finally{!0!==c&&(a.preventDefault?a.preventDefault():a.returnValue=!1)}})}};a.d.text={init:function(){return{controlsDescendantBindings:!0}},update:function(b,d){a.a.Ha(b,d())}};a.e.R.text=!0;(function(){if(y&&y.navigator)var b=function(a){if(a)return parseFloat(a[1])},d=y.opera&&y.opera.version&&parseInt(y.opera.version()),c=y.navigator.userAgent,
e=b(c.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),f=b(c.match(/Firefox\/([^ ]*)/));if(10>a.a.M)var k=a.a.f.I(),h=a.a.f.I(),l=function(b){var c=this.activeElement;(c=c&&a.a.f.get(c,h))&&c(b)},g=function(b,c){var d=b.ownerDocument;a.a.f.get(d,k)||(a.a.f.set(d,k,!0),a.a.n(d,"selectionchange",l));a.a.f.set(b,h,c)};a.d.textInput={init:function(b,c,l){function h(c,d){a.a.n(b,c,d)}function k(){var d=a.a.c(c());if(null===d||d===p)d="";w!==p&&d===w?setTimeout(k,4):b.value!==d&&(u=d,b.value=d)}function v(){A||
(w=b.value,A=setTimeout(t,4))}function t(){clearTimeout(A);w=A=p;var d=b.value;u!==d&&(u=d,a.h.ra(c(),l,"textInput",d))}var u=b.value,A,w;10>a.a.M?(h("propertychange",function(a){"value"===a.propertyName&&t()}),8==a.a.M&&(h("keyup",t),h("keydown",t)),8<=a.a.M&&(g(b,t),h("dragend",v))):(h("input",t),5>e&&"textarea"===a.a.v(b)?(h("keydown",v),h("paste",v),h("cut",v)):11>d?h("keydown",v):4>f&&(h("DOMAutoComplete",t),h("dragdrop",t),h("drop",t)));h("change",t);a.w(k,null,{q:b})}};a.h.V.textInput=!0;a.d.textinput=
{preprocess:function(a,b,c){c("textInput",a)}}})();a.d.uniqueName={init:function(b,d){if(d()){var c="ko_unique_"+ ++a.d.uniqueName.fc;a.a.Rb(b,c)}}};a.d.uniqueName.fc=0;a.d.value={after:["options","foreach"],init:function(b,d,c){if("input"!=b.tagName.toLowerCase()||"checkbox"!=b.type&&"radio"!=b.type){var e=["change"],f=c.get("valueUpdate"),k=!1,h=null;f&&("string"==typeof f&&(f=[f]),a.a.ia(e,f),e=a.a.wb(e));var l=function(){h=null;k=!1;var e=d(),g=a.i.s(b);a.h.ra(e,c,"value",g)};!a.a.M||"input"!=
b.tagName.toLowerCase()||"text"!=b.type||"off"==b.autocomplete||b.form&&"off"==b.form.autocomplete||-1!=a.a.m(e,"propertychange")||(a.a.n(b,"propertychange",function(){k=!0}),a.a.n(b,"focus",function(){k=!1}),a.a.n(b,"blur",function(){k&&l()}));a.a.o(e,function(c){var d=l;a.a.Dc(c,"after")&&(d=function(){h=a.i.s(b);setTimeout(l,0)},c=c.substring(5));a.a.n(b,c,d)});var g=function(){var e=a.a.c(d()),f=a.i.s(b);if(null!==h&&e===h)setTimeout(g,0);else if(e!==f)if("select"===a.a.v(b)){var l=c.get("valueAllowUnset"),
f=function(){a.i.Y(b,e,l)};f();l||e===a.i.s(b)?setTimeout(f,0):a.k.u(a.a.qa,null,[b,"change"])}else a.i.Y(b,e)};a.w(g,null,{q:b})}else a.va(b,{checkedValue:d})},update:function(){}};a.h.V.value=!0;a.d.visible={update:function(b,d){var c=a.a.c(d()),e="none"!=b.style.display;c&&!e?b.style.display="":!c&&e&&(b.style.display="none")}};(function(b){a.d[b]={init:function(d,c,e,f,k){return a.d.event.init.call(this,d,function(){var a={};a[b]=c();return a},e,f,k)}}})("click");a.J=function(){};a.J.prototype.renderTemplateSource=
function(){throw Error("Override renderTemplateSource");};a.J.prototype.createJavaScriptEvaluatorBlock=function(){throw Error("Override createJavaScriptEvaluatorBlock");};a.J.prototype.makeTemplateSource=function(b,d){if("string"==typeof b){d=d||w;var c=d.getElementById(b);if(!c)throw Error("Cannot find template with ID "+b);return new a.t.l(c)}if(1==b.nodeType||8==b.nodeType)return new a.t.ha(b);throw Error("Unknown template type: "+b);};a.J.prototype.renderTemplate=function(a,d,c,e){a=this.makeTemplateSource(a,
e);return this.renderTemplateSource(a,d,c,e)};a.J.prototype.isTemplateRewritten=function(a,d){return!1===this.allowTemplateRewriting?!0:this.makeTemplateSource(a,d).data("isRewritten")};a.J.prototype.rewriteTemplate=function(a,d,c){a=this.makeTemplateSource(a,c);d=d(a.text());a.text(d);a.data("isRewritten",!0)};a.b("templateEngine",a.J);a.kb=function(){function b(b,c,d,h){b=a.h.bb(b);for(var l=a.h.ka,g=0;g<b.length;g++){var m=b[g].key;if(l.hasOwnProperty(m)){var x=l[m];if("function"===typeof x){if(m=
x(b[g].value))throw Error(m);}else if(!x)throw Error("This template engine does not support the '"+m+"' binding within its templates");}}d="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+a.h.Ea(b,{valueAccessors:!0})+" } })()},'"+d.toLowerCase()+"')";return h.createJavaScriptEvaluatorBlock(d)+c}var d=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,c=/\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;return{lc:function(b,
c,d){c.isTemplateRewritten(b,d)||c.rewriteTemplate(b,function(b){return a.kb.xc(b,c)},d)},xc:function(a,f){return a.replace(d,function(a,c,d,e,m){return b(m,c,d,f)}).replace(c,function(a,c){return b(c,"\x3c!-- ko --\x3e","#comment",f)})},dc:function(b,c){return a.H.$a(function(d,h){var l=d.nextSibling;l&&l.nodeName.toLowerCase()===c&&a.va(l,b,h)})}}}();a.b("__tr_ambtns",a.kb.dc);(function(){a.t={};a.t.l=function(a){this.l=a};a.t.l.prototype.text=function(){var b=a.a.v(this.l),b="script"===b?"text":
"textarea"===b?"value":"innerHTML";if(0==arguments.length)return this.l[b];var d=arguments[0];"innerHTML"===b?a.a.gb(this.l,d):this.l[b]=d};var b=a.a.f.I()+"_";a.t.l.prototype.data=function(c){if(1===arguments.length)return a.a.f.get(this.l,b+c);a.a.f.set(this.l,b+c,arguments[1])};var d=a.a.f.I();a.t.ha=function(a){this.l=a};a.t.ha.prototype=new a.t.l;a.t.ha.prototype.text=function(){if(0==arguments.length){var b=a.a.f.get(this.l,d)||{};b.lb===p&&b.Na&&(b.lb=b.Na.innerHTML);return b.lb}a.a.f.set(this.l,
d,{lb:arguments[0]})};a.t.l.prototype.nodes=function(){if(0==arguments.length)return(a.a.f.get(this.l,d)||{}).Na;a.a.f.set(this.l,d,{Na:arguments[0]})};a.b("templateSources",a.t);a.b("templateSources.domElement",a.t.l);a.b("templateSources.anonymousTemplate",a.t.ha)})();(function(){function b(b,c,d){var e;for(c=a.e.nextSibling(c);b&&(e=b)!==c;)b=a.e.nextSibling(e),d(e,b)}function d(c,d){if(c.length){var e=c[0],f=c[c.length-1],h=e.parentNode,k=a.L.instance,r=k.preprocessNode;if(r){b(e,f,function(a,
b){var c=a.previousSibling,d=r.call(k,a);d&&(a===e&&(e=d[0]||b),a===f&&(f=d[d.length-1]||c))});c.length=0;if(!e)return;e===f?c.push(e):(c.push(e,f),a.a.na(c,h))}b(e,f,function(b){1!==b.nodeType&&8!==b.nodeType||a.ub(d,b)});b(e,f,function(b){1!==b.nodeType&&8!==b.nodeType||a.H.Xb(b,[d])});a.a.na(c,h)}}function c(a){return a.nodeType?a:0<a.length?a[0]:null}function e(b,e,f,h,q){q=q||{};var n=(b&&c(b)||f||{}).ownerDocument,r=q.templateEngine||k;a.kb.lc(f,r,n);f=r.renderTemplate(f,h,q,n);if("number"!=
typeof f.length||0<f.length&&"number"!=typeof f[0].nodeType)throw Error("Template engine must return an array of DOM nodes");n=!1;switch(e){case "replaceChildren":a.e.T(b,f);n=!0;break;case "replaceNode":a.a.Qb(b,f);n=!0;break;case "ignoreTargetNode":break;default:throw Error("Unknown renderMode: "+e);}n&&(d(f,h),q.afterRender&&a.k.u(q.afterRender,null,[f,h.$data]));return f}function f(b,c,d){return a.F(b)?b():"function"===typeof b?b(c,d):b}var k;a.hb=function(b){if(b!=p&&!(b instanceof a.J))throw Error("templateEngine must inherit from ko.templateEngine");
k=b};a.eb=function(b,d,h,x,q){h=h||{};if((h.templateEngine||k)==p)throw Error("Set a template engine before calling renderTemplate");q=q||"replaceChildren";if(x){var n=c(x);return a.j(function(){var k=d&&d instanceof a.N?d:new a.N(a.a.c(d)),p=f(b,k.$data,k),k=e(x,q,p,k,h);"replaceNode"==q&&(x=k,n=c(x))},null,{Pa:function(){return!n||!a.a.Qa(n)},q:n&&"replaceNode"==q?n.parentNode:n})}return a.H.$a(function(c){a.eb(b,d,h,c,"replaceNode")})};a.Cc=function(b,c,h,k,q){function n(a,b){d(b,v);h.afterRender&&
h.afterRender(b,a);v=null}function r(a,c){v=q.createChildContext(a,h.as,function(a){a.$index=c});var d=f(b,a,v);return e(null,"ignoreTargetNode",d,v,h)}var v;return a.j(function(){var b=a.a.c(c)||[];"undefined"==typeof b.length&&(b=[b]);b=a.a.xa(b,function(b){return h.includeDestroyed||b===p||null===b||!a.a.c(b._destroy)});a.k.u(a.a.fb,null,[k,b,r,h,n])},null,{q:k})};var h=a.a.f.I();a.d.template={init:function(b,c){var d=a.a.c(c());if("string"==typeof d||d.name)a.e.ma(b);else{if("nodes"in d){if(d=
d.nodes||[],a.F(d))throw Error('The "nodes" option must be a plain, non-observable array.');}else d=a.e.childNodes(b);d=a.a.Jb(d);(new a.t.ha(b)).nodes(d)}return{controlsDescendantBindings:!0}},update:function(b,c,d,e,f){var k=c(),r;c=a.a.c(k);d=!0;e=null;"string"==typeof c?c={}:(k=c.name,"if"in c&&(d=a.a.c(c["if"])),d&&"ifnot"in c&&(d=!a.a.c(c.ifnot)),r=a.a.c(c.data));"foreach"in c?e=a.Cc(k||b,d&&c.foreach||[],c,b,f):d?(f="data"in c?f.createChildContext(r,c.as):f,e=a.eb(k||b,f,c,b)):a.e.ma(b);f=
e;(r=a.a.f.get(b,h))&&"function"==typeof r.p&&r.p();a.a.f.set(b,h,f&&f.$()?f:p)}};a.h.ka.template=function(b){b=a.h.bb(b);return 1==b.length&&b[0].unknown||a.h.vc(b,"name")?null:"This template engine does not support anonymous templates nested within its templates"};a.e.R.template=!0})();a.b("setTemplateEngine",a.hb);a.b("renderTemplate",a.eb);a.a.Cb=function(a,d,c){if(a.length&&d.length){var e,f,k,h,l;for(e=f=0;(!c||e<c)&&(h=a[f]);++f){for(k=0;l=d[k];++k)if(h.value===l.value){h.moved=l.index;l.moved=
h.index;d.splice(k,1);e=k=0;break}e+=k}}};a.a.Ma=function(){function b(b,c,e,f,k){var h=Math.min,l=Math.max,g=[],m,p=b.length,q,n=c.length,r=n-p||1,v=p+n+1,t,u,w;for(m=0;m<=p;m++)for(u=t,g.push(t=[]),w=h(n,m+r),q=l(0,m-1);q<=w;q++)t[q]=q?m?b[m-1]===c[q-1]?u[q-1]:h(u[q]||v,t[q-1]||v)+1:q+1:m+1;h=[];l=[];r=[];m=p;for(q=n;m||q;)n=g[m][q]-1,q&&n===g[m][q-1]?l.push(h[h.length]={status:e,value:c[--q],index:q}):m&&n===g[m-1][q]?r.push(h[h.length]={status:f,value:b[--m],index:m}):(--q,--m,k.sparse||h.push({status:"retained",
value:c[q]}));a.a.Cb(l,r,10*p);return h.reverse()}return function(a,c,e){e="boolean"===typeof e?{dontLimitMoves:e}:e||{};a=a||[];c=c||[];return a.length<=c.length?b(a,c,"added","deleted",e):b(c,a,"deleted","added",e)}}();a.b("utils.compareArrays",a.a.Ma);(function(){function b(b,d,f,k,h){var l=[],g=a.j(function(){var g=d(f,h,a.a.na(l,b))||[];0<l.length&&(a.a.Qb(l,g),k&&a.k.u(k,null,[f,g,h]));l.length=0;a.a.ia(l,g)},null,{q:b,Pa:function(){return!a.a.tb(l)}});return{aa:l,j:g.$()?g:p}}var d=a.a.f.I();
a.a.fb=function(c,e,f,k,h){function l(b,d){s=u[d];t!==d&&(z[b]=s);s.Ua(t++);a.a.na(s.aa,c);r.push(s);y.push(s)}function g(b,c){if(b)for(var d=0,e=c.length;d<e;d++)c[d]&&a.a.o(c[d].aa,function(a){b(a,d,c[d].wa)})}e=e||[];k=k||{};var m=a.a.f.get(c,d)===p,u=a.a.f.get(c,d)||[],q=a.a.Ka(u,function(a){return a.wa}),n=a.a.Ma(q,e,k.dontLimitMoves),r=[],v=0,t=0,w=[],y=[];e=[];for(var z=[],q=[],s,C=0,D,E;D=n[C];C++)switch(E=D.moved,D.status){case "deleted":E===p&&(s=u[v],s.j&&s.j.p(),w.push.apply(w,a.a.na(s.aa,
c)),k.beforeRemove&&(e[C]=s,y.push(s)));v++;break;case "retained":l(C,v++);break;case "added":E!==p?l(C,E):(s={wa:D.value,Ua:a.r(t++)},r.push(s),y.push(s),m||(q[C]=s))}g(k.beforeMove,z);a.a.o(w,k.beforeRemove?a.S:a.removeNode);for(var C=0,m=a.e.firstChild(c),H;s=y[C];C++){s.aa||a.a.extend(s,b(c,f,s.wa,h,s.Ua));for(v=0;n=s.aa[v];m=n.nextSibling,H=n,v++)n!==m&&a.e.Fb(c,n,H);!s.rc&&h&&(h(s.wa,s.aa,s.Ua),s.rc=!0)}g(k.beforeRemove,e);g(k.afterMove,z);g(k.afterAdd,q);a.a.f.set(c,d,r)}})();a.b("utils.setDomNodeChildrenFromArrayMapping",
a.a.fb);a.P=function(){this.allowTemplateRewriting=!1};a.P.prototype=new a.J;a.P.prototype.renderTemplateSource=function(b,d,c,e){if(d=(9>a.a.M?0:b.nodes)?b.nodes():null)return a.a.O(d.cloneNode(!0).childNodes);b=b.text();return a.a.ca(b,e)};a.P.Va=new a.P;a.hb(a.P.Va);a.b("nativeTemplateEngine",a.P);(function(){a.Ya=function(){var a=this.uc=function(){if(!u||!u.tmpl)return 0;try{if(0<=u.tmpl.tag.tmpl.open.toString().indexOf("__"))return 2}catch(a){}return 1}();this.renderTemplateSource=function(b,
e,f,k){k=k||w;f=f||{};if(2>a)throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");var h=b.data("precompiled");h||(h=b.text()||"",h=u.template(null,"{{ko_with $item.koBindingContext}}"+h+"{{/ko_with}}"),b.data("precompiled",h));b=[e.$data];e=u.extend({koBindingContext:e},f.templateOptions);e=u.tmpl(h,b,e);e.appendTo(k.createElement("div"));u.fragments={};return e};this.createJavaScriptEvaluatorBlock=function(a){return"{{ko_code ((function() { return "+
a+" })()) }}"};this.addTemplate=function(a,b){w.write("<script type='text/html' id='"+a+"'>"+b+"\x3c/script>")};0<a&&(u.tmpl.tag.ko_code={open:"__.push($1 || '');"},u.tmpl.tag.ko_with={open:"with($1) {",close:"} "})};a.Ya.prototype=new a.J;var b=new a.Ya;0<b.uc&&a.hb(b);a.b("jqueryTmplTemplateEngine",a.Ya)})()})})();})();

	}).call($global);
$packages["github.com/Archs/js/gopherjs-ko"] = (function() {
	var $pkg = {}, $init, dom, property, js, Observable, Subscription, BaseViewModel, ptrType, funcType, ptrType$1, funcType$2, sliceType, funcType$3, ptrType$4, ptrType$6, sliceType$1, ptrType$7, ko, NewObservable, ViewModelFromJS, NewBaseViewModel, NewObservableArray, ApplyBindings;
	dom = $packages["github.com/Archs/js/dom"];
	property = $packages["github.com/Archs/js/utils/property"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Observable = $pkg.Observable = $newType(0, $kindStruct, "ko.Observable", "Observable", "github.com/Archs/js/gopherjs-ko", function(o_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.o = null;
			return;
		}
		this.o = o_;
	});
	Subscription = $pkg.Subscription = $newType(0, $kindStruct, "ko.Subscription", "Subscription", "github.com/Archs/js/gopherjs-ko", function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	BaseViewModel = $pkg.BaseViewModel = $newType(0, $kindStruct, "ko.BaseViewModel", "BaseViewModel", "github.com/Archs/js/gopherjs-ko", function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	ptrType = $ptrType(js.Object);
	funcType = $funcType([ptrType], [], false);
	ptrType$1 = $ptrType(Observable);
	funcType$2 = $funcType([ptrType, ptrType], [], false);
	sliceType = $sliceType($emptyInterface);
	funcType$3 = $funcType([ptrType], [$Bool], false);
	ptrType$4 = $ptrType(dom.Element);
	ptrType$6 = $ptrType(Subscription);
	sliceType$1 = $sliceType($Bool);
	ptrType$7 = $ptrType(BaseViewModel);
	ko = function() {
		var $ptr;
		return $global.ko;
	};
	Observable.ptr.prototype.ToJS = function() {
		var $ptr, o;
		o = this;
		return o.o;
	};
	Observable.prototype.ToJS = function() { return this.$val.ToJS(); };
	NewObservable = function(data) {
		var $ptr, data;
		if (data.$length >= 1) {
			return new Observable.ptr(ko().observable($externalize((0 >= data.$length ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]), $emptyInterface)));
		}
		return new Observable.ptr(ko().observable());
	};
	$pkg.NewObservable = NewObservable;
	ViewModelFromJS = function(o) {
		var $ptr, o, vm;
		vm = NewBaseViewModel();
		vm.FromJS(o);
		return vm;
	};
	$pkg.ViewModelFromJS = ViewModelFromJS;
	NewBaseViewModel = function() {
		var $ptr;
		return new BaseViewModel.ptr(new ($global.Object)());
	};
	$pkg.NewBaseViewModel = NewBaseViewModel;
	BaseViewModel.ptr.prototype.ToJS = function() {
		var $ptr, b;
		b = this;
		return b.Object;
	};
	BaseViewModel.prototype.ToJS = function() { return this.$val.ToJS(); };
	BaseViewModel.ptr.prototype.FromJS = function(vm) {
		var $ptr, b, vm;
		b = this;
		b.Object = vm;
	};
	BaseViewModel.prototype.FromJS = function(vm) { return this.$val.FromJS(vm); };
	BaseViewModel.ptr.prototype.Set = function(keyPath, value) {
		var $ptr, b, keyPath, obj, value;
		b = this;
		obj = property.Get(b.Object, keyPath);
		if (obj === undefined) {
			$panic(new $String("ViewModel has no key: " + keyPath));
		} else {
			obj($externalize(value, $emptyInterface));
		}
	};
	BaseViewModel.prototype.Set = function(keyPath, value) { return this.$val.Set(keyPath, value); };
	BaseViewModel.ptr.prototype.Get = function(keyPath) {
		var $ptr, b, keyPath, obj;
		b = this;
		obj = property.Get(b.Object, keyPath);
		if (obj === undefined) {
			return obj;
		}
		return obj();
	};
	BaseViewModel.prototype.Get = function(keyPath) { return this.$val.Get(keyPath); };
	Subscription.ptr.prototype.Dispose = function() {
		var $ptr, s;
		s = this;
		s.Object.dispose();
	};
	Subscription.prototype.Dispose = function() { return this.$val.Dispose(); };
	Observable.ptr.prototype.Set = function(data) {
		var $ptr, data, o;
		o = this;
		o.o($externalize(data, $emptyInterface));
	};
	Observable.prototype.Set = function(data) { return this.$val.Set(data); };
	Observable.ptr.prototype.Get = function() {
		var $ptr, o;
		o = this;
		return o.o();
	};
	Observable.prototype.Get = function() { return this.$val.Get(); };
	Observable.ptr.prototype.Subscribe = function(fn) {
		var $ptr, fn, o;
		o = this;
		return new Subscription.ptr(o.o.subscribe($externalize(fn, funcType)));
	};
	Observable.prototype.Subscribe = function(fn) { return this.$val.Subscribe(fn); };
	Observable.ptr.prototype.Extend = function(extenderName, options) {
		var $ptr, extenderName, o, options;
		o = this;
		o.o.extend($externalize($makeMap($String.keyFor, [{ k: extenderName, v: options }]), js.M));
		return o;
	};
	Observable.prototype.Extend = function(extenderName, options) { return this.$val.Extend(extenderName, options); };
	Observable.ptr.prototype.RateLimit = function(timeframeMS, notifyWhenChangesStop) {
		var $ptr, method, notifyWhenChangesStop, o, timeframeMS;
		o = this;
		method = "notifyAtFixedRate";
		if (notifyWhenChangesStop.$length >= 1 && (0 >= notifyWhenChangesStop.$length ? $throwRuntimeError("index out of range") : notifyWhenChangesStop.$array[notifyWhenChangesStop.$offset + 0])) {
			method = "notifyWhenChangesStop";
		}
		o.Extend("rateLimit", new js.M($makeMap($String.keyFor, [{ k: "timeout", v: new $Int(timeframeMS) }, { k: "method", v: new $String(method) }])));
	};
	Observable.prototype.RateLimit = function(timeframeMS, notifyWhenChangesStop) { return this.$val.RateLimit(timeframeMS, notifyWhenChangesStop); };
	Observable.ptr.prototype.NotifyAlways = function() {
		var $ptr, o;
		o = this;
		o.Extend("notify", new $String("always"));
	};
	Observable.prototype.NotifyAlways = function() { return this.$val.NotifyAlways(); };
	NewObservableArray = function(data) {
		var $ptr, data;
		if (data.$length >= 1) {
			return new Observable.ptr(ko().observableArray($externalize((0 >= data.$length ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]), $emptyInterface)));
		}
		return new Observable.ptr(ko().observableArray());
	};
	$pkg.NewObservableArray = NewObservableArray;
	Observable.ptr.prototype.IndexOf = function(data) {
		var $ptr, data, o;
		o = this;
		return $parseInt(o.o.indexOf($externalize(data, $emptyInterface))) >> 0;
	};
	Observable.prototype.IndexOf = function(data) { return this.$val.IndexOf(data); };
	Observable.ptr.prototype.Pop = function() {
		var $ptr, o;
		o = this;
		return o.o.pop();
	};
	Observable.prototype.Pop = function() { return this.$val.Pop(); };
	Observable.ptr.prototype.Unshift = function(data) {
		var $ptr, data, o;
		o = this;
		o.o.unshift($externalize(data, $emptyInterface));
	};
	Observable.prototype.Unshift = function(data) { return this.$val.Unshift(data); };
	Observable.ptr.prototype.Shift = function() {
		var $ptr, o;
		o = this;
		return o.o.shift();
	};
	Observable.prototype.Shift = function() { return this.$val.Shift(); };
	Observable.ptr.prototype.Reverse = function() {
		var $ptr, o;
		o = this;
		o.o.reverse();
	};
	Observable.prototype.Reverse = function() { return this.$val.Reverse(); };
	Observable.ptr.prototype.Sort = function() {
		var $ptr, o;
		o = this;
		o.o.sort();
	};
	Observable.prototype.Sort = function() { return this.$val.Sort(); };
	Observable.ptr.prototype.SortFunc = function(fn) {
		var $ptr, fn, o;
		o = this;
		o.o.sort($externalize(fn, funcType$2));
	};
	Observable.prototype.SortFunc = function(fn) { return this.$val.SortFunc(fn); };
	Observable.ptr.prototype.Splice = function(i, n) {
		var $ptr, i, n, o;
		o = this;
		return o.o.splice(i, n);
	};
	Observable.prototype.Splice = function(i, n) { return this.$val.Splice(i, n); };
	Observable.ptr.prototype.RemoveAll = function(items) {
		var $ptr, items, o, obj;
		o = this;
		return (obj = o.o, obj.removeAll.apply(obj, $externalize(items, sliceType)));
	};
	Observable.prototype.RemoveAll = function(items) { return this.$val.RemoveAll(items); };
	Observable.ptr.prototype.Index = function(i) {
		var $ptr, i, o;
		o = this;
		return o.Get()[i];
	};
	Observable.prototype.Index = function(i) { return this.$val.Index(i); };
	Observable.ptr.prototype.Length = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.Get().length);
	};
	Observable.prototype.Length = function() { return this.$val.Length(); };
	Observable.ptr.prototype.Push = function(data) {
		var $ptr, data, o;
		o = this;
		o.o.push($externalize(data, $emptyInterface));
	};
	Observable.prototype.Push = function(data) { return this.$val.Push(data); };
	Observable.ptr.prototype.Remove = function(item) {
		var $ptr, item, o;
		o = this;
		return o.o.remove($externalize(item, $emptyInterface));
	};
	Observable.prototype.Remove = function(item) { return this.$val.Remove(item); };
	Observable.ptr.prototype.RemoveFunc = function(fn) {
		var $ptr, fn, o;
		o = this;
		return o.o.remove($externalize(fn, funcType$3));
	};
	Observable.prototype.RemoveFunc = function(fn) { return this.$val.RemoveFunc(fn); };
	Observable.ptr.prototype.Dispose = function() {
		var $ptr, o;
		o = this;
		o.o.dispose();
	};
	Observable.prototype.Dispose = function() { return this.$val.Dispose(); };
	Observable.ptr.prototype.Peek = function() {
		var $ptr, o;
		o = this;
		return o.o.peek();
	};
	Observable.prototype.Peek = function() { return this.$val.Peek(); };
	Observable.ptr.prototype.IsComputedObservable = function() {
		var $ptr, o;
		o = this;
		return !!(ko().isComputed(o.o));
	};
	Observable.prototype.IsComputedObservable = function() { return this.$val.IsComputedObservable(); };
	Observable.ptr.prototype.IsWritableObservable = function() {
		var $ptr, o;
		o = this;
		return !!(ko().isWritableObservable(o.o));
	};
	Observable.prototype.IsWritableObservable = function() { return this.$val.IsWritableObservable(); };
	ApplyBindings = function(vm, el) {
		var $ptr, _r, _r$1, el, vm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; el = $f.el; vm = $f.vm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(vm, $ifaceNil)) {
			ko().applyBindings();
			return;
		}
		/* */ if (el.$length < 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (el.$length < 1) { */ case 1:
			_r = vm.ToJS(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ko().applyBindings(_r);
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = vm.ToJS(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			ko().applyBindings(_r$1, $externalize((0 >= el.$length ? $throwRuntimeError("index out of range") : el.$array[el.$offset + 0]), ptrType$4));
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ApplyBindings }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.el = el; $f.vm = vm; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ApplyBindings = ApplyBindings;
	ptrType$1.methods = [{prop: "ToJS", name: "ToJS", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "Subscribe", name: "Subscribe", pkg: "", typ: $funcType([funcType], [ptrType$6], false)}, {prop: "Extend", name: "Extend", pkg: "", typ: $funcType([$String, $emptyInterface], [ptrType$1], false)}, {prop: "RateLimit", name: "RateLimit", pkg: "", typ: $funcType([$Int, sliceType$1], [], true)}, {prop: "NotifyAlways", name: "NotifyAlways", pkg: "", typ: $funcType([], [], false)}, {prop: "IndexOf", name: "IndexOf", pkg: "", typ: $funcType([$emptyInterface], [$Int], false)}, {prop: "Pop", name: "Pop", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "Unshift", name: "Unshift", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "Reverse", name: "Reverse", pkg: "", typ: $funcType([], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}, {prop: "SortFunc", name: "SortFunc", pkg: "", typ: $funcType([funcType$2], [], false)}, {prop: "Splice", name: "Splice", pkg: "", typ: $funcType([$Int, $Int], [ptrType], false)}, {prop: "RemoveAll", name: "RemoveAll", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Push", name: "Push", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Remove", name: "Remove", pkg: "", typ: $funcType([$emptyInterface], [ptrType], false)}, {prop: "RemoveFunc", name: "RemoveFunc", pkg: "", typ: $funcType([funcType$3], [ptrType], false)}, {prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}, {prop: "Peek", name: "Peek", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "IsComputedObservable", name: "IsComputedObservable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsWritableObservable", name: "IsWritableObservable", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$6.methods = [{prop: "Dispose", name: "Dispose", pkg: "", typ: $funcType([], [], false)}];
	ptrType$7.methods = [{prop: "ToJS", name: "ToJS", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "FromJS", name: "FromJS", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}];
	Observable.init([{prop: "o", name: "o", pkg: "github.com/Archs/js/gopherjs-ko", typ: ptrType, tag: ""}]);
	Subscription.init([{prop: "Object", name: "", pkg: "", typ: ptrType, tag: ""}]);
	BaseViewModel.init([{prop: "Object", name: "", pkg: "", typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = dom.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = property.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/jquery"] = (function() {
	var $pkg = {}, $init, js, JQuery, JQueryCoordinates, Deferred, sliceType, funcType$1, mapType, sliceType$1, funcType$2, funcType$3, ptrType, sliceType$2, NewJQuery, Ajax;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	JQuery = $pkg.JQuery = $newType(0, $kindStruct, "jquery.JQuery", "JQuery", "github.com/gopherjs/jquery", function(o_, Jquery_, Selector_, Length_, Context_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.o = null;
			this.Jquery = "";
			this.Selector = "";
			this.Length = 0;
			this.Context = "";
			return;
		}
		this.o = o_;
		this.Jquery = Jquery_;
		this.Selector = Selector_;
		this.Length = Length_;
		this.Context = Context_;
	});
	JQueryCoordinates = $pkg.JQueryCoordinates = $newType(0, $kindStruct, "jquery.JQueryCoordinates", "JQueryCoordinates", "github.com/gopherjs/jquery", function(Left_, Top_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Left = 0;
			this.Top = 0;
			return;
		}
		this.Left = Left_;
		this.Top = Top_;
	});
	Deferred = $pkg.Deferred = $newType(0, $kindStruct, "jquery.Deferred", "Deferred", "github.com/gopherjs/jquery", function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	funcType$1 = $funcType([$Int, $emptyInterface], [], false);
	mapType = $mapType($String, $emptyInterface);
	sliceType$1 = $sliceType($String);
	funcType$2 = $funcType([$Int, $String], [$String], false);
	funcType$3 = $funcType([], [], false);
	ptrType = $ptrType(js.Object);
	sliceType$2 = $sliceType($Bool);
	NewJQuery = function(args) {
		var $ptr, args;
		return new JQuery.ptr(new ($global.Function.prototype.bind.apply($global.jQuery, [undefined].concat($externalize(args, sliceType)))), "", "", 0, "");
	};
	$pkg.NewJQuery = NewJQuery;
	JQuery.ptr.prototype.Each = function(fn) {
		var $ptr, fn, j;
		j = $clone(this, JQuery);
		j.o = j.o.each($externalize(fn, funcType$1));
		return j;
	};
	JQuery.prototype.Each = function(fn) { return this.$val.Each(fn); };
	JQuery.ptr.prototype.Call = function(name, args) {
		var $ptr, args, j, name, obj;
		j = $clone(this, JQuery);
		return NewJQuery(new sliceType([new $jsObjectPtr((obj = j.o, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType))))]));
	};
	JQuery.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	JQuery.ptr.prototype.Underlying = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return j.o;
	};
	JQuery.prototype.Underlying = function() { return this.$val.Underlying(); };
	JQuery.ptr.prototype.Get = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		return (obj = j.o, obj.get.apply(obj, $externalize(i, sliceType)));
	};
	JQuery.prototype.Get = function(i) { return this.$val.Get(i); };
	JQuery.ptr.prototype.Append = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.append.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Append = function(i) { return this.$val.Append(i); };
	JQuery.ptr.prototype.Empty = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		j.o = j.o.empty();
		return j;
	};
	JQuery.prototype.Empty = function() { return this.$val.Empty(); };
	JQuery.ptr.prototype.Detach = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.detach.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Detach = function(i) { return this.$val.Detach(i); };
	JQuery.ptr.prototype.Eq = function(idx) {
		var $ptr, idx, j;
		j = $clone(this, JQuery);
		j.o = j.o.eq(idx);
		return j;
	};
	JQuery.prototype.Eq = function(idx) { return this.$val.Eq(idx); };
	JQuery.ptr.prototype.FadeIn = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.fadeIn.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.FadeIn = function(i) { return this.$val.FadeIn(i); };
	JQuery.ptr.prototype.Delay = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.delay.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Delay = function(i) { return this.$val.Delay(i); };
	JQuery.ptr.prototype.ToArray = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return $assertType($internalize(j.o.toArray(), $emptyInterface), sliceType);
	};
	JQuery.prototype.ToArray = function() { return this.$val.ToArray(); };
	JQuery.ptr.prototype.Remove = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.remove.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Remove = function(i) { return this.$val.Remove(i); };
	JQuery.ptr.prototype.Stop = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.stop.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Stop = function(i) { return this.$val.Stop(i); };
	JQuery.ptr.prototype.AddBack = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.addBack.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.AddBack = function(i) { return this.$val.AddBack(i); };
	JQuery.ptr.prototype.Css = function(name) {
		var $ptr, j, name;
		j = $clone(this, JQuery);
		return $internalize(j.o.css($externalize(name, $String)), $String);
	};
	JQuery.prototype.Css = function(name) { return this.$val.Css(name); };
	JQuery.ptr.prototype.CssArray = function(arr) {
		var $ptr, arr, j;
		j = $clone(this, JQuery);
		return $assertType($internalize(j.o.css($externalize(arr, sliceType$1)), $emptyInterface), mapType);
	};
	JQuery.prototype.CssArray = function(arr) { return this.$val.CssArray(arr); };
	JQuery.ptr.prototype.SetCss = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.css.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.SetCss = function(i) { return this.$val.SetCss(i); };
	JQuery.ptr.prototype.Text = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return $internalize(j.o.text(), $String);
	};
	JQuery.prototype.Text = function() { return this.$val.Text(); };
	JQuery.ptr.prototype.SetText = function(i) {
		var $ptr, _ref, i, j;
		j = $clone(this, JQuery);
		_ref = i;
		if ($assertType(_ref, funcType$2, true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("SetText Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.text($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetText = function(i) { return this.$val.SetText(i); };
	JQuery.ptr.prototype.Val = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return $internalize(j.o.val(), $String);
	};
	JQuery.prototype.Val = function() { return this.$val.Val(); };
	JQuery.ptr.prototype.SetVal = function(i) {
		var $ptr, i, j;
		j = $clone(this, JQuery);
		j.o.val($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetVal = function(i) { return this.$val.SetVal(i); };
	JQuery.ptr.prototype.Prop = function(property) {
		var $ptr, j, property;
		j = $clone(this, JQuery);
		return $internalize(j.o.prop($externalize(property, $String)), $emptyInterface);
	};
	JQuery.prototype.Prop = function(property) { return this.$val.Prop(property); };
	JQuery.ptr.prototype.SetProp = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prop.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.SetProp = function(i) { return this.$val.SetProp(i); };
	JQuery.ptr.prototype.RemoveProp = function(property) {
		var $ptr, j, property;
		j = $clone(this, JQuery);
		j.o = j.o.removeProp($externalize(property, $String));
		return j;
	};
	JQuery.prototype.RemoveProp = function(property) { return this.$val.RemoveProp(property); };
	JQuery.ptr.prototype.Attr = function(property) {
		var $ptr, attr, j, property;
		j = $clone(this, JQuery);
		attr = j.o.attr($externalize(property, $String));
		if (attr === undefined) {
			return "";
		}
		return $internalize(attr, $String);
	};
	JQuery.prototype.Attr = function(property) { return this.$val.Attr(property); };
	JQuery.ptr.prototype.SetAttr = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.attr.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.SetAttr = function(i) { return this.$val.SetAttr(i); };
	JQuery.ptr.prototype.RemoveAttr = function(property) {
		var $ptr, j, property;
		j = $clone(this, JQuery);
		j.o = j.o.removeAttr($externalize(property, $String));
		return j;
	};
	JQuery.prototype.RemoveAttr = function(property) { return this.$val.RemoveAttr(property); };
	JQuery.ptr.prototype.HasClass = function(class$1) {
		var $ptr, class$1, j;
		j = $clone(this, JQuery);
		return !!(j.o.hasClass($externalize(class$1, $String)));
	};
	JQuery.prototype.HasClass = function(class$1) { return this.$val.HasClass(class$1); };
	JQuery.ptr.prototype.AddClass = function(i) {
		var $ptr, _ref, i, j;
		j = $clone(this, JQuery);
		_ref = i;
		if ($assertType(_ref, funcType$2, true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("addClass Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.addClass($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.AddClass = function(i) { return this.$val.AddClass(i); };
	JQuery.ptr.prototype.RemoveClass = function(property) {
		var $ptr, j, property;
		j = $clone(this, JQuery);
		j.o = j.o.removeClass($externalize(property, $String));
		return j;
	};
	JQuery.prototype.RemoveClass = function(property) { return this.$val.RemoveClass(property); };
	JQuery.ptr.prototype.ToggleClass = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.toggleClass.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.ToggleClass = function(i) { return this.$val.ToggleClass(i); };
	JQuery.ptr.prototype.Focus = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		j.o = j.o.focus();
		return j;
	};
	JQuery.prototype.Focus = function() { return this.$val.Focus(); };
	JQuery.ptr.prototype.Blur = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		j.o = j.o.blur();
		return j;
	};
	JQuery.prototype.Blur = function() { return this.$val.Blur(); };
	JQuery.ptr.prototype.ReplaceAll = function(i) {
		var $ptr, i, j;
		j = $clone(this, JQuery);
		j.o = j.o.replaceAll($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.ReplaceAll = function(i) { return this.$val.ReplaceAll(i); };
	JQuery.ptr.prototype.ReplaceWith = function(i) {
		var $ptr, i, j;
		j = $clone(this, JQuery);
		j.o = j.o.replaceWith($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.ReplaceWith = function(i) { return this.$val.ReplaceWith(i); };
	JQuery.ptr.prototype.After = function(i) {
		var $ptr, i, j;
		j = $clone(this, JQuery);
		j.o = j.o.after($externalize(i, sliceType));
		return j;
	};
	JQuery.prototype.After = function(i) { return this.$val.After(i); };
	JQuery.ptr.prototype.Before = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.before.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Before = function(i) { return this.$val.Before(i); };
	JQuery.ptr.prototype.Prepend = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prepend.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Prepend = function(i) { return this.$val.Prepend(i); };
	JQuery.ptr.prototype.PrependTo = function(i) {
		var $ptr, i, j;
		j = $clone(this, JQuery);
		j.o = j.o.prependTo($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.PrependTo = function(i) { return this.$val.PrependTo(i); };
	JQuery.ptr.prototype.AppendTo = function(i) {
		var $ptr, i, j;
		j = $clone(this, JQuery);
		j.o = j.o.appendTo($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.AppendTo = function(i) { return this.$val.AppendTo(i); };
	JQuery.ptr.prototype.InsertAfter = function(i) {
		var $ptr, i, j;
		j = $clone(this, JQuery);
		j.o = j.o.insertAfter($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.InsertAfter = function(i) { return this.$val.InsertAfter(i); };
	JQuery.ptr.prototype.InsertBefore = function(i) {
		var $ptr, i, j;
		j = $clone(this, JQuery);
		j.o = j.o.insertBefore($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.InsertBefore = function(i) { return this.$val.InsertBefore(i); };
	JQuery.ptr.prototype.Show = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		j.o = j.o.show();
		return j;
	};
	JQuery.prototype.Show = function() { return this.$val.Show(); };
	JQuery.ptr.prototype.Hide = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		j.o.hide();
		return j;
	};
	JQuery.prototype.Hide = function() { return this.$val.Hide(); };
	JQuery.ptr.prototype.Toggle = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.toggle.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Toggle = function(i) { return this.$val.Toggle(i); };
	JQuery.ptr.prototype.Contents = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		j.o = j.o.contents();
		return j;
	};
	JQuery.prototype.Contents = function() { return this.$val.Contents(); };
	JQuery.ptr.prototype.Html = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return $internalize(j.o.html(), $String);
	};
	JQuery.prototype.Html = function() { return this.$val.Html(); };
	JQuery.ptr.prototype.SetHtml = function(i) {
		var $ptr, _ref, i, j;
		j = $clone(this, JQuery);
		_ref = i;
		if ($assertType(_ref, funcType$2, true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("SetHtml Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.html($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetHtml = function(i) { return this.$val.SetHtml(i); };
	JQuery.ptr.prototype.Closest = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.closest.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Closest = function(i) { return this.$val.Closest(i); };
	JQuery.ptr.prototype.End = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		j.o = j.o.end();
		return j;
	};
	JQuery.prototype.End = function() { return this.$val.End(); };
	JQuery.ptr.prototype.Add = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.add.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Add = function(i) { return this.$val.Add(i); };
	JQuery.ptr.prototype.Clone = function(b) {
		var $ptr, b, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.clone.apply(obj, $externalize(b, sliceType)));
		return j;
	};
	JQuery.prototype.Clone = function(b) { return this.$val.Clone(b); };
	JQuery.ptr.prototype.Height = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.height()) >> 0;
	};
	JQuery.prototype.Height = function() { return this.$val.Height(); };
	JQuery.ptr.prototype.SetHeight = function(value) {
		var $ptr, j, value;
		j = $clone(this, JQuery);
		j.o = j.o.height($externalize(value, $String));
		return j;
	};
	JQuery.prototype.SetHeight = function(value) { return this.$val.SetHeight(value); };
	JQuery.ptr.prototype.Width = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.width()) >> 0;
	};
	JQuery.prototype.Width = function() { return this.$val.Width(); };
	JQuery.ptr.prototype.SetWidth = function(i) {
		var $ptr, _ref, i, j;
		j = $clone(this, JQuery);
		_ref = i;
		if ($assertType(_ref, funcType$2, true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("SetWidth Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.width($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetWidth = function(i) { return this.$val.SetWidth(i); };
	JQuery.ptr.prototype.InnerHeight = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.innerHeight()) >> 0;
	};
	JQuery.prototype.InnerHeight = function() { return this.$val.InnerHeight(); };
	JQuery.ptr.prototype.InnerWidth = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.innerWidth()) >> 0;
	};
	JQuery.prototype.InnerWidth = function() { return this.$val.InnerWidth(); };
	JQuery.ptr.prototype.Offset = function() {
		var $ptr, j, obj;
		j = $clone(this, JQuery);
		obj = j.o.offset();
		return new JQueryCoordinates.ptr($parseInt(obj.left) >> 0, $parseInt(obj.top) >> 0);
	};
	JQuery.prototype.Offset = function() { return this.$val.Offset(); };
	JQuery.ptr.prototype.SetOffset = function(jc) {
		var $ptr, j, jc;
		jc = $clone(jc, JQueryCoordinates);
		j = $clone(this, JQuery);
		j.o = j.o.offset($externalize(jc, JQueryCoordinates));
		return j;
	};
	JQuery.prototype.SetOffset = function(jc) { return this.$val.SetOffset(jc); };
	JQuery.ptr.prototype.OuterHeight = function(includeMargin) {
		var $ptr, includeMargin, j;
		j = $clone(this, JQuery);
		if (includeMargin.$length === 0) {
			return $parseInt(j.o.outerHeight()) >> 0;
		}
		return $parseInt(j.o.outerHeight($externalize((0 >= includeMargin.$length ? $throwRuntimeError("index out of range") : includeMargin.$array[includeMargin.$offset + 0]), $Bool))) >> 0;
	};
	JQuery.prototype.OuterHeight = function(includeMargin) { return this.$val.OuterHeight(includeMargin); };
	JQuery.ptr.prototype.OuterWidth = function(includeMargin) {
		var $ptr, includeMargin, j;
		j = $clone(this, JQuery);
		if (includeMargin.$length === 0) {
			return $parseInt(j.o.outerWidth()) >> 0;
		}
		return $parseInt(j.o.outerWidth($externalize((0 >= includeMargin.$length ? $throwRuntimeError("index out of range") : includeMargin.$array[includeMargin.$offset + 0]), $Bool))) >> 0;
	};
	JQuery.prototype.OuterWidth = function(includeMargin) { return this.$val.OuterWidth(includeMargin); };
	JQuery.ptr.prototype.Position = function() {
		var $ptr, j, obj;
		j = $clone(this, JQuery);
		obj = j.o.position();
		return new JQueryCoordinates.ptr($parseInt(obj.left) >> 0, $parseInt(obj.top) >> 0);
	};
	JQuery.prototype.Position = function() { return this.$val.Position(); };
	JQuery.ptr.prototype.ScrollLeft = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.scrollLeft()) >> 0;
	};
	JQuery.prototype.ScrollLeft = function() { return this.$val.ScrollLeft(); };
	JQuery.ptr.prototype.SetScrollLeft = function(value) {
		var $ptr, j, value;
		j = $clone(this, JQuery);
		j.o = j.o.scrollLeft(value);
		return j;
	};
	JQuery.prototype.SetScrollLeft = function(value) { return this.$val.SetScrollLeft(value); };
	JQuery.ptr.prototype.ScrollTop = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.scrollTop()) >> 0;
	};
	JQuery.prototype.ScrollTop = function() { return this.$val.ScrollTop(); };
	JQuery.ptr.prototype.SetScrollTop = function(value) {
		var $ptr, j, value;
		j = $clone(this, JQuery);
		j.o = j.o.scrollTop(value);
		return j;
	};
	JQuery.prototype.SetScrollTop = function(value) { return this.$val.SetScrollTop(value); };
	JQuery.ptr.prototype.ClearQueue = function(queueName) {
		var $ptr, j, queueName;
		j = $clone(this, JQuery);
		j.o = j.o.clearQueue($externalize(queueName, $String));
		return j;
	};
	JQuery.prototype.ClearQueue = function(queueName) { return this.$val.ClearQueue(queueName); };
	JQuery.ptr.prototype.SetData = function(key, value) {
		var $ptr, j, key, value;
		j = $clone(this, JQuery);
		j.o = j.o.data($externalize(key, $String), $externalize(value, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetData = function(key, value) { return this.$val.SetData(key, value); };
	JQuery.ptr.prototype.Data = function(key) {
		var $ptr, j, key, result;
		j = $clone(this, JQuery);
		result = j.o.data($externalize(key, $String));
		if (result === undefined) {
			return $ifaceNil;
		}
		return $internalize(result, $emptyInterface);
	};
	JQuery.prototype.Data = function(key) { return this.$val.Data(key); };
	JQuery.ptr.prototype.Dequeue = function(queueName) {
		var $ptr, j, queueName;
		j = $clone(this, JQuery);
		j.o = j.o.dequeue($externalize(queueName, $String));
		return j;
	};
	JQuery.prototype.Dequeue = function(queueName) { return this.$val.Dequeue(queueName); };
	JQuery.ptr.prototype.RemoveData = function(name) {
		var $ptr, j, name;
		j = $clone(this, JQuery);
		j.o = j.o.removeData($externalize(name, $String));
		return j;
	};
	JQuery.prototype.RemoveData = function(name) { return this.$val.RemoveData(name); };
	JQuery.ptr.prototype.OffsetParent = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		j.o = j.o.offsetParent();
		return j;
	};
	JQuery.prototype.OffsetParent = function() { return this.$val.OffsetParent(); };
	JQuery.ptr.prototype.Parent = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.parent.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Parent = function(i) { return this.$val.Parent(i); };
	JQuery.ptr.prototype.Parents = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.parents.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Parents = function(i) { return this.$val.Parents(i); };
	JQuery.ptr.prototype.ParentsUntil = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.parentsUntil.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.ParentsUntil = function(i) { return this.$val.ParentsUntil(i); };
	JQuery.ptr.prototype.Prev = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prev.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Prev = function(i) { return this.$val.Prev(i); };
	JQuery.ptr.prototype.PrevAll = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prevAll.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.PrevAll = function(i) { return this.$val.PrevAll(i); };
	JQuery.ptr.prototype.PrevUntil = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prevUntil.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.PrevUntil = function(i) { return this.$val.PrevUntil(i); };
	JQuery.ptr.prototype.Siblings = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.siblings.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Siblings = function(i) { return this.$val.Siblings(i); };
	JQuery.ptr.prototype.Slice = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.slice.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Slice = function(i) { return this.$val.Slice(i); };
	JQuery.ptr.prototype.Children = function(selector) {
		var $ptr, j, selector;
		j = $clone(this, JQuery);
		j.o = j.o.children($externalize(selector, $emptyInterface));
		return j;
	};
	JQuery.prototype.Children = function(selector) { return this.$val.Children(selector); };
	JQuery.ptr.prototype.Unwrap = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		j.o = j.o.unwrap();
		return j;
	};
	JQuery.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	JQuery.ptr.prototype.Wrap = function(obj) {
		var $ptr, j, obj;
		j = $clone(this, JQuery);
		j.o = j.o.wrap($externalize(obj, $emptyInterface));
		return j;
	};
	JQuery.prototype.Wrap = function(obj) { return this.$val.Wrap(obj); };
	JQuery.ptr.prototype.WrapAll = function(i) {
		var $ptr, i, j;
		j = $clone(this, JQuery);
		j.o = j.o.wrapAll($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.WrapAll = function(i) { return this.$val.WrapAll(i); };
	JQuery.ptr.prototype.WrapInner = function(i) {
		var $ptr, i, j;
		j = $clone(this, JQuery);
		j.o = j.o.wrapInner($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.WrapInner = function(i) { return this.$val.WrapInner(i); };
	JQuery.ptr.prototype.Next = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.next.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Next = function(i) { return this.$val.Next(i); };
	JQuery.ptr.prototype.NextAll = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.nextAll.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.NextAll = function(i) { return this.$val.NextAll(i); };
	JQuery.ptr.prototype.NextUntil = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.nextUntil.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.NextUntil = function(i) { return this.$val.NextUntil(i); };
	JQuery.ptr.prototype.Not = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.not.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Not = function(i) { return this.$val.Not(i); };
	JQuery.ptr.prototype.Filter = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.filter.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Filter = function(i) { return this.$val.Filter(i); };
	JQuery.ptr.prototype.Find = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.find.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Find = function(i) { return this.$val.Find(i); };
	JQuery.ptr.prototype.First = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		j.o = j.o.first();
		return j;
	};
	JQuery.prototype.First = function() { return this.$val.First(); };
	JQuery.ptr.prototype.Has = function(selector) {
		var $ptr, j, selector;
		j = $clone(this, JQuery);
		j.o = j.o.has($externalize(selector, $String));
		return j;
	};
	JQuery.prototype.Has = function(selector) { return this.$val.Has(selector); };
	JQuery.ptr.prototype.Is = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		return !!((obj = j.o, obj.is.apply(obj, $externalize(i, sliceType))));
	};
	JQuery.prototype.Is = function(i) { return this.$val.Is(i); };
	JQuery.ptr.prototype.Last = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		j.o = j.o.last();
		return j;
	};
	JQuery.prototype.Last = function() { return this.$val.Last(); };
	JQuery.ptr.prototype.Ready = function(handler) {
		var $ptr, handler, j;
		j = $clone(this, JQuery);
		j.o = j.o.ready($externalize(handler, funcType$3));
		return j;
	};
	JQuery.prototype.Ready = function(handler) { return this.$val.Ready(handler); };
	JQuery.ptr.prototype.Resize = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.resize.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Resize = function(i) { return this.$val.Resize(i); };
	JQuery.ptr.prototype.Scroll = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.scroll.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Scroll = function(i) { return this.$val.Scroll(i); };
	JQuery.ptr.prototype.FadeOut = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.fadeOut.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.FadeOut = function(i) { return this.$val.FadeOut(i); };
	JQuery.ptr.prototype.FadeToggle = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.fadeToggle.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.FadeToggle = function(i) { return this.$val.FadeToggle(i); };
	JQuery.ptr.prototype.SlideDown = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.slideDown.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.SlideDown = function(i) { return this.$val.SlideDown(i); };
	JQuery.ptr.prototype.SlideToggle = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.slideToggle.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.SlideToggle = function(i) { return this.$val.SlideToggle(i); };
	JQuery.ptr.prototype.SlideUp = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.slideUp.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.SlideUp = function(i) { return this.$val.SlideUp(i); };
	JQuery.ptr.prototype.Select = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.select.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Select = function(i) { return this.$val.Select(i); };
	JQuery.ptr.prototype.Submit = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.submit.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Submit = function(i) { return this.$val.Submit(i); };
	JQuery.ptr.prototype.Trigger = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.trigger.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Trigger = function(i) { return this.$val.Trigger(i); };
	JQuery.ptr.prototype.On = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.on.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.On = function(i) { return this.$val.On(i); };
	JQuery.ptr.prototype.One = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.one.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.One = function(i) { return this.$val.One(i); };
	JQuery.ptr.prototype.Off = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.off.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Off = function(i) { return this.$val.Off(i); };
	JQuery.ptr.prototype.Load = function(i) {
		var $ptr, i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.load.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Load = function(i) { return this.$val.Load(i); };
	JQuery.ptr.prototype.Serialize = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return $internalize(j.o.serialize(), $String);
	};
	JQuery.prototype.Serialize = function() { return this.$val.Serialize(); };
	JQuery.ptr.prototype.SerializeArray = function() {
		var $ptr, j;
		j = $clone(this, JQuery);
		return j.o.serializeArray();
	};
	JQuery.prototype.SerializeArray = function() { return this.$val.SerializeArray(); };
	Ajax = function(options) {
		var $ptr, options;
		return new Deferred.ptr($global.jQuery.ajax($externalize(options, mapType)));
	};
	$pkg.Ajax = Ajax;
	Deferred.ptr.prototype.Promise = function() {
		var $ptr, d;
		d = $clone(this, Deferred);
		return d.Object.promise();
	};
	Deferred.prototype.Promise = function() { return this.$val.Promise(); };
	Deferred.ptr.prototype.Then = function(fn) {
		var $ptr, d, fn, obj;
		d = $clone(this, Deferred);
		return new Deferred.ptr((obj = d.Object, obj.then.apply(obj, $externalize(fn, sliceType))));
	};
	Deferred.prototype.Then = function(fn) { return this.$val.Then(fn); };
	Deferred.ptr.prototype.Always = function(fn) {
		var $ptr, d, fn, obj;
		d = $clone(this, Deferred);
		return new Deferred.ptr((obj = d.Object, obj.always.apply(obj, $externalize(fn, sliceType))));
	};
	Deferred.prototype.Always = function(fn) { return this.$val.Always(fn); };
	Deferred.ptr.prototype.Done = function(fn) {
		var $ptr, d, fn, obj;
		d = $clone(this, Deferred);
		return new Deferred.ptr((obj = d.Object, obj.done.apply(obj, $externalize(fn, sliceType))));
	};
	Deferred.prototype.Done = function(fn) { return this.$val.Done(fn); };
	Deferred.ptr.prototype.Fail = function(fn) {
		var $ptr, d, fn, obj;
		d = $clone(this, Deferred);
		return new Deferred.ptr((obj = d.Object, obj.fail.apply(obj, $externalize(fn, sliceType))));
	};
	Deferred.prototype.Fail = function(fn) { return this.$val.Fail(fn); };
	Deferred.ptr.prototype.Progress = function(fn) {
		var $ptr, d, fn;
		d = $clone(this, Deferred);
		return new Deferred.ptr(d.Object.progress($externalize(fn, $emptyInterface)));
	};
	Deferred.prototype.Progress = function(fn) { return this.$val.Progress(fn); };
	Deferred.ptr.prototype.State = function() {
		var $ptr, d;
		d = $clone(this, Deferred);
		return $internalize(d.Object.state(), $String);
	};
	Deferred.prototype.State = function() { return this.$val.State(); };
	Deferred.ptr.prototype.Resolve = function(i) {
		var $ptr, d, i, obj;
		d = $clone(this, Deferred);
		return new Deferred.ptr((obj = d.Object, obj.resolve.apply(obj, $externalize(i, sliceType))));
	};
	Deferred.prototype.Resolve = function(i) { return this.$val.Resolve(i); };
	Deferred.ptr.prototype.Reject = function(i) {
		var $ptr, d, i, obj;
		d = $clone(this, Deferred);
		return new Deferred.ptr((obj = d.Object, obj.reject.apply(obj, $externalize(i, sliceType))));
	};
	Deferred.prototype.Reject = function(i) { return this.$val.Reject(i); };
	Deferred.ptr.prototype.Notify = function(i) {
		var $ptr, d, i;
		d = $clone(this, Deferred);
		return new Deferred.ptr(d.Object.notify($externalize(i, $emptyInterface)));
	};
	Deferred.prototype.Notify = function(i) { return this.$val.Notify(i); };
	JQuery.methods = [{prop: "Each", name: "Each", pkg: "", typ: $funcType([funcType$1], [JQuery], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [JQuery], true)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Append", name: "Append", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Empty", name: "Empty", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Detach", name: "Detach", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Eq", name: "Eq", pkg: "", typ: $funcType([$Int], [JQuery], false)}, {prop: "FadeIn", name: "FadeIn", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Delay", name: "Delay", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "ToArray", name: "ToArray", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "Remove", name: "Remove", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Stop", name: "Stop", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "AddBack", name: "AddBack", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Css", name: "Css", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "CssArray", name: "CssArray", pkg: "", typ: $funcType([sliceType$1], [mapType], true)}, {prop: "SetCss", name: "SetCss", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetText", name: "SetText", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Val", name: "Val", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetVal", name: "SetVal", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Prop", name: "Prop", pkg: "", typ: $funcType([$String], [$emptyInterface], false)}, {prop: "SetProp", name: "SetProp", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "RemoveProp", name: "RemoveProp", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "Attr", name: "Attr", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "SetAttr", name: "SetAttr", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "RemoveAttr", name: "RemoveAttr", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "HasClass", name: "HasClass", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "AddClass", name: "AddClass", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "RemoveClass", name: "RemoveClass", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "ToggleClass", name: "ToggleClass", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Focus", name: "Focus", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Blur", name: "Blur", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "ReplaceAll", name: "ReplaceAll", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "ReplaceWith", name: "ReplaceWith", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Prepend", name: "Prepend", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "PrependTo", name: "PrependTo", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "AppendTo", name: "AppendTo", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "InsertAfter", name: "InsertAfter", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "InsertBefore", name: "InsertBefore", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Show", name: "Show", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Hide", name: "Hide", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Toggle", name: "Toggle", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Contents", name: "Contents", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Html", name: "Html", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetHtml", name: "SetHtml", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Closest", name: "Closest", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Height", name: "Height", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetHeight", name: "SetHeight", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetWidth", name: "SetWidth", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "InnerHeight", name: "InnerHeight", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "InnerWidth", name: "InnerWidth", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Offset", name: "Offset", pkg: "", typ: $funcType([], [JQueryCoordinates], false)}, {prop: "SetOffset", name: "SetOffset", pkg: "", typ: $funcType([JQueryCoordinates], [JQuery], false)}, {prop: "OuterHeight", name: "OuterHeight", pkg: "", typ: $funcType([sliceType$2], [$Int], true)}, {prop: "OuterWidth", name: "OuterWidth", pkg: "", typ: $funcType([sliceType$2], [$Int], true)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([], [JQueryCoordinates], false)}, {prop: "ScrollLeft", name: "ScrollLeft", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetScrollLeft", name: "SetScrollLeft", pkg: "", typ: $funcType([$Int], [JQuery], false)}, {prop: "ScrollTop", name: "ScrollTop", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetScrollTop", name: "SetScrollTop", pkg: "", typ: $funcType([$Int], [JQuery], false)}, {prop: "ClearQueue", name: "ClearQueue", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "SetData", name: "SetData", pkg: "", typ: $funcType([$String, $emptyInterface], [JQuery], false)}, {prop: "Data", name: "Data", pkg: "", typ: $funcType([$String], [$emptyInterface], false)}, {prop: "Dequeue", name: "Dequeue", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "RemoveData", name: "RemoveData", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "OffsetParent", name: "OffsetParent", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Parent", name: "Parent", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Parents", name: "Parents", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "ParentsUntil", name: "ParentsUntil", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Prev", name: "Prev", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "PrevAll", name: "PrevAll", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "PrevUntil", name: "PrevUntil", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Siblings", name: "Siblings", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Children", name: "Children", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Wrap", name: "Wrap", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "WrapAll", name: "WrapAll", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "WrapInner", name: "WrapInner", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "NextAll", name: "NextAll", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "NextUntil", name: "NextUntil", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Not", name: "Not", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Filter", name: "Filter", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Find", name: "Find", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "First", name: "First", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Has", name: "Has", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "Is", name: "Is", pkg: "", typ: $funcType([sliceType], [$Bool], true)}, {prop: "Last", name: "Last", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Ready", name: "Ready", pkg: "", typ: $funcType([funcType$3], [JQuery], false)}, {prop: "Resize", name: "Resize", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Scroll", name: "Scroll", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "FadeOut", name: "FadeOut", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "FadeToggle", name: "FadeToggle", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "SlideDown", name: "SlideDown", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "SlideToggle", name: "SlideToggle", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "SlideUp", name: "SlideUp", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Submit", name: "Submit", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Trigger", name: "Trigger", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "On", name: "On", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "One", name: "One", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Off", name: "Off", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([sliceType], [JQuery], true)}, {prop: "Serialize", name: "Serialize", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SerializeArray", name: "SerializeArray", pkg: "", typ: $funcType([], [ptrType], false)}];
	Deferred.methods = [{prop: "Promise", name: "Promise", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "Then", name: "Then", pkg: "", typ: $funcType([sliceType], [Deferred], true)}, {prop: "Always", name: "Always", pkg: "", typ: $funcType([sliceType], [Deferred], true)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([sliceType], [Deferred], true)}, {prop: "Fail", name: "Fail", pkg: "", typ: $funcType([sliceType], [Deferred], true)}, {prop: "Progress", name: "Progress", pkg: "", typ: $funcType([$emptyInterface], [Deferred], false)}, {prop: "State", name: "State", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Resolve", name: "Resolve", pkg: "", typ: $funcType([sliceType], [Deferred], true)}, {prop: "Reject", name: "Reject", pkg: "", typ: $funcType([sliceType], [Deferred], true)}, {prop: "Notify", name: "Notify", pkg: "", typ: $funcType([$emptyInterface], [Deferred], false)}];
	JQuery.init([{prop: "o", name: "o", pkg: "github.com/gopherjs/jquery", typ: ptrType, tag: ""}, {prop: "Jquery", name: "Jquery", pkg: "", typ: $String, tag: "js:\"jquery\""}, {prop: "Selector", name: "Selector", pkg: "", typ: $String, tag: "js:\"selector\""}, {prop: "Length", name: "Length", pkg: "", typ: $Int, tag: "js:\"length\""}, {prop: "Context", name: "Context", pkg: "", typ: $String, tag: "js:\"context\""}]);
	JQueryCoordinates.init([{prop: "Left", name: "Left", pkg: "", typ: $Int, tag: ""}, {prop: "Top", name: "Top", pkg: "", typ: $Int, tag: ""}]);
	Deferred.init([{prop: "Object", name: "", pkg: "", typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/webgl"] = (function() {
	var $pkg = {}, $init, errors, js, ContextAttributes, Context, ptrType, ptrType$1, mapType, ptrType$2, sliceType, sliceType$1, sliceType$2, DefaultAttributes, NewContext;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	ContextAttributes = $pkg.ContextAttributes = $newType(0, $kindStruct, "webgl.ContextAttributes", "ContextAttributes", "github.com/gopherjs/webgl", function(Alpha_, Depth_, Stencil_, Antialias_, PremultipliedAlpha_, PreserveDrawingBuffer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Alpha = false;
			this.Depth = false;
			this.Stencil = false;
			this.Antialias = false;
			this.PremultipliedAlpha = false;
			this.PreserveDrawingBuffer = false;
			return;
		}
		this.Alpha = Alpha_;
		this.Depth = Depth_;
		this.Stencil = Stencil_;
		this.Antialias = Antialias_;
		this.PremultipliedAlpha = PremultipliedAlpha_;
		this.PreserveDrawingBuffer = PreserveDrawingBuffer_;
	});
	Context = $pkg.Context = $newType(0, $kindStruct, "webgl.Context", "Context", "github.com/gopherjs/webgl", function(Object_, ARRAY_BUFFER_, ARRAY_BUFFER_BINDING_, ATTACHED_SHADERS_, BACK_, BLEND_, BLEND_COLOR_, BLEND_DST_ALPHA_, BLEND_DST_RGB_, BLEND_EQUATION_, BLEND_EQUATION_ALPHA_, BLEND_EQUATION_RGB_, BLEND_SRC_ALPHA_, BLEND_SRC_RGB_, BLUE_BITS_, BOOL_, BOOL_VEC2_, BOOL_VEC3_, BOOL_VEC4_, BROWSER_DEFAULT_WEBGL_, BUFFER_SIZE_, BUFFER_USAGE_, BYTE_, CCW_, CLAMP_TO_EDGE_, COLOR_ATTACHMENT0_, COLOR_BUFFER_BIT_, COLOR_CLEAR_VALUE_, COLOR_WRITEMASK_, COMPILE_STATUS_, COMPRESSED_TEXTURE_FORMATS_, CONSTANT_ALPHA_, CONSTANT_COLOR_, CONTEXT_LOST_WEBGL_, CULL_FACE_, CULL_FACE_MODE_, CURRENT_PROGRAM_, CURRENT_VERTEX_ATTRIB_, CW_, DECR_, DECR_WRAP_, DELETE_STATUS_, DEPTH_ATTACHMENT_, DEPTH_BITS_, DEPTH_BUFFER_BIT_, DEPTH_CLEAR_VALUE_, DEPTH_COMPONENT_, DEPTH_COMPONENT16_, DEPTH_FUNC_, DEPTH_RANGE_, DEPTH_STENCIL_, DEPTH_STENCIL_ATTACHMENT_, DEPTH_TEST_, DEPTH_WRITEMASK_, DITHER_, DONT_CARE_, DST_ALPHA_, DST_COLOR_, DYNAMIC_DRAW_, ELEMENT_ARRAY_BUFFER_, ELEMENT_ARRAY_BUFFER_BINDING_, EQUAL_, FASTEST_, FLOAT_, FLOAT_MAT2_, FLOAT_MAT3_, FLOAT_MAT4_, FLOAT_VEC2_, FLOAT_VEC3_, FLOAT_VEC4_, FRAGMENT_SHADER_, FRAMEBUFFER_, FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_, FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_, FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_, FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_, FRAMEBUFFER_BINDING_, FRAMEBUFFER_COMPLETE_, FRAMEBUFFER_INCOMPLETE_ATTACHMENT_, FRAMEBUFFER_INCOMPLETE_DIMENSIONS_, FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_, FRAMEBUFFER_UNSUPPORTED_, FRONT_, FRONT_AND_BACK_, FRONT_FACE_, FUNC_ADD_, FUNC_REVERSE_SUBTRACT_, FUNC_SUBTRACT_, GENERATE_MIPMAP_HINT_, GEQUAL_, GREATER_, GREEN_BITS_, HIGH_FLOAT_, HIGH_INT_, INCR_, INCR_WRAP_, INFO_LOG_LENGTH_, INT_, INT_VEC2_, INT_VEC3_, INT_VEC4_, INVALID_ENUM_, INVALID_FRAMEBUFFER_OPERATION_, INVALID_OPERATION_, INVALID_VALUE_, INVERT_, KEEP_, LEQUAL_, LESS_, LINEAR_, LINEAR_MIPMAP_LINEAR_, LINEAR_MIPMAP_NEAREST_, LINES_, LINE_LOOP_, LINE_STRIP_, LINE_WIDTH_, LINK_STATUS_, LOW_FLOAT_, LOW_INT_, LUMINANCE_, LUMINANCE_ALPHA_, MAX_COMBINED_TEXTURE_IMAGE_UNITS_, MAX_CUBE_MAP_TEXTURE_SIZE_, MAX_FRAGMENT_UNIFORM_VECTORS_, MAX_RENDERBUFFER_SIZE_, MAX_TEXTURE_IMAGE_UNITS_, MAX_TEXTURE_SIZE_, MAX_VARYING_VECTORS_, MAX_VERTEX_ATTRIBS_, MAX_VERTEX_TEXTURE_IMAGE_UNITS_, MAX_VERTEX_UNIFORM_VECTORS_, MAX_VIEWPORT_DIMS_, MEDIUM_FLOAT_, MEDIUM_INT_, MIRRORED_REPEAT_, NEAREST_, NEAREST_MIPMAP_LINEAR_, NEAREST_MIPMAP_NEAREST_, NEVER_, NICEST_, NONE_, NOTEQUAL_, NO_ERROR_, NUM_COMPRESSED_TEXTURE_FORMATS_, ONE_, ONE_MINUS_CONSTANT_ALPHA_, ONE_MINUS_CONSTANT_COLOR_, ONE_MINUS_DST_ALPHA_, ONE_MINUS_DST_COLOR_, ONE_MINUS_SRC_ALPHA_, ONE_MINUS_SRC_COLOR_, OUT_OF_MEMORY_, PACK_ALIGNMENT_, POINTS_, POLYGON_OFFSET_FACTOR_, POLYGON_OFFSET_FILL_, POLYGON_OFFSET_UNITS_, RED_BITS_, RENDERBUFFER_, RENDERBUFFER_ALPHA_SIZE_, RENDERBUFFER_BINDING_, RENDERBUFFER_BLUE_SIZE_, RENDERBUFFER_DEPTH_SIZE_, RENDERBUFFER_GREEN_SIZE_, RENDERBUFFER_HEIGHT_, RENDERBUFFER_INTERNAL_FORMAT_, RENDERBUFFER_RED_SIZE_, RENDERBUFFER_STENCIL_SIZE_, RENDERBUFFER_WIDTH_, RENDERER_, REPEAT_, REPLACE_, RGB_, RGB5_A1_, RGB565_, RGBA_, RGBA4_, SAMPLER_2D_, SAMPLER_CUBE_, SAMPLES_, SAMPLE_ALPHA_TO_COVERAGE_, SAMPLE_BUFFERS_, SAMPLE_COVERAGE_, SAMPLE_COVERAGE_INVERT_, SAMPLE_COVERAGE_VALUE_, SCISSOR_BOX_, SCISSOR_TEST_, SHADER_COMPILER_, SHADER_SOURCE_LENGTH_, SHADER_TYPE_, SHADING_LANGUAGE_VERSION_, SHORT_, SRC_ALPHA_, SRC_ALPHA_SATURATE_, SRC_COLOR_, STATIC_DRAW_, STENCIL_ATTACHMENT_, STENCIL_BACK_FAIL_, STENCIL_BACK_FUNC_, STENCIL_BACK_PASS_DEPTH_FAIL_, STENCIL_BACK_PASS_DEPTH_PASS_, STENCIL_BACK_REF_, STENCIL_BACK_VALUE_MASK_, STENCIL_BACK_WRITEMASK_, STENCIL_BITS_, STENCIL_BUFFER_BIT_, STENCIL_CLEAR_VALUE_, STENCIL_FAIL_, STENCIL_FUNC_, STENCIL_INDEX_, STENCIL_INDEX8_, STENCIL_PASS_DEPTH_FAIL_, STENCIL_PASS_DEPTH_PASS_, STENCIL_REF_, STENCIL_TEST_, STENCIL_VALUE_MASK_, STENCIL_WRITEMASK_, STREAM_DRAW_, SUBPIXEL_BITS_, TEXTURE_, TEXTURE0_, TEXTURE1_, TEXTURE2_, TEXTURE3_, TEXTURE4_, TEXTURE5_, TEXTURE6_, TEXTURE7_, TEXTURE8_, TEXTURE9_, TEXTURE10_, TEXTURE11_, TEXTURE12_, TEXTURE13_, TEXTURE14_, TEXTURE15_, TEXTURE16_, TEXTURE17_, TEXTURE18_, TEXTURE19_, TEXTURE20_, TEXTURE21_, TEXTURE22_, TEXTURE23_, TEXTURE24_, TEXTURE25_, TEXTURE26_, TEXTURE27_, TEXTURE28_, TEXTURE29_, TEXTURE30_, TEXTURE31_, TEXTURE_2D_, TEXTURE_BINDING_2D_, TEXTURE_BINDING_CUBE_MAP_, TEXTURE_CUBE_MAP_, TEXTURE_CUBE_MAP_NEGATIVE_X_, TEXTURE_CUBE_MAP_NEGATIVE_Y_, TEXTURE_CUBE_MAP_NEGATIVE_Z_, TEXTURE_CUBE_MAP_POSITIVE_X_, TEXTURE_CUBE_MAP_POSITIVE_Y_, TEXTURE_CUBE_MAP_POSITIVE_Z_, TEXTURE_MAG_FILTER_, TEXTURE_MIN_FILTER_, TEXTURE_WRAP_S_, TEXTURE_WRAP_T_, TRIANGLES_, TRIANGLE_FAN_, TRIANGLE_STRIP_, UNPACK_ALIGNMENT_, UNPACK_COLORSPACE_CONVERSION_WEBGL_, UNPACK_FLIP_Y_WEBGL_, UNPACK_PREMULTIPLY_ALPHA_WEBGL_, UNSIGNED_BYTE_, UNSIGNED_INT_, UNSIGNED_SHORT_, UNSIGNED_SHORT_4_4_4_4_, UNSIGNED_SHORT_5_5_5_1_, UNSIGNED_SHORT_5_6_5_, VALIDATE_STATUS_, VENDOR_, VERSION_, VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_, VERTEX_ATTRIB_ARRAY_ENABLED_, VERTEX_ATTRIB_ARRAY_NORMALIZED_, VERTEX_ATTRIB_ARRAY_POINTER_, VERTEX_ATTRIB_ARRAY_SIZE_, VERTEX_ATTRIB_ARRAY_STRIDE_, VERTEX_ATTRIB_ARRAY_TYPE_, VERTEX_SHADER_, VIEWPORT_, ZERO_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			this.ARRAY_BUFFER = 0;
			this.ARRAY_BUFFER_BINDING = 0;
			this.ATTACHED_SHADERS = 0;
			this.BACK = 0;
			this.BLEND = 0;
			this.BLEND_COLOR = 0;
			this.BLEND_DST_ALPHA = 0;
			this.BLEND_DST_RGB = 0;
			this.BLEND_EQUATION = 0;
			this.BLEND_EQUATION_ALPHA = 0;
			this.BLEND_EQUATION_RGB = 0;
			this.BLEND_SRC_ALPHA = 0;
			this.BLEND_SRC_RGB = 0;
			this.BLUE_BITS = 0;
			this.BOOL = 0;
			this.BOOL_VEC2 = 0;
			this.BOOL_VEC3 = 0;
			this.BOOL_VEC4 = 0;
			this.BROWSER_DEFAULT_WEBGL = 0;
			this.BUFFER_SIZE = 0;
			this.BUFFER_USAGE = 0;
			this.BYTE = 0;
			this.CCW = 0;
			this.CLAMP_TO_EDGE = 0;
			this.COLOR_ATTACHMENT0 = 0;
			this.COLOR_BUFFER_BIT = 0;
			this.COLOR_CLEAR_VALUE = 0;
			this.COLOR_WRITEMASK = 0;
			this.COMPILE_STATUS = 0;
			this.COMPRESSED_TEXTURE_FORMATS = 0;
			this.CONSTANT_ALPHA = 0;
			this.CONSTANT_COLOR = 0;
			this.CONTEXT_LOST_WEBGL = 0;
			this.CULL_FACE = 0;
			this.CULL_FACE_MODE = 0;
			this.CURRENT_PROGRAM = 0;
			this.CURRENT_VERTEX_ATTRIB = 0;
			this.CW = 0;
			this.DECR = 0;
			this.DECR_WRAP = 0;
			this.DELETE_STATUS = 0;
			this.DEPTH_ATTACHMENT = 0;
			this.DEPTH_BITS = 0;
			this.DEPTH_BUFFER_BIT = 0;
			this.DEPTH_CLEAR_VALUE = 0;
			this.DEPTH_COMPONENT = 0;
			this.DEPTH_COMPONENT16 = 0;
			this.DEPTH_FUNC = 0;
			this.DEPTH_RANGE = 0;
			this.DEPTH_STENCIL = 0;
			this.DEPTH_STENCIL_ATTACHMENT = 0;
			this.DEPTH_TEST = 0;
			this.DEPTH_WRITEMASK = 0;
			this.DITHER = 0;
			this.DONT_CARE = 0;
			this.DST_ALPHA = 0;
			this.DST_COLOR = 0;
			this.DYNAMIC_DRAW = 0;
			this.ELEMENT_ARRAY_BUFFER = 0;
			this.ELEMENT_ARRAY_BUFFER_BINDING = 0;
			this.EQUAL = 0;
			this.FASTEST = 0;
			this.FLOAT = 0;
			this.FLOAT_MAT2 = 0;
			this.FLOAT_MAT3 = 0;
			this.FLOAT_MAT4 = 0;
			this.FLOAT_VEC2 = 0;
			this.FLOAT_VEC3 = 0;
			this.FLOAT_VEC4 = 0;
			this.FRAGMENT_SHADER = 0;
			this.FRAMEBUFFER = 0;
			this.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0;
			this.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0;
			this.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0;
			this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0;
			this.FRAMEBUFFER_BINDING = 0;
			this.FRAMEBUFFER_COMPLETE = 0;
			this.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0;
			this.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0;
			this.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0;
			this.FRAMEBUFFER_UNSUPPORTED = 0;
			this.FRONT = 0;
			this.FRONT_AND_BACK = 0;
			this.FRONT_FACE = 0;
			this.FUNC_ADD = 0;
			this.FUNC_REVERSE_SUBTRACT = 0;
			this.FUNC_SUBTRACT = 0;
			this.GENERATE_MIPMAP_HINT = 0;
			this.GEQUAL = 0;
			this.GREATER = 0;
			this.GREEN_BITS = 0;
			this.HIGH_FLOAT = 0;
			this.HIGH_INT = 0;
			this.INCR = 0;
			this.INCR_WRAP = 0;
			this.INFO_LOG_LENGTH = 0;
			this.INT = 0;
			this.INT_VEC2 = 0;
			this.INT_VEC3 = 0;
			this.INT_VEC4 = 0;
			this.INVALID_ENUM = 0;
			this.INVALID_FRAMEBUFFER_OPERATION = 0;
			this.INVALID_OPERATION = 0;
			this.INVALID_VALUE = 0;
			this.INVERT = 0;
			this.KEEP = 0;
			this.LEQUAL = 0;
			this.LESS = 0;
			this.LINEAR = 0;
			this.LINEAR_MIPMAP_LINEAR = 0;
			this.LINEAR_MIPMAP_NEAREST = 0;
			this.LINES = 0;
			this.LINE_LOOP = 0;
			this.LINE_STRIP = 0;
			this.LINE_WIDTH = 0;
			this.LINK_STATUS = 0;
			this.LOW_FLOAT = 0;
			this.LOW_INT = 0;
			this.LUMINANCE = 0;
			this.LUMINANCE_ALPHA = 0;
			this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0;
			this.MAX_CUBE_MAP_TEXTURE_SIZE = 0;
			this.MAX_FRAGMENT_UNIFORM_VECTORS = 0;
			this.MAX_RENDERBUFFER_SIZE = 0;
			this.MAX_TEXTURE_IMAGE_UNITS = 0;
			this.MAX_TEXTURE_SIZE = 0;
			this.MAX_VARYING_VECTORS = 0;
			this.MAX_VERTEX_ATTRIBS = 0;
			this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0;
			this.MAX_VERTEX_UNIFORM_VECTORS = 0;
			this.MAX_VIEWPORT_DIMS = 0;
			this.MEDIUM_FLOAT = 0;
			this.MEDIUM_INT = 0;
			this.MIRRORED_REPEAT = 0;
			this.NEAREST = 0;
			this.NEAREST_MIPMAP_LINEAR = 0;
			this.NEAREST_MIPMAP_NEAREST = 0;
			this.NEVER = 0;
			this.NICEST = 0;
			this.NONE = 0;
			this.NOTEQUAL = 0;
			this.NO_ERROR = 0;
			this.NUM_COMPRESSED_TEXTURE_FORMATS = 0;
			this.ONE = 0;
			this.ONE_MINUS_CONSTANT_ALPHA = 0;
			this.ONE_MINUS_CONSTANT_COLOR = 0;
			this.ONE_MINUS_DST_ALPHA = 0;
			this.ONE_MINUS_DST_COLOR = 0;
			this.ONE_MINUS_SRC_ALPHA = 0;
			this.ONE_MINUS_SRC_COLOR = 0;
			this.OUT_OF_MEMORY = 0;
			this.PACK_ALIGNMENT = 0;
			this.POINTS = 0;
			this.POLYGON_OFFSET_FACTOR = 0;
			this.POLYGON_OFFSET_FILL = 0;
			this.POLYGON_OFFSET_UNITS = 0;
			this.RED_BITS = 0;
			this.RENDERBUFFER = 0;
			this.RENDERBUFFER_ALPHA_SIZE = 0;
			this.RENDERBUFFER_BINDING = 0;
			this.RENDERBUFFER_BLUE_SIZE = 0;
			this.RENDERBUFFER_DEPTH_SIZE = 0;
			this.RENDERBUFFER_GREEN_SIZE = 0;
			this.RENDERBUFFER_HEIGHT = 0;
			this.RENDERBUFFER_INTERNAL_FORMAT = 0;
			this.RENDERBUFFER_RED_SIZE = 0;
			this.RENDERBUFFER_STENCIL_SIZE = 0;
			this.RENDERBUFFER_WIDTH = 0;
			this.RENDERER = 0;
			this.REPEAT = 0;
			this.REPLACE = 0;
			this.RGB = 0;
			this.RGB5_A1 = 0;
			this.RGB565 = 0;
			this.RGBA = 0;
			this.RGBA4 = 0;
			this.SAMPLER_2D = 0;
			this.SAMPLER_CUBE = 0;
			this.SAMPLES = 0;
			this.SAMPLE_ALPHA_TO_COVERAGE = 0;
			this.SAMPLE_BUFFERS = 0;
			this.SAMPLE_COVERAGE = 0;
			this.SAMPLE_COVERAGE_INVERT = 0;
			this.SAMPLE_COVERAGE_VALUE = 0;
			this.SCISSOR_BOX = 0;
			this.SCISSOR_TEST = 0;
			this.SHADER_COMPILER = 0;
			this.SHADER_SOURCE_LENGTH = 0;
			this.SHADER_TYPE = 0;
			this.SHADING_LANGUAGE_VERSION = 0;
			this.SHORT = 0;
			this.SRC_ALPHA = 0;
			this.SRC_ALPHA_SATURATE = 0;
			this.SRC_COLOR = 0;
			this.STATIC_DRAW = 0;
			this.STENCIL_ATTACHMENT = 0;
			this.STENCIL_BACK_FAIL = 0;
			this.STENCIL_BACK_FUNC = 0;
			this.STENCIL_BACK_PASS_DEPTH_FAIL = 0;
			this.STENCIL_BACK_PASS_DEPTH_PASS = 0;
			this.STENCIL_BACK_REF = 0;
			this.STENCIL_BACK_VALUE_MASK = 0;
			this.STENCIL_BACK_WRITEMASK = 0;
			this.STENCIL_BITS = 0;
			this.STENCIL_BUFFER_BIT = 0;
			this.STENCIL_CLEAR_VALUE = 0;
			this.STENCIL_FAIL = 0;
			this.STENCIL_FUNC = 0;
			this.STENCIL_INDEX = 0;
			this.STENCIL_INDEX8 = 0;
			this.STENCIL_PASS_DEPTH_FAIL = 0;
			this.STENCIL_PASS_DEPTH_PASS = 0;
			this.STENCIL_REF = 0;
			this.STENCIL_TEST = 0;
			this.STENCIL_VALUE_MASK = 0;
			this.STENCIL_WRITEMASK = 0;
			this.STREAM_DRAW = 0;
			this.SUBPIXEL_BITS = 0;
			this.TEXTURE = 0;
			this.TEXTURE0 = 0;
			this.TEXTURE1 = 0;
			this.TEXTURE2 = 0;
			this.TEXTURE3 = 0;
			this.TEXTURE4 = 0;
			this.TEXTURE5 = 0;
			this.TEXTURE6 = 0;
			this.TEXTURE7 = 0;
			this.TEXTURE8 = 0;
			this.TEXTURE9 = 0;
			this.TEXTURE10 = 0;
			this.TEXTURE11 = 0;
			this.TEXTURE12 = 0;
			this.TEXTURE13 = 0;
			this.TEXTURE14 = 0;
			this.TEXTURE15 = 0;
			this.TEXTURE16 = 0;
			this.TEXTURE17 = 0;
			this.TEXTURE18 = 0;
			this.TEXTURE19 = 0;
			this.TEXTURE20 = 0;
			this.TEXTURE21 = 0;
			this.TEXTURE22 = 0;
			this.TEXTURE23 = 0;
			this.TEXTURE24 = 0;
			this.TEXTURE25 = 0;
			this.TEXTURE26 = 0;
			this.TEXTURE27 = 0;
			this.TEXTURE28 = 0;
			this.TEXTURE29 = 0;
			this.TEXTURE30 = 0;
			this.TEXTURE31 = 0;
			this.TEXTURE_2D = 0;
			this.TEXTURE_BINDING_2D = 0;
			this.TEXTURE_BINDING_CUBE_MAP = 0;
			this.TEXTURE_CUBE_MAP = 0;
			this.TEXTURE_CUBE_MAP_NEGATIVE_X = 0;
			this.TEXTURE_CUBE_MAP_NEGATIVE_Y = 0;
			this.TEXTURE_CUBE_MAP_NEGATIVE_Z = 0;
			this.TEXTURE_CUBE_MAP_POSITIVE_X = 0;
			this.TEXTURE_CUBE_MAP_POSITIVE_Y = 0;
			this.TEXTURE_CUBE_MAP_POSITIVE_Z = 0;
			this.TEXTURE_MAG_FILTER = 0;
			this.TEXTURE_MIN_FILTER = 0;
			this.TEXTURE_WRAP_S = 0;
			this.TEXTURE_WRAP_T = 0;
			this.TRIANGLES = 0;
			this.TRIANGLE_FAN = 0;
			this.TRIANGLE_STRIP = 0;
			this.UNPACK_ALIGNMENT = 0;
			this.UNPACK_COLORSPACE_CONVERSION_WEBGL = 0;
			this.UNPACK_FLIP_Y_WEBGL = 0;
			this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0;
			this.UNSIGNED_BYTE = 0;
			this.UNSIGNED_INT = 0;
			this.UNSIGNED_SHORT = 0;
			this.UNSIGNED_SHORT_4_4_4_4 = 0;
			this.UNSIGNED_SHORT_5_5_5_1 = 0;
			this.UNSIGNED_SHORT_5_6_5 = 0;
			this.VALIDATE_STATUS = 0;
			this.VENDOR = 0;
			this.VERSION = 0;
			this.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0;
			this.VERTEX_ATTRIB_ARRAY_ENABLED = 0;
			this.VERTEX_ATTRIB_ARRAY_NORMALIZED = 0;
			this.VERTEX_ATTRIB_ARRAY_POINTER = 0;
			this.VERTEX_ATTRIB_ARRAY_SIZE = 0;
			this.VERTEX_ATTRIB_ARRAY_STRIDE = 0;
			this.VERTEX_ATTRIB_ARRAY_TYPE = 0;
			this.VERTEX_SHADER = 0;
			this.VIEWPORT = 0;
			this.ZERO = 0;
			return;
		}
		this.Object = Object_;
		this.ARRAY_BUFFER = ARRAY_BUFFER_;
		this.ARRAY_BUFFER_BINDING = ARRAY_BUFFER_BINDING_;
		this.ATTACHED_SHADERS = ATTACHED_SHADERS_;
		this.BACK = BACK_;
		this.BLEND = BLEND_;
		this.BLEND_COLOR = BLEND_COLOR_;
		this.BLEND_DST_ALPHA = BLEND_DST_ALPHA_;
		this.BLEND_DST_RGB = BLEND_DST_RGB_;
		this.BLEND_EQUATION = BLEND_EQUATION_;
		this.BLEND_EQUATION_ALPHA = BLEND_EQUATION_ALPHA_;
		this.BLEND_EQUATION_RGB = BLEND_EQUATION_RGB_;
		this.BLEND_SRC_ALPHA = BLEND_SRC_ALPHA_;
		this.BLEND_SRC_RGB = BLEND_SRC_RGB_;
		this.BLUE_BITS = BLUE_BITS_;
		this.BOOL = BOOL_;
		this.BOOL_VEC2 = BOOL_VEC2_;
		this.BOOL_VEC3 = BOOL_VEC3_;
		this.BOOL_VEC4 = BOOL_VEC4_;
		this.BROWSER_DEFAULT_WEBGL = BROWSER_DEFAULT_WEBGL_;
		this.BUFFER_SIZE = BUFFER_SIZE_;
		this.BUFFER_USAGE = BUFFER_USAGE_;
		this.BYTE = BYTE_;
		this.CCW = CCW_;
		this.CLAMP_TO_EDGE = CLAMP_TO_EDGE_;
		this.COLOR_ATTACHMENT0 = COLOR_ATTACHMENT0_;
		this.COLOR_BUFFER_BIT = COLOR_BUFFER_BIT_;
		this.COLOR_CLEAR_VALUE = COLOR_CLEAR_VALUE_;
		this.COLOR_WRITEMASK = COLOR_WRITEMASK_;
		this.COMPILE_STATUS = COMPILE_STATUS_;
		this.COMPRESSED_TEXTURE_FORMATS = COMPRESSED_TEXTURE_FORMATS_;
		this.CONSTANT_ALPHA = CONSTANT_ALPHA_;
		this.CONSTANT_COLOR = CONSTANT_COLOR_;
		this.CONTEXT_LOST_WEBGL = CONTEXT_LOST_WEBGL_;
		this.CULL_FACE = CULL_FACE_;
		this.CULL_FACE_MODE = CULL_FACE_MODE_;
		this.CURRENT_PROGRAM = CURRENT_PROGRAM_;
		this.CURRENT_VERTEX_ATTRIB = CURRENT_VERTEX_ATTRIB_;
		this.CW = CW_;
		this.DECR = DECR_;
		this.DECR_WRAP = DECR_WRAP_;
		this.DELETE_STATUS = DELETE_STATUS_;
		this.DEPTH_ATTACHMENT = DEPTH_ATTACHMENT_;
		this.DEPTH_BITS = DEPTH_BITS_;
		this.DEPTH_BUFFER_BIT = DEPTH_BUFFER_BIT_;
		this.DEPTH_CLEAR_VALUE = DEPTH_CLEAR_VALUE_;
		this.DEPTH_COMPONENT = DEPTH_COMPONENT_;
		this.DEPTH_COMPONENT16 = DEPTH_COMPONENT16_;
		this.DEPTH_FUNC = DEPTH_FUNC_;
		this.DEPTH_RANGE = DEPTH_RANGE_;
		this.DEPTH_STENCIL = DEPTH_STENCIL_;
		this.DEPTH_STENCIL_ATTACHMENT = DEPTH_STENCIL_ATTACHMENT_;
		this.DEPTH_TEST = DEPTH_TEST_;
		this.DEPTH_WRITEMASK = DEPTH_WRITEMASK_;
		this.DITHER = DITHER_;
		this.DONT_CARE = DONT_CARE_;
		this.DST_ALPHA = DST_ALPHA_;
		this.DST_COLOR = DST_COLOR_;
		this.DYNAMIC_DRAW = DYNAMIC_DRAW_;
		this.ELEMENT_ARRAY_BUFFER = ELEMENT_ARRAY_BUFFER_;
		this.ELEMENT_ARRAY_BUFFER_BINDING = ELEMENT_ARRAY_BUFFER_BINDING_;
		this.EQUAL = EQUAL_;
		this.FASTEST = FASTEST_;
		this.FLOAT = FLOAT_;
		this.FLOAT_MAT2 = FLOAT_MAT2_;
		this.FLOAT_MAT3 = FLOAT_MAT3_;
		this.FLOAT_MAT4 = FLOAT_MAT4_;
		this.FLOAT_VEC2 = FLOAT_VEC2_;
		this.FLOAT_VEC3 = FLOAT_VEC3_;
		this.FLOAT_VEC4 = FLOAT_VEC4_;
		this.FRAGMENT_SHADER = FRAGMENT_SHADER_;
		this.FRAMEBUFFER = FRAMEBUFFER_;
		this.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_;
		this.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_;
		this.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_;
		this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_;
		this.FRAMEBUFFER_BINDING = FRAMEBUFFER_BINDING_;
		this.FRAMEBUFFER_COMPLETE = FRAMEBUFFER_COMPLETE_;
		this.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = FRAMEBUFFER_INCOMPLETE_ATTACHMENT_;
		this.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = FRAMEBUFFER_INCOMPLETE_DIMENSIONS_;
		this.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_;
		this.FRAMEBUFFER_UNSUPPORTED = FRAMEBUFFER_UNSUPPORTED_;
		this.FRONT = FRONT_;
		this.FRONT_AND_BACK = FRONT_AND_BACK_;
		this.FRONT_FACE = FRONT_FACE_;
		this.FUNC_ADD = FUNC_ADD_;
		this.FUNC_REVERSE_SUBTRACT = FUNC_REVERSE_SUBTRACT_;
		this.FUNC_SUBTRACT = FUNC_SUBTRACT_;
		this.GENERATE_MIPMAP_HINT = GENERATE_MIPMAP_HINT_;
		this.GEQUAL = GEQUAL_;
		this.GREATER = GREATER_;
		this.GREEN_BITS = GREEN_BITS_;
		this.HIGH_FLOAT = HIGH_FLOAT_;
		this.HIGH_INT = HIGH_INT_;
		this.INCR = INCR_;
		this.INCR_WRAP = INCR_WRAP_;
		this.INFO_LOG_LENGTH = INFO_LOG_LENGTH_;
		this.INT = INT_;
		this.INT_VEC2 = INT_VEC2_;
		this.INT_VEC3 = INT_VEC3_;
		this.INT_VEC4 = INT_VEC4_;
		this.INVALID_ENUM = INVALID_ENUM_;
		this.INVALID_FRAMEBUFFER_OPERATION = INVALID_FRAMEBUFFER_OPERATION_;
		this.INVALID_OPERATION = INVALID_OPERATION_;
		this.INVALID_VALUE = INVALID_VALUE_;
		this.INVERT = INVERT_;
		this.KEEP = KEEP_;
		this.LEQUAL = LEQUAL_;
		this.LESS = LESS_;
		this.LINEAR = LINEAR_;
		this.LINEAR_MIPMAP_LINEAR = LINEAR_MIPMAP_LINEAR_;
		this.LINEAR_MIPMAP_NEAREST = LINEAR_MIPMAP_NEAREST_;
		this.LINES = LINES_;
		this.LINE_LOOP = LINE_LOOP_;
		this.LINE_STRIP = LINE_STRIP_;
		this.LINE_WIDTH = LINE_WIDTH_;
		this.LINK_STATUS = LINK_STATUS_;
		this.LOW_FLOAT = LOW_FLOAT_;
		this.LOW_INT = LOW_INT_;
		this.LUMINANCE = LUMINANCE_;
		this.LUMINANCE_ALPHA = LUMINANCE_ALPHA_;
		this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = MAX_COMBINED_TEXTURE_IMAGE_UNITS_;
		this.MAX_CUBE_MAP_TEXTURE_SIZE = MAX_CUBE_MAP_TEXTURE_SIZE_;
		this.MAX_FRAGMENT_UNIFORM_VECTORS = MAX_FRAGMENT_UNIFORM_VECTORS_;
		this.MAX_RENDERBUFFER_SIZE = MAX_RENDERBUFFER_SIZE_;
		this.MAX_TEXTURE_IMAGE_UNITS = MAX_TEXTURE_IMAGE_UNITS_;
		this.MAX_TEXTURE_SIZE = MAX_TEXTURE_SIZE_;
		this.MAX_VARYING_VECTORS = MAX_VARYING_VECTORS_;
		this.MAX_VERTEX_ATTRIBS = MAX_VERTEX_ATTRIBS_;
		this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = MAX_VERTEX_TEXTURE_IMAGE_UNITS_;
		this.MAX_VERTEX_UNIFORM_VECTORS = MAX_VERTEX_UNIFORM_VECTORS_;
		this.MAX_VIEWPORT_DIMS = MAX_VIEWPORT_DIMS_;
		this.MEDIUM_FLOAT = MEDIUM_FLOAT_;
		this.MEDIUM_INT = MEDIUM_INT_;
		this.MIRRORED_REPEAT = MIRRORED_REPEAT_;
		this.NEAREST = NEAREST_;
		this.NEAREST_MIPMAP_LINEAR = NEAREST_MIPMAP_LINEAR_;
		this.NEAREST_MIPMAP_NEAREST = NEAREST_MIPMAP_NEAREST_;
		this.NEVER = NEVER_;
		this.NICEST = NICEST_;
		this.NONE = NONE_;
		this.NOTEQUAL = NOTEQUAL_;
		this.NO_ERROR = NO_ERROR_;
		this.NUM_COMPRESSED_TEXTURE_FORMATS = NUM_COMPRESSED_TEXTURE_FORMATS_;
		this.ONE = ONE_;
		this.ONE_MINUS_CONSTANT_ALPHA = ONE_MINUS_CONSTANT_ALPHA_;
		this.ONE_MINUS_CONSTANT_COLOR = ONE_MINUS_CONSTANT_COLOR_;
		this.ONE_MINUS_DST_ALPHA = ONE_MINUS_DST_ALPHA_;
		this.ONE_MINUS_DST_COLOR = ONE_MINUS_DST_COLOR_;
		this.ONE_MINUS_SRC_ALPHA = ONE_MINUS_SRC_ALPHA_;
		this.ONE_MINUS_SRC_COLOR = ONE_MINUS_SRC_COLOR_;
		this.OUT_OF_MEMORY = OUT_OF_MEMORY_;
		this.PACK_ALIGNMENT = PACK_ALIGNMENT_;
		this.POINTS = POINTS_;
		this.POLYGON_OFFSET_FACTOR = POLYGON_OFFSET_FACTOR_;
		this.POLYGON_OFFSET_FILL = POLYGON_OFFSET_FILL_;
		this.POLYGON_OFFSET_UNITS = POLYGON_OFFSET_UNITS_;
		this.RED_BITS = RED_BITS_;
		this.RENDERBUFFER = RENDERBUFFER_;
		this.RENDERBUFFER_ALPHA_SIZE = RENDERBUFFER_ALPHA_SIZE_;
		this.RENDERBUFFER_BINDING = RENDERBUFFER_BINDING_;
		this.RENDERBUFFER_BLUE_SIZE = RENDERBUFFER_BLUE_SIZE_;
		this.RENDERBUFFER_DEPTH_SIZE = RENDERBUFFER_DEPTH_SIZE_;
		this.RENDERBUFFER_GREEN_SIZE = RENDERBUFFER_GREEN_SIZE_;
		this.RENDERBUFFER_HEIGHT = RENDERBUFFER_HEIGHT_;
		this.RENDERBUFFER_INTERNAL_FORMAT = RENDERBUFFER_INTERNAL_FORMAT_;
		this.RENDERBUFFER_RED_SIZE = RENDERBUFFER_RED_SIZE_;
		this.RENDERBUFFER_STENCIL_SIZE = RENDERBUFFER_STENCIL_SIZE_;
		this.RENDERBUFFER_WIDTH = RENDERBUFFER_WIDTH_;
		this.RENDERER = RENDERER_;
		this.REPEAT = REPEAT_;
		this.REPLACE = REPLACE_;
		this.RGB = RGB_;
		this.RGB5_A1 = RGB5_A1_;
		this.RGB565 = RGB565_;
		this.RGBA = RGBA_;
		this.RGBA4 = RGBA4_;
		this.SAMPLER_2D = SAMPLER_2D_;
		this.SAMPLER_CUBE = SAMPLER_CUBE_;
		this.SAMPLES = SAMPLES_;
		this.SAMPLE_ALPHA_TO_COVERAGE = SAMPLE_ALPHA_TO_COVERAGE_;
		this.SAMPLE_BUFFERS = SAMPLE_BUFFERS_;
		this.SAMPLE_COVERAGE = SAMPLE_COVERAGE_;
		this.SAMPLE_COVERAGE_INVERT = SAMPLE_COVERAGE_INVERT_;
		this.SAMPLE_COVERAGE_VALUE = SAMPLE_COVERAGE_VALUE_;
		this.SCISSOR_BOX = SCISSOR_BOX_;
		this.SCISSOR_TEST = SCISSOR_TEST_;
		this.SHADER_COMPILER = SHADER_COMPILER_;
		this.SHADER_SOURCE_LENGTH = SHADER_SOURCE_LENGTH_;
		this.SHADER_TYPE = SHADER_TYPE_;
		this.SHADING_LANGUAGE_VERSION = SHADING_LANGUAGE_VERSION_;
		this.SHORT = SHORT_;
		this.SRC_ALPHA = SRC_ALPHA_;
		this.SRC_ALPHA_SATURATE = SRC_ALPHA_SATURATE_;
		this.SRC_COLOR = SRC_COLOR_;
		this.STATIC_DRAW = STATIC_DRAW_;
		this.STENCIL_ATTACHMENT = STENCIL_ATTACHMENT_;
		this.STENCIL_BACK_FAIL = STENCIL_BACK_FAIL_;
		this.STENCIL_BACK_FUNC = STENCIL_BACK_FUNC_;
		this.STENCIL_BACK_PASS_DEPTH_FAIL = STENCIL_BACK_PASS_DEPTH_FAIL_;
		this.STENCIL_BACK_PASS_DEPTH_PASS = STENCIL_BACK_PASS_DEPTH_PASS_;
		this.STENCIL_BACK_REF = STENCIL_BACK_REF_;
		this.STENCIL_BACK_VALUE_MASK = STENCIL_BACK_VALUE_MASK_;
		this.STENCIL_BACK_WRITEMASK = STENCIL_BACK_WRITEMASK_;
		this.STENCIL_BITS = STENCIL_BITS_;
		this.STENCIL_BUFFER_BIT = STENCIL_BUFFER_BIT_;
		this.STENCIL_CLEAR_VALUE = STENCIL_CLEAR_VALUE_;
		this.STENCIL_FAIL = STENCIL_FAIL_;
		this.STENCIL_FUNC = STENCIL_FUNC_;
		this.STENCIL_INDEX = STENCIL_INDEX_;
		this.STENCIL_INDEX8 = STENCIL_INDEX8_;
		this.STENCIL_PASS_DEPTH_FAIL = STENCIL_PASS_DEPTH_FAIL_;
		this.STENCIL_PASS_DEPTH_PASS = STENCIL_PASS_DEPTH_PASS_;
		this.STENCIL_REF = STENCIL_REF_;
		this.STENCIL_TEST = STENCIL_TEST_;
		this.STENCIL_VALUE_MASK = STENCIL_VALUE_MASK_;
		this.STENCIL_WRITEMASK = STENCIL_WRITEMASK_;
		this.STREAM_DRAW = STREAM_DRAW_;
		this.SUBPIXEL_BITS = SUBPIXEL_BITS_;
		this.TEXTURE = TEXTURE_;
		this.TEXTURE0 = TEXTURE0_;
		this.TEXTURE1 = TEXTURE1_;
		this.TEXTURE2 = TEXTURE2_;
		this.TEXTURE3 = TEXTURE3_;
		this.TEXTURE4 = TEXTURE4_;
		this.TEXTURE5 = TEXTURE5_;
		this.TEXTURE6 = TEXTURE6_;
		this.TEXTURE7 = TEXTURE7_;
		this.TEXTURE8 = TEXTURE8_;
		this.TEXTURE9 = TEXTURE9_;
		this.TEXTURE10 = TEXTURE10_;
		this.TEXTURE11 = TEXTURE11_;
		this.TEXTURE12 = TEXTURE12_;
		this.TEXTURE13 = TEXTURE13_;
		this.TEXTURE14 = TEXTURE14_;
		this.TEXTURE15 = TEXTURE15_;
		this.TEXTURE16 = TEXTURE16_;
		this.TEXTURE17 = TEXTURE17_;
		this.TEXTURE18 = TEXTURE18_;
		this.TEXTURE19 = TEXTURE19_;
		this.TEXTURE20 = TEXTURE20_;
		this.TEXTURE21 = TEXTURE21_;
		this.TEXTURE22 = TEXTURE22_;
		this.TEXTURE23 = TEXTURE23_;
		this.TEXTURE24 = TEXTURE24_;
		this.TEXTURE25 = TEXTURE25_;
		this.TEXTURE26 = TEXTURE26_;
		this.TEXTURE27 = TEXTURE27_;
		this.TEXTURE28 = TEXTURE28_;
		this.TEXTURE29 = TEXTURE29_;
		this.TEXTURE30 = TEXTURE30_;
		this.TEXTURE31 = TEXTURE31_;
		this.TEXTURE_2D = TEXTURE_2D_;
		this.TEXTURE_BINDING_2D = TEXTURE_BINDING_2D_;
		this.TEXTURE_BINDING_CUBE_MAP = TEXTURE_BINDING_CUBE_MAP_;
		this.TEXTURE_CUBE_MAP = TEXTURE_CUBE_MAP_;
		this.TEXTURE_CUBE_MAP_NEGATIVE_X = TEXTURE_CUBE_MAP_NEGATIVE_X_;
		this.TEXTURE_CUBE_MAP_NEGATIVE_Y = TEXTURE_CUBE_MAP_NEGATIVE_Y_;
		this.TEXTURE_CUBE_MAP_NEGATIVE_Z = TEXTURE_CUBE_MAP_NEGATIVE_Z_;
		this.TEXTURE_CUBE_MAP_POSITIVE_X = TEXTURE_CUBE_MAP_POSITIVE_X_;
		this.TEXTURE_CUBE_MAP_POSITIVE_Y = TEXTURE_CUBE_MAP_POSITIVE_Y_;
		this.TEXTURE_CUBE_MAP_POSITIVE_Z = TEXTURE_CUBE_MAP_POSITIVE_Z_;
		this.TEXTURE_MAG_FILTER = TEXTURE_MAG_FILTER_;
		this.TEXTURE_MIN_FILTER = TEXTURE_MIN_FILTER_;
		this.TEXTURE_WRAP_S = TEXTURE_WRAP_S_;
		this.TEXTURE_WRAP_T = TEXTURE_WRAP_T_;
		this.TRIANGLES = TRIANGLES_;
		this.TRIANGLE_FAN = TRIANGLE_FAN_;
		this.TRIANGLE_STRIP = TRIANGLE_STRIP_;
		this.UNPACK_ALIGNMENT = UNPACK_ALIGNMENT_;
		this.UNPACK_COLORSPACE_CONVERSION_WEBGL = UNPACK_COLORSPACE_CONVERSION_WEBGL_;
		this.UNPACK_FLIP_Y_WEBGL = UNPACK_FLIP_Y_WEBGL_;
		this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = UNPACK_PREMULTIPLY_ALPHA_WEBGL_;
		this.UNSIGNED_BYTE = UNSIGNED_BYTE_;
		this.UNSIGNED_INT = UNSIGNED_INT_;
		this.UNSIGNED_SHORT = UNSIGNED_SHORT_;
		this.UNSIGNED_SHORT_4_4_4_4 = UNSIGNED_SHORT_4_4_4_4_;
		this.UNSIGNED_SHORT_5_5_5_1 = UNSIGNED_SHORT_5_5_5_1_;
		this.UNSIGNED_SHORT_5_6_5 = UNSIGNED_SHORT_5_6_5_;
		this.VALIDATE_STATUS = VALIDATE_STATUS_;
		this.VENDOR = VENDOR_;
		this.VERSION = VERSION_;
		this.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_;
		this.VERTEX_ATTRIB_ARRAY_ENABLED = VERTEX_ATTRIB_ARRAY_ENABLED_;
		this.VERTEX_ATTRIB_ARRAY_NORMALIZED = VERTEX_ATTRIB_ARRAY_NORMALIZED_;
		this.VERTEX_ATTRIB_ARRAY_POINTER = VERTEX_ATTRIB_ARRAY_POINTER_;
		this.VERTEX_ATTRIB_ARRAY_SIZE = VERTEX_ATTRIB_ARRAY_SIZE_;
		this.VERTEX_ATTRIB_ARRAY_STRIDE = VERTEX_ATTRIB_ARRAY_STRIDE_;
		this.VERTEX_ATTRIB_ARRAY_TYPE = VERTEX_ATTRIB_ARRAY_TYPE_;
		this.VERTEX_SHADER = VERTEX_SHADER_;
		this.VIEWPORT = VIEWPORT_;
		this.ZERO = ZERO_;
	});
	ptrType = $ptrType(Context);
	ptrType$1 = $ptrType(ContextAttributes);
	mapType = $mapType($String, $Bool);
	ptrType$2 = $ptrType(js.Object);
	sliceType = $sliceType(ptrType$2);
	sliceType$1 = $sliceType($String);
	sliceType$2 = $sliceType($Float32);
	DefaultAttributes = function() {
		var $ptr;
		return new ContextAttributes.ptr(true, true, false, true, true, false);
	};
	$pkg.DefaultAttributes = DefaultAttributes;
	NewContext = function(canvas, ca) {
		var $ptr, attrs, ca, canvas, ctx, gl;
		if ($global.WebGLRenderingContext === undefined) {
			return [ptrType.nil, errors.New("Your browser doesn't appear to support webgl.")];
		}
		if (ca === ptrType$1.nil) {
			ca = DefaultAttributes();
		}
		attrs = $makeMap($String.keyFor, [{ k: "alpha", v: ca.Alpha }, { k: "depth", v: ca.Depth }, { k: "stencil", v: ca.Stencil }, { k: "antialias", v: ca.Antialias }, { k: "premultipliedAlpha", v: ca.PremultipliedAlpha }, { k: "preserveDrawingBuffer", v: ca.PreserveDrawingBuffer }]);
		gl = canvas.getContext($externalize("webgl", $String), $externalize(attrs, mapType));
		if (gl === null) {
			gl = canvas.getContext($externalize("experimental-webgl", $String), $externalize(attrs, mapType));
			if (gl === null) {
				return [ptrType.nil, errors.New("Creating a webgl context has failed.")];
			}
		}
		ctx = new Context.ptr(null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		ctx.Object = gl;
		return [ctx, $ifaceNil];
	};
	$pkg.NewContext = NewContext;
	Context.ptr.prototype.GetContextAttributes = function() {
		var $ptr, c, ca;
		c = this;
		ca = c.Object.getContextAttributes();
		return new ContextAttributes.ptr(!!(ca.alpha), !!(ca.depth), !!(ca.stencil), !!(ca.antialias), !!(ca.premultipliedAlpha), !!(ca.preservedDrawingBuffer));
	};
	Context.prototype.GetContextAttributes = function() { return this.$val.GetContextAttributes(); };
	Context.ptr.prototype.ActiveTexture = function(texture) {
		var $ptr, c, texture;
		c = this;
		c.Object.activeTexture(texture);
	};
	Context.prototype.ActiveTexture = function(texture) { return this.$val.ActiveTexture(texture); };
	Context.ptr.prototype.AttachShader = function(program, shader) {
		var $ptr, c, program, shader;
		c = this;
		c.Object.attachShader(program, shader);
	};
	Context.prototype.AttachShader = function(program, shader) { return this.$val.AttachShader(program, shader); };
	Context.ptr.prototype.BindAttribLocation = function(program, index, name) {
		var $ptr, c, index, name, program;
		c = this;
		c.Object.bindAttribLocation(program, index, $externalize(name, $String));
	};
	Context.prototype.BindAttribLocation = function(program, index, name) { return this.$val.BindAttribLocation(program, index, name); };
	Context.ptr.prototype.BindBuffer = function(target, buffer) {
		var $ptr, buffer, c, target;
		c = this;
		c.Object.bindBuffer(target, buffer);
	};
	Context.prototype.BindBuffer = function(target, buffer) { return this.$val.BindBuffer(target, buffer); };
	Context.ptr.prototype.BindFramebuffer = function(target, framebuffer) {
		var $ptr, c, framebuffer, target;
		c = this;
		c.Object.bindFramebuffer(target, framebuffer);
	};
	Context.prototype.BindFramebuffer = function(target, framebuffer) { return this.$val.BindFramebuffer(target, framebuffer); };
	Context.ptr.prototype.BindRenderbuffer = function(target, renderbuffer) {
		var $ptr, c, renderbuffer, target;
		c = this;
		c.Object.bindRenderbuffer(target, renderbuffer);
	};
	Context.prototype.BindRenderbuffer = function(target, renderbuffer) { return this.$val.BindRenderbuffer(target, renderbuffer); };
	Context.ptr.prototype.BindTexture = function(target, texture) {
		var $ptr, c, target, texture;
		c = this;
		c.Object.bindTexture(target, texture);
	};
	Context.prototype.BindTexture = function(target, texture) { return this.$val.BindTexture(target, texture); };
	Context.ptr.prototype.BlendColor = function(r, g, b, a) {
		var $ptr, a, b, c, g, r;
		c = this;
		c.Object.blendColor(r, g, b, a);
	};
	Context.prototype.BlendColor = function(r, g, b, a) { return this.$val.BlendColor(r, g, b, a); };
	Context.ptr.prototype.BlendEquation = function(mode) {
		var $ptr, c, mode;
		c = this;
		c.Object.blendEquation(mode);
	};
	Context.prototype.BlendEquation = function(mode) { return this.$val.BlendEquation(mode); };
	Context.ptr.prototype.BlendEquationSeparate = function(modeRGB, modeAlpha) {
		var $ptr, c, modeAlpha, modeRGB;
		c = this;
		c.Object.blendEquationSeparate(modeRGB, modeAlpha);
	};
	Context.prototype.BlendEquationSeparate = function(modeRGB, modeAlpha) { return this.$val.BlendEquationSeparate(modeRGB, modeAlpha); };
	Context.ptr.prototype.BlendFunc = function(sfactor, dfactor) {
		var $ptr, c, dfactor, sfactor;
		c = this;
		c.Object.blendFunc(sfactor, dfactor);
	};
	Context.prototype.BlendFunc = function(sfactor, dfactor) { return this.$val.BlendFunc(sfactor, dfactor); };
	Context.ptr.prototype.BlendFuncSeparate = function(srcRGB, dstRGB, srcAlpha, dstAlpha) {
		var $ptr, c, dstAlpha, dstRGB, srcAlpha, srcRGB;
		c = this;
		c.Object.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
	};
	Context.prototype.BlendFuncSeparate = function(srcRGB, dstRGB, srcAlpha, dstAlpha) { return this.$val.BlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha); };
	Context.ptr.prototype.BufferData = function(target, data, usage) {
		var $ptr, c, data, target, usage;
		c = this;
		c.Object.bufferData(target, $externalize(data, $emptyInterface), usage);
	};
	Context.prototype.BufferData = function(target, data, usage) { return this.$val.BufferData(target, data, usage); };
	Context.ptr.prototype.BufferSubData = function(target, offset, data) {
		var $ptr, c, data, offset, target;
		c = this;
		c.Object.bufferSubData(target, offset, $externalize(data, $emptyInterface));
	};
	Context.prototype.BufferSubData = function(target, offset, data) { return this.$val.BufferSubData(target, offset, data); };
	Context.ptr.prototype.CheckFramebufferStatus = function(target) {
		var $ptr, c, target;
		c = this;
		return $parseInt(c.Object.checkFramebufferStatus(target)) >> 0;
	};
	Context.prototype.CheckFramebufferStatus = function(target) { return this.$val.CheckFramebufferStatus(target); };
	Context.ptr.prototype.Clear = function(flags) {
		var $ptr, c, flags;
		c = this;
		c.Object.clear(flags);
	};
	Context.prototype.Clear = function(flags) { return this.$val.Clear(flags); };
	Context.ptr.prototype.ClearColor = function(r, g, b, a) {
		var $ptr, a, b, c, g, r;
		c = this;
		c.Object.clearColor(r, g, b, a);
	};
	Context.prototype.ClearColor = function(r, g, b, a) { return this.$val.ClearColor(r, g, b, a); };
	Context.ptr.prototype.ClearDepth = function(depth) {
		var $ptr, c, depth;
		c = this;
		c.Object.clearDepth(depth);
	};
	Context.prototype.ClearDepth = function(depth) { return this.$val.ClearDepth(depth); };
	Context.ptr.prototype.ClearStencil = function(s) {
		var $ptr, c, s;
		c = this;
		c.Object.clearStencil(s);
	};
	Context.prototype.ClearStencil = function(s) { return this.$val.ClearStencil(s); };
	Context.ptr.prototype.ColorMask = function(r, g, b, a) {
		var $ptr, a, b, c, g, r;
		c = this;
		c.Object.colorMask($externalize(r, $Bool), $externalize(g, $Bool), $externalize(b, $Bool), $externalize(a, $Bool));
	};
	Context.prototype.ColorMask = function(r, g, b, a) { return this.$val.ColorMask(r, g, b, a); };
	Context.ptr.prototype.CompileShader = function(shader) {
		var $ptr, c, shader;
		c = this;
		c.Object.compileShader(shader);
	};
	Context.prototype.CompileShader = function(shader) { return this.$val.CompileShader(shader); };
	Context.ptr.prototype.CopyTexImage2D = function(target, level, internal, x, y, w, h, border) {
		var $ptr, border, c, h, internal, level, target, w, x, y;
		c = this;
		c.Object.copyTexImage2D(target, level, internal, x, y, w, h, border);
	};
	Context.prototype.CopyTexImage2D = function(target, level, internal, x, y, w, h, border) { return this.$val.CopyTexImage2D(target, level, internal, x, y, w, h, border); };
	Context.ptr.prototype.CopyTexSubImage2D = function(target, level, xoffset, yoffset, x, y, w, h) {
		var $ptr, c, h, level, target, w, x, xoffset, y, yoffset;
		c = this;
		c.Object.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, w, h);
	};
	Context.prototype.CopyTexSubImage2D = function(target, level, xoffset, yoffset, x, y, w, h) { return this.$val.CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, w, h); };
	Context.ptr.prototype.CreateBuffer = function() {
		var $ptr, c;
		c = this;
		return c.Object.createBuffer();
	};
	Context.prototype.CreateBuffer = function() { return this.$val.CreateBuffer(); };
	Context.ptr.prototype.CreateFramebuffer = function() {
		var $ptr, c;
		c = this;
		return c.Object.createFramebuffer();
	};
	Context.prototype.CreateFramebuffer = function() { return this.$val.CreateFramebuffer(); };
	Context.ptr.prototype.CreateProgram = function() {
		var $ptr, c;
		c = this;
		return c.Object.createProgram();
	};
	Context.prototype.CreateProgram = function() { return this.$val.CreateProgram(); };
	Context.ptr.prototype.CreateRenderbuffer = function() {
		var $ptr, c;
		c = this;
		return c.Object.createRenderbuffer();
	};
	Context.prototype.CreateRenderbuffer = function() { return this.$val.CreateRenderbuffer(); };
	Context.ptr.prototype.CreateShader = function(typ) {
		var $ptr, c, typ;
		c = this;
		return c.Object.createShader(typ);
	};
	Context.prototype.CreateShader = function(typ) { return this.$val.CreateShader(typ); };
	Context.ptr.prototype.CreateTexture = function() {
		var $ptr, c;
		c = this;
		return c.Object.createTexture();
	};
	Context.prototype.CreateTexture = function() { return this.$val.CreateTexture(); };
	Context.ptr.prototype.CullFace = function(mode) {
		var $ptr, c, mode;
		c = this;
		c.Object.cullFace(mode);
	};
	Context.prototype.CullFace = function(mode) { return this.$val.CullFace(mode); };
	Context.ptr.prototype.DeleteBuffer = function(buffer) {
		var $ptr, buffer, c;
		c = this;
		c.Object.deleteBuffer(buffer);
	};
	Context.prototype.DeleteBuffer = function(buffer) { return this.$val.DeleteBuffer(buffer); };
	Context.ptr.prototype.DeleteFramebuffer = function(framebuffer) {
		var $ptr, c, framebuffer;
		c = this;
		c.Object.deleteFramebuffer(framebuffer);
	};
	Context.prototype.DeleteFramebuffer = function(framebuffer) { return this.$val.DeleteFramebuffer(framebuffer); };
	Context.ptr.prototype.DeleteProgram = function(program) {
		var $ptr, c, program;
		c = this;
		c.Object.deleteProgram(program);
	};
	Context.prototype.DeleteProgram = function(program) { return this.$val.DeleteProgram(program); };
	Context.ptr.prototype.DeleteRenderbuffer = function(renderbuffer) {
		var $ptr, c, renderbuffer;
		c = this;
		c.Object.deleteRenderbuffer(renderbuffer);
	};
	Context.prototype.DeleteRenderbuffer = function(renderbuffer) { return this.$val.DeleteRenderbuffer(renderbuffer); };
	Context.ptr.prototype.DeleteShader = function(shader) {
		var $ptr, c, shader;
		c = this;
		c.Object.deleteShader(shader);
	};
	Context.prototype.DeleteShader = function(shader) { return this.$val.DeleteShader(shader); };
	Context.ptr.prototype.DeleteTexture = function(texture) {
		var $ptr, c, texture;
		c = this;
		c.Object.deleteTexture(texture);
	};
	Context.prototype.DeleteTexture = function(texture) { return this.$val.DeleteTexture(texture); };
	Context.ptr.prototype.DepthFunc = function(fun) {
		var $ptr, c, fun;
		c = this;
		c.Object.depthFunc(fun);
	};
	Context.prototype.DepthFunc = function(fun) { return this.$val.DepthFunc(fun); };
	Context.ptr.prototype.DepthMask = function(flag) {
		var $ptr, c, flag;
		c = this;
		c.Object.depthMask($externalize(flag, $Bool));
	};
	Context.prototype.DepthMask = function(flag) { return this.$val.DepthMask(flag); };
	Context.ptr.prototype.DepthRange = function(zNear, zFar) {
		var $ptr, c, zFar, zNear;
		c = this;
		c.Object.depthRange(zNear, zFar);
	};
	Context.prototype.DepthRange = function(zNear, zFar) { return this.$val.DepthRange(zNear, zFar); };
	Context.ptr.prototype.DetachShader = function(program, shader) {
		var $ptr, c, program, shader;
		c = this;
		c.Object.detachShader(program, shader);
	};
	Context.prototype.DetachShader = function(program, shader) { return this.$val.DetachShader(program, shader); };
	Context.ptr.prototype.Disable = function(cap) {
		var $ptr, c, cap;
		c = this;
		c.Object.disable(cap);
	};
	Context.prototype.Disable = function(cap) { return this.$val.Disable(cap); };
	Context.ptr.prototype.DisableVertexAttribArray = function(index) {
		var $ptr, c, index;
		c = this;
		c.Object.disableVertexAttribArray(index);
	};
	Context.prototype.DisableVertexAttribArray = function(index) { return this.$val.DisableVertexAttribArray(index); };
	Context.ptr.prototype.DrawArrays = function(mode, first, count) {
		var $ptr, c, count, first, mode;
		c = this;
		c.Object.drawArrays(mode, first, count);
	};
	Context.prototype.DrawArrays = function(mode, first, count) { return this.$val.DrawArrays(mode, first, count); };
	Context.ptr.prototype.DrawElements = function(mode, count, typ, offset) {
		var $ptr, c, count, mode, offset, typ;
		c = this;
		c.Object.drawElements(mode, count, typ, offset);
	};
	Context.prototype.DrawElements = function(mode, count, typ, offset) { return this.$val.DrawElements(mode, count, typ, offset); };
	Context.ptr.prototype.Enable = function(cap) {
		var $ptr, c, cap;
		c = this;
		c.Object.enable(cap);
	};
	Context.prototype.Enable = function(cap) { return this.$val.Enable(cap); };
	Context.ptr.prototype.EnableVertexAttribArray = function(index) {
		var $ptr, c, index;
		c = this;
		c.Object.enableVertexAttribArray(index);
	};
	Context.prototype.EnableVertexAttribArray = function(index) { return this.$val.EnableVertexAttribArray(index); };
	Context.ptr.prototype.Finish = function() {
		var $ptr, c;
		c = this;
		c.Object.finish();
	};
	Context.prototype.Finish = function() { return this.$val.Finish(); };
	Context.ptr.prototype.Flush = function() {
		var $ptr, c;
		c = this;
		c.Object.flush();
	};
	Context.prototype.Flush = function() { return this.$val.Flush(); };
	Context.ptr.prototype.FrameBufferRenderBuffer = function(target, attachment, renderbufferTarget, renderbuffer) {
		var $ptr, attachment, c, renderbuffer, renderbufferTarget, target;
		c = this;
		c.Object.framebufferRenderBuffer(target, attachment, renderbufferTarget, renderbuffer);
	};
	Context.prototype.FrameBufferRenderBuffer = function(target, attachment, renderbufferTarget, renderbuffer) { return this.$val.FrameBufferRenderBuffer(target, attachment, renderbufferTarget, renderbuffer); };
	Context.ptr.prototype.FramebufferTexture2D = function(target, attachment, textarget, texture, level) {
		var $ptr, attachment, c, level, target, textarget, texture;
		c = this;
		c.Object.framebufferTexture2D(target, attachment, textarget, texture, level);
	};
	Context.prototype.FramebufferTexture2D = function(target, attachment, textarget, texture, level) { return this.$val.FramebufferTexture2D(target, attachment, textarget, texture, level); };
	Context.ptr.prototype.FrontFace = function(mode) {
		var $ptr, c, mode;
		c = this;
		c.Object.frontFace(mode);
	};
	Context.prototype.FrontFace = function(mode) { return this.$val.FrontFace(mode); };
	Context.ptr.prototype.GenerateMipmap = function(target) {
		var $ptr, c, target;
		c = this;
		c.Object.generateMipmap(target);
	};
	Context.prototype.GenerateMipmap = function(target) { return this.$val.GenerateMipmap(target); };
	Context.ptr.prototype.GetActiveAttrib = function(program, index) {
		var $ptr, c, index, program;
		c = this;
		return c.Object.getActiveAttrib(program, index);
	};
	Context.prototype.GetActiveAttrib = function(program, index) { return this.$val.GetActiveAttrib(program, index); };
	Context.ptr.prototype.GetActiveUniform = function(program, index) {
		var $ptr, c, index, program;
		c = this;
		return c.Object.getActiveUniform(program, index);
	};
	Context.prototype.GetActiveUniform = function(program, index) { return this.$val.GetActiveUniform(program, index); };
	Context.ptr.prototype.GetAttachedShaders = function(program) {
		var $ptr, c, i, objs, program, shaders;
		c = this;
		objs = c.Object.getAttachedShaders(program);
		shaders = $makeSlice(sliceType, $parseInt(objs.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(objs.length))) { break; }
			((i < 0 || i >= shaders.$length) ? $throwRuntimeError("index out of range") : shaders.$array[shaders.$offset + i] = objs[i]);
			i = i + (1) >> 0;
		}
		return shaders;
	};
	Context.prototype.GetAttachedShaders = function(program) { return this.$val.GetAttachedShaders(program); };
	Context.ptr.prototype.GetAttribLocation = function(program, name) {
		var $ptr, c, name, program;
		c = this;
		return $parseInt(c.Object.getAttribLocation(program, $externalize(name, $String))) >> 0;
	};
	Context.prototype.GetAttribLocation = function(program, name) { return this.$val.GetAttribLocation(program, name); };
	Context.ptr.prototype.GetBufferParameter = function(target, pname) {
		var $ptr, c, pname, target;
		c = this;
		return c.Object.getBufferParameter(target, pname);
	};
	Context.prototype.GetBufferParameter = function(target, pname) { return this.$val.GetBufferParameter(target, pname); };
	Context.ptr.prototype.GetParameter = function(pname) {
		var $ptr, c, pname;
		c = this;
		return c.Object.getParameter(pname);
	};
	Context.prototype.GetParameter = function(pname) { return this.$val.GetParameter(pname); };
	Context.ptr.prototype.GetError = function() {
		var $ptr, c;
		c = this;
		return $parseInt(c.Object.getError()) >> 0;
	};
	Context.prototype.GetError = function() { return this.$val.GetError(); };
	Context.ptr.prototype.GetExtension = function(name) {
		var $ptr, c, name;
		c = this;
		return c.Object.getExtension($externalize(name, $String));
	};
	Context.prototype.GetExtension = function(name) { return this.$val.GetExtension(name); };
	Context.ptr.prototype.GetFramebufferAttachmentParameter = function(target, attachment, pname) {
		var $ptr, attachment, c, pname, target;
		c = this;
		return c.Object.getFramebufferAttachmentParameter(target, attachment, pname);
	};
	Context.prototype.GetFramebufferAttachmentParameter = function(target, attachment, pname) { return this.$val.GetFramebufferAttachmentParameter(target, attachment, pname); };
	Context.ptr.prototype.GetProgramParameteri = function(program, pname) {
		var $ptr, c, pname, program;
		c = this;
		return $parseInt(c.Object.getProgramParameter(program, pname)) >> 0;
	};
	Context.prototype.GetProgramParameteri = function(program, pname) { return this.$val.GetProgramParameteri(program, pname); };
	Context.ptr.prototype.GetProgramParameterb = function(program, pname) {
		var $ptr, c, pname, program;
		c = this;
		return !!(c.Object.getProgramParameter(program, pname));
	};
	Context.prototype.GetProgramParameterb = function(program, pname) { return this.$val.GetProgramParameterb(program, pname); };
	Context.ptr.prototype.GetProgramInfoLog = function(program) {
		var $ptr, c, program;
		c = this;
		return $internalize(c.Object.getProgramInfoLog(program), $String);
	};
	Context.prototype.GetProgramInfoLog = function(program) { return this.$val.GetProgramInfoLog(program); };
	Context.ptr.prototype.GetRenderbufferParameter = function(target, pname) {
		var $ptr, c, pname, target;
		c = this;
		return c.Object.getRenderbufferParameter(target, pname);
	};
	Context.prototype.GetRenderbufferParameter = function(target, pname) { return this.$val.GetRenderbufferParameter(target, pname); };
	Context.ptr.prototype.GetShaderParameter = function(shader, pname) {
		var $ptr, c, pname, shader;
		c = this;
		return c.Object.getShaderParameter(shader, pname);
	};
	Context.prototype.GetShaderParameter = function(shader, pname) { return this.$val.GetShaderParameter(shader, pname); };
	Context.ptr.prototype.GetShaderParameterb = function(shader, pname) {
		var $ptr, c, pname, shader;
		c = this;
		return !!(c.Object.getShaderParameter(shader, pname));
	};
	Context.prototype.GetShaderParameterb = function(shader, pname) { return this.$val.GetShaderParameterb(shader, pname); };
	Context.ptr.prototype.GetShaderInfoLog = function(shader) {
		var $ptr, c, shader;
		c = this;
		return $internalize(c.Object.getShaderInfoLog(shader), $String);
	};
	Context.prototype.GetShaderInfoLog = function(shader) { return this.$val.GetShaderInfoLog(shader); };
	Context.ptr.prototype.GetShaderSource = function(shader) {
		var $ptr, c, shader;
		c = this;
		return $internalize(c.Object.getShaderSource(shader), $String);
	};
	Context.prototype.GetShaderSource = function(shader) { return this.$val.GetShaderSource(shader); };
	Context.ptr.prototype.GetSupportedExtensions = function() {
		var $ptr, c, ext, extensions, i;
		c = this;
		ext = c.Object.getSupportedExtensions();
		extensions = $makeSlice(sliceType$1, $parseInt(ext.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(ext.length))) { break; }
			((i < 0 || i >= extensions.$length) ? $throwRuntimeError("index out of range") : extensions.$array[extensions.$offset + i] = $internalize(ext[i], $String));
			i = i + (1) >> 0;
		}
		return extensions;
	};
	Context.prototype.GetSupportedExtensions = function() { return this.$val.GetSupportedExtensions(); };
	Context.ptr.prototype.GetTexParameter = function(target, pname) {
		var $ptr, c, pname, target;
		c = this;
		return c.Object.getTexParameter(target, pname);
	};
	Context.prototype.GetTexParameter = function(target, pname) { return this.$val.GetTexParameter(target, pname); };
	Context.ptr.prototype.GetUniform = function(program, location) {
		var $ptr, c, location, program;
		c = this;
		return c.Object.getUniform(program, location);
	};
	Context.prototype.GetUniform = function(program, location) { return this.$val.GetUniform(program, location); };
	Context.ptr.prototype.GetUniformLocation = function(program, name) {
		var $ptr, c, name, program;
		c = this;
		return c.Object.getUniformLocation(program, $externalize(name, $String));
	};
	Context.prototype.GetUniformLocation = function(program, name) { return this.$val.GetUniformLocation(program, name); };
	Context.ptr.prototype.GetVertexAttrib = function(index, pname) {
		var $ptr, c, index, pname;
		c = this;
		return c.Object.getVertexAttrib(index, pname);
	};
	Context.prototype.GetVertexAttrib = function(index, pname) { return this.$val.GetVertexAttrib(index, pname); };
	Context.ptr.prototype.GetVertexAttribOffset = function(index, pname) {
		var $ptr, c, index, pname;
		c = this;
		return $parseInt(c.Object.getVertexAttribOffset(index, pname)) >> 0;
	};
	Context.prototype.GetVertexAttribOffset = function(index, pname) { return this.$val.GetVertexAttribOffset(index, pname); };
	Context.ptr.prototype.IsBuffer = function(buffer) {
		var $ptr, buffer, c;
		c = this;
		return !!(c.Object.isBuffer(buffer));
	};
	Context.prototype.IsBuffer = function(buffer) { return this.$val.IsBuffer(buffer); };
	Context.ptr.prototype.IsContextLost = function() {
		var $ptr, c;
		c = this;
		return !!(c.Object.isContextLost());
	};
	Context.prototype.IsContextLost = function() { return this.$val.IsContextLost(); };
	Context.ptr.prototype.IsFramebuffer = function(framebuffer) {
		var $ptr, c, framebuffer;
		c = this;
		return !!(c.Object.isFramebuffer(framebuffer));
	};
	Context.prototype.IsFramebuffer = function(framebuffer) { return this.$val.IsFramebuffer(framebuffer); };
	Context.ptr.prototype.IsProgram = function(program) {
		var $ptr, c, program;
		c = this;
		return !!(c.Object.isProgram(program));
	};
	Context.prototype.IsProgram = function(program) { return this.$val.IsProgram(program); };
	Context.ptr.prototype.IsRenderbuffer = function(renderbuffer) {
		var $ptr, c, renderbuffer;
		c = this;
		return !!(c.Object.isRenderbuffer(renderbuffer));
	};
	Context.prototype.IsRenderbuffer = function(renderbuffer) { return this.$val.IsRenderbuffer(renderbuffer); };
	Context.ptr.prototype.IsShader = function(shader) {
		var $ptr, c, shader;
		c = this;
		return !!(c.Object.isShader(shader));
	};
	Context.prototype.IsShader = function(shader) { return this.$val.IsShader(shader); };
	Context.ptr.prototype.IsTexture = function(texture) {
		var $ptr, c, texture;
		c = this;
		return !!(c.Object.isTexture(texture));
	};
	Context.prototype.IsTexture = function(texture) { return this.$val.IsTexture(texture); };
	Context.ptr.prototype.IsEnabled = function(capability) {
		var $ptr, c, capability;
		c = this;
		return !!(c.Object.isEnabled(capability));
	};
	Context.prototype.IsEnabled = function(capability) { return this.$val.IsEnabled(capability); };
	Context.ptr.prototype.LineWidth = function(width) {
		var $ptr, c, width;
		c = this;
		c.Object.lineWidth(width);
	};
	Context.prototype.LineWidth = function(width) { return this.$val.LineWidth(width); };
	Context.ptr.prototype.LinkProgram = function(program) {
		var $ptr, c, program;
		c = this;
		c.Object.linkProgram(program);
	};
	Context.prototype.LinkProgram = function(program) { return this.$val.LinkProgram(program); };
	Context.ptr.prototype.PixelStorei = function(pname, param) {
		var $ptr, c, param, pname;
		c = this;
		c.Object.pixelStorei(pname, param);
	};
	Context.prototype.PixelStorei = function(pname, param) { return this.$val.PixelStorei(pname, param); };
	Context.ptr.prototype.PolygonOffset = function(factor, units) {
		var $ptr, c, factor, units;
		c = this;
		c.Object.polygonOffset(factor, units);
	};
	Context.prototype.PolygonOffset = function(factor, units) { return this.$val.PolygonOffset(factor, units); };
	Context.ptr.prototype.ReadPixels = function(x, y, width, height, format, typ, pixels) {
		var $ptr, c, format, height, pixels, typ, width, x, y;
		c = this;
		c.Object.readPixels(x, y, width, height, format, typ, pixels);
	};
	Context.prototype.ReadPixels = function(x, y, width, height, format, typ, pixels) { return this.$val.ReadPixels(x, y, width, height, format, typ, pixels); };
	Context.ptr.prototype.RenderbufferStorage = function(target, internalFormat, width, height) {
		var $ptr, c, height, internalFormat, target, width;
		c = this;
		c.Object.renderbufferStorage(target, internalFormat, width, height);
	};
	Context.prototype.RenderbufferStorage = function(target, internalFormat, width, height) { return this.$val.RenderbufferStorage(target, internalFormat, width, height); };
	Context.ptr.prototype.Scissor = function(x, y, width, height) {
		var $ptr, c, height, width, x, y;
		c = this;
		c.Object.scissor(x, y, width, height);
	};
	Context.prototype.Scissor = function(x, y, width, height) { return this.$val.Scissor(x, y, width, height); };
	Context.ptr.prototype.ShaderSource = function(shader, source) {
		var $ptr, c, shader, source;
		c = this;
		c.Object.shaderSource(shader, $externalize(source, $String));
	};
	Context.prototype.ShaderSource = function(shader, source) { return this.$val.ShaderSource(shader, source); };
	Context.ptr.prototype.TexImage2D = function(target, level, internalFormat, format, kind, image) {
		var $ptr, c, format, image, internalFormat, kind, level, target;
		c = this;
		c.Object.texImage2D(target, level, internalFormat, format, kind, image);
	};
	Context.prototype.TexImage2D = function(target, level, internalFormat, format, kind, image) { return this.$val.TexImage2D(target, level, internalFormat, format, kind, image); };
	Context.ptr.prototype.TexParameteri = function(target, pname, param) {
		var $ptr, c, param, pname, target;
		c = this;
		c.Object.texParameteri(target, pname, param);
	};
	Context.prototype.TexParameteri = function(target, pname, param) { return this.$val.TexParameteri(target, pname, param); };
	Context.ptr.prototype.TexSubImage2D = function(target, level, xoffset, yoffset, format, typ, image) {
		var $ptr, c, format, image, level, target, typ, xoffset, yoffset;
		c = this;
		c.Object.texSubImage2D(target, level, xoffset, yoffset, format, typ, image);
	};
	Context.prototype.TexSubImage2D = function(target, level, xoffset, yoffset, format, typ, image) { return this.$val.TexSubImage2D(target, level, xoffset, yoffset, format, typ, image); };
	Context.ptr.prototype.Uniform1f = function(location, x) {
		var $ptr, c, location, x;
		c = this;
		c.Object.uniform1f(location, x);
	};
	Context.prototype.Uniform1f = function(location, x) { return this.$val.Uniform1f(location, x); };
	Context.ptr.prototype.Uniform1i = function(location, x) {
		var $ptr, c, location, x;
		c = this;
		c.Object.uniform1i(location, x);
	};
	Context.prototype.Uniform1i = function(location, x) { return this.$val.Uniform1i(location, x); };
	Context.ptr.prototype.Uniform2f = function(location, x, y) {
		var $ptr, c, location, x, y;
		c = this;
		c.Object.uniform2f(location, x, y);
	};
	Context.prototype.Uniform2f = function(location, x, y) { return this.$val.Uniform2f(location, x, y); };
	Context.ptr.prototype.Uniform2i = function(location, x, y) {
		var $ptr, c, location, x, y;
		c = this;
		c.Object.uniform2i(location, x, y);
	};
	Context.prototype.Uniform2i = function(location, x, y) { return this.$val.Uniform2i(location, x, y); };
	Context.ptr.prototype.Uniform3f = function(location, x, y, z) {
		var $ptr, c, location, x, y, z;
		c = this;
		c.Object.uniform3f(location, x, y, z);
	};
	Context.prototype.Uniform3f = function(location, x, y, z) { return this.$val.Uniform3f(location, x, y, z); };
	Context.ptr.prototype.Uniform3i = function(location, x, y, z) {
		var $ptr, c, location, x, y, z;
		c = this;
		c.Object.uniform3i(location, x, y, z);
	};
	Context.prototype.Uniform3i = function(location, x, y, z) { return this.$val.Uniform3i(location, x, y, z); };
	Context.ptr.prototype.Uniform4f = function(location, x, y, z, w) {
		var $ptr, c, location, w, x, y, z;
		c = this;
		c.Object.uniform4f(location, x, y, z, w);
	};
	Context.prototype.Uniform4f = function(location, x, y, z, w) { return this.$val.Uniform4f(location, x, y, z, w); };
	Context.ptr.prototype.Uniform4i = function(location, x, y, z, w) {
		var $ptr, c, location, w, x, y, z;
		c = this;
		c.Object.uniform4i(location, x, y, z, w);
	};
	Context.prototype.Uniform4i = function(location, x, y, z, w) { return this.$val.Uniform4i(location, x, y, z, w); };
	Context.ptr.prototype.UniformMatrix2fv = function(location, transpose, value) {
		var $ptr, c, location, transpose, value;
		c = this;
		c.Object.uniformMatrix2fv(location, $externalize(transpose, $Bool), $externalize(value, sliceType$2));
	};
	Context.prototype.UniformMatrix2fv = function(location, transpose, value) { return this.$val.UniformMatrix2fv(location, transpose, value); };
	Context.ptr.prototype.UniformMatrix3fv = function(location, transpose, value) {
		var $ptr, c, location, transpose, value;
		c = this;
		c.Object.uniformMatrix3fv(location, $externalize(transpose, $Bool), $externalize(value, sliceType$2));
	};
	Context.prototype.UniformMatrix3fv = function(location, transpose, value) { return this.$val.UniformMatrix3fv(location, transpose, value); };
	Context.ptr.prototype.UniformMatrix4fv = function(location, transpose, value) {
		var $ptr, c, location, transpose, value;
		c = this;
		c.Object.uniformMatrix4fv(location, $externalize(transpose, $Bool), $externalize(value, sliceType$2));
	};
	Context.prototype.UniformMatrix4fv = function(location, transpose, value) { return this.$val.UniformMatrix4fv(location, transpose, value); };
	Context.ptr.prototype.UseProgram = function(program) {
		var $ptr, c, program;
		c = this;
		c.Object.useProgram(program);
	};
	Context.prototype.UseProgram = function(program) { return this.$val.UseProgram(program); };
	Context.ptr.prototype.ValidateProgram = function(program) {
		var $ptr, c, program;
		c = this;
		c.Object.validateProgram(program);
	};
	Context.prototype.ValidateProgram = function(program) { return this.$val.ValidateProgram(program); };
	Context.ptr.prototype.VertexAttribPointer = function(index, size, typ, normal, stride, offset) {
		var $ptr, c, index, normal, offset, size, stride, typ;
		c = this;
		c.Object.vertexAttribPointer(index, size, typ, $externalize(normal, $Bool), stride, offset);
	};
	Context.prototype.VertexAttribPointer = function(index, size, typ, normal, stride, offset) { return this.$val.VertexAttribPointer(index, size, typ, normal, stride, offset); };
	Context.ptr.prototype.Viewport = function(x, y, width, height) {
		var $ptr, c, height, width, x, y;
		c = this;
		c.Object.viewport(x, y, width, height);
	};
	Context.prototype.Viewport = function(x, y, width, height) { return this.$val.Viewport(x, y, width, height); };
	ptrType.methods = [{prop: "GetContextAttributes", name: "GetContextAttributes", pkg: "", typ: $funcType([], [ContextAttributes], false)}, {prop: "ActiveTexture", name: "ActiveTexture", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "AttachShader", name: "AttachShader", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [], false)}, {prop: "BindAttribLocation", name: "BindAttribLocation", pkg: "", typ: $funcType([ptrType$2, $Int, $String], [], false)}, {prop: "BindBuffer", name: "BindBuffer", pkg: "", typ: $funcType([$Int, ptrType$2], [], false)}, {prop: "BindFramebuffer", name: "BindFramebuffer", pkg: "", typ: $funcType([$Int, ptrType$2], [], false)}, {prop: "BindRenderbuffer", name: "BindRenderbuffer", pkg: "", typ: $funcType([$Int, ptrType$2], [], false)}, {prop: "BindTexture", name: "BindTexture", pkg: "", typ: $funcType([$Int, ptrType$2], [], false)}, {prop: "BlendColor", name: "BlendColor", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [], false)}, {prop: "BlendEquation", name: "BlendEquation", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "BlendEquationSeparate", name: "BlendEquationSeparate", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "BlendFunc", name: "BlendFunc", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "BlendFuncSeparate", name: "BlendFuncSeparate", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "BufferData", name: "BufferData", pkg: "", typ: $funcType([$Int, $emptyInterface, $Int], [], false)}, {prop: "BufferSubData", name: "BufferSubData", pkg: "", typ: $funcType([$Int, $Int, $emptyInterface], [], false)}, {prop: "CheckFramebufferStatus", name: "CheckFramebufferStatus", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "ClearColor", name: "ClearColor", pkg: "", typ: $funcType([$Float32, $Float32, $Float32, $Float32], [], false)}, {prop: "ClearDepth", name: "ClearDepth", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "ClearStencil", name: "ClearStencil", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "ColorMask", name: "ColorMask", pkg: "", typ: $funcType([$Bool, $Bool, $Bool, $Bool], [], false)}, {prop: "CompileShader", name: "CompileShader", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "CopyTexImage2D", name: "CopyTexImage2D", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int, $Int, $Int], [], false)}, {prop: "CopyTexSubImage2D", name: "CopyTexSubImage2D", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int, $Int, $Int], [], false)}, {prop: "CreateBuffer", name: "CreateBuffer", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "CreateFramebuffer", name: "CreateFramebuffer", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "CreateProgram", name: "CreateProgram", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "CreateRenderbuffer", name: "CreateRenderbuffer", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "CreateShader", name: "CreateShader", pkg: "", typ: $funcType([$Int], [ptrType$2], false)}, {prop: "CreateTexture", name: "CreateTexture", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "CullFace", name: "CullFace", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "DeleteBuffer", name: "DeleteBuffer", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "DeleteFramebuffer", name: "DeleteFramebuffer", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "DeleteProgram", name: "DeleteProgram", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "DeleteRenderbuffer", name: "DeleteRenderbuffer", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "DeleteShader", name: "DeleteShader", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "DeleteTexture", name: "DeleteTexture", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "DepthFunc", name: "DepthFunc", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "DepthMask", name: "DepthMask", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "DepthRange", name: "DepthRange", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "DetachShader", name: "DetachShader", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [], false)}, {prop: "Disable", name: "Disable", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "DisableVertexAttribArray", name: "DisableVertexAttribArray", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "DrawArrays", name: "DrawArrays", pkg: "", typ: $funcType([$Int, $Int, $Int], [], false)}, {prop: "DrawElements", name: "DrawElements", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "Enable", name: "Enable", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "EnableVertexAttribArray", name: "EnableVertexAttribArray", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Finish", name: "Finish", pkg: "", typ: $funcType([], [], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [], false)}, {prop: "FrameBufferRenderBuffer", name: "FrameBufferRenderBuffer", pkg: "", typ: $funcType([$Int, $Int, $Int, ptrType$2], [], false)}, {prop: "FramebufferTexture2D", name: "FramebufferTexture2D", pkg: "", typ: $funcType([$Int, $Int, $Int, ptrType$2, $Int], [], false)}, {prop: "FrontFace", name: "FrontFace", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GenerateMipmap", name: "GenerateMipmap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GetActiveAttrib", name: "GetActiveAttrib", pkg: "", typ: $funcType([ptrType$2, $Int], [ptrType$2], false)}, {prop: "GetActiveUniform", name: "GetActiveUniform", pkg: "", typ: $funcType([ptrType$2, $Int], [ptrType$2], false)}, {prop: "GetAttachedShaders", name: "GetAttachedShaders", pkg: "", typ: $funcType([ptrType$2], [sliceType], false)}, {prop: "GetAttribLocation", name: "GetAttribLocation", pkg: "", typ: $funcType([ptrType$2, $String], [$Int], false)}, {prop: "GetBufferParameter", name: "GetBufferParameter", pkg: "", typ: $funcType([$Int, $Int], [ptrType$2], false)}, {prop: "GetParameter", name: "GetParameter", pkg: "", typ: $funcType([$Int], [ptrType$2], false)}, {prop: "GetError", name: "GetError", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetExtension", name: "GetExtension", pkg: "", typ: $funcType([$String], [ptrType$2], false)}, {prop: "GetFramebufferAttachmentParameter", name: "GetFramebufferAttachmentParameter", pkg: "", typ: $funcType([$Int, $Int, $Int], [ptrType$2], false)}, {prop: "GetProgramParameteri", name: "GetProgramParameteri", pkg: "", typ: $funcType([ptrType$2, $Int], [$Int], false)}, {prop: "GetProgramParameterb", name: "GetProgramParameterb", pkg: "", typ: $funcType([ptrType$2, $Int], [$Bool], false)}, {prop: "GetProgramInfoLog", name: "GetProgramInfoLog", pkg: "", typ: $funcType([ptrType$2], [$String], false)}, {prop: "GetRenderbufferParameter", name: "GetRenderbufferParameter", pkg: "", typ: $funcType([$Int, $Int], [ptrType$2], false)}, {prop: "GetShaderParameter", name: "GetShaderParameter", pkg: "", typ: $funcType([ptrType$2, $Int], [ptrType$2], false)}, {prop: "GetShaderParameterb", name: "GetShaderParameterb", pkg: "", typ: $funcType([ptrType$2, $Int], [$Bool], false)}, {prop: "GetShaderInfoLog", name: "GetShaderInfoLog", pkg: "", typ: $funcType([ptrType$2], [$String], false)}, {prop: "GetShaderSource", name: "GetShaderSource", pkg: "", typ: $funcType([ptrType$2], [$String], false)}, {prop: "GetSupportedExtensions", name: "GetSupportedExtensions", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "GetTexParameter", name: "GetTexParameter", pkg: "", typ: $funcType([$Int, $Int], [ptrType$2], false)}, {prop: "GetUniform", name: "GetUniform", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "GetUniformLocation", name: "GetUniformLocation", pkg: "", typ: $funcType([ptrType$2, $String], [ptrType$2], false)}, {prop: "GetVertexAttrib", name: "GetVertexAttrib", pkg: "", typ: $funcType([$Int, $Int], [ptrType$2], false)}, {prop: "GetVertexAttribOffset", name: "GetVertexAttribOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "IsBuffer", name: "IsBuffer", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "IsContextLost", name: "IsContextLost", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsFramebuffer", name: "IsFramebuffer", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "IsProgram", name: "IsProgram", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "IsRenderbuffer", name: "IsRenderbuffer", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "IsShader", name: "IsShader", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "IsTexture", name: "IsTexture", pkg: "", typ: $funcType([ptrType$2], [$Bool], false)}, {prop: "IsEnabled", name: "IsEnabled", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "LineWidth", name: "LineWidth", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "LinkProgram", name: "LinkProgram", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "PixelStorei", name: "PixelStorei", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "PolygonOffset", name: "PolygonOffset", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "ReadPixels", name: "ReadPixels", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int, ptrType$2], [], false)}, {prop: "RenderbufferStorage", name: "RenderbufferStorage", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "Scissor", name: "Scissor", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "ShaderSource", name: "ShaderSource", pkg: "", typ: $funcType([ptrType$2, $String], [], false)}, {prop: "TexImage2D", name: "TexImage2D", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, ptrType$2], [], false)}, {prop: "TexParameteri", name: "TexParameteri", pkg: "", typ: $funcType([$Int, $Int, $Int], [], false)}, {prop: "TexSubImage2D", name: "TexSubImage2D", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int, $Int, $Int, ptrType$2], [], false)}, {prop: "Uniform1f", name: "Uniform1f", pkg: "", typ: $funcType([ptrType$2, $Float32], [], false)}, {prop: "Uniform1i", name: "Uniform1i", pkg: "", typ: $funcType([ptrType$2, $Int], [], false)}, {prop: "Uniform2f", name: "Uniform2f", pkg: "", typ: $funcType([ptrType$2, $Float32, $Float32], [], false)}, {prop: "Uniform2i", name: "Uniform2i", pkg: "", typ: $funcType([ptrType$2, $Int, $Int], [], false)}, {prop: "Uniform3f", name: "Uniform3f", pkg: "", typ: $funcType([ptrType$2, $Float32, $Float32, $Float32], [], false)}, {prop: "Uniform3i", name: "Uniform3i", pkg: "", typ: $funcType([ptrType$2, $Int, $Int, $Int], [], false)}, {prop: "Uniform4f", name: "Uniform4f", pkg: "", typ: $funcType([ptrType$2, $Float32, $Float32, $Float32, $Float32], [], false)}, {prop: "Uniform4i", name: "Uniform4i", pkg: "", typ: $funcType([ptrType$2, $Int, $Int, $Int, $Int], [], false)}, {prop: "UniformMatrix2fv", name: "UniformMatrix2fv", pkg: "", typ: $funcType([ptrType$2, $Bool, sliceType$2], [], false)}, {prop: "UniformMatrix3fv", name: "UniformMatrix3fv", pkg: "", typ: $funcType([ptrType$2, $Bool, sliceType$2], [], false)}, {prop: "UniformMatrix4fv", name: "UniformMatrix4fv", pkg: "", typ: $funcType([ptrType$2, $Bool, sliceType$2], [], false)}, {prop: "UseProgram", name: "UseProgram", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "ValidateProgram", name: "ValidateProgram", pkg: "", typ: $funcType([ptrType$2], [], false)}, {prop: "VertexAttribPointer", name: "VertexAttribPointer", pkg: "", typ: $funcType([$Int, $Int, $Int, $Bool, $Int, $Int], [], false)}, {prop: "Viewport", name: "Viewport", pkg: "", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}];
	ContextAttributes.init([{prop: "Alpha", name: "Alpha", pkg: "", typ: $Bool, tag: ""}, {prop: "Depth", name: "Depth", pkg: "", typ: $Bool, tag: ""}, {prop: "Stencil", name: "Stencil", pkg: "", typ: $Bool, tag: ""}, {prop: "Antialias", name: "Antialias", pkg: "", typ: $Bool, tag: ""}, {prop: "PremultipliedAlpha", name: "PremultipliedAlpha", pkg: "", typ: $Bool, tag: ""}, {prop: "PreserveDrawingBuffer", name: "PreserveDrawingBuffer", pkg: "", typ: $Bool, tag: ""}]);
	Context.init([{prop: "Object", name: "", pkg: "", typ: ptrType$2, tag: ""}, {prop: "ARRAY_BUFFER", name: "ARRAY_BUFFER", pkg: "", typ: $Int, tag: "js:\"ARRAY_BUFFER\""}, {prop: "ARRAY_BUFFER_BINDING", name: "ARRAY_BUFFER_BINDING", pkg: "", typ: $Int, tag: "js:\"ARRAY_BUFFER_BINDING\""}, {prop: "ATTACHED_SHADERS", name: "ATTACHED_SHADERS", pkg: "", typ: $Int, tag: "js:\"ATTACHED_SHADERS\""}, {prop: "BACK", name: "BACK", pkg: "", typ: $Int, tag: "js:\"BACK\""}, {prop: "BLEND", name: "BLEND", pkg: "", typ: $Int, tag: "js:\"BLEND\""}, {prop: "BLEND_COLOR", name: "BLEND_COLOR", pkg: "", typ: $Int, tag: "js:\"BLEND_COLOR\""}, {prop: "BLEND_DST_ALPHA", name: "BLEND_DST_ALPHA", pkg: "", typ: $Int, tag: "js:\"BLEND_DST_ALPHA\""}, {prop: "BLEND_DST_RGB", name: "BLEND_DST_RGB", pkg: "", typ: $Int, tag: "js:\"BLEND_DST_RGB\""}, {prop: "BLEND_EQUATION", name: "BLEND_EQUATION", pkg: "", typ: $Int, tag: "js:\"BLEND_EQUATION\""}, {prop: "BLEND_EQUATION_ALPHA", name: "BLEND_EQUATION_ALPHA", pkg: "", typ: $Int, tag: "js:\"BLEND_EQUATION_ALPHA\""}, {prop: "BLEND_EQUATION_RGB", name: "BLEND_EQUATION_RGB", pkg: "", typ: $Int, tag: "js:\"BLEND_EQUATION_RGB\""}, {prop: "BLEND_SRC_ALPHA", name: "BLEND_SRC_ALPHA", pkg: "", typ: $Int, tag: "js:\"BLEND_SRC_ALPHA\""}, {prop: "BLEND_SRC_RGB", name: "BLEND_SRC_RGB", pkg: "", typ: $Int, tag: "js:\"BLEND_SRC_RGB\""}, {prop: "BLUE_BITS", name: "BLUE_BITS", pkg: "", typ: $Int, tag: "js:\"BLUE_BITS\""}, {prop: "BOOL", name: "BOOL", pkg: "", typ: $Int, tag: "js:\"BOOL\""}, {prop: "BOOL_VEC2", name: "BOOL_VEC2", pkg: "", typ: $Int, tag: "js:\"BOOL_VEC2\""}, {prop: "BOOL_VEC3", name: "BOOL_VEC3", pkg: "", typ: $Int, tag: "js:\"BOOL_VEC3\""}, {prop: "BOOL_VEC4", name: "BOOL_VEC4", pkg: "", typ: $Int, tag: "js:\"BOOL_VEC4\""}, {prop: "BROWSER_DEFAULT_WEBGL", name: "BROWSER_DEFAULT_WEBGL", pkg: "", typ: $Int, tag: "js:\"BROWSER_DEFAULT_WEBGL\""}, {prop: "BUFFER_SIZE", name: "BUFFER_SIZE", pkg: "", typ: $Int, tag: "js:\"BUFFER_SIZE\""}, {prop: "BUFFER_USAGE", name: "BUFFER_USAGE", pkg: "", typ: $Int, tag: "js:\"BUFFER_USAGE\""}, {prop: "BYTE", name: "BYTE", pkg: "", typ: $Int, tag: "js:\"BYTE\""}, {prop: "CCW", name: "CCW", pkg: "", typ: $Int, tag: "js:\"CCW\""}, {prop: "CLAMP_TO_EDGE", name: "CLAMP_TO_EDGE", pkg: "", typ: $Int, tag: "js:\"CLAMP_TO_EDGE\""}, {prop: "COLOR_ATTACHMENT0", name: "COLOR_ATTACHMENT0", pkg: "", typ: $Int, tag: "js:\"COLOR_ATTACHMENT0\""}, {prop: "COLOR_BUFFER_BIT", name: "COLOR_BUFFER_BIT", pkg: "", typ: $Int, tag: "js:\"COLOR_BUFFER_BIT\""}, {prop: "COLOR_CLEAR_VALUE", name: "COLOR_CLEAR_VALUE", pkg: "", typ: $Int, tag: "js:\"COLOR_CLEAR_VALUE\""}, {prop: "COLOR_WRITEMASK", name: "COLOR_WRITEMASK", pkg: "", typ: $Int, tag: "js:\"COLOR_WRITEMASK\""}, {prop: "COMPILE_STATUS", name: "COMPILE_STATUS", pkg: "", typ: $Int, tag: "js:\"COMPILE_STATUS\""}, {prop: "COMPRESSED_TEXTURE_FORMATS", name: "COMPRESSED_TEXTURE_FORMATS", pkg: "", typ: $Int, tag: "js:\"COMPRESSED_TEXTURE_FORMATS\""}, {prop: "CONSTANT_ALPHA", name: "CONSTANT_ALPHA", pkg: "", typ: $Int, tag: "js:\"CONSTANT_ALPHA\""}, {prop: "CONSTANT_COLOR", name: "CONSTANT_COLOR", pkg: "", typ: $Int, tag: "js:\"CONSTANT_COLOR\""}, {prop: "CONTEXT_LOST_WEBGL", name: "CONTEXT_LOST_WEBGL", pkg: "", typ: $Int, tag: "js:\"CONTEXT_LOST_WEBGL\""}, {prop: "CULL_FACE", name: "CULL_FACE", pkg: "", typ: $Int, tag: "js:\"CULL_FACE\""}, {prop: "CULL_FACE_MODE", name: "CULL_FACE_MODE", pkg: "", typ: $Int, tag: "js:\"CULL_FACE_MODE\""}, {prop: "CURRENT_PROGRAM", name: "CURRENT_PROGRAM", pkg: "", typ: $Int, tag: "js:\"CURRENT_PROGRAM\""}, {prop: "CURRENT_VERTEX_ATTRIB", name: "CURRENT_VERTEX_ATTRIB", pkg: "", typ: $Int, tag: "js:\"CURRENT_VERTEX_ATTRIB\""}, {prop: "CW", name: "CW", pkg: "", typ: $Int, tag: "js:\"CW\""}, {prop: "DECR", name: "DECR", pkg: "", typ: $Int, tag: "js:\"DECR\""}, {prop: "DECR_WRAP", name: "DECR_WRAP", pkg: "", typ: $Int, tag: "js:\"DECR_WRAP\""}, {prop: "DELETE_STATUS", name: "DELETE_STATUS", pkg: "", typ: $Int, tag: "js:\"DELETE_STATUS\""}, {prop: "DEPTH_ATTACHMENT", name: "DEPTH_ATTACHMENT", pkg: "", typ: $Int, tag: "js:\"DEPTH_ATTACHMENT\""}, {prop: "DEPTH_BITS", name: "DEPTH_BITS", pkg: "", typ: $Int, tag: "js:\"DEPTH_BITS\""}, {prop: "DEPTH_BUFFER_BIT", name: "DEPTH_BUFFER_BIT", pkg: "", typ: $Int, tag: "js:\"DEPTH_BUFFER_BIT\""}, {prop: "DEPTH_CLEAR_VALUE", name: "DEPTH_CLEAR_VALUE", pkg: "", typ: $Int, tag: "js:\"DEPTH_CLEAR_VALUE\""}, {prop: "DEPTH_COMPONENT", name: "DEPTH_COMPONENT", pkg: "", typ: $Int, tag: "js:\"DEPTH_COMPONENT\""}, {prop: "DEPTH_COMPONENT16", name: "DEPTH_COMPONENT16", pkg: "", typ: $Int, tag: "js:\"DEPTH_COMPONENT16\""}, {prop: "DEPTH_FUNC", name: "DEPTH_FUNC", pkg: "", typ: $Int, tag: "js:\"DEPTH_FUNC\""}, {prop: "DEPTH_RANGE", name: "DEPTH_RANGE", pkg: "", typ: $Int, tag: "js:\"DEPTH_RANGE\""}, {prop: "DEPTH_STENCIL", name: "DEPTH_STENCIL", pkg: "", typ: $Int, tag: "js:\"DEPTH_STENCIL\""}, {prop: "DEPTH_STENCIL_ATTACHMENT", name: "DEPTH_STENCIL_ATTACHMENT", pkg: "", typ: $Int, tag: "js:\"DEPTH_STENCIL_ATTACHMENT\""}, {prop: "DEPTH_TEST", name: "DEPTH_TEST", pkg: "", typ: $Int, tag: "js:\"DEPTH_TEST\""}, {prop: "DEPTH_WRITEMASK", name: "DEPTH_WRITEMASK", pkg: "", typ: $Int, tag: "js:\"DEPTH_WRITEMASK\""}, {prop: "DITHER", name: "DITHER", pkg: "", typ: $Int, tag: "js:\"DITHER\""}, {prop: "DONT_CARE", name: "DONT_CARE", pkg: "", typ: $Int, tag: "js:\"DONT_CARE\""}, {prop: "DST_ALPHA", name: "DST_ALPHA", pkg: "", typ: $Int, tag: "js:\"DST_ALPHA\""}, {prop: "DST_COLOR", name: "DST_COLOR", pkg: "", typ: $Int, tag: "js:\"DST_COLOR\""}, {prop: "DYNAMIC_DRAW", name: "DYNAMIC_DRAW", pkg: "", typ: $Int, tag: "js:\"DYNAMIC_DRAW\""}, {prop: "ELEMENT_ARRAY_BUFFER", name: "ELEMENT_ARRAY_BUFFER", pkg: "", typ: $Int, tag: "js:\"ELEMENT_ARRAY_BUFFER\""}, {prop: "ELEMENT_ARRAY_BUFFER_BINDING", name: "ELEMENT_ARRAY_BUFFER_BINDING", pkg: "", typ: $Int, tag: "js:\"ELEMENT_ARRAY_BUFFER_BINDING\""}, {prop: "EQUAL", name: "EQUAL", pkg: "", typ: $Int, tag: "js:\"EQUAL\""}, {prop: "FASTEST", name: "FASTEST", pkg: "", typ: $Int, tag: "js:\"FASTEST\""}, {prop: "FLOAT", name: "FLOAT", pkg: "", typ: $Int, tag: "js:\"FLOAT\""}, {prop: "FLOAT_MAT2", name: "FLOAT_MAT2", pkg: "", typ: $Int, tag: "js:\"FLOAT_MAT2\""}, {prop: "FLOAT_MAT3", name: "FLOAT_MAT3", pkg: "", typ: $Int, tag: "js:\"FLOAT_MAT3\""}, {prop: "FLOAT_MAT4", name: "FLOAT_MAT4", pkg: "", typ: $Int, tag: "js:\"FLOAT_MAT4\""}, {prop: "FLOAT_VEC2", name: "FLOAT_VEC2", pkg: "", typ: $Int, tag: "js:\"FLOAT_VEC2\""}, {prop: "FLOAT_VEC3", name: "FLOAT_VEC3", pkg: "", typ: $Int, tag: "js:\"FLOAT_VEC3\""}, {prop: "FLOAT_VEC4", name: "FLOAT_VEC4", pkg: "", typ: $Int, tag: "js:\"FLOAT_VEC4\""}, {prop: "FRAGMENT_SHADER", name: "FRAGMENT_SHADER", pkg: "", typ: $Int, tag: "js:\"FRAGMENT_SHADER\""}, {prop: "FRAMEBUFFER", name: "FRAMEBUFFER", pkg: "", typ: $Int, tag: "js:\"FRAMEBUFFER\""}, {prop: "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", name: "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", pkg: "", typ: $Int, tag: "js:\"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\""}, {prop: "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", name: "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", pkg: "", typ: $Int, tag: "js:\"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\""}, {prop: "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", name: "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", pkg: "", typ: $Int, tag: "js:\"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\""}, {prop: "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", name: "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", pkg: "", typ: $Int, tag: "js:\"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\""}, {prop: "FRAMEBUFFER_BINDING", name: "FRAMEBUFFER_BINDING", pkg: "", typ: $Int, tag: "js:\"FRAMEBUFFER_BINDING\""}, {prop: "FRAMEBUFFER_COMPLETE", name: "FRAMEBUFFER_COMPLETE", pkg: "", typ: $Int, tag: "js:\"FRAMEBUFFER_COMPLETE\""}, {prop: "FRAMEBUFFER_INCOMPLETE_ATTACHMENT", name: "FRAMEBUFFER_INCOMPLETE_ATTACHMENT", pkg: "", typ: $Int, tag: "js:\"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\""}, {prop: "FRAMEBUFFER_INCOMPLETE_DIMENSIONS", name: "FRAMEBUFFER_INCOMPLETE_DIMENSIONS", pkg: "", typ: $Int, tag: "js:\"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\""}, {prop: "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", name: "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", pkg: "", typ: $Int, tag: "js:\"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\""}, {prop: "FRAMEBUFFER_UNSUPPORTED", name: "FRAMEBUFFER_UNSUPPORTED", pkg: "", typ: $Int, tag: "js:\"FRAMEBUFFER_UNSUPPORTED\""}, {prop: "FRONT", name: "FRONT", pkg: "", typ: $Int, tag: "js:\"FRONT\""}, {prop: "FRONT_AND_BACK", name: "FRONT_AND_BACK", pkg: "", typ: $Int, tag: "js:\"FRONT_AND_BACK\""}, {prop: "FRONT_FACE", name: "FRONT_FACE", pkg: "", typ: $Int, tag: "js:\"FRONT_FACE\""}, {prop: "FUNC_ADD", name: "FUNC_ADD", pkg: "", typ: $Int, tag: "js:\"FUNC_ADD\""}, {prop: "FUNC_REVERSE_SUBTRACT", name: "FUNC_REVERSE_SUBTRACT", pkg: "", typ: $Int, tag: "js:\"FUNC_REVERSE_SUBTRACT\""}, {prop: "FUNC_SUBTRACT", name: "FUNC_SUBTRACT", pkg: "", typ: $Int, tag: "js:\"FUNC_SUBTRACT\""}, {prop: "GENERATE_MIPMAP_HINT", name: "GENERATE_MIPMAP_HINT", pkg: "", typ: $Int, tag: "js:\"GENERATE_MIPMAP_HINT\""}, {prop: "GEQUAL", name: "GEQUAL", pkg: "", typ: $Int, tag: "js:\"GEQUAL\""}, {prop: "GREATER", name: "GREATER", pkg: "", typ: $Int, tag: "js:\"GREATER\""}, {prop: "GREEN_BITS", name: "GREEN_BITS", pkg: "", typ: $Int, tag: "js:\"GREEN_BITS\""}, {prop: "HIGH_FLOAT", name: "HIGH_FLOAT", pkg: "", typ: $Int, tag: "js:\"HIGH_FLOAT\""}, {prop: "HIGH_INT", name: "HIGH_INT", pkg: "", typ: $Int, tag: "js:\"HIGH_INT\""}, {prop: "INCR", name: "INCR", pkg: "", typ: $Int, tag: "js:\"INCR\""}, {prop: "INCR_WRAP", name: "INCR_WRAP", pkg: "", typ: $Int, tag: "js:\"INCR_WRAP\""}, {prop: "INFO_LOG_LENGTH", name: "INFO_LOG_LENGTH", pkg: "", typ: $Int, tag: "js:\"INFO_LOG_LENGTH\""}, {prop: "INT", name: "INT", pkg: "", typ: $Int, tag: "js:\"INT\""}, {prop: "INT_VEC2", name: "INT_VEC2", pkg: "", typ: $Int, tag: "js:\"INT_VEC2\""}, {prop: "INT_VEC3", name: "INT_VEC3", pkg: "", typ: $Int, tag: "js:\"INT_VEC3\""}, {prop: "INT_VEC4", name: "INT_VEC4", pkg: "", typ: $Int, tag: "js:\"INT_VEC4\""}, {prop: "INVALID_ENUM", name: "INVALID_ENUM", pkg: "", typ: $Int, tag: "js:\"INVALID_ENUM\""}, {prop: "INVALID_FRAMEBUFFER_OPERATION", name: "INVALID_FRAMEBUFFER_OPERATION", pkg: "", typ: $Int, tag: "js:\"INVALID_FRAMEBUFFER_OPERATION\""}, {prop: "INVALID_OPERATION", name: "INVALID_OPERATION", pkg: "", typ: $Int, tag: "js:\"INVALID_OPERATION\""}, {prop: "INVALID_VALUE", name: "INVALID_VALUE", pkg: "", typ: $Int, tag: "js:\"INVALID_VALUE\""}, {prop: "INVERT", name: "INVERT", pkg: "", typ: $Int, tag: "js:\"INVERT\""}, {prop: "KEEP", name: "KEEP", pkg: "", typ: $Int, tag: "js:\"KEEP\""}, {prop: "LEQUAL", name: "LEQUAL", pkg: "", typ: $Int, tag: "js:\"LEQUAL\""}, {prop: "LESS", name: "LESS", pkg: "", typ: $Int, tag: "js:\"LESS\""}, {prop: "LINEAR", name: "LINEAR", pkg: "", typ: $Int, tag: "js:\"LINEAR\""}, {prop: "LINEAR_MIPMAP_LINEAR", name: "LINEAR_MIPMAP_LINEAR", pkg: "", typ: $Int, tag: "js:\"LINEAR_MIPMAP_LINEAR\""}, {prop: "LINEAR_MIPMAP_NEAREST", name: "LINEAR_MIPMAP_NEAREST", pkg: "", typ: $Int, tag: "js:\"LINEAR_MIPMAP_NEAREST\""}, {prop: "LINES", name: "LINES", pkg: "", typ: $Int, tag: "js:\"LINES\""}, {prop: "LINE_LOOP", name: "LINE_LOOP", pkg: "", typ: $Int, tag: "js:\"LINE_LOOP\""}, {prop: "LINE_STRIP", name: "LINE_STRIP", pkg: "", typ: $Int, tag: "js:\"LINE_STRIP\""}, {prop: "LINE_WIDTH", name: "LINE_WIDTH", pkg: "", typ: $Int, tag: "js:\"LINE_WIDTH\""}, {prop: "LINK_STATUS", name: "LINK_STATUS", pkg: "", typ: $Int, tag: "js:\"LINK_STATUS\""}, {prop: "LOW_FLOAT", name: "LOW_FLOAT", pkg: "", typ: $Int, tag: "js:\"LOW_FLOAT\""}, {prop: "LOW_INT", name: "LOW_INT", pkg: "", typ: $Int, tag: "js:\"LOW_INT\""}, {prop: "LUMINANCE", name: "LUMINANCE", pkg: "", typ: $Int, tag: "js:\"LUMINANCE\""}, {prop: "LUMINANCE_ALPHA", name: "LUMINANCE_ALPHA", pkg: "", typ: $Int, tag: "js:\"LUMINANCE_ALPHA\""}, {prop: "MAX_COMBINED_TEXTURE_IMAGE_UNITS", name: "MAX_COMBINED_TEXTURE_IMAGE_UNITS", pkg: "", typ: $Int, tag: "js:\"MAX_COMBINED_TEXTURE_IMAGE_UNITS\""}, {prop: "MAX_CUBE_MAP_TEXTURE_SIZE", name: "MAX_CUBE_MAP_TEXTURE_SIZE", pkg: "", typ: $Int, tag: "js:\"MAX_CUBE_MAP_TEXTURE_SIZE\""}, {prop: "MAX_FRAGMENT_UNIFORM_VECTORS", name: "MAX_FRAGMENT_UNIFORM_VECTORS", pkg: "", typ: $Int, tag: "js:\"MAX_FRAGMENT_UNIFORM_VECTORS\""}, {prop: "MAX_RENDERBUFFER_SIZE", name: "MAX_RENDERBUFFER_SIZE", pkg: "", typ: $Int, tag: "js:\"MAX_RENDERBUFFER_SIZE\""}, {prop: "MAX_TEXTURE_IMAGE_UNITS", name: "MAX_TEXTURE_IMAGE_UNITS", pkg: "", typ: $Int, tag: "js:\"MAX_TEXTURE_IMAGE_UNITS\""}, {prop: "MAX_TEXTURE_SIZE", name: "MAX_TEXTURE_SIZE", pkg: "", typ: $Int, tag: "js:\"MAX_TEXTURE_SIZE\""}, {prop: "MAX_VARYING_VECTORS", name: "MAX_VARYING_VECTORS", pkg: "", typ: $Int, tag: "js:\"MAX_VARYING_VECTORS\""}, {prop: "MAX_VERTEX_ATTRIBS", name: "MAX_VERTEX_ATTRIBS", pkg: "", typ: $Int, tag: "js:\"MAX_VERTEX_ATTRIBS\""}, {prop: "MAX_VERTEX_TEXTURE_IMAGE_UNITS", name: "MAX_VERTEX_TEXTURE_IMAGE_UNITS", pkg: "", typ: $Int, tag: "js:\"MAX_VERTEX_TEXTURE_IMAGE_UNITS\""}, {prop: "MAX_VERTEX_UNIFORM_VECTORS", name: "MAX_VERTEX_UNIFORM_VECTORS", pkg: "", typ: $Int, tag: "js:\"MAX_VERTEX_UNIFORM_VECTORS\""}, {prop: "MAX_VIEWPORT_DIMS", name: "MAX_VIEWPORT_DIMS", pkg: "", typ: $Int, tag: "js:\"MAX_VIEWPORT_DIMS\""}, {prop: "MEDIUM_FLOAT", name: "MEDIUM_FLOAT", pkg: "", typ: $Int, tag: "js:\"MEDIUM_FLOAT\""}, {prop: "MEDIUM_INT", name: "MEDIUM_INT", pkg: "", typ: $Int, tag: "js:\"MEDIUM_INT\""}, {prop: "MIRRORED_REPEAT", name: "MIRRORED_REPEAT", pkg: "", typ: $Int, tag: "js:\"MIRRORED_REPEAT\""}, {prop: "NEAREST", name: "NEAREST", pkg: "", typ: $Int, tag: "js:\"NEAREST\""}, {prop: "NEAREST_MIPMAP_LINEAR", name: "NEAREST_MIPMAP_LINEAR", pkg: "", typ: $Int, tag: "js:\"NEAREST_MIPMAP_LINEAR\""}, {prop: "NEAREST_MIPMAP_NEAREST", name: "NEAREST_MIPMAP_NEAREST", pkg: "", typ: $Int, tag: "js:\"NEAREST_MIPMAP_NEAREST\""}, {prop: "NEVER", name: "NEVER", pkg: "", typ: $Int, tag: "js:\"NEVER\""}, {prop: "NICEST", name: "NICEST", pkg: "", typ: $Int, tag: "js:\"NICEST\""}, {prop: "NONE", name: "NONE", pkg: "", typ: $Int, tag: "js:\"NONE\""}, {prop: "NOTEQUAL", name: "NOTEQUAL", pkg: "", typ: $Int, tag: "js:\"NOTEQUAL\""}, {prop: "NO_ERROR", name: "NO_ERROR", pkg: "", typ: $Int, tag: "js:\"NO_ERROR\""}, {prop: "NUM_COMPRESSED_TEXTURE_FORMATS", name: "NUM_COMPRESSED_TEXTURE_FORMATS", pkg: "", typ: $Int, tag: "js:\"NUM_COMPRESSED_TEXTURE_FORMATS\""}, {prop: "ONE", name: "ONE", pkg: "", typ: $Int, tag: "js:\"ONE\""}, {prop: "ONE_MINUS_CONSTANT_ALPHA", name: "ONE_MINUS_CONSTANT_ALPHA", pkg: "", typ: $Int, tag: "js:\"ONE_MINUS_CONSTANT_ALPHA\""}, {prop: "ONE_MINUS_CONSTANT_COLOR", name: "ONE_MINUS_CONSTANT_COLOR", pkg: "", typ: $Int, tag: "js:\"ONE_MINUS_CONSTANT_COLOR\""}, {prop: "ONE_MINUS_DST_ALPHA", name: "ONE_MINUS_DST_ALPHA", pkg: "", typ: $Int, tag: "js:\"ONE_MINUS_DST_ALPHA\""}, {prop: "ONE_MINUS_DST_COLOR", name: "ONE_MINUS_DST_COLOR", pkg: "", typ: $Int, tag: "js:\"ONE_MINUS_DST_COLOR\""}, {prop: "ONE_MINUS_SRC_ALPHA", name: "ONE_MINUS_SRC_ALPHA", pkg: "", typ: $Int, tag: "js:\"ONE_MINUS_SRC_ALPHA\""}, {prop: "ONE_MINUS_SRC_COLOR", name: "ONE_MINUS_SRC_COLOR", pkg: "", typ: $Int, tag: "js:\"ONE_MINUS_SRC_COLOR\""}, {prop: "OUT_OF_MEMORY", name: "OUT_OF_MEMORY", pkg: "", typ: $Int, tag: "js:\"OUT_OF_MEMORY\""}, {prop: "PACK_ALIGNMENT", name: "PACK_ALIGNMENT", pkg: "", typ: $Int, tag: "js:\"PACK_ALIGNMENT\""}, {prop: "POINTS", name: "POINTS", pkg: "", typ: $Int, tag: "js:\"POINTS\""}, {prop: "POLYGON_OFFSET_FACTOR", name: "POLYGON_OFFSET_FACTOR", pkg: "", typ: $Int, tag: "js:\"POLYGON_OFFSET_FACTOR\""}, {prop: "POLYGON_OFFSET_FILL", name: "POLYGON_OFFSET_FILL", pkg: "", typ: $Int, tag: "js:\"POLYGON_OFFSET_FILL\""}, {prop: "POLYGON_OFFSET_UNITS", name: "POLYGON_OFFSET_UNITS", pkg: "", typ: $Int, tag: "js:\"POLYGON_OFFSET_UNITS\""}, {prop: "RED_BITS", name: "RED_BITS", pkg: "", typ: $Int, tag: "js:\"RED_BITS\""}, {prop: "RENDERBUFFER", name: "RENDERBUFFER", pkg: "", typ: $Int, tag: "js:\"RENDERBUFFER\""}, {prop: "RENDERBUFFER_ALPHA_SIZE", name: "RENDERBUFFER_ALPHA_SIZE", pkg: "", typ: $Int, tag: "js:\"RENDERBUFFER_ALPHA_SIZE\""}, {prop: "RENDERBUFFER_BINDING", name: "RENDERBUFFER_BINDING", pkg: "", typ: $Int, tag: "js:\"RENDERBUFFER_BINDING\""}, {prop: "RENDERBUFFER_BLUE_SIZE", name: "RENDERBUFFER_BLUE_SIZE", pkg: "", typ: $Int, tag: "js:\"RENDERBUFFER_BLUE_SIZE\""}, {prop: "RENDERBUFFER_DEPTH_SIZE", name: "RENDERBUFFER_DEPTH_SIZE", pkg: "", typ: $Int, tag: "js:\"RENDERBUFFER_DEPTH_SIZE\""}, {prop: "RENDERBUFFER_GREEN_SIZE", name: "RENDERBUFFER_GREEN_SIZE", pkg: "", typ: $Int, tag: "js:\"RENDERBUFFER_GREEN_SIZE\""}, {prop: "RENDERBUFFER_HEIGHT", name: "RENDERBUFFER_HEIGHT", pkg: "", typ: $Int, tag: "js:\"RENDERBUFFER_HEIGHT\""}, {prop: "RENDERBUFFER_INTERNAL_FORMAT", name: "RENDERBUFFER_INTERNAL_FORMAT", pkg: "", typ: $Int, tag: "js:\"RENDERBUFFER_INTERNAL_FORMAT\""}, {prop: "RENDERBUFFER_RED_SIZE", name: "RENDERBUFFER_RED_SIZE", pkg: "", typ: $Int, tag: "js:\"RENDERBUFFER_RED_SIZE\""}, {prop: "RENDERBUFFER_STENCIL_SIZE", name: "RENDERBUFFER_STENCIL_SIZE", pkg: "", typ: $Int, tag: "js:\"RENDERBUFFER_STENCIL_SIZE\""}, {prop: "RENDERBUFFER_WIDTH", name: "RENDERBUFFER_WIDTH", pkg: "", typ: $Int, tag: "js:\"RENDERBUFFER_WIDTH\""}, {prop: "RENDERER", name: "RENDERER", pkg: "", typ: $Int, tag: "js:\"RENDERER\""}, {prop: "REPEAT", name: "REPEAT", pkg: "", typ: $Int, tag: "js:\"REPEAT\""}, {prop: "REPLACE", name: "REPLACE", pkg: "", typ: $Int, tag: "js:\"REPLACE\""}, {prop: "RGB", name: "RGB", pkg: "", typ: $Int, tag: "js:\"RGB\""}, {prop: "RGB5_A1", name: "RGB5_A1", pkg: "", typ: $Int, tag: "js:\"RGB5_A1\""}, {prop: "RGB565", name: "RGB565", pkg: "", typ: $Int, tag: "js:\"RGB565\""}, {prop: "RGBA", name: "RGBA", pkg: "", typ: $Int, tag: "js:\"RGBA\""}, {prop: "RGBA4", name: "RGBA4", pkg: "", typ: $Int, tag: "js:\"RGBA4\""}, {prop: "SAMPLER_2D", name: "SAMPLER_2D", pkg: "", typ: $Int, tag: "js:\"SAMPLER_2D\""}, {prop: "SAMPLER_CUBE", name: "SAMPLER_CUBE", pkg: "", typ: $Int, tag: "js:\"SAMPLER_CUBE\""}, {prop: "SAMPLES", name: "SAMPLES", pkg: "", typ: $Int, tag: "js:\"SAMPLES\""}, {prop: "SAMPLE_ALPHA_TO_COVERAGE", name: "SAMPLE_ALPHA_TO_COVERAGE", pkg: "", typ: $Int, tag: "js:\"SAMPLE_ALPHA_TO_COVERAGE\""}, {prop: "SAMPLE_BUFFERS", name: "SAMPLE_BUFFERS", pkg: "", typ: $Int, tag: "js:\"SAMPLE_BUFFERS\""}, {prop: "SAMPLE_COVERAGE", name: "SAMPLE_COVERAGE", pkg: "", typ: $Int, tag: "js:\"SAMPLE_COVERAGE\""}, {prop: "SAMPLE_COVERAGE_INVERT", name: "SAMPLE_COVERAGE_INVERT", pkg: "", typ: $Int, tag: "js:\"SAMPLE_COVERAGE_INVERT\""}, {prop: "SAMPLE_COVERAGE_VALUE", name: "SAMPLE_COVERAGE_VALUE", pkg: "", typ: $Int, tag: "js:\"SAMPLE_COVERAGE_VALUE\""}, {prop: "SCISSOR_BOX", name: "SCISSOR_BOX", pkg: "", typ: $Int, tag: "js:\"SCISSOR_BOX\""}, {prop: "SCISSOR_TEST", name: "SCISSOR_TEST", pkg: "", typ: $Int, tag: "js:\"SCISSOR_TEST\""}, {prop: "SHADER_COMPILER", name: "SHADER_COMPILER", pkg: "", typ: $Int, tag: "js:\"SHADER_COMPILER\""}, {prop: "SHADER_SOURCE_LENGTH", name: "SHADER_SOURCE_LENGTH", pkg: "", typ: $Int, tag: "js:\"SHADER_SOURCE_LENGTH\""}, {prop: "SHADER_TYPE", name: "SHADER_TYPE", pkg: "", typ: $Int, tag: "js:\"SHADER_TYPE\""}, {prop: "SHADING_LANGUAGE_VERSION", name: "SHADING_LANGUAGE_VERSION", pkg: "", typ: $Int, tag: "js:\"SHADING_LANGUAGE_VERSION\""}, {prop: "SHORT", name: "SHORT", pkg: "", typ: $Int, tag: "js:\"SHORT\""}, {prop: "SRC_ALPHA", name: "SRC_ALPHA", pkg: "", typ: $Int, tag: "js:\"SRC_ALPHA\""}, {prop: "SRC_ALPHA_SATURATE", name: "SRC_ALPHA_SATURATE", pkg: "", typ: $Int, tag: "js:\"SRC_ALPHA_SATURATE\""}, {prop: "SRC_COLOR", name: "SRC_COLOR", pkg: "", typ: $Int, tag: "js:\"SRC_COLOR\""}, {prop: "STATIC_DRAW", name: "STATIC_DRAW", pkg: "", typ: $Int, tag: "js:\"STATIC_DRAW\""}, {prop: "STENCIL_ATTACHMENT", name: "STENCIL_ATTACHMENT", pkg: "", typ: $Int, tag: "js:\"STENCIL_ATTACHMENT\""}, {prop: "STENCIL_BACK_FAIL", name: "STENCIL_BACK_FAIL", pkg: "", typ: $Int, tag: "js:\"STENCIL_BACK_FAIL\""}, {prop: "STENCIL_BACK_FUNC", name: "STENCIL_BACK_FUNC", pkg: "", typ: $Int, tag: "js:\"STENCIL_BACK_FUNC\""}, {prop: "STENCIL_BACK_PASS_DEPTH_FAIL", name: "STENCIL_BACK_PASS_DEPTH_FAIL", pkg: "", typ: $Int, tag: "js:\"STENCIL_BACK_PASS_DEPTH_FAIL\""}, {prop: "STENCIL_BACK_PASS_DEPTH_PASS", name: "STENCIL_BACK_PASS_DEPTH_PASS", pkg: "", typ: $Int, tag: "js:\"STENCIL_BACK_PASS_DEPTH_PASS\""}, {prop: "STENCIL_BACK_REF", name: "STENCIL_BACK_REF", pkg: "", typ: $Int, tag: "js:\"STENCIL_BACK_REF\""}, {prop: "STENCIL_BACK_VALUE_MASK", name: "STENCIL_BACK_VALUE_MASK", pkg: "", typ: $Int, tag: "js:\"STENCIL_BACK_VALUE_MASK\""}, {prop: "STENCIL_BACK_WRITEMASK", name: "STENCIL_BACK_WRITEMASK", pkg: "", typ: $Int, tag: "js:\"STENCIL_BACK_WRITEMASK\""}, {prop: "STENCIL_BITS", name: "STENCIL_BITS", pkg: "", typ: $Int, tag: "js:\"STENCIL_BITS\""}, {prop: "STENCIL_BUFFER_BIT", name: "STENCIL_BUFFER_BIT", pkg: "", typ: $Int, tag: "js:\"STENCIL_BUFFER_BIT\""}, {prop: "STENCIL_CLEAR_VALUE", name: "STENCIL_CLEAR_VALUE", pkg: "", typ: $Int, tag: "js:\"STENCIL_CLEAR_VALUE\""}, {prop: "STENCIL_FAIL", name: "STENCIL_FAIL", pkg: "", typ: $Int, tag: "js:\"STENCIL_FAIL\""}, {prop: "STENCIL_FUNC", name: "STENCIL_FUNC", pkg: "", typ: $Int, tag: "js:\"STENCIL_FUNC\""}, {prop: "STENCIL_INDEX", name: "STENCIL_INDEX", pkg: "", typ: $Int, tag: "js:\"STENCIL_INDEX\""}, {prop: "STENCIL_INDEX8", name: "STENCIL_INDEX8", pkg: "", typ: $Int, tag: "js:\"STENCIL_INDEX8\""}, {prop: "STENCIL_PASS_DEPTH_FAIL", name: "STENCIL_PASS_DEPTH_FAIL", pkg: "", typ: $Int, tag: "js:\"STENCIL_PASS_DEPTH_FAIL\""}, {prop: "STENCIL_PASS_DEPTH_PASS", name: "STENCIL_PASS_DEPTH_PASS", pkg: "", typ: $Int, tag: "js:\"STENCIL_PASS_DEPTH_PASS\""}, {prop: "STENCIL_REF", name: "STENCIL_REF", pkg: "", typ: $Int, tag: "js:\"STENCIL_REF\""}, {prop: "STENCIL_TEST", name: "STENCIL_TEST", pkg: "", typ: $Int, tag: "js:\"STENCIL_TEST\""}, {prop: "STENCIL_VALUE_MASK", name: "STENCIL_VALUE_MASK", pkg: "", typ: $Int, tag: "js:\"STENCIL_VALUE_MASK\""}, {prop: "STENCIL_WRITEMASK", name: "STENCIL_WRITEMASK", pkg: "", typ: $Int, tag: "js:\"STENCIL_WRITEMASK\""}, {prop: "STREAM_DRAW", name: "STREAM_DRAW", pkg: "", typ: $Int, tag: "js:\"STREAM_DRAW\""}, {prop: "SUBPIXEL_BITS", name: "SUBPIXEL_BITS", pkg: "", typ: $Int, tag: "js:\"SUBPIXEL_BITS\""}, {prop: "TEXTURE", name: "TEXTURE", pkg: "", typ: $Int, tag: "js:\"TEXTURE\""}, {prop: "TEXTURE0", name: "TEXTURE0", pkg: "", typ: $Int, tag: "js:\"TEXTURE0\""}, {prop: "TEXTURE1", name: "TEXTURE1", pkg: "", typ: $Int, tag: "js:\"TEXTURE1\""}, {prop: "TEXTURE2", name: "TEXTURE2", pkg: "", typ: $Int, tag: "js:\"TEXTURE2\""}, {prop: "TEXTURE3", name: "TEXTURE3", pkg: "", typ: $Int, tag: "js:\"TEXTURE3\""}, {prop: "TEXTURE4", name: "TEXTURE4", pkg: "", typ: $Int, tag: "js:\"TEXTURE4\""}, {prop: "TEXTURE5", name: "TEXTURE5", pkg: "", typ: $Int, tag: "js:\"TEXTURE5\""}, {prop: "TEXTURE6", name: "TEXTURE6", pkg: "", typ: $Int, tag: "js:\"TEXTURE6\""}, {prop: "TEXTURE7", name: "TEXTURE7", pkg: "", typ: $Int, tag: "js:\"TEXTURE7\""}, {prop: "TEXTURE8", name: "TEXTURE8", pkg: "", typ: $Int, tag: "js:\"TEXTURE8\""}, {prop: "TEXTURE9", name: "TEXTURE9", pkg: "", typ: $Int, tag: "js:\"TEXTURE9\""}, {prop: "TEXTURE10", name: "TEXTURE10", pkg: "", typ: $Int, tag: "js:\"TEXTURE10\""}, {prop: "TEXTURE11", name: "TEXTURE11", pkg: "", typ: $Int, tag: "js:\"TEXTURE11\""}, {prop: "TEXTURE12", name: "TEXTURE12", pkg: "", typ: $Int, tag: "js:\"TEXTURE12\""}, {prop: "TEXTURE13", name: "TEXTURE13", pkg: "", typ: $Int, tag: "js:\"TEXTURE13\""}, {prop: "TEXTURE14", name: "TEXTURE14", pkg: "", typ: $Int, tag: "js:\"TEXTURE14\""}, {prop: "TEXTURE15", name: "TEXTURE15", pkg: "", typ: $Int, tag: "js:\"TEXTURE15\""}, {prop: "TEXTURE16", name: "TEXTURE16", pkg: "", typ: $Int, tag: "js:\"TEXTURE16\""}, {prop: "TEXTURE17", name: "TEXTURE17", pkg: "", typ: $Int, tag: "js:\"TEXTURE17\""}, {prop: "TEXTURE18", name: "TEXTURE18", pkg: "", typ: $Int, tag: "js:\"TEXTURE18\""}, {prop: "TEXTURE19", name: "TEXTURE19", pkg: "", typ: $Int, tag: "js:\"TEXTURE19\""}, {prop: "TEXTURE20", name: "TEXTURE20", pkg: "", typ: $Int, tag: "js:\"TEXTURE20\""}, {prop: "TEXTURE21", name: "TEXTURE21", pkg: "", typ: $Int, tag: "js:\"TEXTURE21\""}, {prop: "TEXTURE22", name: "TEXTURE22", pkg: "", typ: $Int, tag: "js:\"TEXTURE22\""}, {prop: "TEXTURE23", name: "TEXTURE23", pkg: "", typ: $Int, tag: "js:\"TEXTURE23\""}, {prop: "TEXTURE24", name: "TEXTURE24", pkg: "", typ: $Int, tag: "js:\"TEXTURE24\""}, {prop: "TEXTURE25", name: "TEXTURE25", pkg: "", typ: $Int, tag: "js:\"TEXTURE25\""}, {prop: "TEXTURE26", name: "TEXTURE26", pkg: "", typ: $Int, tag: "js:\"TEXTURE26\""}, {prop: "TEXTURE27", name: "TEXTURE27", pkg: "", typ: $Int, tag: "js:\"TEXTURE27\""}, {prop: "TEXTURE28", name: "TEXTURE28", pkg: "", typ: $Int, tag: "js:\"TEXTURE28\""}, {prop: "TEXTURE29", name: "TEXTURE29", pkg: "", typ: $Int, tag: "js:\"TEXTURE29\""}, {prop: "TEXTURE30", name: "TEXTURE30", pkg: "", typ: $Int, tag: "js:\"TEXTURE30\""}, {prop: "TEXTURE31", name: "TEXTURE31", pkg: "", typ: $Int, tag: "js:\"TEXTURE31\""}, {prop: "TEXTURE_2D", name: "TEXTURE_2D", pkg: "", typ: $Int, tag: "js:\"TEXTURE_2D\""}, {prop: "TEXTURE_BINDING_2D", name: "TEXTURE_BINDING_2D", pkg: "", typ: $Int, tag: "js:\"TEXTURE_BINDING_2D\""}, {prop: "TEXTURE_BINDING_CUBE_MAP", name: "TEXTURE_BINDING_CUBE_MAP", pkg: "", typ: $Int, tag: "js:\"TEXTURE_BINDING_CUBE_MAP\""}, {prop: "TEXTURE_CUBE_MAP", name: "TEXTURE_CUBE_MAP", pkg: "", typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP\""}, {prop: "TEXTURE_CUBE_MAP_NEGATIVE_X", name: "TEXTURE_CUBE_MAP_NEGATIVE_X", pkg: "", typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP_NEGATIVE_X\""}, {prop: "TEXTURE_CUBE_MAP_NEGATIVE_Y", name: "TEXTURE_CUBE_MAP_NEGATIVE_Y", pkg: "", typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP_NEGATIVE_Y\""}, {prop: "TEXTURE_CUBE_MAP_NEGATIVE_Z", name: "TEXTURE_CUBE_MAP_NEGATIVE_Z", pkg: "", typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP_NEGATIVE_Z\""}, {prop: "TEXTURE_CUBE_MAP_POSITIVE_X", name: "TEXTURE_CUBE_MAP_POSITIVE_X", pkg: "", typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP_POSITIVE_X\""}, {prop: "TEXTURE_CUBE_MAP_POSITIVE_Y", name: "TEXTURE_CUBE_MAP_POSITIVE_Y", pkg: "", typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP_POSITIVE_Y\""}, {prop: "TEXTURE_CUBE_MAP_POSITIVE_Z", name: "TEXTURE_CUBE_MAP_POSITIVE_Z", pkg: "", typ: $Int, tag: "js:\"TEXTURE_CUBE_MAP_POSITIVE_Z\""}, {prop: "TEXTURE_MAG_FILTER", name: "TEXTURE_MAG_FILTER", pkg: "", typ: $Int, tag: "js:\"TEXTURE_MAG_FILTER\""}, {prop: "TEXTURE_MIN_FILTER", name: "TEXTURE_MIN_FILTER", pkg: "", typ: $Int, tag: "js:\"TEXTURE_MIN_FILTER\""}, {prop: "TEXTURE_WRAP_S", name: "TEXTURE_WRAP_S", pkg: "", typ: $Int, tag: "js:\"TEXTURE_WRAP_S\""}, {prop: "TEXTURE_WRAP_T", name: "TEXTURE_WRAP_T", pkg: "", typ: $Int, tag: "js:\"TEXTURE_WRAP_T\""}, {prop: "TRIANGLES", name: "TRIANGLES", pkg: "", typ: $Int, tag: "js:\"TRIANGLES\""}, {prop: "TRIANGLE_FAN", name: "TRIANGLE_FAN", pkg: "", typ: $Int, tag: "js:\"TRIANGLE_FAN\""}, {prop: "TRIANGLE_STRIP", name: "TRIANGLE_STRIP", pkg: "", typ: $Int, tag: "js:\"TRIANGLE_STRIP\""}, {prop: "UNPACK_ALIGNMENT", name: "UNPACK_ALIGNMENT", pkg: "", typ: $Int, tag: "js:\"UNPACK_ALIGNMENT\""}, {prop: "UNPACK_COLORSPACE_CONVERSION_WEBGL", name: "UNPACK_COLORSPACE_CONVERSION_WEBGL", pkg: "", typ: $Int, tag: "js:\"UNPACK_COLORSPACE_CONVERSION_WEBGL\""}, {prop: "UNPACK_FLIP_Y_WEBGL", name: "UNPACK_FLIP_Y_WEBGL", pkg: "", typ: $Int, tag: "js:\"UNPACK_FLIP_Y_WEBGL\""}, {prop: "UNPACK_PREMULTIPLY_ALPHA_WEBGL", name: "UNPACK_PREMULTIPLY_ALPHA_WEBGL", pkg: "", typ: $Int, tag: "js:\"UNPACK_PREMULTIPLY_ALPHA_WEBGL\""}, {prop: "UNSIGNED_BYTE", name: "UNSIGNED_BYTE", pkg: "", typ: $Int, tag: "js:\"UNSIGNED_BYTE\""}, {prop: "UNSIGNED_INT", name: "UNSIGNED_INT", pkg: "", typ: $Int, tag: "js:\"UNSIGNED_INT\""}, {prop: "UNSIGNED_SHORT", name: "UNSIGNED_SHORT", pkg: "", typ: $Int, tag: "js:\"UNSIGNED_SHORT\""}, {prop: "UNSIGNED_SHORT_4_4_4_4", name: "UNSIGNED_SHORT_4_4_4_4", pkg: "", typ: $Int, tag: "js:\"UNSIGNED_SHORT_4_4_4_4\""}, {prop: "UNSIGNED_SHORT_5_5_5_1", name: "UNSIGNED_SHORT_5_5_5_1", pkg: "", typ: $Int, tag: "js:\"UNSIGNED_SHORT_5_5_5_1\""}, {prop: "UNSIGNED_SHORT_5_6_5", name: "UNSIGNED_SHORT_5_6_5", pkg: "", typ: $Int, tag: "js:\"UNSIGNED_SHORT_5_6_5\""}, {prop: "VALIDATE_STATUS", name: "VALIDATE_STATUS", pkg: "", typ: $Int, tag: "js:\"VALIDATE_STATUS\""}, {prop: "VENDOR", name: "VENDOR", pkg: "", typ: $Int, tag: "js:\"VENDOR\""}, {prop: "VERSION", name: "VERSION", pkg: "", typ: $Int, tag: "js:\"VERSION\""}, {prop: "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", name: "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", pkg: "", typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\""}, {prop: "VERTEX_ATTRIB_ARRAY_ENABLED", name: "VERTEX_ATTRIB_ARRAY_ENABLED", pkg: "", typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_ENABLED\""}, {prop: "VERTEX_ATTRIB_ARRAY_NORMALIZED", name: "VERTEX_ATTRIB_ARRAY_NORMALIZED", pkg: "", typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_NORMALIZED\""}, {prop: "VERTEX_ATTRIB_ARRAY_POINTER", name: "VERTEX_ATTRIB_ARRAY_POINTER", pkg: "", typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_POINTER\""}, {prop: "VERTEX_ATTRIB_ARRAY_SIZE", name: "VERTEX_ATTRIB_ARRAY_SIZE", pkg: "", typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_SIZE\""}, {prop: "VERTEX_ATTRIB_ARRAY_STRIDE", name: "VERTEX_ATTRIB_ARRAY_STRIDE", pkg: "", typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_STRIDE\""}, {prop: "VERTEX_ATTRIB_ARRAY_TYPE", name: "VERTEX_ATTRIB_ARRAY_TYPE", pkg: "", typ: $Int, tag: "js:\"VERTEX_ATTRIB_ARRAY_TYPE\""}, {prop: "VERTEX_SHADER", name: "VERTEX_SHADER", pkg: "", typ: $Int, tag: "js:\"VERTEX_SHADER\""}, {prop: "VIEWPORT", name: "VIEWPORT", pkg: "", typ: $Int, tag: "js:\"VIEWPORT\""}, {prop: "ZERO", name: "ZERO", pkg: "", typ: $Int, tag: "js:\"ZERO\""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/inkyblackness/shocked-client/env/browser"] = (function() {
	var $pkg = {}, $init, fmt, JSON, ko, js, jquery, webgl, env, opengl, viewmodel, ObjectMapper, objectMap, RestTransport, viewModelFiller, WebGl, WebGlWindow, indirecterType, sliceType, funcType, ptrType, sliceType$1, ptrType$1, sliceType$2, funcType$1, ptrType$2, sliceType$3, sliceType$4, ptrType$3, ptrType$4, funcType$2, funcType$3, ptrType$5, mapType, funcType$4, sliceType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, arrayType, ptrType$16, mapType$1, buttonsByIndex, NewObjectMapper, NewRestTransport, Run, newViewModelFiller, NewWebGl, paramToInt, NewWebGlWindow;
	fmt = $packages["fmt"];
	JSON = $packages["github.com/Archs/js/JSON"];
	ko = $packages["github.com/Archs/js/gopherjs-ko"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	jquery = $packages["github.com/gopherjs/jquery"];
	webgl = $packages["github.com/gopherjs/webgl"];
	env = $packages["github.com/inkyblackness/shocked-client/env"];
	opengl = $packages["github.com/inkyblackness/shocked-client/opengl"];
	viewmodel = $packages["github.com/inkyblackness/shocked-client/viewmodel"];
	ObjectMapper = $pkg.ObjectMapper = $newType(8, $kindInterface, "browser.ObjectMapper", "ObjectMapper", "github.com/inkyblackness/shocked-client/env/browser", null);
	objectMap = $pkg.objectMap = $newType(0, $kindStruct, "browser.objectMap", "objectMap", "github.com/inkyblackness/shocked-client/env/browser", function(objects_, counter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.objects = false;
			this.counter = 0;
			return;
		}
		this.objects = objects_;
		this.counter = counter_;
	});
	RestTransport = $pkg.RestTransport = $newType(0, $kindStruct, "browser.RestTransport", "RestTransport", "github.com/inkyblackness/shocked-client/env/browser", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	viewModelFiller = $pkg.viewModelFiller = $newType(0, $kindStruct, "browser.viewModelFiller", "viewModelFiller", "github.com/inkyblackness/shocked-client/env/browser", function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	WebGl = $pkg.WebGl = $newType(0, $kindStruct, "browser.WebGl", "WebGl", "github.com/inkyblackness/shocked-client/env/browser", function(gl_, buffers_, programs_, shaders_, textures_, uniforms_, uniformsByProgram_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.gl = ptrType$2.nil;
			this.buffers = $ifaceNil;
			this.programs = $ifaceNil;
			this.shaders = $ifaceNil;
			this.textures = $ifaceNil;
			this.uniforms = $ifaceNil;
			this.uniformsByProgram = false;
			return;
		}
		this.gl = gl_;
		this.buffers = buffers_;
		this.programs = programs_;
		this.shaders = shaders_;
		this.textures = textures_;
		this.uniforms = uniforms_;
		this.uniformsByProgram = uniformsByProgram_;
	});
	WebGlWindow = $pkg.WebGlWindow = $newType(0, $kindStruct, "browser.WebGlWindow", "WebGlWindow", "github.com/inkyblackness/shocked-client/env/browser", function(AbstractOpenGlWindow_, canvas_, glWrapper_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.AbstractOpenGlWindow = new env.AbstractOpenGlWindow.ptr($throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError);
			this.canvas = null;
			this.glWrapper = ptrType$4.nil;
			return;
		}
		this.AbstractOpenGlWindow = AbstractOpenGlWindow_;
		this.canvas = canvas_;
		this.glWrapper = glWrapper_;
	});
	indirecterType = $newType(0, $kindStruct, "browser.indirecterType", "indirecterType", "github.com/inkyblackness/shocked-client/env/browser", function(render_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.render = $throwNilPointerError;
			return;
		}
		this.render = render_;
	});
	sliceType = $sliceType($emptyInterface);
	funcType = $funcType([$emptyInterface], [], false);
	ptrType = $ptrType($packages["github.com/Archs/js/dom"].Element);
	sliceType$1 = $sliceType(ptrType);
	ptrType$1 = $ptrType(js.Object);
	sliceType$2 = $sliceType(ptrType$1);
	funcType$1 = $funcType([], [], false);
	ptrType$2 = $ptrType(webgl.Context);
	sliceType$3 = $sliceType($Uint32);
	sliceType$4 = $sliceType($Float32);
	ptrType$3 = $ptrType(WebGlWindow);
	ptrType$4 = $ptrType(WebGl);
	funcType$2 = $funcType([ptrType$1], [$Bool], false);
	funcType$3 = $funcType([ptrType$1], [], false);
	ptrType$5 = $ptrType(objectMap);
	mapType = $mapType($Uint32, ptrType$1);
	funcType$4 = $funcType([$String], [], false);
	sliceType$5 = $sliceType($Uint8);
	ptrType$6 = $ptrType(RestTransport);
	ptrType$7 = $ptrType(viewmodel.SectionNode);
	ptrType$8 = $ptrType(viewmodel.SectionSelectionNode);
	ptrType$9 = $ptrType(viewmodel.ValueSelectionNode);
	ptrType$10 = $ptrType(viewmodel.BoolValueNode);
	ptrType$11 = $ptrType(viewmodel.StringValueNode);
	ptrType$12 = $ptrType(viewmodel.ContainerNode);
	ptrType$13 = $ptrType(viewmodel.TableNode);
	ptrType$14 = $ptrType(viewmodel.ActionNode);
	ptrType$15 = $ptrType(viewModelFiller);
	arrayType = $arrayType($Float32, 16);
	ptrType$16 = $ptrType(arrayType);
	mapType$1 = $mapType($Uint32, sliceType$3);
	NewObjectMapper = function() {
		var $ptr, result;
		result = new objectMap.ptr({}, 0);
		return result;
	};
	$pkg.NewObjectMapper = NewObjectMapper;
	objectMap.ptr.prototype.put = function(value) {
		var $ptr, _entry, _key, _tuple, exists, key, omap, value;
		omap = this;
		key = 0;
		while (true) {
			if (!(key === 0)) { break; }
			_tuple = (_entry = omap.objects[$Uint32.keyFor(omap.counter)], _entry !== undefined ? [_entry.v, true] : [null, false]);
			exists = _tuple[1];
			if (((omap.counter === 0)) || exists) {
				omap.counter = omap.counter + (1) >>> 0;
			} else {
				key = omap.counter;
			}
		}
		_key = key; (omap.objects || $throwRuntimeError("assignment to entry in nil map"))[$Uint32.keyFor(_key)] = { k: _key, v: value };
		return key;
	};
	objectMap.prototype.put = function(value) { return this.$val.put(value); };
	objectMap.ptr.prototype.get = function(key) {
		var $ptr, _entry, _r, _tuple, key, ok, omap, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _tuple = $f._tuple; key = $f.key; ok = $f.ok; omap = $f.omap; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		omap = this;
		_tuple = (_entry = omap.objects[$Uint32.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [null, false]);
		value = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok && (!((key === 0)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && (!((key === 0)))) { */ case 1:
			_r = fmt.Sprintf("Object with ID %u not known", new sliceType([new $Uint32(key)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$panic(new $String(_r));
		/* } */ case 2:
		return value;
		/* */ } return; } if ($f === undefined) { $f = { $blk: objectMap.ptr.prototype.get }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._tuple = _tuple; $f.key = key; $f.ok = ok; $f.omap = omap; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	objectMap.prototype.get = function(key) { return this.$val.get(key); };
	objectMap.ptr.prototype.del = function(key) {
		var $ptr, _arg, _arg$1, _r, key, omap, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; key = $f.key; omap = $f.omap; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		omap = this;
		$deferred.push([function(_arg, _arg$1) { delete _arg[$Uint32.keyFor(_arg$1)]; }, [omap.objects, key]]);
		_r = omap.get(key); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return null; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: objectMap.ptr.prototype.del }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.key = key; $f.omap = omap; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	objectMap.prototype.del = function(key) { return this.$val.del(key); };
	NewRestTransport = function() {
		var $ptr;
		return new RestTransport.ptr();
	};
	$pkg.NewRestTransport = NewRestTransport;
	RestTransport.ptr.prototype.Get = function(url, onSuccess, onFailure) {
		var $ptr, ajaxopt, onFailure, onSuccess, rest, url;
		rest = this;
		ajaxopt = $makeMap($String.keyFor, [{ k: "method", v: new $String("GET") }, { k: "url", v: new $String(url) }, { k: "dataType", v: new $String("json") }, { k: "data", v: $ifaceNil }, { k: "jsonp", v: new $Bool(false) }, { k: "success", v: new funcType((function $b(data) {
			var $ptr, data, jsonString, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; data = $f.data; jsonString = $f.jsonString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			jsonString = JSON.Stringify(data);
			$r = onSuccess(jsonString); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.data = data; $f.jsonString = jsonString; $f.$s = $s; $f.$r = $r; return $f;
		})) }, { k: "error", v: new funcType((function $b(status) {
			var $ptr, status, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; status = $f.status; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onFailure(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.status = status; $f.$s = $s; $f.$r = $r; return $f;
		})) }]);
		jquery.Ajax(ajaxopt);
	};
	RestTransport.prototype.Get = function(url, onSuccess, onFailure) { return this.$val.Get(url, onSuccess, onFailure); };
	RestTransport.ptr.prototype.Put = function(url, jsonString, onSuccess, onFailure) {
		var $ptr, ajaxopt, jsonString, onFailure, onSuccess, rest, url;
		rest = this;
		ajaxopt = $makeMap($String.keyFor, [{ k: "method", v: new $String("PUT") }, { k: "url", v: new $String(url) }, { k: "dataType", v: new $String("json") }, { k: "contentType", v: new $String("application/json") }, { k: "data", v: new $String($bytesToString(jsonString)) }, { k: "jsonp", v: new $Bool(false) }, { k: "processData", v: new $Bool(false) }, { k: "success", v: new funcType((function $b(data) {
			var $ptr, data, jsonString$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; data = $f.data; jsonString$1 = $f.jsonString$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			jsonString$1 = JSON.Stringify(data);
			$r = onSuccess(jsonString$1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.data = data; $f.jsonString$1 = jsonString$1; $f.$s = $s; $f.$r = $r; return $f;
		})) }, { k: "error", v: new funcType((function $b(status) {
			var $ptr, status, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; status = $f.status; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onFailure(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.status = status; $f.$s = $s; $f.$r = $r; return $f;
		})) }]);
		jquery.Ajax(ajaxopt);
	};
	RestTransport.prototype.Put = function(url, jsonString, onSuccess, onFailure) { return this.$val.Put(url, jsonString, onSuccess, onFailure); };
	RestTransport.ptr.prototype.Post = function(url, jsonString, onSuccess, onFailure) {
		var $ptr, ajaxopt, jsonString, onFailure, onSuccess, rest, url;
		rest = this;
		ajaxopt = $makeMap($String.keyFor, [{ k: "method", v: new $String("POST") }, { k: "url", v: new $String(url) }, { k: "dataType", v: new $String("json") }, { k: "contentType", v: new $String("application/json") }, { k: "data", v: new $String($bytesToString(jsonString)) }, { k: "jsonp", v: new $Bool(false) }, { k: "processData", v: new $Bool(false) }, { k: "success", v: new funcType((function $b(data) {
			var $ptr, data, jsonString$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; data = $f.data; jsonString$1 = $f.jsonString$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			jsonString$1 = JSON.Stringify(data);
			$r = onSuccess(jsonString$1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.data = data; $f.jsonString$1 = jsonString$1; $f.$s = $s; $f.$r = $r; return $f;
		})) }, { k: "error", v: new funcType((function $b(status) {
			var $ptr, status, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; status = $f.status; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = onFailure(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.status = status; $f.$s = $s; $f.$r = $r; return $f;
		})) }]);
		jquery.Ajax(ajaxopt);
	};
	RestTransport.prototype.Post = function(url, jsonString, onSuccess, onFailure) { return this.$val.Post(url, jsonString, onSuccess, onFailure); };
	Run = function(app) {
		var $ptr, _r, _r$1, _tuple, app, canvas, root, vm, window, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; app = $f.app; canvas = $f.canvas; root = $f.root; vm = $f.vm; window = $f.window; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		canvas = $clone(jquery.NewJQuery(new sliceType([new $String("canvas#output")])), jquery.JQuery);
		_r = NewWebGlWindow(canvas.Get(new sliceType([new $Int(0)]))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		window = _tuple[0];
		$r = app.Init(window); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		root = newViewModelFiller();
		_r$1 = app.ViewModel(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = _r$1.Specialize(root); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		vm = ko.ViewModelFromJS(root.object);
		$r = ko.ApplyBindings(vm, new sliceType$1([])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Run }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.app = app; $f.canvas = canvas; $f.root = root; $f.vm = vm; $f.window = window; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Run = Run;
	newViewModelFiller = function() {
		var $ptr;
		return new viewModelFiller.ptr(null);
	};
	viewModelFiller.ptr.prototype.Section = function(node) {
		var $ptr, _i, _ref, availableFiller, filler, index, node, nodes, objNodes, subFiller, subNode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; availableFiller = $f.availableFiller; filler = $f.filler; index = $f.index; node = $f.node; nodes = $f.nodes; objNodes = $f.objNodes; subFiller = $f.subFiller; subNode = $f.subNode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		filler = this;
		filler.object = new ($global.Object)();
		filler.object.type = $externalize("section", $String);
		filler.object.label = $externalize(node.Label(), $String);
		availableFiller = newViewModelFiller();
		$r = node.Available().Specialize(availableFiller); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		filler.object.available = availableFiller.object;
		nodes = node.Get();
		objNodes = $makeSlice(sliceType$2, nodes.$length);
		_ref = nodes;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			index = _i;
			subNode = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			subFiller = newViewModelFiller();
			$r = subNode.Specialize(subFiller); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			((index < 0 || index >= objNodes.$length) ? $throwRuntimeError("index out of range") : objNodes.$array[objNodes.$offset + index] = subFiller.object);
			_i++;
		/* } */ $s = 2; continue; case 3:
		filler.object.nodes = $externalize(objNodes, sliceType$2);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: viewModelFiller.ptr.prototype.Section }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.availableFiller = availableFiller; $f.filler = filler; $f.index = index; $f.node = node; $f.nodes = nodes; $f.objNodes = objNodes; $f.subFiller = subFiller; $f.subNode = subNode; $f.$s = $s; $f.$r = $r; return $f;
	};
	viewModelFiller.prototype.Section = function(node) { return this.$val.Section(node); };
	viewModelFiller.ptr.prototype.SectionSelection = function(node) {
		var $ptr, _entry, _i, _keys, _ref, filler, key, node, nodeSections, objSections, section, sectionFiller, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; filler = $f.filler; key = $f.key; node = $f.node; nodeSections = $f.nodeSections; objSections = $f.objSections; section = $f.section; sectionFiller = $f.sectionFiller; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		filler = this;
		$r = filler.ValueSelection(node.Selection()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		filler.object.type = $externalize("sectionSelection", $String);
		filler.object.label = $externalize(node.Label(), $String);
		nodeSections = node.Sections();
		objSections = new ($global.Object)();
		_ref = nodeSections;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 2:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 3; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 2; continue;
			}
			key = _entry.k;
			section = _entry.v;
			sectionFiller = newViewModelFiller();
			$r = section.Specialize(sectionFiller); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			objSections[$externalize(key, $String)] = sectionFiller.object;
			_i++;
		/* } */ $s = 2; continue; case 3:
		filler.object.sections = objSections;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: viewModelFiller.ptr.prototype.SectionSelection }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.filler = filler; $f.key = key; $f.node = node; $f.nodeSections = nodeSections; $f.objSections = objSections; $f.section = section; $f.sectionFiller = sectionFiller; $f.$s = $s; $f.$r = $r; return $f;
	};
	viewModelFiller.prototype.SectionSelection = function(node) { return this.$val.SectionSelection(node); };
	viewModelFiller.ptr.prototype.ValueSelection = function(node) {
		var $ptr, filler, node, observable, selectedFiller, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; filler = $f.filler; node = $f.node; observable = $f.observable; selectedFiller = $f.selectedFiller; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		observable = [observable];
		filler = this;
		filler.object = new ($global.Object)();
		filler.object.type = $externalize("valueSelection", $String);
		filler.object.label = $externalize(node.Label(), $String);
		selectedFiller = newViewModelFiller();
		$r = node.Selected().Specialize(selectedFiller); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		filler.object.selected = selectedFiller.object;
		observable[0] = ko.NewObservableArray(new sliceType([node.Values()]));
		filler.object.values = observable[0].ToJS();
		node.Subscribe((function(observable) { return function(newValues) {
			var $ptr, newValues;
			observable[0].Set(newValues);
		}; })(observable));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: viewModelFiller.ptr.prototype.ValueSelection }; } $f.$ptr = $ptr; $f.filler = filler; $f.node = node; $f.observable = observable; $f.selectedFiller = selectedFiller; $f.$s = $s; $f.$r = $r; return $f;
	};
	viewModelFiller.prototype.ValueSelection = function(node) { return this.$val.ValueSelection(node); };
	viewModelFiller.ptr.prototype.BoolValue = function(node) {
		var $ptr, filler, node, observable;
		filler = this;
		observable = ko.NewObservable(new sliceType([new $Bool(node.Get())]));
		filler.object = observable.ToJS();
		filler.object.type = $externalize("bool", $String);
		filler.object.label = $externalize(node.Label(), $String);
		node.Subscribe((function(newValue) {
			var $ptr, newValue;
			if (!(!!(observable.Get()) === newValue)) {
				observable.Set(new $Bool(newValue));
			}
		}));
		observable.Subscribe((function $b(jsValue) {
			var $ptr, jsValue, newValue, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; jsValue = $f.jsValue; newValue = $f.newValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			newValue = !!(jsValue);
			/* */ if (!(node.Get() === newValue)) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!(node.Get() === newValue)) { */ case 1:
				$r = node.Set(newValue); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 2:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.jsValue = jsValue; $f.newValue = newValue; $f.$s = $s; $f.$r = $r; return $f;
		}));
	};
	viewModelFiller.prototype.BoolValue = function(node) { return this.$val.BoolValue(node); };
	viewModelFiller.ptr.prototype.StringValue = function(node) {
		var $ptr, filler, node, observable;
		filler = this;
		observable = ko.NewObservable(new sliceType([new $String(node.Get())]));
		filler.object = new ($global.Object)();
		filler.object.type = $externalize("string", $String);
		filler.object.label = $externalize(node.Label(), $String);
		filler.object.readonly = $externalize(!node.Editable(), $Bool);
		filler.object.data = observable.ToJS();
		node.Subscribe((function(newValue) {
			var $ptr, newValue;
			if (!($internalize(observable.Get(), $String) === newValue)) {
				observable.Set(new $String(newValue));
			}
		}));
		observable.Subscribe((function $b(jsValue) {
			var $ptr, jsValue, newValue, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; jsValue = $f.jsValue; newValue = $f.newValue; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			newValue = $internalize(jsValue, $String);
			if (jsValue === undefined) {
				newValue = "";
			}
			/* */ if (!(node.Get() === newValue)) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!(node.Get() === newValue)) { */ case 1:
				$r = node.Set(newValue); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 2:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.jsValue = jsValue; $f.newValue = newValue; $f.$s = $s; $f.$r = $r; return $f;
		}));
	};
	viewModelFiller.prototype.StringValue = function(node) { return this.$val.StringValue(node); };
	viewModelFiller.ptr.prototype.Container = function(node) {
		var $ptr, _entry, _i, _keys, _ref, dataObject, filler, name, node, sub, subFiller, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; dataObject = $f.dataObject; filler = $f.filler; name = $f.name; node = $f.node; sub = $f.sub; subFiller = $f.subFiller; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		filler = this;
		filler.object = new ($global.Object)();
		filler.object.type = $externalize("container", $String);
		filler.object.label = $externalize(node.Label(), $String);
		dataObject = new ($global.Object)();
		filler.object.data = dataObject;
		_ref = node.Get();
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			name = _entry.k;
			sub = _entry.v;
			subFiller = newViewModelFiller();
			$r = sub.Specialize(subFiller); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			dataObject[$externalize(name, $String)] = subFiller.object;
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: viewModelFiller.ptr.prototype.Container }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.dataObject = dataObject; $f.filler = filler; $f.name = name; $f.node = node; $f.sub = sub; $f.subFiller = subFiller; $f.$s = $s; $f.$r = $r; return $f;
	};
	viewModelFiller.prototype.Container = function(node) { return this.$val.Container(node); };
	viewModelFiller.ptr.prototype.Table = function(node) {
		var $ptr, filler, node, observable, setEntries, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; filler = $f.filler; node = $f.node; observable = $f.observable; setEntries = $f.setEntries; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		observable = [observable];
		filler = this;
		observable[0] = ko.NewObservableArray(new sliceType([]));
		setEntries = (function(observable) { return function $b(nodeRows) {
			var $ptr, _i, _ref, index, nodeRow, nodeRows, objRows, subFiller, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; index = $f.index; nodeRow = $f.nodeRow; nodeRows = $f.nodeRows; objRows = $f.objRows; subFiller = $f.subFiller; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			objRows = $makeSlice(sliceType$2, nodeRows.$length);
			_ref = nodeRows;
			_i = 0;
			/* while (true) { */ case 1:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
				index = _i;
				nodeRow = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				subFiller = newViewModelFiller();
				$r = nodeRow.Specialize(subFiller); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				((index < 0 || index >= objRows.$length) ? $throwRuntimeError("index out of range") : objRows.$array[objRows.$offset + index] = subFiller.object);
				_i++;
			/* } */ $s = 1; continue; case 2:
			observable[0].Set(objRows);
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.index = index; $f.nodeRow = nodeRow; $f.nodeRows = nodeRows; $f.objRows = objRows; $f.subFiller = subFiller; $f.$s = $s; $f.$r = $r; return $f;
		}; })(observable);
		filler.object = observable[0].ToJS();
		filler.object.type = $externalize("table", $String);
		filler.object.label = $externalize(node.Label(), $String);
		$r = setEntries(node.Get()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		node.Subscribe(setEntries);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: viewModelFiller.ptr.prototype.Table }; } $f.$ptr = $ptr; $f.filler = filler; $f.node = node; $f.observable = observable; $f.setEntries = setEntries; $f.$s = $s; $f.$r = $r; return $f;
	};
	viewModelFiller.prototype.Table = function(node) { return this.$val.Table(node); };
	viewModelFiller.ptr.prototype.Action = function(node) {
		var $ptr, filler, node;
		filler = this;
		filler.object = new ($global.Object)();
		filler.object.type = $externalize("action", $String);
		filler.object.label = $externalize(node.Label(), $String);
		filler.object.act = $externalize($methodVal(node, "Act"), funcType$1);
	};
	viewModelFiller.prototype.Action = function(node) { return this.$val.Action(node); };
	NewWebGl = function(gl) {
		var $ptr, gl, result;
		result = new WebGl.ptr(gl, NewObjectMapper(), NewObjectMapper(), NewObjectMapper(), NewObjectMapper(), NewObjectMapper(), {});
		return result;
	};
	$pkg.NewWebGl = NewWebGl;
	WebGl.ptr.prototype.ActiveTexture = function(texture) {
		var $ptr, texture, web;
		web = this;
		web.gl.ActiveTexture((texture >> 0));
	};
	WebGl.prototype.ActiveTexture = function(texture) { return this.$val.ActiveTexture(texture); };
	WebGl.ptr.prototype.AttachShader = function(program, shader) {
		var $ptr, _r, _r$1, objProgram, objShader, program, shader, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; objProgram = $f.objProgram; objShader = $f.objShader; program = $f.program; shader = $f.shader; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.shaders.get(shader); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		objShader = _r;
		_r$1 = web.programs.get(program); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		objProgram = _r$1;
		web.gl.AttachShader(objProgram, objShader);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.AttachShader }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.objProgram = objProgram; $f.objShader = objShader; $f.program = program; $f.shader = shader; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.AttachShader = function(program, shader) { return this.$val.AttachShader(program, shader); };
	WebGl.ptr.prototype.BindAttribLocation = function(program, index, name) {
		var $ptr, _r, index, name, program, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; name = $f.name; program = $f.program; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.programs.get(program); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = web.gl.BindAttribLocation(_r, (index >> 0), name); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.BindAttribLocation }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.name = name; $f.program = program; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.BindAttribLocation = function(program, index, name) { return this.$val.BindAttribLocation(program, index, name); };
	WebGl.ptr.prototype.BindBuffer = function(target, buffer) {
		var $ptr, _arg, _arg$1, _r, buffer, target, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; buffer = $f.buffer; target = $f.target; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_arg = (target >> 0);
		_r = web.buffers.get(buffer); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		$r = web.gl.BindBuffer(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.BindBuffer }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.buffer = buffer; $f.target = target; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.BindBuffer = function(target, buffer) { return this.$val.BindBuffer(target, buffer); };
	WebGl.ptr.prototype.BindTexture = function(target, texture) {
		var $ptr, _arg, _arg$1, _r, target, texture, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; target = $f.target; texture = $f.texture; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_arg = (target >> 0);
		_r = web.textures.get(texture); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		$r = web.gl.BindTexture(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.BindTexture }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.target = target; $f.texture = texture; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.BindTexture = function(target, texture) { return this.$val.BindTexture(target, texture); };
	WebGl.ptr.prototype.BindVertexArray = function(array) {
		var $ptr, array, web;
		web = this;
	};
	WebGl.prototype.BindVertexArray = function(array) { return this.$val.BindVertexArray(array); };
	WebGl.ptr.prototype.BlendFunc = function(sfactor, dfactor) {
		var $ptr, dfactor, sfactor, web;
		web = this;
		web.gl.BlendFunc((sfactor >> 0), (dfactor >> 0));
	};
	WebGl.prototype.BlendFunc = function(sfactor, dfactor) { return this.$val.BlendFunc(sfactor, dfactor); };
	WebGl.ptr.prototype.BufferData = function(target, size, data, usage) {
		var $ptr, data, size, target, usage, web;
		web = this;
		web.gl.BufferData((target >> 0), data, (usage >> 0));
	};
	WebGl.prototype.BufferData = function(target, size, data, usage) { return this.$val.BufferData(target, size, data, usage); };
	WebGl.ptr.prototype.Clear = function(mask) {
		var $ptr, mask, web;
		web = this;
		web.gl.Clear((mask >> 0));
	};
	WebGl.prototype.Clear = function(mask) { return this.$val.Clear(mask); };
	WebGl.ptr.prototype.ClearColor = function(red, green, blue, alpha) {
		var $ptr, alpha, blue, green, red, web;
		web = this;
		web.gl.ClearColor(red, green, blue, alpha);
	};
	WebGl.prototype.ClearColor = function(red, green, blue, alpha) { return this.$val.ClearColor(red, green, blue, alpha); };
	WebGl.ptr.prototype.CompileShader = function(shader) {
		var $ptr, _r, shader, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; shader = $f.shader; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.shaders.get(shader); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = web.gl.CompileShader(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.CompileShader }; } $f.$ptr = $ptr; $f._r = _r; $f.shader = shader; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.CompileShader = function(shader) { return this.$val.CompileShader(shader); };
	WebGl.ptr.prototype.CreateProgram = function() {
		var $ptr, _key, _r, key, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; key = $f.key; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.programs.put(web.gl.CreateProgram()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		_key = key; (web.uniformsByProgram || $throwRuntimeError("assignment to entry in nil map"))[$Uint32.keyFor(_key)] = { k: _key, v: $makeSlice(sliceType$3, 0) };
		return key;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.CreateProgram }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f.key = key; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.CreateProgram = function() { return this.$val.CreateProgram(); };
	WebGl.ptr.prototype.CreateShader = function(shaderType) {
		var $ptr, _r, shaderType, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; shaderType = $f.shaderType; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.shaders.put(web.gl.CreateShader((shaderType >> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.CreateShader }; } $f.$ptr = $ptr; $f._r = _r; $f.shaderType = shaderType; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.CreateShader = function(shaderType) { return this.$val.CreateShader(shaderType); };
	WebGl.ptr.prototype.DeleteBuffers = function(buffers) {
		var $ptr, _i, _r, _ref, buffer, buffers, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; buffer = $f.buffer; buffers = $f.buffers; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_ref = buffers;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			buffer = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = web.buffers.del(buffer); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = web.gl.DeleteBuffer(_r); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.DeleteBuffers }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.buffer = buffer; $f.buffers = buffers; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.DeleteBuffers = function(buffers) { return this.$val.DeleteBuffers(buffers); };
	WebGl.ptr.prototype.DeleteProgram = function(program) {
		var $ptr, _entry, _i, _r, _r$1, _ref, program, value, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; program = $f.program; value = $f.value; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.programs.del(program); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = web.gl.DeleteProgram(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = (_entry = web.uniformsByProgram[$Uint32.keyFor(program)], _entry !== undefined ? _entry.v : sliceType$3.nil);
		_i = 0;
		/* while (true) { */ case 3:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
			value = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$1 = web.uniforms.del(value); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_i++;
		/* } */ $s = 3; continue; case 4:
		delete web.uniformsByProgram[$Uint32.keyFor(program)];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.DeleteProgram }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.program = program; $f.value = value; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.DeleteProgram = function(program) { return this.$val.DeleteProgram(program); };
	WebGl.ptr.prototype.DeleteShader = function(shader) {
		var $ptr, _r, shader, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; shader = $f.shader; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.shaders.del(shader); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = web.gl.DeleteShader(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.DeleteShader }; } $f.$ptr = $ptr; $f._r = _r; $f.shader = shader; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.DeleteShader = function(shader) { return this.$val.DeleteShader(shader); };
	WebGl.ptr.prototype.DeleteTextures = function(textures) {
		var $ptr, _i, _r, _ref, texture, textures, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; texture = $f.texture; textures = $f.textures; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_ref = textures;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			texture = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = web.textures.del(texture); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = web.gl.DeleteTexture(_r); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.DeleteTextures }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.texture = texture; $f.textures = textures; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.DeleteTextures = function(textures) { return this.$val.DeleteTextures(textures); };
	WebGl.ptr.prototype.DeleteVertexArrays = function(arrays) {
		var $ptr, arrays, web;
		web = this;
	};
	WebGl.prototype.DeleteVertexArrays = function(arrays) { return this.$val.DeleteVertexArrays(arrays); };
	WebGl.ptr.prototype.DrawArrays = function(mode, first, count) {
		var $ptr, count, first, mode, web;
		web = this;
		web.gl.DrawArrays((mode >> 0), (first >> 0), (count >> 0));
	};
	WebGl.prototype.DrawArrays = function(mode, first, count) { return this.$val.DrawArrays(mode, first, count); };
	WebGl.ptr.prototype.Enable = function(cap) {
		var $ptr, cap, web;
		web = this;
		web.gl.Enable((cap >> 0));
	};
	WebGl.prototype.Enable = function(cap) { return this.$val.Enable(cap); };
	WebGl.ptr.prototype.EnableVertexAttribArray = function(index) {
		var $ptr, index, web;
		web = this;
		web.gl.EnableVertexAttribArray((index >> 0));
	};
	WebGl.prototype.EnableVertexAttribArray = function(index) { return this.$val.EnableVertexAttribArray(index); };
	WebGl.ptr.prototype.GenerateMipmap = function(target) {
		var $ptr, target, web;
		web = this;
		web.gl.GenerateMipmap((target >> 0));
	};
	WebGl.prototype.GenerateMipmap = function(target) { return this.$val.GenerateMipmap(target); };
	WebGl.ptr.prototype.GenBuffers = function(n) {
		var $ptr, _r, i, ids, n, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; ids = $f.ids; n = $f.n; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		ids = $makeSlice(sliceType$3, n);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_r = web.buffers.put(web.gl.CreateBuffer()); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			((i < 0 || i >= ids.$length) ? $throwRuntimeError("index out of range") : ids.$array[ids.$offset + i] = _r);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return ids;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.GenBuffers }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.ids = ids; $f.n = n; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.GenBuffers = function(n) { return this.$val.GenBuffers(n); };
	WebGl.ptr.prototype.GenTextures = function(n) {
		var $ptr, _r, i, ids, n, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; ids = $f.ids; n = $f.n; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		ids = $makeSlice(sliceType$3, n);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_r = web.textures.put(web.gl.CreateTexture()); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			((i < 0 || i >= ids.$length) ? $throwRuntimeError("index out of range") : ids.$array[ids.$offset + i] = _r);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return ids;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.GenTextures }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.ids = ids; $f.n = n; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.GenTextures = function(n) { return this.$val.GenTextures(n); };
	WebGl.ptr.prototype.GenVertexArrays = function(n) {
		var $ptr, i, ids, n, web;
		web = this;
		ids = new sliceType$3([]);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			ids = $append(ids, ((i + 1 >> 0) >>> 0));
			i = i + (1) >> 0;
		}
		return ids;
	};
	WebGl.prototype.GenVertexArrays = function(n) { return this.$val.GenVertexArrays(n); };
	WebGl.ptr.prototype.GetAttribLocation = function(program, name) {
		var $ptr, _r, _r$1, name, program, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; name = $f.name; program = $f.program; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.programs.get(program); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = web.gl.GetAttribLocation(_r, name); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return (_r$1 >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.GetAttribLocation }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.name = name; $f.program = program; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.GetAttribLocation = function(program, name) { return this.$val.GetAttribLocation(program, name); };
	WebGl.ptr.prototype.GetError = function() {
		var $ptr, web;
		web = this;
		return (web.gl.GetError() >>> 0);
	};
	WebGl.prototype.GetError = function() { return this.$val.GetError(); };
	WebGl.ptr.prototype.GetShaderInfoLog = function(shader) {
		var $ptr, _r, _r$1, shader, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; shader = $f.shader; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.shaders.get(shader); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = web.gl.GetShaderInfoLog(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.GetShaderInfoLog }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.shader = shader; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.GetShaderInfoLog = function(shader) { return this.$val.GetShaderInfoLog(shader); };
	paramToInt = function(value) {
		var $ptr, result, value;
		result = (($parseInt(value) >> 0) >> 0);
		if ($internalize(value, $String) === "true") {
			result = 1;
		}
		return result;
	};
	WebGl.ptr.prototype.GetShaderParameter = function(shader, param) {
		var $ptr, _r, _r$1, param, shader, value, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; param = $f.param; shader = $f.shader; value = $f.value; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.shaders.get(shader); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = web.gl.GetShaderParameter(_r, (param >> 0)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		value = _r$1;
		return paramToInt(value);
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.GetShaderParameter }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.param = param; $f.shader = shader; $f.value = value; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.GetShaderParameter = function(shader, param) { return this.$val.GetShaderParameter(shader, param); };
	WebGl.ptr.prototype.GetProgramInfoLog = function(program) {
		var $ptr, _r, _r$1, program, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; program = $f.program; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.programs.get(program); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = web.gl.GetProgramInfoLog(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.GetProgramInfoLog }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.program = program; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.GetProgramInfoLog = function(program) { return this.$val.GetProgramInfoLog(program); };
	WebGl.ptr.prototype.GetProgramParameter = function(program, param) {
		var $ptr, _r, param, program, value, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; param = $f.param; program = $f.program; value = $f.value; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.programs.get(program); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		value = web.gl.Object.getProgramParameter(_r, (param >> 0));
		return paramToInt(value);
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.GetProgramParameter }; } $f.$ptr = $ptr; $f._r = _r; $f.param = param; $f.program = program; $f.value = value; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.GetProgramParameter = function(program, param) { return this.$val.GetProgramParameter(program, param); };
	WebGl.ptr.prototype.GetUniformLocation = function(program, name) {
		var $ptr, _entry, _key, _r, _r$1, _r$2, key, name, program, uniform, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; key = $f.key; name = $f.name; program = $f.program; uniform = $f.uniform; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.programs.get(program); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = web.gl.GetUniformLocation(_r, name); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		uniform = _r$1;
		_r$2 = web.uniforms.put(uniform); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		key = _r$2;
		_key = program; (web.uniformsByProgram || $throwRuntimeError("assignment to entry in nil map"))[$Uint32.keyFor(_key)] = { k: _key, v: $append((_entry = web.uniformsByProgram[$Uint32.keyFor(program)], _entry !== undefined ? _entry.v : sliceType$3.nil), key) };
		return (key >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.GetUniformLocation }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.key = key; $f.name = name; $f.program = program; $f.uniform = uniform; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.GetUniformLocation = function(program, name) { return this.$val.GetUniformLocation(program, name); };
	WebGl.ptr.prototype.LinkProgram = function(program) {
		var $ptr, _r, program, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; program = $f.program; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.programs.get(program); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = web.gl.LinkProgram(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.LinkProgram }; } $f.$ptr = $ptr; $f._r = _r; $f.program = program; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.LinkProgram = function(program) { return this.$val.LinkProgram(program); };
	WebGl.ptr.prototype.ReadPixels = function(x, y, width, height, format, pixelType, pixels) {
		var $ptr, format, height, pixelType, pixels, web, width, x, y;
		web = this;
	};
	WebGl.prototype.ReadPixels = function(x, y, width, height, format, pixelType, pixels) { return this.$val.ReadPixels(x, y, width, height, format, pixelType, pixels); };
	WebGl.ptr.prototype.ShaderSource = function(shader, source) {
		var $ptr, _r, shader, source, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; shader = $f.shader; source = $f.source; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.shaders.get(shader); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = web.gl.ShaderSource(_r, source); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.ShaderSource }; } $f.$ptr = $ptr; $f._r = _r; $f.shader = shader; $f.source = source; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.ShaderSource = function(shader, source) { return this.$val.ShaderSource(shader, source); };
	WebGl.ptr.prototype.TexImage2D = function(target, level, internalFormat, width, height, border, format, xtype, pixels) {
		var $ptr, border, format, height, internalFormat, level, pixels, target, web, width, xtype;
		web = this;
		web.gl.Object.texImage2D((target >> 0), (level >> 0), (internalFormat >> 0), (width >> 0), (height >> 0), (border >> 0), (format >> 0), (xtype >> 0), $externalize(pixels, $emptyInterface));
	};
	WebGl.prototype.TexImage2D = function(target, level, internalFormat, width, height, border, format, xtype, pixels) { return this.$val.TexImage2D(target, level, internalFormat, width, height, border, format, xtype, pixels); };
	WebGl.ptr.prototype.TexParameteri = function(target, pname, param) {
		var $ptr, param, pname, target, web;
		web = this;
		web.gl.TexParameteri((target >> 0), (pname >> 0), (param >> 0));
	};
	WebGl.prototype.TexParameteri = function(target, pname, param) { return this.$val.TexParameteri(target, pname, param); };
	WebGl.ptr.prototype.Uniform1i = function(location, value) {
		var $ptr, _r, location, value, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; location = $f.location; value = $f.value; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.uniforms.get((location >>> 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = web.gl.Uniform1i(_r, (value >> 0)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.Uniform1i }; } $f.$ptr = $ptr; $f._r = _r; $f.location = location; $f.value = value; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.Uniform1i = function(location, value) { return this.$val.Uniform1i(location, value); };
	WebGl.ptr.prototype.UniformMatrix4fv = function(location, transpose, value) {
		var $ptr, _r, location, transpose, value, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; location = $f.location; transpose = $f.transpose; value = $f.value; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.uniforms.get((location >>> 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = web.gl.UniformMatrix4fv(_r, transpose, new sliceType$4((value))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.UniformMatrix4fv }; } $f.$ptr = $ptr; $f._r = _r; $f.location = location; $f.transpose = transpose; $f.value = value; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.UniformMatrix4fv = function(location, transpose, value) { return this.$val.UniformMatrix4fv(location, transpose, value); };
	WebGl.ptr.prototype.UseProgram = function(program) {
		var $ptr, _r, program, web, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; program = $f.program; web = $f.web; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		web = this;
		_r = web.programs.get(program); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = web.gl.UseProgram(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGl.ptr.prototype.UseProgram }; } $f.$ptr = $ptr; $f._r = _r; $f.program = program; $f.web = web; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGl.prototype.UseProgram = function(program) { return this.$val.UseProgram(program); };
	WebGl.ptr.prototype.VertexAttribOffset = function(index, size, attribType, normalized, stride, offset) {
		var $ptr, attribType, index, normalized, offset, size, stride, web;
		web = this;
		web.gl.VertexAttribPointer((index >> 0), (size >> 0), (attribType >> 0), normalized, (stride >> 0), offset);
	};
	WebGl.prototype.VertexAttribOffset = function(index, size, attribType, normalized, stride, offset) { return this.$val.VertexAttribOffset(index, size, attribType, normalized, stride, offset); };
	WebGl.ptr.prototype.Viewport = function(x, y, width, height) {
		var $ptr, height, web, width, x, y;
		web = this;
		web.gl.Viewport((x >> 0), (y >> 0), (width >> 0), (height >> 0));
	};
	WebGl.prototype.Viewport = function(x, y, width, height) { return this.$val.Viewport(x, y, width, height); };
	NewWebGlWindow = function(canvas) {
		var $ptr, _tuple, attrs, canvas, err, glContext, window, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; attrs = $f.attrs; canvas = $f.canvas; err = $f.err; glContext = $f.glContext; window = $f.window; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		window = ptrType$3.nil;
		err = $ifaceNil;
		attrs = webgl.DefaultAttributes();
		attrs.Alpha = false;
		_tuple = webgl.NewContext(canvas, attrs);
		glContext = _tuple[0];
		err = _tuple[1];
		/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 1:
			window = new WebGlWindow.ptr($clone(env.InitAbstractOpenGlWindow(), env.AbstractOpenGlWindow), canvas, NewWebGl(glContext));
			window.registerMouseListener();
			$r = window.startRenderLoop(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		return [window, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewWebGlWindow }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.attrs = attrs; $f.canvas = canvas; $f.err = err; $f.glContext = glContext; $f.window = window; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewWebGlWindow = NewWebGlWindow;
	WebGlWindow.ptr.prototype.registerMouseListener = function() {
		var $ptr, browserWindow, getEventModifier, getEventPosition, notifiedMouseButtons, window;
		window = this;
		browserWindow = $global.window;
		notifiedMouseButtons = 0;
		getEventPosition = (function(event) {
			var $ptr, clientX, clientY, event, inRect, rect, x, y;
			rect = window.canvas.getBoundingClientRect();
			clientX = $parseFloat(event.clientX);
			clientY = $parseFloat(event.clientY);
			x = clientX - $parseFloat(rect.left);
			y = clientY - $parseFloat(rect.top);
			inRect = false;
			if ((x >= 0) && (clientX <= $parseFloat(rect.right)) && (y >= 0) && (clientY <= $parseFloat(rect.bottom))) {
				inRect = true;
			}
			return [x, y, inRect];
		});
		getEventModifier = (function(event) {
			var $ptr, event, modifier;
			modifier = 0;
			if (!!(event.ctrlKey)) {
				modifier = (modifier | (1)) >>> 0;
			}
			if (!!(event.shiftKey)) {
				modifier = (modifier | (2)) >>> 0;
			}
			return modifier;
		});
		window.canvas.addEventListener($externalize("contextmenu", $String), $externalize((function(event) {
			var $ptr, event;
			event.preventDefault();
			return false;
		}), funcType$2));
		browserWindow.addEventListener($externalize("mousemove", $String), $externalize((function $b(event) {
			var $ptr, _r, _tuple, event, inRect, x, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; event = $f.event; inRect = $f.inRect; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = getEventPosition(event); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			x = _tuple[0];
			y = _tuple[1];
			inRect = _tuple[2];
			/* */ if (inRect || (!((notifiedMouseButtons === 0)))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (inRect || (!((notifiedMouseButtons === 0)))) { */ case 2:
				$r = window.AbstractOpenGlWindow.CallOnMouseMove($fround(x), $fround(y)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 3:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.event = event; $f.inRect = inRect; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType$3));
		browserWindow.addEventListener($externalize("mousedown", $String), $externalize((function $b(event) {
			var $ptr, _entry, _r, _r$1, _tuple, _tuple$1, button, event, inRect, knownButton, modifierMask, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; button = $f.button; event = $f.event; inRect = $f.inRect; knownButton = $f.knownButton; modifierMask = $f.modifierMask; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_tuple = (_entry = buttonsByIndex[$Int.keyFor($parseInt(event.button) >> 0)], _entry !== undefined ? [_entry.v, true] : [0, false]);
			button = _tuple[0];
			knownButton = _tuple[1];
			/* */ if (knownButton) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (knownButton) { */ case 1:
				_r = getEventPosition(event); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				inRect = _tuple$1[2];
				/* */ if ((inRect || (!((notifiedMouseButtons === 0)))) && (!(((((notifiedMouseButtons & button) >>> 0)) === button)))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((inRect || (!((notifiedMouseButtons === 0)))) && (!(((((notifiedMouseButtons & button) >>> 0)) === button)))) { */ case 4:
					notifiedMouseButtons = (notifiedMouseButtons | (button)) >>> 0;
					_r$1 = getEventModifier(event); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					modifierMask = _r$1;
					$r = window.AbstractOpenGlWindow.CallOnMouseButtonDown(button, modifierMask); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 5:
			/* } */ case 2:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.button = button; $f.event = event; $f.inRect = inRect; $f.knownButton = knownButton; $f.modifierMask = modifierMask; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType$3));
		browserWindow.addEventListener($externalize("mouseup", $String), $externalize((function $b(event) {
			var $ptr, _entry, _r, _tuple, button, event, knownButton, modifierMask, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _tuple = $f._tuple; button = $f.button; event = $f.event; knownButton = $f.knownButton; modifierMask = $f.modifierMask; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_tuple = (_entry = buttonsByIndex[$Int.keyFor($parseInt(event.button) >> 0)], _entry !== undefined ? [_entry.v, true] : [0, false]);
			button = _tuple[0];
			knownButton = _tuple[1];
			/* */ if (knownButton) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (knownButton) { */ case 1:
				/* */ if ((((notifiedMouseButtons & button) >>> 0)) === button) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if ((((notifiedMouseButtons & button) >>> 0)) === button) { */ case 3:
					notifiedMouseButtons = (notifiedMouseButtons & ((~button >>> 0))) >>> 0;
					_r = getEventModifier(event); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					modifierMask = _r;
					$r = window.AbstractOpenGlWindow.CallOnMouseButtonUp(button, modifierMask); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 4:
			/* } */ case 2:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._tuple = _tuple; $f.button = button; $f.event = event; $f.knownButton = knownButton; $f.modifierMask = modifierMask; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType$3));
		window.canvas.addEventListener($externalize("wheel", $String), $externalize((function $b(event) {
			var $ptr, _r, _tuple, dx, dy, event, inRect, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; dx = $f.dx; dy = $f.dy; event = $f.event; inRect = $f.inRect; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = getEventPosition(event); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			inRect = _tuple[2];
			/* */ if (inRect || (!((notifiedMouseButtons === 0)))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (inRect || (!((notifiedMouseButtons === 0)))) { */ case 2:
				dx = $parseFloat(event.deltaX);
				dy = $parseFloat(event.deltaY);
				event.preventDefault();
				$r = window.AbstractOpenGlWindow.CallOnMouseScroll($fround(dx), $fround(dy)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 3:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.dx = dx; $f.dy = dy; $f.event = event; $f.inRect = inRect; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType$3));
	};
	WebGlWindow.prototype.registerMouseListener = function() { return this.$val.registerMouseListener(); };
	WebGlWindow.ptr.prototype.startRenderLoop = function() {
		var $ptr, browserWindow, indirecter, window, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; browserWindow = $f.browserWindow; indirecter = $f.indirecter; window = $f.window; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		browserWindow = [browserWindow];
		indirecter = [indirecter];
		window = [window];
		window[0] = this;
		indirecter[0] = new indirecterType.ptr($throwNilPointerError);
		browserWindow[0] = $global.window;
		indirecter[0].render = (function(browserWindow, indirecter, window) { return function $b() {
			var $ptr, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			browserWindow[0].requestAnimationFrame($externalize(indirecter[0].render, funcType$1));
			$r = window[0].AbstractOpenGlWindow.CallRender(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
		}; })(browserWindow, indirecter, window);
		$r = indirecter[0].render(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: WebGlWindow.ptr.prototype.startRenderLoop }; } $f.$ptr = $ptr; $f.browserWindow = browserWindow; $f.indirecter = indirecter; $f.window = window; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGlWindow.prototype.startRenderLoop = function() { return this.$val.startRenderLoop(); };
	WebGlWindow.ptr.prototype.OpenGl = function() {
		var $ptr, window;
		window = this;
		return window.glWrapper;
	};
	WebGlWindow.prototype.OpenGl = function() { return this.$val.OpenGl(); };
	WebGlWindow.ptr.prototype.Size = function() {
		var $ptr, _r, _r$1, canvasHeight, canvasWidth, height, width, window, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; canvasHeight = $f.canvasHeight; canvasWidth = $f.canvasWidth; height = $f.height; width = $f.width; window = $f.window; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		width = 0;
		height = 0;
		window = this;
		canvasWidth = $parseInt(window.canvas.width) >> 0;
		canvasHeight = $parseInt(window.canvas.height) >> 0;
		width = $parseInt(window.canvas.clientWidth) >> 0;
		height = $parseInt(window.canvas.clientHeight) >> 0;
		/* */ if (!((canvasWidth === width))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((canvasWidth === width))) { */ case 1:
			_r = fmt.Printf("Setting canvas width %d to reported width %d\n", new sliceType([new $Int(canvasWidth), new $Int(width)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			window.canvas.width = width;
		/* } */ case 2:
		/* */ if (!((canvasHeight === height))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((canvasHeight === height))) { */ case 4:
			_r$1 = fmt.Printf("Setting canvas height %d to reported height %d\n", new sliceType([new $Int(canvasHeight), new $Int(height)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			window.canvas.height = height;
		/* } */ case 5:
		return [width, height];
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebGlWindow.ptr.prototype.Size }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.canvasHeight = canvasHeight; $f.canvasWidth = canvasWidth; $f.height = height; $f.width = width; $f.window = window; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebGlWindow.prototype.Size = function() { return this.$val.Size(); };
	ptrType$5.methods = [{prop: "put", name: "put", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: $funcType([ptrType$1], [$Uint32], false)}, {prop: "get", name: "get", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: $funcType([$Uint32], [ptrType$1], false)}, {prop: "del", name: "del", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: $funcType([$Uint32], [ptrType$1], false)}];
	ptrType$6.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String, funcType$4, funcType$1], [], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$String, sliceType$5, funcType$4, funcType$1], [], false)}, {prop: "Post", name: "Post", pkg: "", typ: $funcType([$String, sliceType$5, funcType$4, funcType$1], [], false)}];
	ptrType$15.methods = [{prop: "Section", name: "Section", pkg: "", typ: $funcType([ptrType$7], [], false)}, {prop: "SectionSelection", name: "SectionSelection", pkg: "", typ: $funcType([ptrType$8], [], false)}, {prop: "ValueSelection", name: "ValueSelection", pkg: "", typ: $funcType([ptrType$9], [], false)}, {prop: "BoolValue", name: "BoolValue", pkg: "", typ: $funcType([ptrType$10], [], false)}, {prop: "StringValue", name: "StringValue", pkg: "", typ: $funcType([ptrType$11], [], false)}, {prop: "Container", name: "Container", pkg: "", typ: $funcType([ptrType$12], [], false)}, {prop: "Table", name: "Table", pkg: "", typ: $funcType([ptrType$13], [], false)}, {prop: "Action", name: "Action", pkg: "", typ: $funcType([ptrType$14], [], false)}];
	ptrType$4.methods = [{prop: "ActiveTexture", name: "ActiveTexture", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "AttachShader", name: "AttachShader", pkg: "", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "BindAttribLocation", name: "BindAttribLocation", pkg: "", typ: $funcType([$Uint32, $Uint32, $String], [], false)}, {prop: "BindBuffer", name: "BindBuffer", pkg: "", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "BindTexture", name: "BindTexture", pkg: "", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "BindVertexArray", name: "BindVertexArray", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "BlendFunc", name: "BlendFunc", pkg: "", typ: $funcType([$Uint32, $Uint32], [], false)}, {prop: "BufferData", name: "BufferData", pkg: "", typ: $funcType([$Uint32, $Int, $emptyInterface, $Uint32], [], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ClearColor", name: "ClearColor", pkg: "", typ: $funcType([$Float32, $Float32, $Float32, $Float32], [], false)}, {prop: "CompileShader", name: "CompileShader", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "CreateProgram", name: "CreateProgram", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "CreateShader", name: "CreateShader", pkg: "", typ: $funcType([$Uint32], [$Uint32], false)}, {prop: "DeleteBuffers", name: "DeleteBuffers", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "DeleteProgram", name: "DeleteProgram", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "DeleteShader", name: "DeleteShader", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "DeleteTextures", name: "DeleteTextures", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "DeleteVertexArrays", name: "DeleteVertexArrays", pkg: "", typ: $funcType([sliceType$3], [], false)}, {prop: "DrawArrays", name: "DrawArrays", pkg: "", typ: $funcType([$Uint32, $Int32, $Int32], [], false)}, {prop: "Enable", name: "Enable", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "EnableVertexAttribArray", name: "EnableVertexAttribArray", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "GenerateMipmap", name: "GenerateMipmap", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "GenBuffers", name: "GenBuffers", pkg: "", typ: $funcType([$Int32], [sliceType$3], false)}, {prop: "GenTextures", name: "GenTextures", pkg: "", typ: $funcType([$Int32], [sliceType$3], false)}, {prop: "GenVertexArrays", name: "GenVertexArrays", pkg: "", typ: $funcType([$Int32], [sliceType$3], false)}, {prop: "GetAttribLocation", name: "GetAttribLocation", pkg: "", typ: $funcType([$Uint32, $String], [$Int32], false)}, {prop: "GetError", name: "GetError", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "GetShaderInfoLog", name: "GetShaderInfoLog", pkg: "", typ: $funcType([$Uint32], [$String], false)}, {prop: "GetShaderParameter", name: "GetShaderParameter", pkg: "", typ: $funcType([$Uint32, $Uint32], [$Int32], false)}, {prop: "GetProgramInfoLog", name: "GetProgramInfoLog", pkg: "", typ: $funcType([$Uint32], [$String], false)}, {prop: "GetProgramParameter", name: "GetProgramParameter", pkg: "", typ: $funcType([$Uint32, $Uint32], [$Int32], false)}, {prop: "GetUniformLocation", name: "GetUniformLocation", pkg: "", typ: $funcType([$Uint32, $String], [$Int32], false)}, {prop: "LinkProgram", name: "LinkProgram", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "ReadPixels", name: "ReadPixels", pkg: "", typ: $funcType([$Int32, $Int32, $Int32, $Int32, $Uint32, $Uint32, $emptyInterface], [], false)}, {prop: "ShaderSource", name: "ShaderSource", pkg: "", typ: $funcType([$Uint32, $String], [], false)}, {prop: "TexImage2D", name: "TexImage2D", pkg: "", typ: $funcType([$Uint32, $Int32, $Uint32, $Int32, $Int32, $Int32, $Uint32, $Uint32, $emptyInterface], [], false)}, {prop: "TexParameteri", name: "TexParameteri", pkg: "", typ: $funcType([$Uint32, $Uint32, $Int32], [], false)}, {prop: "Uniform1i", name: "Uniform1i", pkg: "", typ: $funcType([$Int32, $Int32], [], false)}, {prop: "UniformMatrix4fv", name: "UniformMatrix4fv", pkg: "", typ: $funcType([$Int32, $Bool, ptrType$16], [], false)}, {prop: "UseProgram", name: "UseProgram", pkg: "", typ: $funcType([$Uint32], [], false)}, {prop: "VertexAttribOffset", name: "VertexAttribOffset", pkg: "", typ: $funcType([$Uint32, $Int32, $Uint32, $Bool, $Int32, $Int], [], false)}, {prop: "Viewport", name: "Viewport", pkg: "", typ: $funcType([$Int32, $Int32, $Int32, $Int32], [], false)}];
	ptrType$3.methods = [{prop: "registerMouseListener", name: "registerMouseListener", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: $funcType([], [], false)}, {prop: "startRenderLoop", name: "startRenderLoop", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: $funcType([], [], false)}, {prop: "OpenGl", name: "OpenGl", pkg: "", typ: $funcType([], [opengl.OpenGl], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int, $Int], false)}];
	ObjectMapper.init([{prop: "del", name: "del", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: $funcType([$Uint32], [ptrType$1], false)}, {prop: "get", name: "get", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: $funcType([$Uint32], [ptrType$1], false)}, {prop: "put", name: "put", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: $funcType([ptrType$1], [$Uint32], false)}]);
	objectMap.init([{prop: "objects", name: "objects", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: mapType, tag: ""}, {prop: "counter", name: "counter", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: $Uint32, tag: ""}]);
	RestTransport.init([]);
	viewModelFiller.init([{prop: "object", name: "object", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: ptrType$1, tag: ""}]);
	WebGl.init([{prop: "gl", name: "gl", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: ptrType$2, tag: ""}, {prop: "buffers", name: "buffers", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: ObjectMapper, tag: ""}, {prop: "programs", name: "programs", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: ObjectMapper, tag: ""}, {prop: "shaders", name: "shaders", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: ObjectMapper, tag: ""}, {prop: "textures", name: "textures", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: ObjectMapper, tag: ""}, {prop: "uniforms", name: "uniforms", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: ObjectMapper, tag: ""}, {prop: "uniformsByProgram", name: "uniformsByProgram", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: mapType$1, tag: ""}]);
	WebGlWindow.init([{prop: "AbstractOpenGlWindow", name: "", pkg: "", typ: env.AbstractOpenGlWindow, tag: ""}, {prop: "canvas", name: "canvas", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: ptrType$1, tag: ""}, {prop: "glWrapper", name: "glWrapper", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: ptrType$4, tag: ""}]);
	indirecterType.init([{prop: "render", name: "render", pkg: "github.com/inkyblackness/shocked-client/env/browser", typ: funcType$1, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = JSON.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ko.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = jquery.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = webgl.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = env.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = opengl.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = viewmodel.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buttonsByIndex = $makeMap($Int.keyFor, [{ k: 0, v: 1 }, { k: 2, v: 2 }]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["main"] = (function() {
	var $pkg = {}, $init, editor, browser, main;
	editor = $packages["github.com/inkyblackness/shocked-client/editor"];
	browser = $packages["github.com/inkyblackness/shocked-client/env/browser"];
	main = function() {
		var $ptr, _r, app, store, transport, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; app = $f.app; store = $f.store; transport = $f.transport; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		transport = browser.NewRestTransport();
		store = editor.NewRestDataStore(transport);
		_r = editor.NewMainApplication(store); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		app = _r;
		$r = browser.Run(app); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: main }; } $f.$ptr = $ptr; $f._r = _r; $f.app = app; $f.store = store; $f.transport = transport; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = editor.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = browser.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if ($pkg === $mainPkg) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($pkg === $mainPkg) { */ case 3:
			$r = main(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$mainFinished = true;
		/* } */ case 4:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
var $mainPkg = $packages["main"];
$packages["runtime"].$init();
$go($mainPkg.$init, [], true);
$flushConsole();

}).call(this);
//# sourceMappingURL=main.js.map
