package data

import (
	"fmt"
)

// Table is a general container to keep a number of arbitrary entries.
type Table struct {
	Entries []interface{}
}

// NewTable creates a new Table instance and initializes its entries to contain elements generated by provided
// factory function.
func NewTable(entryCount int, factory func() interface{}) *Table {
	table := &Table{
		Entries: make([]interface{}, entryCount)}

	for i := range table.Entries {
		table.Entries[i] = factory()
	}

	return table
}

func (table *Table) String() (result string) {
	for i, entry := range table.Entries {
		result += fmt.Sprintf("Index %d:\n", i)
		result += fmt.Sprintf("%v\n", entry)
	}

	return
}

// Size returns the amount of entries in the table.
func (table *Table) Size() int {
	return len(table.Entries)
}

// Entry returns the entry identified by given index.
func (table *Table) Entry(index int) interface{} {
	return table.Entries[index]
}
